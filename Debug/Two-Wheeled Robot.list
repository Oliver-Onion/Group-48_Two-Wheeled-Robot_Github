
Two-Wheeled Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d40  0800d270  0800d270  0000e270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfb0  0800dfb0  0000f228  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfb0  0800dfb0  0000efb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfb8  0800dfb8  0000f228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dfb8  0800dfb8  0000efb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dfbc  0800dfbc  0000efbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  0800dfc0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e8  20000228  0800e1e8  0000f228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800e1e8  0000fb10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171aa  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003699  00000000  00000000  00026402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  00029aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019382  00000000  00000000  0002b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a713  00000000  00000000  000443aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000957c6  00000000  00000000  0005eabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f4283  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000010c2  00000000  00000000  000f42c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f60  00000000  00000000  000f5388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fc2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d258 	.word	0x0800d258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	0800d258 	.word	0x0800d258

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f70:	e000      	b.n	8000f74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f9      	beq.n	8000f72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_GPIO_EXTI_Callback>:
            imu->ax, imu->ay, imu->az,
            imu->rol, imu->pit, imu->yaw);
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1) { // PB1, the up button
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_EXTI_Callback+0x14>
		MPU6500_InitStructures();
 8000fa6:	f002 f825 	bl	8002ff4 <MPU6500_InitStructures>
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b090      	sub	sp, #64	@ 0x40
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a43      	ldr	r2, [pc, #268]	@ (80010d0 <HAL_UART_RxCpltCallback+0x11c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d17f      	bne.n	80010c6 <HAL_UART_RxCpltCallback+0x112>
        if (bluetooth_rx_data == 'b' && !balance_start) {
 8000fc6:	4b43      	ldr	r3, [pc, #268]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b62      	cmp	r3, #98	@ 0x62
 8000fcc:	d126      	bne.n	800101c <HAL_UART_RxCpltCallback+0x68>
 8000fce:	4b42      	ldr	r3, [pc, #264]	@ (80010d8 <HAL_UART_RxCpltCallback+0x124>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d121      	bne.n	800101c <HAL_UART_RxCpltCallback+0x68>
            // 收到'b'字符且当前未启动平衡控制时，记录当前角度作为目标角度并启动平衡
            target_angle = Pitch_dmp;
 8000fd8:	4b40      	ldr	r3, [pc, #256]	@ (80010dc <HAL_UART_RxCpltCallback+0x128>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a40      	ldr	r2, [pc, #256]	@ (80010e0 <HAL_UART_RxCpltCallback+0x12c>)
 8000fde:	6013      	str	r3, [r2, #0]
            balance_start = 1;
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80010d8 <HAL_UART_RxCpltCallback+0x124>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
            
            // 发送确认信息
            char buffer[50];
            sprintf(buffer, "Balance start, target: %.2f\r\n", target_angle);
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <HAL_UART_RxCpltCallback+0x12c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fab4 	bl	8000558 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	f107 0008 	add.w	r0, r7, #8
 8000ff8:	493a      	ldr	r1, [pc, #232]	@ (80010e4 <HAL_UART_RxCpltCallback+0x130>)
 8000ffa:	f008 ffbf 	bl	8009f7c <siprintf>
            HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f93c 	bl	8000280 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f107 0108 	add.w	r1, r7, #8
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	4834      	ldr	r0, [pc, #208]	@ (80010e8 <HAL_UART_RxCpltCallback+0x134>)
 8001016:	f007 fa91 	bl	800853c <HAL_UART_Transmit>
        if (bluetooth_rx_data == 'b' && !balance_start) {
 800101a:	e04f      	b.n	80010bc <HAL_UART_RxCpltCallback+0x108>
        } else if (bluetooth_rx_data == 's') {
 800101c:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b73      	cmp	r3, #115	@ 0x73
 8001022:	d112      	bne.n	800104a <HAL_UART_RxCpltCallback+0x96>
            // 收到's'字符时停止平衡控制
            balance_start = 0;
 8001024:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <HAL_UART_RxCpltCallback+0x124>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
            Motor_Stop();
 800102a:	f001 f8a7 	bl	800217c <Motor_Stop>
            
            // 发送确认信息
            char *msg = "Balance stopped\r\n";
 800102e:	4b2f      	ldr	r3, [pc, #188]	@ (80010ec <HAL_UART_RxCpltCallback+0x138>)
 8001030:	63fb      	str	r3, [r7, #60]	@ 0x3c
            HAL_UART_Transmit(&huart6, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001032:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001034:	f7ff f924 	bl	8000280 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001042:	4829      	ldr	r0, [pc, #164]	@ (80010e8 <HAL_UART_RxCpltCallback+0x134>)
 8001044:	f007 fa7a 	bl	800853c <HAL_UART_Transmit>
 8001048:	e038      	b.n	80010bc <HAL_UART_RxCpltCallback+0x108>
        } else {
            // 检查是否为速度控制命令 (u,j,i,k,v)
            if (bluetooth_rx_data == 'u' || bluetooth_rx_data == 'j' || 
 800104a:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b75      	cmp	r3, #117	@ 0x75
 8001050:	d00f      	beq.n	8001072 <HAL_UART_RxCpltCallback+0xbe>
 8001052:	4b20      	ldr	r3, [pc, #128]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b6a      	cmp	r3, #106	@ 0x6a
 8001058:	d00b      	beq.n	8001072 <HAL_UART_RxCpltCallback+0xbe>
                bluetooth_rx_data == 'i' || bluetooth_rx_data == 'k' ||
 800105a:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 800105c:	781b      	ldrb	r3, [r3, #0]
            if (bluetooth_rx_data == 'u' || bluetooth_rx_data == 'j' || 
 800105e:	2b69      	cmp	r3, #105	@ 0x69
 8001060:	d007      	beq.n	8001072 <HAL_UART_RxCpltCallback+0xbe>
                bluetooth_rx_data == 'i' || bluetooth_rx_data == 'k' ||
 8001062:	4b1c      	ldr	r3, [pc, #112]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b6b      	cmp	r3, #107	@ 0x6b
 8001068:	d003      	beq.n	8001072 <HAL_UART_RxCpltCallback+0xbe>
                bluetooth_rx_data == 'v') {
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 800106c:	781b      	ldrb	r3, [r3, #0]
                bluetooth_rx_data == 'i' || bluetooth_rx_data == 'k' ||
 800106e:	2b76      	cmp	r3, #118	@ 0x76
 8001070:	d105      	bne.n	800107e <HAL_UART_RxCpltCallback+0xca>
                PI_Speed_ProcessCommand(bluetooth_rx_data);
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fb1e 	bl	80036b8 <PI_Speed_ProcessCommand>
 800107c:	e01e      	b.n	80010bc <HAL_UART_RxCpltCallback+0x108>
            } else if (bluetooth_rx_data == 'r' || bluetooth_rx_data == 'f' ||
 800107e:	4b15      	ldr	r3, [pc, #84]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b72      	cmp	r3, #114	@ 0x72
 8001084:	d00f      	beq.n	80010a6 <HAL_UART_RxCpltCallback+0xf2>
 8001086:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b66      	cmp	r3, #102	@ 0x66
 800108c:	d00b      	beq.n	80010a6 <HAL_UART_RxCpltCallback+0xf2>
                       bluetooth_rx_data == 't' || bluetooth_rx_data == 'g' ||
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 8001090:	781b      	ldrb	r3, [r3, #0]
            } else if (bluetooth_rx_data == 'r' || bluetooth_rx_data == 'f' ||
 8001092:	2b74      	cmp	r3, #116	@ 0x74
 8001094:	d007      	beq.n	80010a6 <HAL_UART_RxCpltCallback+0xf2>
                       bluetooth_rx_data == 't' || bluetooth_rx_data == 'g' ||
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b67      	cmp	r3, #103	@ 0x67
 800109c:	d003      	beq.n	80010a6 <HAL_UART_RxCpltCallback+0xf2>
                       bluetooth_rx_data == 'n') {
 800109e:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
                       bluetooth_rx_data == 't' || bluetooth_rx_data == 'g' ||
 80010a2:	2b6e      	cmp	r3, #110	@ 0x6e
 80010a4:	d105      	bne.n	80010b2 <HAL_UART_RxCpltCallback+0xfe>
                // 转向控制命令 (r,f,t,g,n)
                PD_Turn_ProcessCommand(bluetooth_rx_data);
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fce6 	bl	8003a7c <PD_Turn_ProcessCommand>
 80010b0:	e004      	b.n	80010bc <HAL_UART_RxCpltCallback+0x108>
            } else {
                // 其他字符作为平衡控制参数调整命令处理
                PD_Balance_ProcessCommand(bluetooth_rx_data);
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 f93c 	bl	8003334 <PD_Balance_ProcessCommand>
            }
        }
        
        // 继续接收下一个字符
        HAL_UART_Receive_IT(&huart6, &bluetooth_rx_data, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	4905      	ldr	r1, [pc, #20]	@ (80010d4 <HAL_UART_RxCpltCallback+0x120>)
 80010c0:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <HAL_UART_RxCpltCallback+0x134>)
 80010c2:	f007 fac6 	bl	8008652 <HAL_UART_Receive_IT>
    }
}
 80010c6:	bf00      	nop
 80010c8:	3740      	adds	r7, #64	@ 0x40
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40011400 	.word	0x40011400
 80010d4:	200004ad 	.word	0x200004ad
 80010d8:	200004b2 	.word	0x200004b2
 80010dc:	20000570 	.word	0x20000570
 80010e0:	200004b4 	.word	0x200004b4
 80010e4:	0800d2b4 	.word	0x0800d2b4
 80010e8:	20000464 	.word	0x20000464
 80010ec:	0800d2d4 	.word	0x0800d2d4

080010f0 <HAL_TIM_IC_CaptureCallback>:

// 超声波输入捕获中断回调函数
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    // 调用超声波模块的回调函数
    Ultrasonic_TIM_IC_CaptureCallback(htim);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f003 fbe5 	bl	80048c8 <Ultrasonic_TIM_IC_CaptureCallback>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8001110:	af1a      	add	r7, sp, #104	@ 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f003 fcbb 	bl	8004a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 fb17 	bl	8001748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f000 fdcd 	bl	8001cb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800111e:	f000 fbdb 	bl	80018d8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001122:	f000 fc0f 	bl	8001944 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8001126:	f000 fd9d 	bl	8001c64 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 800112a:	f000 fc5b 	bl	80019e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800112e:	f000 fcad 	bl	8001a8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001132:	f000 fcff 	bl	8001b34 <MX_TIM4_Init>
  MX_I2C3_Init();
 8001136:	f000 fba1 	bl	800187c <MX_I2C3_Init>
  MX_I2C2_Init();
 800113a:	f000 fb71 	bl	8001820 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init(&hi2c3);
 800113e:	48c0      	ldr	r0, [pc, #768]	@ (8001440 <main+0x338>)
 8001140:	f002 fcf6 	bl	8003b30 <ssd1306_Init>
  ssd1306_Fill(Black);
 8001144:	2000      	movs	r0, #0
 8001146:	f002 fe13 	bl	8003d70 <ssd1306_Fill>

  MPU6500_Init();
 800114a:	f001 fb4f 	bl	80027ec <MPU6500_Init>
  MPU6500_InitStructures();
 800114e:	f001 ff51 	bl	8002ff4 <MPU6500_InitStructures>
  
  // Initialize DMP for better quaternion calculation
  HAL_Delay(173);
 8001152:	20ad      	movs	r0, #173	@ 0xad
 8001154:	f003 fd0c 	bl	8004b70 <HAL_Delay>
  DMP_Init_SPI();
 8001158:	f001 f82c 	bl	80021b4 <DMP_Init_SPI>
  
  // 初始化PD控制器
  PD_Balance_Init();
 800115c:	f001 ffc6 	bl	80030ec <PD_Balance_Init>
  
  // 初始化PI速度控制器
  PI_Speed_Init();
 8001160:	f002 f953 	bl	800340a <PI_Speed_Init>
  
  // 初始化PD转向控制器
  PD_Turn_Init();
 8001164:	f002 fb19 	bl	800379a <PD_Turn_Init>
  
  // 初始化电机驱动
  Motor_Init();
 8001168:	f000 fe70 	bl	8001e4c <Motor_Init>
  
  // 初始化超声波测距模块
  Ultrasonic_Init(&htim4);  // 使用TIM4进行超声波测距
 800116c:	48b5      	ldr	r0, [pc, #724]	@ (8001444 <main+0x33c>)
 800116e:	f003 fb23 	bl	80047b8 <Ultrasonic_Init>
  Ultrasonic_SetSamplingInterval(100);  // 设置采样间隔为100ms
 8001172:	2064      	movs	r0, #100	@ 0x64
 8001174:	f003 fb98 	bl	80048a8 <Ultrasonic_SetSamplingInterval>
  
  HAL_TIM_Base_Start_IT(&htim1);
 8001178:	48b3      	ldr	r0, [pc, #716]	@ (8001448 <main+0x340>)
 800117a:	f005 ff9f 	bl	80070bc <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2180      	movs	r1, #128	@ 0x80
 8001182:	48b2      	ldr	r0, [pc, #712]	@ (800144c <main+0x344>)
 8001184:	f004 f840 	bl	8005208 <HAL_GPIO_WritePin>

  uint8_t dummy;
  HAL_UART_Receive_IT(&huart6, &dummy, 1);
 8001188:	f207 13e3 	addw	r3, r7, #483	@ 0x1e3
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	48af      	ldr	r0, [pc, #700]	@ (8001450 <main+0x348>)
 8001192:	f007 fa5e 	bl	8008652 <HAL_UART_Receive_IT>

  uint32_t last_send_time = HAL_GetTick();
 8001196:	f003 fcdf 	bl	8004b58 <HAL_GetTick>
 800119a:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
  uint32_t last_refresh_time = HAL_GetTick();
 800119e:	f003 fcdb 	bl	8004b58 <HAL_GetTick>
 80011a2:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint32_t current_time = HAL_GetTick();
 80011a6:	f003 fcd7 	bl	8004b58 <HAL_GetTick>
 80011aa:	f8c7 0210 	str.w	r0, [r7, #528]	@ 0x210
    
    if(timer_flag)
 80011ae:	4ba9      	ldr	r3, [pc, #676]	@ (8001454 <main+0x34c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 8194 	beq.w	80014e2 <main+0x3da>
    {
        MPU6500_UpdateData();
 80011ba:	f001 ff89 	bl	80030d0 <MPU6500_UpdateData>
        Read_DMP_SPI();
 80011be:	f001 f85f 	bl	8002280 <Read_DMP_SPI>

        // 障碍检测逻辑
        uint32_t distance_mm = Ultrasonic_GetDistanceMM();
 80011c2:	f003 fb51 	bl	8004868 <Ultrasonic_GetDistanceMM>
 80011c6:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
        
        // 检测到障碍物
        if (distance_mm < OBSTACLE_THRESHOLD_MM && distance_mm > 10) {  // 排除无效读数
 80011ca:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80011ce:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80011d2:	d245      	bcs.n	8001260 <main+0x158>
 80011d4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80011d8:	2b0a      	cmp	r3, #10
 80011da:	d941      	bls.n	8001260 <main+0x158>
            if (!obstacle_detected && !turning_left) {
 80011dc:	4b9e      	ldr	r3, [pc, #632]	@ (8001458 <main+0x350>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d140      	bne.n	8001268 <main+0x160>
 80011e6:	4b9d      	ldr	r3, [pc, #628]	@ (800145c <main+0x354>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d13b      	bne.n	8001268 <main+0x160>
                // 首次检测到障碍，开始左转
                obstacle_detected = 1;
 80011f0:	4b99      	ldr	r3, [pc, #612]	@ (8001458 <main+0x350>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
                turning_left = 1;
 80011f6:	4b99      	ldr	r3, [pc, #612]	@ (800145c <main+0x354>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
                original_target_yaw = PD_Turn_GetTargetAngle();  // 保存原始目标角度
 80011fc:	f002 fc0c 	bl	8003a18 <PD_Turn_GetTargetAngle>
 8001200:	eef0 7a40 	vmov.f32	s15, s0
 8001204:	4b96      	ldr	r3, [pc, #600]	@ (8001460 <main+0x358>)
 8001206:	edc3 7a00 	vstr	s15, [r3]
                turn_target_yaw = original_target_yaw + 30.0f;   // 设置左转30度目标
 800120a:	4b95      	ldr	r3, [pc, #596]	@ (8001460 <main+0x358>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001218:	4b92      	ldr	r3, [pc, #584]	@ (8001464 <main+0x35c>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
                
                // 处理角度环绕
                if (turn_target_yaw > 180.0f) {
 800121e:	4b91      	ldr	r3, [pc, #580]	@ (8001464 <main+0x35c>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8001468 <main+0x360>
 8001228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	dd09      	ble.n	8001246 <main+0x13e>
                    turn_target_yaw -= 360.0f;
 8001232:	4b8c      	ldr	r3, [pc, #560]	@ (8001464 <main+0x35c>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 800146c <main+0x364>
 800123c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001240:	4b88      	ldr	r3, [pc, #544]	@ (8001464 <main+0x35c>)
 8001242:	edc3 7a00 	vstr	s15, [r3]
                }
                
                PD_Turn_SetTargetAngle(turn_target_yaw);         // 设置新的目标角度
 8001246:	4b87      	ldr	r3, [pc, #540]	@ (8001464 <main+0x35c>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	f002 fbd2 	bl	80039f8 <PD_Turn_SetTargetAngle>
                turn_start_time = HAL_GetTick();                 // 记录转向开始时间
 8001254:	f003 fc80 	bl	8004b58 <HAL_GetTick>
 8001258:	4603      	mov	r3, r0
 800125a:	4a85      	ldr	r2, [pc, #532]	@ (8001470 <main+0x368>)
 800125c:	6013      	str	r3, [r2, #0]
            if (!obstacle_detected && !turning_left) {
 800125e:	e003      	b.n	8001268 <main+0x160>
            }
        } else {
            obstacle_detected = 0;  // 没有障碍物，清除检测标志
 8001260:	4b7d      	ldr	r3, [pc, #500]	@ (8001458 <main+0x350>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e000      	b.n	800126a <main+0x162>
            if (!obstacle_detected && !turning_left) {
 8001268:	bf00      	nop
        }
        
        // 转向超时处理
        if (turning_left && (HAL_GetTick() - turn_start_time > max_turn_duration)) {
 800126a:	4b7c      	ldr	r3, [pc, #496]	@ (800145c <main+0x354>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d013      	beq.n	800129c <main+0x194>
 8001274:	f003 fc70 	bl	8004b58 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	4b7d      	ldr	r3, [pc, #500]	@ (8001470 <main+0x368>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	1ad2      	subs	r2, r2, r3
 8001280:	4b7c      	ldr	r3, [pc, #496]	@ (8001474 <main+0x36c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d909      	bls.n	800129c <main+0x194>
            turning_left = 0;  // 转向超时，停止转向
 8001288:	4b74      	ldr	r3, [pc, #464]	@ (800145c <main+0x354>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
            PD_Turn_SetTargetAngle(original_target_yaw);  // 恢复原始目标角度
 800128e:	4b74      	ldr	r3, [pc, #464]	@ (8001460 <main+0x358>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	eeb0 0a67 	vmov.f32	s0, s15
 8001298:	f002 fbae 	bl	80039f8 <PD_Turn_SetTargetAngle>
        }
        
        // 检查转向是否完成（到达目标角度附近）
        if (turning_left) {
 800129c:	4b6f      	ldr	r3, [pc, #444]	@ (800145c <main+0x354>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d041      	beq.n	800132a <main+0x222>
            float angle_error = turn_target_yaw - Yaw_dmp;
 80012a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001464 <main+0x35c>)
 80012a8:	ed93 7a00 	vldr	s14, [r3]
 80012ac:	4b72      	ldr	r3, [pc, #456]	@ (8001478 <main+0x370>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	edc7 7a85 	vstr	s15, [r7, #532]	@ 0x214
            // 处理角度跨越±180度的情况
            if (angle_error > 180.0f) {
 80012ba:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 80012be:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001468 <main+0x360>
 80012c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	dd08      	ble.n	80012de <main+0x1d6>
                angle_error -= 360.0f;
 80012cc:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 80012d0:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800146c <main+0x364>
 80012d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d8:	edc7 7a85 	vstr	s15, [r7, #532]	@ 0x214
 80012dc:	e010      	b.n	8001300 <main+0x1f8>
            } else if (angle_error < -180.0f) {
 80012de:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 80012e2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800147c <main+0x374>
 80012e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	d507      	bpl.n	8001300 <main+0x1f8>
                angle_error += 360.0f;
 80012f0:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 80012f4:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800146c <main+0x364>
 80012f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012fc:	edc7 7a85 	vstr	s15, [r7, #532]	@ 0x214
            }
            
            // 如果角度误差小于5度，认为转向完成
            if (fabs(angle_error) < 5.0f) {
 8001300:	edd7 7a85 	vldr	s15, [r7, #532]	@ 0x214
 8001304:	eef0 7ae7 	vabs.f32	s15, s15
 8001308:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800130c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001314:	d509      	bpl.n	800132a <main+0x222>
                turning_left = 0;  // 转向完成
 8001316:	4b51      	ldr	r3, [pc, #324]	@ (800145c <main+0x354>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
                PD_Turn_SetTargetAngle(turn_target_yaw);  // 保持新的角度作为目标
 800131c:	4b51      	ldr	r3, [pc, #324]	@ (8001464 <main+0x35c>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f002 fb67 	bl	80039f8 <PD_Turn_SetTargetAngle>
            }
        }

        if (balance_start) {
 800132a:	4b55      	ldr	r3, [pc, #340]	@ (8001480 <main+0x378>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 80d3 	beq.w	80014dc <main+0x3d4>
            // 更新编码器数据
            Encoder_Update();
 8001336:	f000 fded 	bl	8001f14 <Encoder_Update>
            
            // 获取编码器数据，右编码器取反以匹配motor_driver的处理
            EncoderData_t encoder_data = Encoder_GetData();
 800133a:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fe66 	bl	8002010 <Encoder_GetData>
            float left_rpm = encoder_data.left_speed_rpm;
 8001344:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001348:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
            float right_rpm = -encoder_data.right_speed_rpm;  // 右编码器读数取反
 800134c:	edd7 7a77 	vldr	s15, [r7, #476]	@ 0x1dc
 8001350:	eef1 7a67 	vneg.f32	s15, s15
 8001354:	edc7 7a81 	vstr	s15, [r7, #516]	@ 0x204
            float current_speed = (left_rpm + right_rpm) / 2.0f;
 8001358:	ed97 7a82 	vldr	s14, [r7, #520]	@ 0x208
 800135c:	edd7 7a81 	vldr	s15, [r7, #516]	@ 0x204
 8001360:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001364:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136c:	edc7 7a80 	vstr	s15, [r7, #512]	@ 0x200
            
            // 获取目标速度
            float target_speed = PI_Speed_GetTargetSpeed();
 8001370:	f002 f9e2 	bl	8003738 <PI_Speed_GetTargetSpeed>
 8001374:	ed87 0a7f 	vstr	s0, [r7, #508]	@ 0x1fc
            
            // 计算平衡控制速度值 (-100 to 100)
            int16_t balance_speed = PD_Balance_Calculate(Pitch_dmp - target_angle, 0);
 8001378:	4b42      	ldr	r3, [pc, #264]	@ (8001484 <main+0x37c>)
 800137a:	ed93 7a00 	vldr	s14, [r3]
 800137e:	4b42      	ldr	r3, [pc, #264]	@ (8001488 <main+0x380>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001388:	eddf 0a40 	vldr	s1, [pc, #256]	@ 800148c <main+0x384>
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	f001 feb2 	bl	80030f8 <PD_Balance_Calculate>
 8001394:	4603      	mov	r3, r0
 8001396:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
            
            // 计算速度控制修正值
            int16_t speed_correction = PI_Speed_Calculate(current_speed, target_speed);
 800139a:	edd7 0a7f 	vldr	s1, [r7, #508]	@ 0x1fc
 800139e:	ed97 0a80 	vldr	s0, [r7, #512]	@ 0x200
 80013a2:	f002 f839 	bl	8003418 <PI_Speed_Calculate>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f8a7 31f8 	strh.w	r3, [r7, #504]	@ 0x1f8
            
            // 计算转向控制输出
            float target_angle = PD_Turn_GetTargetAngle();
 80013ac:	f002 fb34 	bl	8003a18 <PD_Turn_GetTargetAngle>
 80013b0:	ed87 0a7d 	vstr	s0, [r7, #500]	@ 0x1f4
            int16_t turn_output = PD_Turn_Calculate(target_angle, Yaw_dmp);
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <main+0x370>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eef0 0a67 	vmov.f32	s1, s15
 80013be:	ed97 0a7d 	vldr	s0, [r7, #500]	@ 0x1f4
 80013c2:	f002 f9f1 	bl	80037a8 <PD_Turn_Calculate>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f8a7 31f2 	strh.w	r3, [r7, #498]	@ 0x1f2
            
            // 合成最终电机速度
            motor_left_speed = balance_speed + speed_correction + turn_output;
 80013cc:	f8b7 21fa 	ldrh.w	r2, [r7, #506]	@ 0x1fa
 80013d0:	f8b7 31f8 	ldrh.w	r3, [r7, #504]	@ 0x1f8
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	f8b7 31f2 	ldrh.w	r3, [r7, #498]	@ 0x1f2
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <main+0x388>)
 80013e4:	801a      	strh	r2, [r3, #0]
            motor_right_speed = balance_speed + speed_correction - turn_output;
 80013e6:	f8b7 21fa 	ldrh.w	r2, [r7, #506]	@ 0x1fa
 80013ea:	f8b7 31f8 	ldrh.w	r3, [r7, #504]	@ 0x1f8
 80013ee:	4413      	add	r3, r2
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f8b7 31f2 	ldrh.w	r3, [r7, #498]	@ 0x1f2
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <main+0x38c>)
 80013fe:	801a      	strh	r2, [r3, #0]
            
            // 限制速度范围
            motor_left_speed = CLAMP(motor_left_speed, -100, 100);
 8001400:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <main+0x388>)
 8001402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001406:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800140a:	db07      	blt.n	800141c <main+0x314>
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <main+0x388>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	bfa8      	it	ge
 8001416:	2364      	movge	r3, #100	@ 0x64
 8001418:	b21b      	sxth	r3, r3
 800141a:	e001      	b.n	8001420 <main+0x318>
 800141c:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001420:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <main+0x388>)
 8001422:	8013      	strh	r3, [r2, #0]
            motor_right_speed = CLAMP(motor_right_speed, -100, 100);
 8001424:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <main+0x38c>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 800142e:	db33      	blt.n	8001498 <main+0x390>
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <main+0x38c>)
 8001432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001436:	2b64      	cmp	r3, #100	@ 0x64
 8001438:	bfa8      	it	ge
 800143a:	2364      	movge	r3, #100	@ 0x64
 800143c:	b21b      	sxth	r3, r3
 800143e:	e02d      	b.n	800149c <main+0x394>
 8001440:	20000298 	.word	0x20000298
 8001444:	2000041c 	.word	0x2000041c
 8001448:	20000344 	.word	0x20000344
 800144c:	40020800 	.word	0x40020800
 8001450:	20000464 	.word	0x20000464
 8001454:	200004ac 	.word	0x200004ac
 8001458:	200004b8 	.word	0x200004b8
 800145c:	200004b9 	.word	0x200004b9
 8001460:	200004bc 	.word	0x200004bc
 8001464:	200004c0 	.word	0x200004c0
 8001468:	43340000 	.word	0x43340000
 800146c:	43b40000 	.word	0x43b40000
 8001470:	200004c4 	.word	0x200004c4
 8001474:	20000008 	.word	0x20000008
 8001478:	20000574 	.word	0x20000574
 800147c:	c3340000 	.word	0xc3340000
 8001480:	200004b2 	.word	0x200004b2
 8001484:	20000570 	.word	0x20000570
 8001488:	200004b4 	.word	0x200004b4
 800148c:	00000000 	.word	0x00000000
 8001490:	200004ae 	.word	0x200004ae
 8001494:	200004b0 	.word	0x200004b0
 8001498:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800149c:	4a9d      	ldr	r2, [pc, #628]	@ (8001714 <main+0x60c>)
 800149e:	8013      	strh	r3, [r2, #0]
            
            // 安全检查
            if (!PD_Balance_IsDangerous(Pitch_dmp - target_angle)) {
 80014a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001718 <main+0x610>)
 80014a2:	ed93 7a00 	vldr	s14, [r3]
 80014a6:	edd7 7a7d 	vldr	s15, [r7, #500]	@ 0x1f4
 80014aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	f001 feb7 	bl	8003224 <PD_Balance_IsDangerous>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10a      	bne.n	80014d2 <main+0x3ca>
                Motor_SetSpeeds(motor_left_speed, motor_right_speed);
 80014bc:	4b97      	ldr	r3, [pc, #604]	@ (800171c <main+0x614>)
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	4a94      	ldr	r2, [pc, #592]	@ (8001714 <main+0x60c>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fe3e 	bl	800214c <Motor_SetSpeeds>
 80014d0:	e004      	b.n	80014dc <main+0x3d4>
            } else {
                Motor_Stop();
 80014d2:	f000 fe53 	bl	800217c <Motor_Stop>
                balance_start = 0;  // 危险角度时停止平衡控制
 80014d6:	4b92      	ldr	r3, [pc, #584]	@ (8001720 <main+0x618>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
            }
        }

        timer_flag = 0;
 80014dc:	4b91      	ldr	r3, [pc, #580]	@ (8001724 <main+0x61c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
    }
    
    // 0.1秒刷新一次屏幕显示
    if (current_time - last_refresh_time >= 100) {
 80014e2:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80014e6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b63      	cmp	r3, #99	@ 0x63
 80014ee:	d93f      	bls.n	8001570 <main+0x468>
        char display_str3[20];
        char display_str4[20];
        float kp, kd;
        
        // 获取当前PD参数
        PD_Balance_GetParams(&kp, &kd);
 80014f0:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80014f4:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fe46 	bl	800318c <PD_Balance_GetParams>
        
        // 清屏
        ssd1306_Fill(Black);
 8001500:	2000      	movs	r0, #0
 8001502:	f002 fc35 	bl	8003d70 <ssd1306_Fill>
        
        // 显示角度和参数
        sprintf(display_str1, "Pitch: %.2f", Pitch_dmp);
 8001506:	4b84      	ldr	r3, [pc, #528]	@ (8001718 <main+0x610>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f824 	bl	8000558 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 8001518:	4983      	ldr	r1, [pc, #524]	@ (8001728 <main+0x620>)
 800151a:	f008 fd2f 	bl	8009f7c <siprintf>
        sprintf(display_str2, "Speed: %d,%d", motor_left_speed, motor_right_speed);
 800151e:	4b7f      	ldr	r3, [pc, #508]	@ (800171c <main+0x614>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	461a      	mov	r2, r3
 8001526:	4b7b      	ldr	r3, [pc, #492]	@ (8001714 <main+0x60c>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8001530:	497e      	ldr	r1, [pc, #504]	@ (800172c <main+0x624>)
 8001532:	f008 fd23 	bl	8009f7c <siprintf>
        //sprintf(display_str3, "Kp: %.0f", kp);
        //sprintf(display_str4, "Kd: %.0f", kd);
        
        ssd1306_SetCursor(0, 0);
 8001536:	2100      	movs	r1, #0
 8001538:	2000      	movs	r0, #0
 800153a:	f002 fd75 	bl	8004028 <ssd1306_SetCursor>
        ssd1306_WriteString(display_str1, Font_7x10, White);
 800153e:	4a7c      	ldr	r2, [pc, #496]	@ (8001730 <main+0x628>)
 8001540:	f507 70da 	add.w	r0, r7, #436	@ 0x1b4
 8001544:	2301      	movs	r3, #1
 8001546:	ca06      	ldmia	r2, {r1, r2}
 8001548:	f002 fd48 	bl	8003fdc <ssd1306_WriteString>
        ssd1306_SetCursor(0, 12);
 800154c:	210c      	movs	r1, #12
 800154e:	2000      	movs	r0, #0
 8001550:	f002 fd6a 	bl	8004028 <ssd1306_SetCursor>
        ssd1306_WriteString(display_str2, Font_7x10, White);
 8001554:	4a76      	ldr	r2, [pc, #472]	@ (8001730 <main+0x628>)
 8001556:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800155a:	2301      	movs	r3, #1
 800155c:	ca06      	ldmia	r2, {r1, r2}
 800155e:	f002 fd3d 	bl	8003fdc <ssd1306_WriteString>
        /*ssd1306_SetCursor(0, 24);
        ssd1306_WriteString(display_str3, Font_7x10, White);
        ssd1306_SetCursor(0, 36);
        ssd1306_WriteString(display_str4, Font_7x10, White);*/
        
        ssd1306_UpdateScreen(&hi2c3);
 8001562:	4874      	ldr	r0, [pc, #464]	@ (8001734 <main+0x62c>)
 8001564:	f002 fc28 	bl	8003db8 <ssd1306_UpdateScreen>
        
        last_refresh_time = current_time;
 8001568:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800156c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    }
    
    // 0.5秒通过蓝牙发送一次数据
    if (current_time - last_send_time >= 500) {
 8001570:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001574:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800157e:	f4ff ae12 	bcc.w	80011a6 <main+0x9e>
        char buffer[250];
        float balance_kp, balance_kd;
        float speed_kp, speed_ki;
        float turn_kp, turn_kd;
        PD_Balance_GetParams(&balance_kp, &balance_kd);
 8001582:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8001586:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fdfd 	bl	800318c <PD_Balance_GetParams>
        PI_Speed_GetParams(&speed_kp, &speed_ki);
 8001592:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001596:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f001 ffd1 	bl	8003544 <PI_Speed_GetParams>
        PD_Turn_GetParams(&turn_kp, &turn_kd);
 80015a2:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80015a6:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 f96d 	bl	800388c <PD_Turn_GetParams>
        
        // 获取编码器数据
        EncoderData_t encoder_data = Encoder_GetData();
 80015b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fd2a 	bl	8002010 <Encoder_GetData>
        float target_speed = PI_Speed_GetTargetSpeed();
 80015bc:	f002 f8bc 	bl	8003738 <PI_Speed_GetTargetSpeed>
 80015c0:	ed87 0a7b 	vstr	s0, [r7, #492]	@ 0x1ec
        float target_angle = PD_Turn_GetTargetAngle();
 80015c4:	f002 fa28 	bl	8003a18 <PD_Turn_GetTargetAngle>
 80015c8:	ed87 0a7a 	vstr	s0, [r7, #488]	@ 0x1e8
        
        // 获取距离和障碍检测状态
        uint32_t distance_mm = Ultrasonic_GetDistanceMM();
 80015cc:	f003 f94c 	bl	8004868 <Ultrasonic_GetDistanceMM>
 80015d0:	f8c7 01e4 	str.w	r0, [r7, #484]	@ 0x1e4
        
        sprintf(buffer, "Pitch:%.2f BKp:%.0f BKd:%.0f SKp:%.1f SKi:%.2f TKp:%.0f TKd:%.0f Target:%.1f Angle:%.1f Speed:%d,%d RPM:%.1f,%.1f Dist:%ldmm Obs:%d Turn:%d\r\n", 
 80015d4:	4b50      	ldr	r3, [pc, #320]	@ (8001718 <main+0x610>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffbd 	bl	8000558 <__aeabi_f2d>
 80015de:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80015e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffb6 	bl	8000558 <__aeabi_f2d>
 80015ec:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80015f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffaf 	bl	8000558 <__aeabi_f2d>
 80015fa:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80015fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffa8 	bl	8000558 <__aeabi_f2d>
 8001608:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800160c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffa1 	bl	8000558 <__aeabi_f2d>
 8001616:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800161a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ff9a 	bl	8000558 <__aeabi_f2d>
 8001624:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001628:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff93 	bl	8000558 <__aeabi_f2d>
 8001632:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001636:	f8d7 01ec 	ldr.w	r0, [r7, #492]	@ 0x1ec
 800163a:	f7fe ff8d 	bl	8000558 <__aeabi_f2d>
 800163e:	4682      	mov	sl, r0
 8001640:	468b      	mov	fp, r1
 8001642:	f8d7 01e8 	ldr.w	r0, [r7, #488]	@ 0x1e8
 8001646:	f7fe ff87 	bl	8000558 <__aeabi_f2d>
 800164a:	4680      	mov	r8, r0
 800164c:	4689      	mov	r9, r1
 800164e:	4b33      	ldr	r3, [pc, #204]	@ (800171c <main+0x614>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b2f      	ldr	r3, [pc, #188]	@ (8001714 <main+0x60c>)
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	603b      	str	r3, [r7, #0]
                Pitch_dmp, balance_kp, balance_kd, speed_kp, speed_ki, turn_kp, turn_kd, target_speed, target_angle,
                motor_left_speed, motor_right_speed,
                encoder_data.left_speed_rpm, -encoder_data.right_speed_rpm,
 800165e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
        sprintf(buffer, "Pitch:%.2f BKp:%.0f BKd:%.0f SKp:%.1f SKi:%.2f TKp:%.0f TKd:%.0f Target:%.1f Angle:%.1f Speed:%d,%d RPM:%.1f,%.1f Dist:%ldmm Obs:%d Turn:%d\r\n", 
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff78 	bl	8000558 <__aeabi_f2d>
 8001668:	4604      	mov	r4, r0
 800166a:	460d      	mov	r5, r1
                encoder_data.left_speed_rpm, -encoder_data.right_speed_rpm,
 800166c:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8001670:	eef1 7a67 	vneg.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
        sprintf(buffer, "Pitch:%.2f BKp:%.0f BKd:%.0f SKp:%.1f SKi:%.2f TKp:%.0f TKd:%.0f Target:%.1f Angle:%.1f Speed:%d,%d RPM:%.1f,%.1f Dist:%ldmm Obs:%d Turn:%d\r\n", 
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff6d 	bl	8000558 <__aeabi_f2d>
 800167e:	4b2e      	ldr	r3, [pc, #184]	@ (8001738 <main+0x630>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <main+0x634>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	f107 0644 	add.w	r6, r7, #68	@ 0x44
 8001690:	9318      	str	r3, [sp, #96]	@ 0x60
 8001692:	9217      	str	r2, [sp, #92]	@ 0x5c
 8001694:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001698:	9316      	str	r3, [sp, #88]	@ 0x58
 800169a:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800169e:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	9111      	str	r1, [sp, #68]	@ 0x44
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80016aa:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 80016ae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80016b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80016b6:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80016ba:	ed97 7b04 	vldr	d7, [r7, #16]
 80016be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80016c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80016c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016ca:	ed97 7b08 	vldr	d7, [r7, #32]
 80016ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 80016d2:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80016d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80016da:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80016de:	ed8d 7b00 	vstr	d7, [sp]
 80016e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80016e6:	4916      	ldr	r1, [pc, #88]	@ (8001740 <main+0x638>)
 80016e8:	4630      	mov	r0, r6
 80016ea:	f008 fc47 	bl	8009f7c <siprintf>
                distance_mm, obstacle_detected, turning_left);
        HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80016ee:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fdc4 	bl	8000280 <strlen>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	480f      	ldr	r0, [pc, #60]	@ (8001744 <main+0x63c>)
 8001706:	f006 ff19 	bl	800853c <HAL_UART_Transmit>
        
        last_send_time = current_time;
 800170a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800170e:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
  {
 8001712:	e548      	b.n	80011a6 <main+0x9e>
 8001714:	200004b0 	.word	0x200004b0
 8001718:	20000570 	.word	0x20000570
 800171c:	200004ae 	.word	0x200004ae
 8001720:	200004b2 	.word	0x200004b2
 8001724:	200004ac 	.word	0x200004ac
 8001728:	0800d2e8 	.word	0x0800d2e8
 800172c:	0800d2f4 	.word	0x0800d2f4
 8001730:	20000000 	.word	0x20000000
 8001734:	20000298 	.word	0x20000298
 8001738:	200004b8 	.word	0x200004b8
 800173c:	200004b9 	.word	0x200004b9
 8001740:	0800d304 	.word	0x0800d304
 8001744:	20000464 	.word	0x20000464

08001748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	@ 0x50
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	2230      	movs	r2, #48	@ 0x30
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f008 fc73 	bl	800a042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <SystemClock_Config+0xd0>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	4a28      	ldr	r2, [pc, #160]	@ (8001818 <SystemClock_Config+0xd0>)
 8001776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	@ 0x40
 800177c:	4b26      	ldr	r3, [pc, #152]	@ (8001818 <SystemClock_Config+0xd0>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	4b23      	ldr	r3, [pc, #140]	@ (800181c <SystemClock_Config+0xd4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001794:	4a21      	ldr	r2, [pc, #132]	@ (800181c <SystemClock_Config+0xd4>)
 8001796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <SystemClock_Config+0xd4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b0:	2310      	movs	r3, #16
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b4:	2302      	movs	r3, #2
 80017b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017bc:	2310      	movs	r3, #16
 80017be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017c6:	2304      	movs	r3, #4
 80017c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ca:	2304      	movs	r3, #4
 80017cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f9f8 	bl	8005bc8 <HAL_RCC_OscConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017de:	f000 fb2f 	bl	8001e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e2:	230f      	movs	r3, #15
 80017e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e6:	2302      	movs	r3, #2
 80017e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2102      	movs	r1, #2
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fc5a 	bl	80060b8 <HAL_RCC_ClockConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800180a:	f000 fb19 	bl	8001e40 <Error_Handler>
  }
}
 800180e:	bf00      	nop
 8001810:	3750      	adds	r7, #80	@ 0x50
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000

08001820 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <MX_I2C2_Init+0x50>)
 8001826:	4a13      	ldr	r2, [pc, #76]	@ (8001874 <MX_I2C2_Init+0x54>)
 8001828:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MX_I2C2_Init+0x50>)
 800182c:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <MX_I2C2_Init+0x58>)
 800182e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <MX_I2C2_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <MX_I2C2_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_I2C2_Init+0x50>)
 800183e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001842:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <MX_I2C2_Init+0x50>)
 8001846:	2200      	movs	r2, #0
 8001848:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_I2C2_Init+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <MX_I2C2_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_I2C2_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	@ (8001870 <MX_I2C2_Init+0x50>)
 800185e:	f003 fd05 	bl	800526c <HAL_I2C_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001868:	f000 faea 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000244 	.word	0x20000244
 8001874:	40005800 	.word	0x40005800
 8001878:	000186a0 	.word	0x000186a0

0800187c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <MX_I2C3_Init+0x50>)
 8001882:	4a13      	ldr	r2, [pc, #76]	@ (80018d0 <MX_I2C3_Init+0x54>)
 8001884:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_I2C3_Init+0x50>)
 8001888:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <MX_I2C3_Init+0x58>)
 800188a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_I2C3_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_I2C3_Init+0x50>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_I2C3_Init+0x50>)
 800189a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800189e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_I2C3_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_I2C3_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <MX_I2C3_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_I2C3_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_I2C3_Init+0x50>)
 80018ba:	f003 fcd7 	bl	800526c <HAL_I2C_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018c4:	f000 fabc 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000298 	.word	0x20000298
 80018d0:	40005c00 	.word	0x40005c00
 80018d4:	000186a0 	.word	0x000186a0

080018d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <MX_SPI1_Init+0x64>)
 80018de:	4a18      	ldr	r2, [pc, #96]	@ (8001940 <MX_SPI1_Init+0x68>)
 80018e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_SPI1_Init+0x64>)
 80018e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ea:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_SPI1_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <MX_SPI1_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <MX_SPI1_Init+0x64>)
 80018f8:	2202      	movs	r2, #2
 80018fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <MX_SPI1_Init+0x64>)
 80018fe:	2201      	movs	r2, #1
 8001900:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <MX_SPI1_Init+0x64>)
 8001904:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001908:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_SPI1_Init+0x64>)
 800190c:	2230      	movs	r2, #48	@ 0x30
 800190e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <MX_SPI1_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_SPI1_Init+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <MX_SPI1_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_SPI1_Init+0x64>)
 8001924:	220a      	movs	r2, #10
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_SPI1_Init+0x64>)
 800192a:	f004 fda5 	bl	8006478 <HAL_SPI_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001934:	f000 fa84 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200002ec 	.word	0x200002ec
 8001940:	40013000 	.word	0x40013000

08001944 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001962:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <MX_TIM1_Init+0x9c>)
 8001964:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001968:	2253      	movs	r2, #83	@ 0x53
 800196a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <MX_TIM1_Init+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001974:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001978:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <MX_TIM1_Init+0x98>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001980:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800198c:	4813      	ldr	r0, [pc, #76]	@ (80019dc <MX_TIM1_Init+0x98>)
 800198e:	f005 fb45 	bl	800701c <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001998:	f000 fa52 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <MX_TIM1_Init+0x98>)
 80019aa:	f006 f8f3 	bl	8007b94 <HAL_TIM_ConfigClockSource>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80019b4:	f000 fa44 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	@ (80019dc <MX_TIM1_Init+0x98>)
 80019c6:	f006 fce7 	bl	8008398 <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019d0:	f000 fa36 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000344 	.word	0x20000344
 80019e0:	40010000 	.word	0x40010000

080019e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	@ 0x30
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2224      	movs	r2, #36	@ 0x24
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f008 fb25 	bl	800a042 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a00:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <MX_TIM2_Init+0xa4>)
 8001a02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <MX_TIM2_Init+0xa4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <MX_TIM2_Init+0xa4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <MX_TIM2_Init+0xa4>)
 8001a16:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <MX_TIM2_Init+0xa4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <MX_TIM2_Init+0xa4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a30:	2301      	movs	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a40:	2301      	movs	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	4619      	mov	r1, r3
 8001a52:	480d      	ldr	r0, [pc, #52]	@ (8001a88 <MX_TIM2_Init+0xa4>)
 8001a54:	f005 fdb8 	bl	80075c8 <HAL_TIM_Encoder_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a5e:	f000 f9ef 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4806      	ldr	r0, [pc, #24]	@ (8001a88 <MX_TIM2_Init+0xa4>)
 8001a70:	f006 fc92 	bl	8008398 <HAL_TIMEx_MasterConfigSynchronization>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a7a:	f000 f9e1 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	3730      	adds	r7, #48	@ 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000038c 	.word	0x2000038c

08001a8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	@ 0x30
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2224      	movs	r2, #36	@ 0x24
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f008 fad1 	bl	800a042 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa8:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <MX_TIM3_Init+0xa0>)
 8001aaa:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <MX_TIM3_Init+0xa4>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <MX_TIM3_Init+0xa0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <MX_TIM3_Init+0xa0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8399;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <MX_TIM3_Init+0xa0>)
 8001abc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001ac0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_TIM3_Init+0xa0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <MX_TIM3_Init+0xa0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <MX_TIM3_Init+0xa0>)
 8001afa:	f005 fd65 	bl	80075c8 <HAL_TIM_Encoder_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b04:	f000 f99c 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_TIM3_Init+0xa0>)
 8001b16:	f006 fc3f 	bl	8008398 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b20:	f000 f98e 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3730      	adds	r7, #48	@ 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200003d4 	.word	0x200003d4
 8001b30:	40000400 	.word	0x40000400

08001b34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08e      	sub	sp, #56	@ 0x38
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
 8001b60:	615a      	str	r2, [r3, #20]
 8001b62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b64:	4b3d      	ldr	r3, [pc, #244]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001b66:	4a3e      	ldr	r2, [pc, #248]	@ (8001c60 <MX_TIM4_Init+0x12c>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8399;
 8001b76:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001b78:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001b7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7e:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	4b35      	ldr	r3, [pc, #212]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b8a:	4834      	ldr	r0, [pc, #208]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001b8c:	f005 fa46 	bl	800701c <HAL_TIM_Base_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b96:	f000 f953 	bl	8001e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ba0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	482d      	ldr	r0, [pc, #180]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001ba8:	f005 fff4 	bl	8007b94 <HAL_TIM_ConfigClockSource>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001bb2:	f000 f945 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001bb6:	4829      	ldr	r0, [pc, #164]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001bb8:	f005 fae2 	bl	8007180 <HAL_TIM_PWM_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001bc2:	f000 f93d 	bl	8001e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bce:	f107 0320 	add.w	r3, r7, #32
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4821      	ldr	r0, [pc, #132]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001bd6:	f006 fbdf 	bl	8008398 <HAL_TIMEx_MasterConfigSynchronization>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001be0:	f000 f92e 	bl	8001e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be4:	2360      	movs	r3, #96	@ 0x60
 8001be6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4818      	ldr	r0, [pc, #96]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001bfc:	f005 ff08 	bl	8007a10 <HAL_TIM_PWM_ConfigChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001c06:	f000 f91b 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4812      	ldr	r0, [pc, #72]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001c12:	f005 fefd 	bl	8007a10 <HAL_TIM_PWM_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001c1c:	f000 f910 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2208      	movs	r2, #8
 8001c24:	4619      	mov	r1, r3
 8001c26:	480d      	ldr	r0, [pc, #52]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001c28:	f005 fef2 	bl	8007a10 <HAL_TIM_PWM_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001c32:	f000 f905 	bl	8001e40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	220c      	movs	r2, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4807      	ldr	r0, [pc, #28]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001c3e:	f005 fee7 	bl	8007a10 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001c48:	f000 f8fa 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001c4c:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <MX_TIM4_Init+0x128>)
 8001c4e:	f002 fbfd 	bl	800444c <HAL_TIM_MspPostInit>

}
 8001c52:	bf00      	nop
 8001c54:	3738      	adds	r7, #56	@ 0x38
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000041c 	.word	0x2000041c
 8001c60:	40000800 	.word	0x40000800

08001c64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <MX_USART6_UART_Init+0x50>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	@ (8001cb0 <MX_USART6_UART_Init+0x4c>)
 8001c9c:	f006 fbfe 	bl	800849c <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ca6:	f000 f8cb 	bl	8001e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000464 	.word	0x20000464
 8001cb4:	40011400 	.word	0x40011400

08001cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cde:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a36      	ldr	r2, [pc, #216]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b2d      	ldr	r3, [pc, #180]	@ (8001dcc <MX_GPIO_Init+0x114>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2110      	movs	r1, #16
 8001d26:	482a      	ldr	r0, [pc, #168]	@ (8001dd0 <MX_GPIO_Init+0x118>)
 8001d28:	f003 fa6e 	bl	8005208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2180      	movs	r1, #128	@ 0x80
 8001d30:	4828      	ldr	r0, [pc, #160]	@ (8001dd4 <MX_GPIO_Init+0x11c>)
 8001d32:	f003 fa69 	bl	8005208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001d36:	2310      	movs	r3, #16
 8001d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4820      	ldr	r0, [pc, #128]	@ (8001dd0 <MX_GPIO_Init+0x118>)
 8001d4e:	f003 f8d7 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d52:	2302      	movs	r3, #2
 8001d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d56:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	481c      	ldr	r0, [pc, #112]	@ (8001dd8 <MX_GPIO_Init+0x120>)
 8001d68:	f003 f8ca 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4619      	mov	r1, r3
 8001d82:	4814      	ldr	r0, [pc, #80]	@ (8001dd4 <MX_GPIO_Init+0x11c>)
 8001d84:	f003 f8bc 	bl	8004f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <MX_GPIO_Init+0x118>)
 8001da0:	f003 f8ae 	bl	8004f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	2007      	movs	r0, #7
 8001daa:	f002 ffe0 	bl	8004d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001dae:	2007      	movs	r0, #7
 8001db0:	f002 fff9 	bl	8004da6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2028      	movs	r0, #40	@ 0x28
 8001dba:	f002 ffd8 	bl	8004d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dbe:	2028      	movs	r0, #40	@ 0x28
 8001dc0:	f002 fff1 	bl	8004da6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020400 	.word	0x40020400

08001ddc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a06      	ldr	r2, [pc, #24]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d102      	bne.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
	}
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000344 	.word	0x20000344
 8001e04:	200004ac 	.word	0x200004ac

08001e08 <_write>:
int _write(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	e009      	b.n	8001e2e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	60ba      	str	r2, [r7, #8]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f890 	bl	8000f48 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbf1      	blt.n	8001e1a <_write+0x12>
	}
	return len;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e44:	b672      	cpsid	i
}
 8001e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <Error_Handler+0x8>

08001e4c <Motor_Init>:
  * @brief  Initialize motor driver
  * @param  None
  * @retval None
  */
void Motor_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    // Start PWM generation on all TIM4 channels
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // PWMB1
 8001e50:	2100      	movs	r1, #0
 8001e52:	480d      	ldr	r0, [pc, #52]	@ (8001e88 <Motor_Init+0x3c>)
 8001e54:	f005 f9ee 	bl	8007234 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);  // PWMB2
 8001e58:	2104      	movs	r1, #4
 8001e5a:	480b      	ldr	r0, [pc, #44]	@ (8001e88 <Motor_Init+0x3c>)
 8001e5c:	f005 f9ea 	bl	8007234 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // PWMA1
 8001e60:	2108      	movs	r1, #8
 8001e62:	4809      	ldr	r0, [pc, #36]	@ (8001e88 <Motor_Init+0x3c>)
 8001e64:	f005 f9e6 	bl	8007234 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // PWMA2
 8001e68:	210c      	movs	r1, #12
 8001e6a:	4807      	ldr	r0, [pc, #28]	@ (8001e88 <Motor_Init+0x3c>)
 8001e6c:	f005 f9e2 	bl	8007234 <HAL_TIM_PWM_Start>
    
    // Initialize motors to stop state
    Motor_Stop();
 8001e70:	f000 f984 	bl	800217c <Motor_Stop>
    
    // Initialize current speeds
    current_speeds.left_speed = 0;
 8001e74:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <Motor_Init+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	801a      	strh	r2, [r3, #0]
    current_speeds.right_speed = 0;
 8001e7a:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <Motor_Init+0x40>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	805a      	strh	r2, [r3, #2]
    
    // Initialize encoder functionality
    Encoder_Init();
 8001e80:	f000 f806 	bl	8001e90 <Encoder_Init>
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000041c 	.word	0x2000041c
 8001e8c:	200004c8 	.word	0x200004c8

08001e90 <Encoder_Init>:
  * @brief  Initialize encoder functionality
  * @param  None
  * @retval None
  */
void Encoder_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
    // Start encoder timers
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);  // Left encoder (TIM2)
 8001e94:	213c      	movs	r1, #60	@ 0x3c
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <Encoder_Init+0x1c>)
 8001e98:	f005 fc3c 	bl	8007714 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);  // Right encoder (TIM3)
 8001e9c:	213c      	movs	r1, #60	@ 0x3c
 8001e9e:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <Encoder_Init+0x20>)
 8001ea0:	f005 fc38 	bl	8007714 <HAL_TIM_Encoder_Start>
    
    // Reset encoder data
    Encoder_Reset();
 8001ea4:	f000 f806 	bl	8001eb4 <Encoder_Reset>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000038c 	.word	0x2000038c
 8001eb0:	200003d4 	.word	0x200003d4

08001eb4 <Encoder_Reset>:
  * @brief  Reset encoder data
  * @param  None
  * @retval None
  */
void Encoder_Reset(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 32768);  // Set to middle value to handle negative counts
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <Encoder_Reset+0x50>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim3, 32768);
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <Encoder_Reset+0x54>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001eca:	625a      	str	r2, [r3, #36]	@ 0x24
    
    encoder_data.left_encoder = 0;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <Encoder_Reset+0x58>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
    encoder_data.right_encoder = 0;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <Encoder_Reset+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
    encoder_data.left_encoder_prev = 0;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <Encoder_Reset+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
    encoder_data.right_encoder_prev = 0;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <Encoder_Reset+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
    encoder_data.left_speed_rpm = 0.0f;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <Encoder_Reset+0x58>)
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
    encoder_data.right_speed_rpm = 0.0f;
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <Encoder_Reset+0x58>)
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
    
    last_encoder_update_time = HAL_GetTick();
 8001ef4:	f002 fe30 	bl	8004b58 <HAL_GetTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <Encoder_Reset+0x5c>)
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000038c 	.word	0x2000038c
 8001f08:	200003d4 	.word	0x200003d4
 8001f0c:	200004cc 	.word	0x200004cc
 8001f10:	200004e4 	.word	0x200004e4

08001f14 <Encoder_Update>:
  * @brief  Update encoder readings and calculate speeds
  * @param  None
  * @retval None
  */
void Encoder_Update(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001f1a:	f002 fe1d 	bl	8004b58 <HAL_GetTick>
 8001f1e:	6178      	str	r0, [r7, #20]
    
    // Update encoder counts
    int32_t left_raw = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 8001f20:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <Encoder_Update+0xe0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001f2a:	613b      	str	r3, [r7, #16]
    int32_t right_raw = (int32_t)__HAL_TIM_GET_COUNTER(&htim3) - 32768;
 8001f2c:	4b32      	ldr	r3, [pc, #200]	@ (8001ff8 <Encoder_Update+0xe4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001f36:	60fb      	str	r3, [r7, #12]
    
    encoder_data.left_encoder = left_raw;
 8001f38:	4a30      	ldr	r2, [pc, #192]	@ (8001ffc <Encoder_Update+0xe8>)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	6013      	str	r3, [r2, #0]
    encoder_data.right_encoder = right_raw;
 8001f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8001ffc <Encoder_Update+0xe8>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6053      	str	r3, [r2, #4]
    
    // Calculate speed if enough time has passed
    if (current_time - last_encoder_update_time >= SPEED_CALC_PERIOD_MS) {
 8001f44:	4b2e      	ldr	r3, [pc, #184]	@ (8002000 <Encoder_Update+0xec>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b63      	cmp	r3, #99	@ 0x63
 8001f4e:	d94c      	bls.n	8001fea <Encoder_Update+0xd6>
        float time_diff = (current_time - last_encoder_update_time) / 1000.0f; // Convert to seconds
 8001f50:	4b2b      	ldr	r3, [pc, #172]	@ (8002000 <Encoder_Update+0xec>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f60:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8002004 <Encoder_Update+0xf0>
 8001f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f68:	edc7 7a02 	vstr	s15, [r7, #8]
        
        // Calculate speed in counts per second, then convert to RPM
        int32_t left_diff = encoder_data.left_encoder - encoder_data.left_encoder_prev;
 8001f6c:	4b23      	ldr	r3, [pc, #140]	@ (8001ffc <Encoder_Update+0xe8>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <Encoder_Update+0xe8>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	607b      	str	r3, [r7, #4]
        int32_t right_diff = encoder_data.right_encoder - encoder_data.right_encoder_prev;
 8001f78:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <Encoder_Update+0xe8>)
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <Encoder_Update+0xe8>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	603b      	str	r3, [r7, #0]
        
        // Convert to encoder counts per second, then to RPM
        encoder_data.left_speed_rpm = (left_diff / time_diff) / (float)ENCODER_CPR * 60.0f;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f96:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002008 <Encoder_Update+0xf4>
 8001f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800200c <Encoder_Update+0xf8>
 8001fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <Encoder_Update+0xe8>)
 8001fa8:	edc3 7a04 	vstr	s15, [r3, #16]
        encoder_data.right_speed_rpm = (right_diff / time_diff) / (float)ENCODER_CPR * 60.0f;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fbe:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002008 <Encoder_Update+0xf4>
 8001fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800200c <Encoder_Update+0xf8>
 8001fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <Encoder_Update+0xe8>)
 8001fd0:	edc3 7a05 	vstr	s15, [r3, #20]
        
        // Update previous values
        encoder_data.left_encoder_prev = encoder_data.left_encoder;
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <Encoder_Update+0xe8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <Encoder_Update+0xe8>)
 8001fda:	6093      	str	r3, [r2, #8]
        encoder_data.right_encoder_prev = encoder_data.right_encoder;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	@ (8001ffc <Encoder_Update+0xe8>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <Encoder_Update+0xe8>)
 8001fe2:	60d3      	str	r3, [r2, #12]
        last_encoder_update_time = current_time;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	@ (8002000 <Encoder_Update+0xec>)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6013      	str	r3, [r2, #0]
    }
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000038c 	.word	0x2000038c
 8001ff8:	200003d4 	.word	0x200003d4
 8001ffc:	200004cc 	.word	0x200004cc
 8002000:	200004e4 	.word	0x200004e4
 8002004:	447a0000 	.word	0x447a0000
 8002008:	44800000 	.word	0x44800000
 800200c:	42700000 	.word	0x42700000

08002010 <Encoder_GetData>:
  * @brief  Get encoder data
  * @param  None
  * @retval Encoder data structure
  */
EncoderData_t Encoder_GetData(void)
{
 8002010:	b4b0      	push	{r4, r5, r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    return encoder_data;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <Encoder_GetData+0x28>)
 800201c:	461c      	mov	r4, r3
 800201e:	4615      	mov	r5, r2
 8002020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002024:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002028:	e884 0003 	stmia.w	r4, {r0, r1}
}
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bcb0      	pop	{r4, r5, r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	200004cc 	.word	0x200004cc

0800203c <Motor_SpeedToPWMDiff>:
  * @brief  Convert speed percentage to PWM value
  * @param  speed: Speed percentage (-100 to 100)
  * @retval PWM value (0 to PWM_PERIOD_VALUE)
  */
static uint32_t Motor_SpeedToPWMDiff(int16_t speed)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	80fb      	strh	r3, [r7, #6]
    // Get absolute value for PWM calculation
    int16_t abs_speed = (speed < 0) ? -speed : speed;
 8002046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204a:	2b00      	cmp	r3, #0
 800204c:	bfb8      	it	lt
 800204e:	425b      	neglt	r3, r3
 8002050:	b29b      	uxth	r3, r3
 8002052:	81fb      	strh	r3, [r7, #14]
    
    // Clamp speed to valid range
    //abs_speed = CLAMP(abs_speed, 0, MOTOR_MAX_SPEED);
    
    // Convert percentage (0-100) to PWM value (0-PWM_PERIOD_VALUE)
    uint32_t pwm_value = (uint32_t)((abs_speed * PWM_PERIOD_VALUE) / 100);
 8002054:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002058:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	4a06      	ldr	r2, [pc, #24]	@ (800207c <Motor_SpeedToPWMDiff+0x40>)
 8002062:	fb82 1203 	smull	r1, r2, r2, r3
 8002066:	1152      	asrs	r2, r2, #5
 8002068:	17db      	asrs	r3, r3, #31
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	60bb      	str	r3, [r7, #8]
    
    return pwm_value;
 800206e:	68bb      	ldr	r3, [r7, #8]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	51eb851f 	.word	0x51eb851f

08002080 <Motor_SetPWM>:
  * @param  motor: Motor selector (MOTOR_LEFT or MOTOR_RIGHT)
  * @param  speed: Speed percentage (-100 to 100, negative for backward)
  * @retval None
  */
static void Motor_SetPWM(MotorSelector_t motor, int16_t speed)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	460a      	mov	r2, r1
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	80bb      	strh	r3, [r7, #4]
    // Clamp speed to valid range
    //speed = CLAMP(speed, MOTOR_MIN_SPEED, MOTOR_MAX_SPEED);
    
    // Correct direction for right motor if physically reversed
    if (motor == MOTOR_RIGHT) {
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d103      	bne.n	800209e <Motor_SetPWM+0x1e>
        speed = -speed;
 8002096:	88bb      	ldrh	r3, [r7, #4]
 8002098:	425b      	negs	r3, r3
 800209a:	b29b      	uxth	r3, r3
 800209c:	80bb      	strh	r3, [r7, #4]
    }
    
    uint32_t pwm_value = Motor_SpeedToPWMDiff(speed);
 800209e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ffca 	bl	800203c <Motor_SpeedToPWMDiff>
 80020a8:	60f8      	str	r0, [r7, #12]
    uint32_t pwm_in1, pwm_in2;
    
    if (speed > 0) {
 80020aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	dd04      	ble.n	80020bc <Motor_SetPWM+0x3c>
        // Forward direction: IN1=PWM, IN2=0
        pwm_in1 = pwm_value;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	617b      	str	r3, [r7, #20]
        pwm_in2 = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	e00c      	b.n	80020d6 <Motor_SetPWM+0x56>
    } else if (speed < 0) {
 80020bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da04      	bge.n	80020ce <Motor_SetPWM+0x4e>
        // Backward direction: IN1=0, IN2=PWM
        pwm_in1 = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
        pwm_in2 = pwm_value;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e003      	b.n	80020d6 <Motor_SetPWM+0x56>
    } else {
        // Stop: IN1=0, IN2=0
        pwm_in1 = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
        pwm_in2 = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
    }
    
    // Set PWM values for specified motor
    if (motor == MOTOR_LEFT) {
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d108      	bne.n	80020ee <Motor_SetPWM+0x6e>
        // Left motor: PWMA1 (TIM4_CH3), PWMA2 (TIM4_CH4)
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_in1);
 80020dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <Motor_SetPWM+0x88>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_in2);
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <Motor_SetPWM+0x88>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40
    } else {
        // Right motor: PWMB1 (TIM4_CH1), PWMB2 (TIM4_CH2)
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_in1);
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_in2);
    }
}
 80020ec:	e007      	b.n	80020fe <Motor_SetPWM+0x7e>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_in1);
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <Motor_SetPWM+0x88>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_in2);
 80020f6:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <Motor_SetPWM+0x88>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000041c 	.word	0x2000041c

0800210c <Motor_SetSpeed>:
  * @param  motor: Motor selector (MOTOR_LEFT or MOTOR_RIGHT)
  * @param  speed: Speed percentage (-100 to 100, negative for backward)
  * @retval None
  */
void Motor_SetSpeed(MotorSelector_t motor, int16_t speed)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	460a      	mov	r2, r1
 8002116:	71fb      	strb	r3, [r7, #7]
 8002118:	4613      	mov	r3, r2
 800211a:	80bb      	strh	r3, [r7, #4]
    // Update current speeds
    if (motor == MOTOR_LEFT) {
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <Motor_SetSpeed+0x1e>
        current_speeds.left_speed = speed;
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <Motor_SetSpeed+0x3c>)
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	8013      	strh	r3, [r2, #0]
 8002128:	e002      	b.n	8002130 <Motor_SetSpeed+0x24>
    } else {
        current_speeds.right_speed = speed;
 800212a:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <Motor_SetSpeed+0x3c>)
 800212c:	88bb      	ldrh	r3, [r7, #4]
 800212e:	8053      	strh	r3, [r2, #2]
    }
    
    // Set PWM values
    Motor_SetPWM(motor, speed);
 8002130:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ffa1 	bl	8002080 <Motor_SetPWM>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200004c8 	.word	0x200004c8

0800214c <Motor_SetSpeeds>:
  * @param  left_speed: Left motor speed (-100 to 100)
  * @param  right_speed: Right motor speed (-100 to 100)
  * @retval None
  */
void Motor_SetSpeeds(int16_t left_speed, int16_t right_speed)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	460a      	mov	r2, r1
 8002156:	80fb      	strh	r3, [r7, #6]
 8002158:	4613      	mov	r3, r2
 800215a:	80bb      	strh	r3, [r7, #4]
    Motor_SetSpeed(MOTOR_LEFT, left_speed);
 800215c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002160:	4619      	mov	r1, r3
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff ffd2 	bl	800210c <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_RIGHT, right_speed);
 8002168:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800216c:	4619      	mov	r1, r3
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff ffcc 	bl	800210c <Motor_SetSpeed>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <Motor_Stop>:
  * @brief  Stop both motors
  * @param  None
  * @retval None
  */
void Motor_Stop(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
    Motor_SetSpeeds(0, 0);
 8002180:	2100      	movs	r1, #0
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff ffe2 	bl	800214c <Motor_SetSpeeds>
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <MPU6500_TestConnection>:
  * @brief  Test MPU6500 connection by reading WHO_AM_I register
  * @param  None
  * @retval 1 if connected (WHO_AM_I = 0x70), 0 if not connected
  */
uint8_t MPU6500_TestConnection(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
    uint8_t who_am_i;
    MPU6500_ReadReg(MPU6500_RA_WHO_AM_I, &who_am_i, 1);
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	2201      	movs	r2, #1
 8002196:	4619      	mov	r1, r3
 8002198:	2075      	movs	r0, #117	@ 0x75
 800219a:	f000 fc65 	bl	8002a68 <MPU6500_ReadReg>
    return (who_am_i == 0x70) ? 1 : 0;  // MPU6500 WHO_AM_I should be 0x70
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2b70      	cmp	r3, #112	@ 0x70
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <DMP_Init_SPI>:
  * @retval None
  * @note   This function initializes the DMP without loading firmware.
  *         For full DMP functionality, you would need to load the DMP firmware.
  */
void DMP_Init_SPI(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
    uint8_t temp;
    
    // Test connection first
    if (!MPU6500_TestConnection()) {
 80021ba:	f7ff ffe7 	bl	800218c <MPU6500_TestConnection>
        //return; // MPU6500 not found
    }
    
    // Reset device
    MPU6500_WriteReg(MPU6500_RA_PWR_MGMT_1, 0x80);
 80021be:	2180      	movs	r1, #128	@ 0x80
 80021c0:	206b      	movs	r0, #107	@ 0x6b
 80021c2:	f000 fc2b 	bl	8002a1c <MPU6500_WriteReg>
    HAL_Delay(100);
 80021c6:	2064      	movs	r0, #100	@ 0x64
 80021c8:	f002 fcd2 	bl	8004b70 <HAL_Delay>
    
    // Wake up device and set clock source to PLL with Y Gyro reference
    MPU6500_WriteReg(MPU6500_RA_PWR_MGMT_1, 0x02);
 80021cc:	2102      	movs	r1, #2
 80021ce:	206b      	movs	r0, #107	@ 0x6b
 80021d0:	f000 fc24 	bl	8002a1c <MPU6500_WriteReg>
    HAL_Delay(10);
 80021d4:	200a      	movs	r0, #10
 80021d6:	f002 fccb 	bl	8004b70 <HAL_Delay>
    
    // Set gyroscope full scale range to ±2000°/s
    MPU6500_WriteReg(MPU6500_RA_GYRO_CONFIG, 0x18);
 80021da:	2118      	movs	r1, #24
 80021dc:	201b      	movs	r0, #27
 80021de:	f000 fc1d 	bl	8002a1c <MPU6500_WriteReg>
    
    // Set accelerometer full scale range to ±2g
    MPU6500_WriteReg(MPU6500_RA_ACCEL_CONFIG, 0x00);
 80021e2:	2100      	movs	r1, #0
 80021e4:	201c      	movs	r0, #28
 80021e6:	f000 fc19 	bl	8002a1c <MPU6500_WriteReg>
    
    // Disable all interrupts initially
    MPU6500_WriteReg(MPU6500_RA_INT_ENABLE, 0x00);
 80021ea:	2100      	movs	r1, #0
 80021ec:	2038      	movs	r0, #56	@ 0x38
 80021ee:	f000 fc15 	bl	8002a1c <MPU6500_WriteReg>
    HAL_Delay(5);
 80021f2:	2005      	movs	r0, #5
 80021f4:	f002 fcbc 	bl	8004b70 <HAL_Delay>
    
    // Reset FIFO and DMP
    MPU6500_ReadReg(MPU6500_RA_USER_CTRL, &temp, 1);
 80021f8:	1dfb      	adds	r3, r7, #7
 80021fa:	2201      	movs	r2, #1
 80021fc:	4619      	mov	r1, r3
 80021fe:	206a      	movs	r0, #106	@ 0x6a
 8002200:	f000 fc32 	bl	8002a68 <MPU6500_ReadReg>
    temp |= (BIT_FIFO_RST | BIT_DMP_RST);
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f043 030c 	orr.w	r3, r3, #12
 800220a:	b2db      	uxtb	r3, r3
 800220c:	71fb      	strb	r3, [r7, #7]
    MPU6500_WriteReg(MPU6500_RA_USER_CTRL, temp);
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	4619      	mov	r1, r3
 8002212:	206a      	movs	r0, #106	@ 0x6a
 8002214:	f000 fc02 	bl	8002a1c <MPU6500_WriteReg>
    HAL_Delay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f002 fca9 	bl	8004b70 <HAL_Delay>
    
    // Clear any existing interrupts
    MPU6500_ReadReg(MPU6500_RA_INT_STATUS, &temp, 1);
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	2201      	movs	r2, #1
 8002222:	4619      	mov	r1, r3
 8002224:	203a      	movs	r0, #58	@ 0x3a
 8002226:	f000 fc1f 	bl	8002a68 <MPU6500_ReadReg>
    
    // Configure USER_CTRL for DMP without enabling interrupts
    // Enable DMP but disable FIFO for now to prevent overflow
    MPU6500_WriteReg(MPU6500_RA_USER_CTRL, BIT_DMP_EN);
 800222a:	2180      	movs	r1, #128	@ 0x80
 800222c:	206a      	movs	r0, #106	@ 0x6a
 800222e:	f000 fbf5 	bl	8002a1c <MPU6500_WriteReg>
    HAL_Delay(10);
 8002232:	200a      	movs	r0, #10
 8002234:	f002 fc9c 	bl	8004b70 <HAL_Delay>
    
    // Clear interrupt status again after DMP enable
    MPU6500_ReadReg(MPU6500_RA_INT_STATUS, &temp, 1);
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	2201      	movs	r2, #1
 800223c:	4619      	mov	r1, r3
 800223e:	203a      	movs	r0, #58	@ 0x3a
 8002240:	f000 fc12 	bl	8002a68 <MPU6500_ReadReg>
    // 2. Configure DMP features
    // 3. Set up FIFO
    // This is a basic initialization that prepares the sensor
    
    // Initialize quaternion
    q0_dmp = 1.0f;
 8002244:	4b09      	ldr	r3, [pc, #36]	@ (800226c <DMP_Init_SPI+0xb8>)
 8002246:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800224a:	601a      	str	r2, [r3, #0]
    q1_dmp = 0.0f;
 800224c:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <DMP_Init_SPI+0xbc>)
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
    q2_dmp = 0.0f;
 8002254:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <DMP_Init_SPI+0xc0>)
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
    q3_dmp = 0.0f;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <DMP_Init_SPI+0xc4>)
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000000c 	.word	0x2000000c
 8002270:	20000578 	.word	0x20000578
 8002274:	2000057c 	.word	0x2000057c
 8002278:	20000580 	.word	0x20000580
 800227c:	00000000 	.word	0x00000000

08002280 <Read_DMP_SPI>:
  * @retval None
  * @note   This function reads FIFO data and extracts quaternion if available.
  *         For full functionality, DMP firmware must be loaded first.
  */
void Read_DMP_SPI(void)
{
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	b08e      	sub	sp, #56	@ 0x38
 8002284:	af00      	add	r7, sp, #0
    uint8_t int_status;
    uint8_t fifo_buffer[28]; // DMP packet size is typically 28 bytes
    long quat[4];
    
    // Read interrupt status
    MPU6500_ReadReg(MPU6500_RA_INT_STATUS, &int_status, 1);
 8002286:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800228a:	2201      	movs	r2, #1
 800228c:	4619      	mov	r1, r3
 800228e:	203a      	movs	r0, #58	@ 0x3a
 8002290:	f000 fbea 	bl	8002a68 <MPU6500_ReadReg>
    
    // Read FIFO count
    MPU6500_ReadReg(MPU6500_RA_FIFO_COUNTH, fifo_count_reg, 2);
 8002294:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002298:	2202      	movs	r2, #2
 800229a:	4619      	mov	r1, r3
 800229c:	2072      	movs	r0, #114	@ 0x72
 800229e:	f000 fbe3 	bl	8002a68 <MPU6500_ReadReg>
    fifo_count = (fifo_count_reg[0] << 8) | fifo_count_reg[1];
 80022a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	b21a      	sxth	r2, r3
 80022aa:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80022ae:	b21b      	sxth	r3, r3
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    
    // Check for FIFO overflow
    if (int_status & 0x10) {  // FIFO_OFLOW_INT bit
 80022b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d01d      	beq.n	80022fe <Read_DMP_SPI+0x7e>
        // FIFO overflow - need to reset FIFO
        uint8_t user_ctrl;
        MPU6500_ReadReg(MPU6500_RA_USER_CTRL, &user_ctrl, 1);
 80022c2:	1cfb      	adds	r3, r7, #3
 80022c4:	2201      	movs	r2, #1
 80022c6:	4619      	mov	r1, r3
 80022c8:	206a      	movs	r0, #106	@ 0x6a
 80022ca:	f000 fbcd 	bl	8002a68 <MPU6500_ReadReg>
        user_ctrl |= BIT_FIFO_RST;  // Set FIFO reset bit
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	70fb      	strb	r3, [r7, #3]
        MPU6500_WriteReg(MPU6500_RA_USER_CTRL, user_ctrl);
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	4619      	mov	r1, r3
 80022dc:	206a      	movs	r0, #106	@ 0x6a
 80022de:	f000 fb9d 	bl	8002a1c <MPU6500_WriteReg>
        HAL_Delay(1);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f002 fc44 	bl	8004b70 <HAL_Delay>
        
        // Clear the overflow bit by reading INT_STATUS again
        MPU6500_ReadReg(MPU6500_RA_INT_STATUS, &int_status, 1);
 80022e8:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 80022ec:	2201      	movs	r2, #1
 80022ee:	4619      	mov	r1, r3
 80022f0:	203a      	movs	r0, #58	@ 0x3a
 80022f2:	f000 fbb9 	bl	8002a68 <MPU6500_ReadReg>
        
        // Reset DMP variables to fallback mode
        sensors = 0;
 80022f6:	4bc0      	ldr	r3, [pc, #768]	@ (80025f8 <Read_DMP_SPI+0x378>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	e256      	b.n	80027ac <Read_DMP_SPI+0x52c>
        return;
    }
    
    // Check if DMP interrupt is set
    if (int_status != 0x00) {  // DMP_INT bit
 80022fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <Read_DMP_SPI+0x8e>
        MPU6500_WriteReg(MPU6500_RA_INT_ENABLE, 0x00);
 8002306:	2100      	movs	r1, #0
 8002308:	2038      	movs	r0, #56	@ 0x38
 800230a:	f000 fb87 	bl	8002a1c <MPU6500_WriteReg>
        // Clear DMP interrupt by reading INT_STATUS (already done above)
        // Continue processing DMP data
    }
    
    // Check if we have a complete DMP packet (28 bytes)
    if (fifo_count >= 28) {
 800230e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8002310:	2b1b      	cmp	r3, #27
 8002312:	f240 8189 	bls.w	8002628 <Read_DMP_SPI+0x3a8>
        // Read FIFO data
        MPU6500_ReadReg(MPU6500_RA_FIFO_R_W, fifo_buffer, 28);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	221c      	movs	r2, #28
 800231c:	4619      	mov	r1, r3
 800231e:	2074      	movs	r0, #116	@ 0x74
 8002320:	f000 fba2 	bl	8002a68 <MPU6500_ReadReg>
        
        // Extract quaternion data from FIFO buffer
        // DMP quaternion data typically starts at offset 0 in the packet
        // Format: 32-bit signed integers in big-endian format
        quat[0] = ((long)fifo_buffer[0] << 24) | ((long)fifo_buffer[1] << 16) | 
 8002324:	7d3b      	ldrb	r3, [r7, #20]
 8002326:	061a      	lsls	r2, r3, #24
 8002328:	7d7b      	ldrb	r3, [r7, #21]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
                  ((long)fifo_buffer[2] << 8) | fifo_buffer[3];
 800232e:	7dbb      	ldrb	r3, [r7, #22]
 8002330:	021b      	lsls	r3, r3, #8
        quat[0] = ((long)fifo_buffer[0] << 24) | ((long)fifo_buffer[1] << 16) | 
 8002332:	4313      	orrs	r3, r2
                  ((long)fifo_buffer[2] << 8) | fifo_buffer[3];
 8002334:	7dfa      	ldrb	r2, [r7, #23]
 8002336:	4313      	orrs	r3, r2
        quat[0] = ((long)fifo_buffer[0] << 24) | ((long)fifo_buffer[1] << 16) | 
 8002338:	607b      	str	r3, [r7, #4]
        quat[1] = ((long)fifo_buffer[4] << 24) | ((long)fifo_buffer[5] << 16) | 
 800233a:	7e3b      	ldrb	r3, [r7, #24]
 800233c:	061a      	lsls	r2, r3, #24
 800233e:	7e7b      	ldrb	r3, [r7, #25]
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	431a      	orrs	r2, r3
                  ((long)fifo_buffer[6] << 8) | fifo_buffer[7];
 8002344:	7ebb      	ldrb	r3, [r7, #26]
 8002346:	021b      	lsls	r3, r3, #8
        quat[1] = ((long)fifo_buffer[4] << 24) | ((long)fifo_buffer[5] << 16) | 
 8002348:	4313      	orrs	r3, r2
                  ((long)fifo_buffer[6] << 8) | fifo_buffer[7];
 800234a:	7efa      	ldrb	r2, [r7, #27]
 800234c:	4313      	orrs	r3, r2
        quat[1] = ((long)fifo_buffer[4] << 24) | ((long)fifo_buffer[5] << 16) | 
 800234e:	60bb      	str	r3, [r7, #8]
        quat[2] = ((long)fifo_buffer[8] << 24) | ((long)fifo_buffer[9] << 16) | 
 8002350:	7f3b      	ldrb	r3, [r7, #28]
 8002352:	061a      	lsls	r2, r3, #24
 8002354:	7f7b      	ldrb	r3, [r7, #29]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	431a      	orrs	r2, r3
                  ((long)fifo_buffer[10] << 8) | fifo_buffer[11];
 800235a:	7fbb      	ldrb	r3, [r7, #30]
 800235c:	021b      	lsls	r3, r3, #8
        quat[2] = ((long)fifo_buffer[8] << 24) | ((long)fifo_buffer[9] << 16) | 
 800235e:	4313      	orrs	r3, r2
                  ((long)fifo_buffer[10] << 8) | fifo_buffer[11];
 8002360:	7ffa      	ldrb	r2, [r7, #31]
 8002362:	4313      	orrs	r3, r2
        quat[2] = ((long)fifo_buffer[8] << 24) | ((long)fifo_buffer[9] << 16) | 
 8002364:	60fb      	str	r3, [r7, #12]
        quat[3] = ((long)fifo_buffer[12] << 24) | ((long)fifo_buffer[13] << 16) | 
 8002366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800236a:	061a      	lsls	r2, r3, #24
 800236c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
                  ((long)fifo_buffer[14] << 8) | fifo_buffer[15];
 8002374:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002378:	021b      	lsls	r3, r3, #8
        quat[3] = ((long)fifo_buffer[12] << 24) | ((long)fifo_buffer[13] << 16) | 
 800237a:	4313      	orrs	r3, r2
                  ((long)fifo_buffer[14] << 8) | fifo_buffer[15];
 800237c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002380:	4313      	orrs	r3, r2
        quat[3] = ((long)fifo_buffer[12] << 24) | ((long)fifo_buffer[13] << 16) | 
 8002382:	613b      	str	r3, [r7, #16]
        
        // Convert to float quaternion (same as MPU6050)
        q0_dmp = quat[0] / q30;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238e:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 80025fc <Read_DMP_SPI+0x37c>
 8002392:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002396:	4b9a      	ldr	r3, [pc, #616]	@ (8002600 <Read_DMP_SPI+0x380>)
 8002398:	edc3 7a00 	vstr	s15, [r3]
        q1_dmp = quat[1] / q30;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a6:	eddf 6a95 	vldr	s13, [pc, #596]	@ 80025fc <Read_DMP_SPI+0x37c>
 80023aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023ae:	4b95      	ldr	r3, [pc, #596]	@ (8002604 <Read_DMP_SPI+0x384>)
 80023b0:	edc3 7a00 	vstr	s15, [r3]
        q2_dmp = quat[2] / q30;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023be:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 80025fc <Read_DMP_SPI+0x37c>
 80023c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023c6:	4b90      	ldr	r3, [pc, #576]	@ (8002608 <Read_DMP_SPI+0x388>)
 80023c8:	edc3 7a00 	vstr	s15, [r3]
        q3_dmp = quat[3] / q30;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d6:	eddf 6a89 	vldr	s13, [pc, #548]	@ 80025fc <Read_DMP_SPI+0x37c>
 80023da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023de:	4b8b      	ldr	r3, [pc, #556]	@ (800260c <Read_DMP_SPI+0x38c>)
 80023e0:	edc3 7a00 	vstr	s15, [r3]
        
        // Calculate Euler angles from quaternion (same as MPU6050)
        Roll_dmp = asin(-2 * q1_dmp * q3_dmp + 2 * q0_dmp * q2_dmp) * 57.3f;
 80023e4:	4b87      	ldr	r3, [pc, #540]	@ (8002604 <Read_DMP_SPI+0x384>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80023ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023f2:	4b86      	ldr	r3, [pc, #536]	@ (800260c <Read_DMP_SPI+0x38c>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fc:	4b80      	ldr	r3, [pc, #512]	@ (8002600 <Read_DMP_SPI+0x380>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002406:	4b80      	ldr	r3, [pc, #512]	@ (8002608 <Read_DMP_SPI+0x388>)
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002414:	ee17 0a90 	vmov	r0, s15
 8002418:	f7fe f89e 	bl	8000558 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	ec43 2b10 	vmov	d0, r2, r3
 8002424:	f009 fed8 	bl	800c1d8 <asin>
 8002428:	ec51 0b10 	vmov	r0, r1, d0
 800242c:	a370      	add	r3, pc, #448	@ (adr r3, 80025f0 <Read_DMP_SPI+0x370>)
 800242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002432:	f7fe f8e9 	bl	8000608 <__aeabi_dmul>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fbbb 	bl	8000bb8 <__aeabi_d2f>
 8002442:	4603      	mov	r3, r0
 8002444:	4a72      	ldr	r2, [pc, #456]	@ (8002610 <Read_DMP_SPI+0x390>)
 8002446:	6013      	str	r3, [r2, #0]
        Pitch_dmp = atan2(2 * q2_dmp * q3_dmp + 2 * q0_dmp * q1_dmp, 
 8002448:	4b6f      	ldr	r3, [pc, #444]	@ (8002608 <Read_DMP_SPI+0x388>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002452:	4b6e      	ldr	r3, [pc, #440]	@ (800260c <Read_DMP_SPI+0x38c>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245c:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <Read_DMP_SPI+0x380>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002466:	4b67      	ldr	r3, [pc, #412]	@ (8002604 <Read_DMP_SPI+0x384>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f86e 	bl	8000558 <__aeabi_f2d>
 800247c:	4604      	mov	r4, r0
 800247e:	460d      	mov	r5, r1
                         -2 * q1_dmp * q1_dmp - 2 * q2_dmp * q2_dmp + 1) * 57.3f;
 8002480:	4b60      	ldr	r3, [pc, #384]	@ (8002604 <Read_DMP_SPI+0x384>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800248a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800248e:	4b5d      	ldr	r3, [pc, #372]	@ (8002604 <Read_DMP_SPI+0x384>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002498:	4b5b      	ldr	r3, [pc, #364]	@ (8002608 <Read_DMP_SPI+0x388>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80024a2:	4b59      	ldr	r3, [pc, #356]	@ (8002608 <Read_DMP_SPI+0x388>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024b4:	ee77 7a87 	vadd.f32	s15, s15, s14
        Pitch_dmp = atan2(2 * q2_dmp * q3_dmp + 2 * q0_dmp * q1_dmp, 
 80024b8:	ee17 0a90 	vmov	r0, s15
 80024bc:	f7fe f84c 	bl	8000558 <__aeabi_f2d>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	ec43 2b11 	vmov	d1, r2, r3
 80024c8:	ec45 4b10 	vmov	d0, r4, r5
 80024cc:	f009 feb8 	bl	800c240 <atan2>
 80024d0:	ec51 0b10 	vmov	r0, r1, d0
                         -2 * q1_dmp * q1_dmp - 2 * q2_dmp * q2_dmp + 1) * 57.3f;
 80024d4:	a346      	add	r3, pc, #280	@ (adr r3, 80025f0 <Read_DMP_SPI+0x370>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f895 	bl	8000608 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe fb67 	bl	8000bb8 <__aeabi_d2f>
 80024ea:	4603      	mov	r3, r0
        Pitch_dmp = atan2(2 * q2_dmp * q3_dmp + 2 * q0_dmp * q1_dmp, 
 80024ec:	4a49      	ldr	r2, [pc, #292]	@ (8002614 <Read_DMP_SPI+0x394>)
 80024ee:	6013      	str	r3, [r2, #0]
        Yaw_dmp = atan2(2 * (q1_dmp * q2_dmp + q0_dmp * q3_dmp), 
 80024f0:	4b44      	ldr	r3, [pc, #272]	@ (8002604 <Read_DMP_SPI+0x384>)
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	4b44      	ldr	r3, [pc, #272]	@ (8002608 <Read_DMP_SPI+0x388>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002500:	4b3f      	ldr	r3, [pc, #252]	@ (8002600 <Read_DMP_SPI+0x380>)
 8002502:	edd3 6a00 	vldr	s13, [r3]
 8002506:	4b41      	ldr	r3, [pc, #260]	@ (800260c <Read_DMP_SPI+0x38c>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002518:	ee17 0a90 	vmov	r0, s15
 800251c:	f7fe f81c 	bl	8000558 <__aeabi_f2d>
 8002520:	4604      	mov	r4, r0
 8002522:	460d      	mov	r5, r1
                       q0_dmp * q0_dmp + q1_dmp * q1_dmp - q2_dmp * q2_dmp - q3_dmp * q3_dmp) * 57.3f;
 8002524:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <Read_DMP_SPI+0x380>)
 8002526:	ed93 7a00 	vldr	s14, [r3]
 800252a:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <Read_DMP_SPI+0x380>)
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	4b33      	ldr	r3, [pc, #204]	@ (8002604 <Read_DMP_SPI+0x384>)
 8002536:	edd3 6a00 	vldr	s13, [r3]
 800253a:	4b32      	ldr	r3, [pc, #200]	@ (8002604 <Read_DMP_SPI+0x384>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002548:	4b2f      	ldr	r3, [pc, #188]	@ (8002608 <Read_DMP_SPI+0x388>)
 800254a:	edd3 6a00 	vldr	s13, [r3]
 800254e:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <Read_DMP_SPI+0x388>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002558:	ee37 7a67 	vsub.f32	s14, s14, s15
 800255c:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <Read_DMP_SPI+0x38c>)
 800255e:	edd3 6a00 	vldr	s13, [r3]
 8002562:	4b2a      	ldr	r3, [pc, #168]	@ (800260c <Read_DMP_SPI+0x38c>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
        Yaw_dmp = atan2(2 * (q1_dmp * q2_dmp + q0_dmp * q3_dmp), 
 8002570:	ee17 0a90 	vmov	r0, s15
 8002574:	f7fd fff0 	bl	8000558 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	ec43 2b11 	vmov	d1, r2, r3
 8002580:	ec45 4b10 	vmov	d0, r4, r5
 8002584:	f009 fe5c 	bl	800c240 <atan2>
 8002588:	ec51 0b10 	vmov	r0, r1, d0
                       q0_dmp * q0_dmp + q1_dmp * q1_dmp - q2_dmp * q2_dmp - q3_dmp * q3_dmp) * 57.3f;
 800258c:	a318      	add	r3, pc, #96	@ (adr r3, 80025f0 <Read_DMP_SPI+0x370>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f7fe f839 	bl	8000608 <__aeabi_dmul>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	f7fe fb0b 	bl	8000bb8 <__aeabi_d2f>
 80025a2:	4603      	mov	r3, r0
        Yaw_dmp = atan2(2 * (q1_dmp * q2_dmp + q0_dmp * q3_dmp), 
 80025a4:	4a1c      	ldr	r2, [pc, #112]	@ (8002618 <Read_DMP_SPI+0x398>)
 80025a6:	6013      	str	r3, [r2, #0]
        
        // Extract gyro and accel data from FIFO if available
        // This depends on the DMP configuration and packet format
        // For now, use the regular sensor readings
        gyro_dmp[0] = mpu_data.gx;
 80025a8:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <Read_DMP_SPI+0x39c>)
 80025aa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80025ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <Read_DMP_SPI+0x3a0>)
 80025b0:	801a      	strh	r2, [r3, #0]
        gyro_dmp[1] = mpu_data.gy;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <Read_DMP_SPI+0x39c>)
 80025b4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <Read_DMP_SPI+0x3a0>)
 80025ba:	805a      	strh	r2, [r3, #2]
        gyro_dmp[2] = mpu_data.gz;
 80025bc:	4b17      	ldr	r3, [pc, #92]	@ (800261c <Read_DMP_SPI+0x39c>)
 80025be:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <Read_DMP_SPI+0x3a0>)
 80025c4:	809a      	strh	r2, [r3, #4]
        
        accel_dmp[0] = mpu_data.ax;
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <Read_DMP_SPI+0x39c>)
 80025c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025cc:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <Read_DMP_SPI+0x3a4>)
 80025ce:	801a      	strh	r2, [r3, #0]
        accel_dmp[1] = mpu_data.ay;
 80025d0:	4b12      	ldr	r3, [pc, #72]	@ (800261c <Read_DMP_SPI+0x39c>)
 80025d2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80025d6:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <Read_DMP_SPI+0x3a4>)
 80025d8:	805a      	strh	r2, [r3, #2]
        accel_dmp[2] = mpu_data.az;
 80025da:	4b10      	ldr	r3, [pc, #64]	@ (800261c <Read_DMP_SPI+0x39c>)
 80025dc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <Read_DMP_SPI+0x3a4>)
 80025e2:	809a      	strh	r2, [r3, #4]
        
        sensors = INV_WXYZ_QUAT; // Indicate that quaternion data is available
 80025e4:	4b04      	ldr	r3, [pc, #16]	@ (80025f8 <Read_DMP_SPI+0x378>)
 80025e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	e0d2      	b.n	8002794 <Read_DMP_SPI+0x514>
 80025ee:	bf00      	nop
 80025f0:	60000000 	.word	0x60000000
 80025f4:	404ca666 	.word	0x404ca666
 80025f8:	2000056a 	.word	0x2000056a
 80025fc:	4e800000 	.word	0x4e800000
 8002600:	2000000c 	.word	0x2000000c
 8002604:	20000578 	.word	0x20000578
 8002608:	2000057c 	.word	0x2000057c
 800260c:	20000580 	.word	0x20000580
 8002610:	2000056c 	.word	0x2000056c
 8002614:	20000570 	.word	0x20000570
 8002618:	20000574 	.word	0x20000574
 800261c:	200004e8 	.word	0x200004e8
 8002620:	2000055c 	.word	0x2000055c
 8002624:	20000564 	.word	0x20000564
    }
    else {
        // If no DMP data available, fall back to regular sensor reading
        MPU6500_ReadReg(59, mpu_buffer, sizeof(mpu_buffer));
 8002628:	220e      	movs	r2, #14
 800262a:	4962      	ldr	r1, [pc, #392]	@ (80027b4 <Read_DMP_SPI+0x534>)
 800262c:	203b      	movs	r0, #59	@ 0x3b
 800262e:	f000 fa1b 	bl	8002a68 <MPU6500_ReadReg>
        MPU6500_ReadData();
 8002632:	f000 fa47 	bl	8002ac4 <MPU6500_ReadData>
        
        // Use the existing quaternion calculation as fallback
        q0_dmp = imu_data.q0;
 8002636:	4b60      	ldr	r3, [pc, #384]	@ (80027b8 <Read_DMP_SPI+0x538>)
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	4a60      	ldr	r2, [pc, #384]	@ (80027bc <Read_DMP_SPI+0x53c>)
 800263c:	6013      	str	r3, [r2, #0]
        q1_dmp = imu_data.q1;
 800263e:	4b5e      	ldr	r3, [pc, #376]	@ (80027b8 <Read_DMP_SPI+0x538>)
 8002640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002642:	4a5f      	ldr	r2, [pc, #380]	@ (80027c0 <Read_DMP_SPI+0x540>)
 8002644:	6013      	str	r3, [r2, #0]
        q2_dmp = imu_data.q2;
 8002646:	4b5c      	ldr	r3, [pc, #368]	@ (80027b8 <Read_DMP_SPI+0x538>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a5e      	ldr	r2, [pc, #376]	@ (80027c4 <Read_DMP_SPI+0x544>)
 800264c:	6013      	str	r3, [r2, #0]
        q3_dmp = imu_data.q3;
 800264e:	4b5a      	ldr	r3, [pc, #360]	@ (80027b8 <Read_DMP_SPI+0x538>)
 8002650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002652:	4a5d      	ldr	r2, [pc, #372]	@ (80027c8 <Read_DMP_SPI+0x548>)
 8002654:	6013      	str	r3, [r2, #0]
        
        // Use the calculated Euler angles and ensure proper range
        Roll_dmp = imu_data.rol * 124.13f;
 8002656:	4b58      	ldr	r3, [pc, #352]	@ (80027b8 <Read_DMP_SPI+0x538>)
 8002658:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800265c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80027cc <Read_DMP_SPI+0x54c>
 8002660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002664:	4b5a      	ldr	r3, [pc, #360]	@ (80027d0 <Read_DMP_SPI+0x550>)
 8002666:	edc3 7a00 	vstr	s15, [r3]
        Pitch_dmp = imu_data.pit * 124.13f;
 800266a:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <Read_DMP_SPI+0x538>)
 800266c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002670:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80027cc <Read_DMP_SPI+0x54c>
 8002674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002678:	4b56      	ldr	r3, [pc, #344]	@ (80027d4 <Read_DMP_SPI+0x554>)
 800267a:	edc3 7a00 	vstr	s15, [r3]
        Yaw_dmp = imu_data.yaw * 124.13f;
 800267e:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <Read_DMP_SPI+0x538>)
 8002680:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002684:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80027cc <Read_DMP_SPI+0x54c>
 8002688:	ee67 7a87 	vmul.f32	s15, s15, s14
 800268c:	4b52      	ldr	r3, [pc, #328]	@ (80027d8 <Read_DMP_SPI+0x558>)
 800268e:	edc3 7a00 	vstr	s15, [r3]
        
        // Ensure angles are in proper range (-180 to 180 degrees)
        while (Roll_dmp > 180.0f) Roll_dmp -= 360.0f;
 8002692:	e009      	b.n	80026a8 <Read_DMP_SPI+0x428>
 8002694:	4b4e      	ldr	r3, [pc, #312]	@ (80027d0 <Read_DMP_SPI+0x550>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80027dc <Read_DMP_SPI+0x55c>
 800269e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026a2:	4b4b      	ldr	r3, [pc, #300]	@ (80027d0 <Read_DMP_SPI+0x550>)
 80026a4:	edc3 7a00 	vstr	s15, [r3]
 80026a8:	4b49      	ldr	r3, [pc, #292]	@ (80027d0 <Read_DMP_SPI+0x550>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80027e0 <Read_DMP_SPI+0x560>
 80026b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	dceb      	bgt.n	8002694 <Read_DMP_SPI+0x414>
        while (Roll_dmp < -180.0f) Roll_dmp += 360.0f;
 80026bc:	e009      	b.n	80026d2 <Read_DMP_SPI+0x452>
 80026be:	4b44      	ldr	r3, [pc, #272]	@ (80027d0 <Read_DMP_SPI+0x550>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80027dc <Read_DMP_SPI+0x55c>
 80026c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026cc:	4b40      	ldr	r3, [pc, #256]	@ (80027d0 <Read_DMP_SPI+0x550>)
 80026ce:	edc3 7a00 	vstr	s15, [r3]
 80026d2:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <Read_DMP_SPI+0x550>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80027e4 <Read_DMP_SPI+0x564>
 80026dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e4:	d4eb      	bmi.n	80026be <Read_DMP_SPI+0x43e>
        while (Pitch_dmp > 180.0f) Pitch_dmp -= 360.0f;
 80026e6:	e009      	b.n	80026fc <Read_DMP_SPI+0x47c>
 80026e8:	4b3a      	ldr	r3, [pc, #232]	@ (80027d4 <Read_DMP_SPI+0x554>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80027dc <Read_DMP_SPI+0x55c>
 80026f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026f6:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <Read_DMP_SPI+0x554>)
 80026f8:	edc3 7a00 	vstr	s15, [r3]
 80026fc:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <Read_DMP_SPI+0x554>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80027e0 <Read_DMP_SPI+0x560>
 8002706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	dceb      	bgt.n	80026e8 <Read_DMP_SPI+0x468>
        while (Pitch_dmp < -180.0f) Pitch_dmp += 360.0f;
 8002710:	e009      	b.n	8002726 <Read_DMP_SPI+0x4a6>
 8002712:	4b30      	ldr	r3, [pc, #192]	@ (80027d4 <Read_DMP_SPI+0x554>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80027dc <Read_DMP_SPI+0x55c>
 800271c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002720:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <Read_DMP_SPI+0x554>)
 8002722:	edc3 7a00 	vstr	s15, [r3]
 8002726:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <Read_DMP_SPI+0x554>)
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80027e4 <Read_DMP_SPI+0x564>
 8002730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002738:	d4eb      	bmi.n	8002712 <Read_DMP_SPI+0x492>
        while (Yaw_dmp > 180.0f) Yaw_dmp -= 360.0f;
 800273a:	e009      	b.n	8002750 <Read_DMP_SPI+0x4d0>
 800273c:	4b26      	ldr	r3, [pc, #152]	@ (80027d8 <Read_DMP_SPI+0x558>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80027dc <Read_DMP_SPI+0x55c>
 8002746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800274a:	4b23      	ldr	r3, [pc, #140]	@ (80027d8 <Read_DMP_SPI+0x558>)
 800274c:	edc3 7a00 	vstr	s15, [r3]
 8002750:	4b21      	ldr	r3, [pc, #132]	@ (80027d8 <Read_DMP_SPI+0x558>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80027e0 <Read_DMP_SPI+0x560>
 800275a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800275e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002762:	dceb      	bgt.n	800273c <Read_DMP_SPI+0x4bc>
        while (Yaw_dmp < -180.0f) Yaw_dmp += 360.0f;
 8002764:	e009      	b.n	800277a <Read_DMP_SPI+0x4fa>
 8002766:	4b1c      	ldr	r3, [pc, #112]	@ (80027d8 <Read_DMP_SPI+0x558>)
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80027dc <Read_DMP_SPI+0x55c>
 8002770:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002774:	4b18      	ldr	r3, [pc, #96]	@ (80027d8 <Read_DMP_SPI+0x558>)
 8002776:	edc3 7a00 	vstr	s15, [r3]
 800277a:	4b17      	ldr	r3, [pc, #92]	@ (80027d8 <Read_DMP_SPI+0x558>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80027e4 <Read_DMP_SPI+0x564>
 8002784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278c:	d4eb      	bmi.n	8002766 <Read_DMP_SPI+0x4e6>
        
        sensors = 0;
 800278e:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <Read_DMP_SPI+0x568>)
 8002790:	2200      	movs	r2, #0
 8002792:	801a      	strh	r2, [r3, #0]
    }
    
    // Additional step: If DMP interrupt is still set, force clear it
    if (int_status & 0x02) {
 8002794:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <Read_DMP_SPI+0x52c>
        // Try reading INT_STATUS again to clear persistent interrupt
        uint8_t temp_status;
        MPU6500_ReadReg(MPU6500_RA_INT_STATUS, &temp_status, 1);
 80027a0:	1cbb      	adds	r3, r7, #2
 80027a2:	2201      	movs	r2, #1
 80027a4:	4619      	mov	r1, r3
 80027a6:	203a      	movs	r0, #58	@ 0x3a
 80027a8:	f000 f95e 	bl	8002a68 <MPU6500_ReadReg>
    }
}
 80027ac:	3738      	adds	r7, #56	@ 0x38
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bdb0      	pop	{r4, r5, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000054c 	.word	0x2000054c
 80027b8:	20000508 	.word	0x20000508
 80027bc:	2000000c 	.word	0x2000000c
 80027c0:	20000578 	.word	0x20000578
 80027c4:	2000057c 	.word	0x2000057c
 80027c8:	20000580 	.word	0x20000580
 80027cc:	42f8428f 	.word	0x42f8428f
 80027d0:	2000056c 	.word	0x2000056c
 80027d4:	20000570 	.word	0x20000570
 80027d8:	20000574 	.word	0x20000574
 80027dc:	43b40000 	.word	0x43b40000
 80027e0:	43340000 	.word	0x43340000
 80027e4:	c3340000 	.word	0xc3340000
 80027e8:	2000056a 	.word	0x2000056a

080027ec <MPU6500_Init>:
  * @brief  Initialize MPU6500 sensor
  * @param  None
  * @retval None
  */
void MPU6500_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80027f0:	2064      	movs	r0, #100	@ 0x64
 80027f2:	f002 f9bd 	bl	8004b70 <HAL_Delay>
	
	// 避免睡眠模式并使用 Gyro 时钟源 / Disable sleep mode and use Gyro clock source
	// 地址：0x6B（PWR_MGMT_1）
	// 二进制值：00000010（CLKSEL=010，选择 X 轴 Gyro 作为时钟源，禁用睡眠模式）
	MPU6500_WriteReg(0x6B, 0x02);
 80027f6:	2102      	movs	r1, #2
 80027f8:	206b      	movs	r0, #107	@ 0x6b
 80027fa:	f000 f90f 	bl	8002a1c <MPU6500_WriteReg>
	
	// 设置陀螺仪量程为 ±2000°/s / Set gyroscope range to ±2000°/s
	// 地址：0x1B（GYRO_CONFIG）
	// 二进制值：00011000（FS_SEL=11，表示 ±2000°/s）
	MPU6500_WriteReg(0x1B, 0x18);
 80027fe:	2118      	movs	r1, #24
 8002800:	201b      	movs	r0, #27
 8002802:	f000 f90b 	bl	8002a1c <MPU6500_WriteReg>
	
	// 设置加速度计量程为 ±2g / Set accelerometer range to ±2g
	// 地址：0x1C（ACCEL_CONFIG）
	// 二进制值：00000000（AFS_SEL=00，表示 ±2g）
	MPU6500_WriteReg(0x1C, 0x00);
 8002806:	2100      	movs	r1, #0
 8002808:	201c      	movs	r0, #28
 800280a:	f000 f907 	bl	8002a1c <MPU6500_WriteReg>
	
	// 激活 DMP / Activate DMP
	// 地址：0x6A（USER_CTRL）
	// 二进制值：10000000（启用 DMP，禁用其他功能）
	MPU6500_WriteReg(0x6A, 0x80);
 800280e:	2180      	movs	r1, #128	@ 0x80
 8002810:	206a      	movs	r0, #106	@ 0x6a
 8002812:	f000 f903 	bl	8002a1c <MPU6500_WriteReg>
	
	/*
	mpu_set_gyro_fsr(3);
	mpu_set_accel_fsr(2);
	*/
	imu_data.q0 = 1.0f; // Initialize quaternions
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <MPU6500_Init+0x54>)
 8002818:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800281c:	629a      	str	r2, [r3, #40]	@ 0x28
	imu_data.q1 = 0.0f;
 800281e:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <MPU6500_Init+0x54>)
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu_data.q2 = 0.0f;
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <MPU6500_Init+0x54>)
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	@ 0x30
	imu_data.q3 = 0.0f;
 800282e:	4b04      	ldr	r3, [pc, #16]	@ (8002840 <MPU6500_Init+0x54>)
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34

	MPU6500_OffsetCall();
 8002836:	f000 f805 	bl	8002844 <MPU6500_OffsetCall>
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000508 	.word	0x20000508

08002844 <MPU6500_OffsetCall>:
  * @brief  Calculate offset values for MPU6500
  * @param  None
  * @retval None
  */
void MPU6500_OffsetCall(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
	mpu_data.ax_offset = 0;
 800284a:	4b71      	ldr	r3, [pc, #452]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 800284c:	2200      	movs	r2, #0
 800284e:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset = 0;
 8002850:	4b6f      	ldr	r3, [pc, #444]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002852:	2200      	movs	r2, #0
 8002854:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset = 0;
 8002856:	4b6e      	ldr	r3, [pc, #440]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002858:	2200      	movs	r2, #0
 800285a:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset = 0;
 800285c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 800285e:	2200      	movs	r2, #0
 8002860:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset = 0;
 8002862:	4b6b      	ldr	r3, [pc, #428]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002864:	2200      	movs	r2, #0
 8002866:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset = 0;
 8002868:	4b69      	ldr	r3, [pc, #420]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 800286a:	2200      	movs	r2, #0
 800286c:	83da      	strh	r2, [r3, #30]
	int i;
	for (i=0; i<300;i++)
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	e07c      	b.n	800296e <MPU6500_OffsetCall+0x12a>
	{
		MPU6500_ReadReg(59, mpu_buffer, sizeof(mpu_buffer));
 8002874:	220e      	movs	r2, #14
 8002876:	4967      	ldr	r1, [pc, #412]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 8002878:	203b      	movs	r0, #59	@ 0x3b
 800287a:	f000 f8f5 	bl	8002a68 <MPU6500_ReadReg>

		mpu_data.ax_offset += mpu_buffer[0] << 8 | mpu_buffer[1];
 800287e:	4b64      	ldr	r3, [pc, #400]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002880:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b63      	ldr	r3, [pc, #396]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	b219      	sxth	r1, r3
 800288e:	4b61      	ldr	r3, [pc, #388]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 8002890:	785b      	ldrb	r3, [r3, #1]
 8002892:	b21b      	sxth	r3, r3
 8002894:	430b      	orrs	r3, r1
 8002896:	b21b      	sxth	r3, r3
 8002898:	b29b      	uxth	r3, r3
 800289a:	4413      	add	r3, r2
 800289c:	b29b      	uxth	r3, r3
 800289e:	b21a      	sxth	r2, r3
 80028a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80028a2:	829a      	strh	r2, [r3, #20]
		mpu_data.ay_offset += mpu_buffer[2] << 8 | mpu_buffer[3];
 80028a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80028a6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b59      	ldr	r3, [pc, #356]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 80028ae:	789b      	ldrb	r3, [r3, #2]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	b219      	sxth	r1, r3
 80028b4:	4b57      	ldr	r3, [pc, #348]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 80028b6:	78db      	ldrb	r3, [r3, #3]
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	430b      	orrs	r3, r1
 80028bc:	b21b      	sxth	r3, r3
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	4b52      	ldr	r3, [pc, #328]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80028c8:	82da      	strh	r2, [r3, #22]
		mpu_data.az_offset += mpu_buffer[4] << 8 | mpu_buffer[5];
 80028ca:	4b51      	ldr	r3, [pc, #324]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80028cc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	4b50      	ldr	r3, [pc, #320]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 80028d4:	791b      	ldrb	r3, [r3, #4]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b219      	sxth	r1, r3
 80028da:	4b4e      	ldr	r3, [pc, #312]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 80028dc:	795b      	ldrb	r3, [r3, #5]
 80028de:	b21b      	sxth	r3, r3
 80028e0:	430b      	orrs	r3, r1
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b21a      	sxth	r2, r3
 80028ec:	4b48      	ldr	r3, [pc, #288]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80028ee:	831a      	strh	r2, [r3, #24]

		mpu_data.gx_offset += mpu_buffer[8]  << 8 | mpu_buffer[9];
 80028f0:	4b47      	ldr	r3, [pc, #284]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80028f2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	4b46      	ldr	r3, [pc, #280]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 80028fa:	7a1b      	ldrb	r3, [r3, #8]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b219      	sxth	r1, r3
 8002900:	4b44      	ldr	r3, [pc, #272]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 8002902:	7a5b      	ldrb	r3, [r3, #9]
 8002904:	b21b      	sxth	r3, r3
 8002906:	430b      	orrs	r3, r1
 8002908:	b21b      	sxth	r3, r3
 800290a:	b29b      	uxth	r3, r3
 800290c:	4413      	add	r3, r2
 800290e:	b29b      	uxth	r3, r3
 8002910:	b21a      	sxth	r2, r3
 8002912:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002914:	835a      	strh	r2, [r3, #26]
		mpu_data.gy_offset += mpu_buffer[10] << 8 | mpu_buffer[11];
 8002916:	4b3e      	ldr	r3, [pc, #248]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002918:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800291c:	b29a      	uxth	r2, r3
 800291e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 8002920:	7a9b      	ldrb	r3, [r3, #10]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	b219      	sxth	r1, r3
 8002926:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 8002928:	7adb      	ldrb	r3, [r3, #11]
 800292a:	b21b      	sxth	r3, r3
 800292c:	430b      	orrs	r3, r1
 800292e:	b21b      	sxth	r3, r3
 8002930:	b29b      	uxth	r3, r3
 8002932:	4413      	add	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	b21a      	sxth	r2, r3
 8002938:	4b35      	ldr	r3, [pc, #212]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 800293a:	839a      	strh	r2, [r3, #28]
		mpu_data.gz_offset += mpu_buffer[12] << 8 | mpu_buffer[13];
 800293c:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 800293e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 8002946:	7b1b      	ldrb	r3, [r3, #12]
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	b219      	sxth	r1, r3
 800294c:	4b31      	ldr	r3, [pc, #196]	@ (8002a14 <MPU6500_OffsetCall+0x1d0>)
 800294e:	7b5b      	ldrb	r3, [r3, #13]
 8002950:	b21b      	sxth	r3, r3
 8002952:	430b      	orrs	r3, r1
 8002954:	b21b      	sxth	r3, r3
 8002956:	b29b      	uxth	r3, r3
 8002958:	4413      	add	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	b21a      	sxth	r2, r3
 800295e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002960:	83da      	strh	r2, [r3, #30]

		HAL_Delay(5);
 8002962:	2005      	movs	r0, #5
 8002964:	f002 f904 	bl	8004b70 <HAL_Delay>
	for (i=0; i<300;i++)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3301      	adds	r3, #1
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002974:	f6ff af7e 	blt.w	8002874 <MPU6500_OffsetCall+0x30>
	}
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 800297a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800297e:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <MPU6500_OffsetCall+0x1d4>)
 8002980:	fb82 1203 	smull	r1, r2, r2, r3
 8002984:	1152      	asrs	r2, r2, #5
 8002986:	17db      	asrs	r3, r3, #31
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b21a      	sxth	r2, r3
 800298c:	4b20      	ldr	r3, [pc, #128]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 800298e:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 300;
 8002990:	4b1f      	ldr	r3, [pc, #124]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002992:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002996:	4a20      	ldr	r2, [pc, #128]	@ (8002a18 <MPU6500_OffsetCall+0x1d4>)
 8002998:	fb82 1203 	smull	r1, r2, r2, r3
 800299c:	1152      	asrs	r2, r2, #5
 800299e:	17db      	asrs	r3, r3, #31
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80029a6:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset=mpu_data.az_offset / 300;
 80029a8:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80029aa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80029ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <MPU6500_OffsetCall+0x1d4>)
 80029b0:	fb82 1203 	smull	r1, r2, r2, r3
 80029b4:	1152      	asrs	r2, r2, #5
 80029b6:	17db      	asrs	r3, r3, #31
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	b21a      	sxth	r2, r3
 80029bc:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80029be:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 80029c0:	4b13      	ldr	r3, [pc, #76]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80029c2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80029c6:	4a14      	ldr	r2, [pc, #80]	@ (8002a18 <MPU6500_OffsetCall+0x1d4>)
 80029c8:	fb82 1203 	smull	r1, r2, r2, r3
 80029cc:	1152      	asrs	r2, r2, #5
 80029ce:	17db      	asrs	r3, r3, #31
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80029d6:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset=mpu_data.gy_offset / 300;
 80029d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80029da:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80029de:	4a0e      	ldr	r2, [pc, #56]	@ (8002a18 <MPU6500_OffsetCall+0x1d4>)
 80029e0:	fb82 1203 	smull	r1, r2, r2, r3
 80029e4:	1152      	asrs	r2, r2, #5
 80029e6:	17db      	asrs	r3, r3, #31
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80029ee:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 80029f0:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 80029f2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80029f6:	4a08      	ldr	r2, [pc, #32]	@ (8002a18 <MPU6500_OffsetCall+0x1d4>)
 80029f8:	fb82 1203 	smull	r1, r2, r2, r3
 80029fc:	1152      	asrs	r2, r2, #5
 80029fe:	17db      	asrs	r3, r3, #31
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	b21a      	sxth	r2, r3
 8002a04:	4b02      	ldr	r3, [pc, #8]	@ (8002a10 <MPU6500_OffsetCall+0x1cc>)
 8002a06:	83da      	strh	r2, [r3, #30]
}
 8002a08:	bf00      	nop
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200004e8 	.word	0x200004e8
 8002a14:	2000054c 	.word	0x2000054c
 8002a18:	1b4e81b5 	.word	0x1b4e81b5

08002a1c <MPU6500_WriteReg>:
  * @param  reg: Register address
  * @param  data: Data to write
  * @retval None
  */
void MPU6500_WriteReg(uint8_t reg, uint8_t data)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	460a      	mov	r2, r1
 8002a26:	71fb      	strb	r3, [r7, #7]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2110      	movs	r1, #16
 8002a30:	480b      	ldr	r0, [pc, #44]	@ (8002a60 <MPU6500_WriteReg+0x44>)
 8002a32:	f002 fbe9 	bl	8005208 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8002a36:	1df9      	adds	r1, r7, #7
 8002a38:	2364      	movs	r3, #100	@ 0x64
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4809      	ldr	r0, [pc, #36]	@ (8002a64 <MPU6500_WriteReg+0x48>)
 8002a3e:	f003 fda4 	bl	800658a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8002a42:	1db9      	adds	r1, r7, #6
 8002a44:	2364      	movs	r3, #100	@ 0x64
 8002a46:	2201      	movs	r2, #1
 8002a48:	4806      	ldr	r0, [pc, #24]	@ (8002a64 <MPU6500_WriteReg+0x48>)
 8002a4a:	f003 fd9e 	bl	800658a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2110      	movs	r1, #16
 8002a52:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <MPU6500_WriteReg+0x44>)
 8002a54:	f002 fbd8 	bl	8005208 <HAL_GPIO_WritePin>
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40020000 	.word	0x40020000
 8002a64:	200002ec 	.word	0x200002ec

08002a68 <MPU6500_ReadReg>:
  * @param  data: Pointer to data buffer
  * @param  len: Length of data to read
  * @retval None
  */
void MPU6500_ReadReg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	71fb      	strb	r3, [r7, #7]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2110      	movs	r1, #16
 8002a86:	480d      	ldr	r0, [pc, #52]	@ (8002abc <MPU6500_ReadReg+0x54>)
 8002a88:	f002 fbbe 	bl	8005208 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8002a8c:	f107 010f 	add.w	r1, r7, #15
 8002a90:	2364      	movs	r3, #100	@ 0x64
 8002a92:	2201      	movs	r2, #1
 8002a94:	480a      	ldr	r0, [pc, #40]	@ (8002ac0 <MPU6500_ReadReg+0x58>)
 8002a96:	f003 fd78 	bl	800658a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8002a9a:	79bb      	ldrb	r3, [r7, #6]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	2364      	movs	r3, #100	@ 0x64
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	4807      	ldr	r0, [pc, #28]	@ (8002ac0 <MPU6500_ReadReg+0x58>)
 8002aa4:	f003 feb5 	bl	8006812 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2110      	movs	r1, #16
 8002aac:	4803      	ldr	r0, [pc, #12]	@ (8002abc <MPU6500_ReadReg+0x54>)
 8002aae:	f002 fbab 	bl	8005208 <HAL_GPIO_WritePin>
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	200002ec 	.word	0x200002ec

08002ac4 <MPU6500_ReadData>:
  * @brief  Read and process MPU6500 data
  * @param  None
  * @retval None
  */
void MPU6500_ReadData(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b090      	sub	sp, #64	@ 0x40
 8002ac8:	af00      	add	r7, sp, #0
	 // Split data
	mpu_data.ax   = (mpu_buffer[0] << 8 | mpu_buffer[1]);
 8002aca:	4bc6      	ldr	r3, [pc, #792]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	b21a      	sxth	r2, r3
 8002ad2:	4bc4      	ldr	r3, [pc, #784]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	4bc2      	ldr	r3, [pc, #776]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002ade:	801a      	strh	r2, [r3, #0]
	mpu_data.ay   = (mpu_buffer[2] << 8 | mpu_buffer[3]);
 8002ae0:	4bc0      	ldr	r3, [pc, #768]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002ae2:	789b      	ldrb	r3, [r3, #2]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	b21a      	sxth	r2, r3
 8002ae8:	4bbe      	ldr	r3, [pc, #760]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002aea:	78db      	ldrb	r3, [r3, #3]
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b21a      	sxth	r2, r3
 8002af2:	4bbd      	ldr	r3, [pc, #756]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002af4:	805a      	strh	r2, [r3, #2]
	mpu_data.az   = (mpu_buffer[4] << 8 | mpu_buffer[5]);
 8002af6:	4bbb      	ldr	r3, [pc, #748]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002af8:	791b      	ldrb	r3, [r3, #4]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	b21a      	sxth	r2, r3
 8002afe:	4bb9      	ldr	r3, [pc, #740]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b00:	795b      	ldrb	r3, [r3, #5]
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b21a      	sxth	r2, r3
 8002b08:	4bb7      	ldr	r3, [pc, #732]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b0a:	809a      	strh	r2, [r3, #4]
	mpu_data.temp = (mpu_buffer[6] << 8 | mpu_buffer[7]);
 8002b0c:	4bb5      	ldr	r3, [pc, #724]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b0e:	799b      	ldrb	r3, [r3, #6]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	b21a      	sxth	r2, r3
 8002b14:	4bb3      	ldr	r3, [pc, #716]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b16:	79db      	ldrb	r3, [r3, #7]
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	b21a      	sxth	r2, r3
 8002b1e:	4bb2      	ldr	r3, [pc, #712]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b20:	819a      	strh	r2, [r3, #12]

	mpu_data.gx = ((mpu_buffer[8]  << 8 | mpu_buffer[9])  - mpu_data.gx_offset);
 8002b22:	4bb0      	ldr	r3, [pc, #704]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b24:	7a1b      	ldrb	r3, [r3, #8]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	4bae      	ldr	r3, [pc, #696]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b2c:	7a5b      	ldrb	r3, [r3, #9]
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	4313      	orrs	r3, r2
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	4bac      	ldr	r3, [pc, #688]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b38:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b21a      	sxth	r2, r3
 8002b44:	4ba8      	ldr	r3, [pc, #672]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b46:	81da      	strh	r2, [r3, #14]
	mpu_data.gy = ((mpu_buffer[10] << 8 | mpu_buffer[11]) - mpu_data.gy_offset);
 8002b48:	4ba6      	ldr	r3, [pc, #664]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b4a:	7a9b      	ldrb	r3, [r3, #10]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	b21a      	sxth	r2, r3
 8002b50:	4ba4      	ldr	r3, [pc, #656]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b52:	7adb      	ldrb	r3, [r3, #11]
 8002b54:	b21b      	sxth	r3, r3
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b21b      	sxth	r3, r3
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b5e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b21a      	sxth	r2, r3
 8002b6a:	4b9f      	ldr	r3, [pc, #636]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b6c:	821a      	strh	r2, [r3, #16]
	mpu_data.gz = ((mpu_buffer[12] << 8 | mpu_buffer[13]) - mpu_data.gz_offset);
 8002b6e:	4b9d      	ldr	r3, [pc, #628]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b70:	7b1b      	ldrb	r3, [r3, #12]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	b21a      	sxth	r2, r3
 8002b76:	4b9b      	ldr	r3, [pc, #620]	@ (8002de4 <MPU6500_ReadData+0x320>)
 8002b78:	7b5b      	ldrb	r3, [r3, #13]
 8002b7a:	b21b      	sxth	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b21b      	sxth	r3, r3
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b99      	ldr	r3, [pc, #612]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b84:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	b21a      	sxth	r2, r3
 8002b90:	4b95      	ldr	r3, [pc, #596]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b92:	825a      	strh	r2, [r3, #18]

	// Conversion to physical quantities
	imu_data.ax = mpu_data.ax / 16384.0f; // ±2g
 8002b94:	4b94      	ldr	r3, [pc, #592]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba2:	eddf 6a92 	vldr	s13, [pc, #584]	@ 8002dec <MPU6500_ReadData+0x328>
 8002ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002baa:	4b91      	ldr	r3, [pc, #580]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002bac:	edc3 7a00 	vstr	s15, [r3]
	imu_data.ay = mpu_data.ay / 16384.0f;
 8002bb0:	4b8d      	ldr	r3, [pc, #564]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002bb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bbe:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8002dec <MPU6500_ReadData+0x328>
 8002bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002bc8:	edc3 7a01 	vstr	s15, [r3, #4]
	imu_data.az = mpu_data.az / 16384.0f;
 8002bcc:	4b86      	ldr	r3, [pc, #536]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002bce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bda:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8002dec <MPU6500_ReadData+0x328>
 8002bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be2:	4b83      	ldr	r3, [pc, #524]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002be4:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.temp = (mpu_data.temp / 333.87f) + 21.0f;
 8002be8:	4b7f      	ldr	r3, [pc, #508]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002bea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bf6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8002df4 <MPU6500_ReadData+0x330>
 8002bfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bfe:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8002c02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c06:	4b7a      	ldr	r3, [pc, #488]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002c08:	edc3 7a03 	vstr	s15, [r3, #12]
	imu_data.gx = mpu_data.gx / 16.4f; // ±2000dps (changed from 131.0f for ±250dps)
 8002c0c:	4b76      	ldr	r3, [pc, #472]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002c0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002c12:	ee07 3a90 	vmov	s15, r3
 8002c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c1a:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8002df8 <MPU6500_ReadData+0x334>
 8002c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c22:	4b73      	ldr	r3, [pc, #460]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002c24:	edc3 7a04 	vstr	s15, [r3, #16]
	imu_data.gy = mpu_data.gy / 16.4f; // ±2000dps (changed from 131.0f for ±250dps)
 8002c28:	4b6f      	ldr	r3, [pc, #444]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002c2a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002c2e:	ee07 3a90 	vmov	s15, r3
 8002c32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c36:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002df8 <MPU6500_ReadData+0x334>
 8002c3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002c40:	edc3 7a05 	vstr	s15, [r3, #20]
	imu_data.gz = mpu_data.gz / 16.4f; // ±2000dps (changed from 131.0f for ±250dps)
 8002c44:	4b68      	ldr	r3, [pc, #416]	@ (8002de8 <MPU6500_ReadData+0x324>)
 8002c46:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c52:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8002df8 <MPU6500_ReadData+0x334>
 8002c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c5a:	4b65      	ldr	r3, [pc, #404]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002c5c:	edc3 7a06 	vstr	s15, [r3, #24]

	// Quaternion Updates
	const float dt = 0.001f;    // Sampling Interval
 8002c60:	4b66      	ldr	r3, [pc, #408]	@ (8002dfc <MPU6500_ReadData+0x338>)
 8002c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const float deg2rad = 0.0174532925f; // degree to radian coefficient
 8002c64:	4b66      	ldr	r3, [pc, #408]	@ (8002e00 <MPU6500_ReadData+0x33c>)
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38

	// Converts angular velocity in rad/s
	float gx_rad = imu_data.gx * deg2rad;
 8002c68:	4b61      	ldr	r3, [pc, #388]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002c6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c6e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c76:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float gy_rad = imu_data.gy * deg2rad;
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002c7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c80:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c88:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float gz_rad = imu_data.gz * deg2rad;
 8002c8c:	4b58      	ldr	r3, [pc, #352]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002c8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c92:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Get the current quaternion
	float q0 = imu_data.q0;
 8002c9e:	4b54      	ldr	r3, [pc, #336]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1 = imu_data.q1;
 8002ca4:	4b52      	ldr	r3, [pc, #328]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
	float q2 = imu_data.q2;
 8002caa:	4b51      	ldr	r3, [pc, #324]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	623b      	str	r3, [r7, #32]
	float q3 = imu_data.q3;
 8002cb0:	4b4f      	ldr	r3, [pc, #316]	@ (8002df0 <MPU6500_ReadData+0x32c>)
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb4:	61fb      	str	r3, [r7, #28]

	float dq0 = 0.5f * (-q1*gx_rad - q2*gy_rad - q3*gz_rad) * dt;
 8002cb6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002cba:	eeb1 7a67 	vneg.f32	s14, s15
 8002cbe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc6:	edd7 6a08 	vldr	s13, [r7, #32]
 8002cca:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cda:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cee:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf6:	edc7 7a06 	vstr	s15, [r7, #24]
	float dq1 = 0.5f * ( q0*gx_rad + q2*gz_rad - q3*gy_rad) * dt;
 8002cfa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002cfe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d06:	edd7 6a08 	vldr	s13, [r7, #32]
 8002d0a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d1a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d36:	edc7 7a05 	vstr	s15, [r7, #20]
	float dq2 = 0.5f * ( q0*gy_rad - q1*gz_rad + q3*gx_rad) * dt;
 8002d3a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002d3e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002d42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d46:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002d4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d5a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d76:	edc7 7a04 	vstr	s15, [r7, #16]
	float dq3 = 0.5f * ( q0*gz_rad + q1*gy_rad - q2*gx_rad) * dt;
 8002d7a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002d7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d86:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002d8a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d96:	edd7 6a08 	vldr	s13, [r7, #32]
 8002d9a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	edc7 7a03 	vstr	s15, [r7, #12]

	q0 += dq0;
 8002dba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002dbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	q1 += dq1;
 8002dca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002dce:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	q2 += dq2;
 8002dda:	ed97 7a08 	vldr	s14, [r7, #32]
 8002dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8002de2:	e00f      	b.n	8002e04 <MPU6500_ReadData+0x340>
 8002de4:	2000054c 	.word	0x2000054c
 8002de8:	200004e8 	.word	0x200004e8
 8002dec:	46800000 	.word	0x46800000
 8002df0:	20000508 	.word	0x20000508
 8002df4:	43a6ef5c 	.word	0x43a6ef5c
 8002df8:	41833333 	.word	0x41833333
 8002dfc:	3a83126f 	.word	0x3a83126f
 8002e00:	3c8efa35 	.word	0x3c8efa35
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	edc7 7a08 	vstr	s15, [r7, #32]
	q3 += dq3;
 8002e0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e18:	edc7 7a07 	vstr	s15, [r7, #28]

	// Nnormalize quaternions
	float norm = sqrtf(q0*q0 + q1*q1 + q2*q2 + q3*q3);
 8002e1c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002e20:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002e24:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e30:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e48:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4c:	f009 fa30 	bl	800c2b0 <sqrtf>
 8002e50:	ed87 0a02 	vstr	s0, [r7, #8]
	norm = (norm == 0.0f) ? 1.0f : norm; // Prevent division by zero
 8002e54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e60:	d001      	beq.n	8002e66 <MPU6500_ReadData+0x3a2>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	e001      	b.n	8002e6a <MPU6500_ReadData+0x3a6>
 8002e66:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e6a:	60bb      	str	r3, [r7, #8]
	q0 /= norm;
 8002e6c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8002e70:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e78:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	q1 /= norm;
 8002e7c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e80:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	q2 /= norm;
 8002e8c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002e90:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e98:	edc7 7a08 	vstr	s15, [r7, #32]
	q3 /= norm;
 8002e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ea0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea8:	edc7 7a07 	vstr	s15, [r7, #28]

	imu_data.q0 = q0;
 8002eac:	4a4f      	ldr	r2, [pc, #316]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb0:	6293      	str	r3, [r2, #40]	@ 0x28
	imu_data.q1 = q1;
 8002eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
	imu_data.q2 = q2;
 8002eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
	imu_data.q3 = q3;
 8002ebe:	4a4b      	ldr	r2, [pc, #300]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	6353      	str	r3, [r2, #52]	@ 0x34

	// Conversion to Euler angles (ZYX order)
	// Roll (X-axis)
	imu_data.rol = atan2f(2.0f*(q0*q1 + q2*q3), 1.0f - 2.0f*(q1*q1 + q2*q2));
 8002ec4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002ec8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed0:	edd7 6a08 	vldr	s13, [r7, #32]
 8002ed4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002edc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ee4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ee8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002eec:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ef0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002efc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f04:	eef0 0a67 	vmov.f32	s1, s15
 8002f08:	eeb0 0a66 	vmov.f32	s0, s13
 8002f0c:	f009 f9ce 	bl	800c2ac <atan2f>
 8002f10:	eef0 7a40 	vmov.f32	s15, s0
 8002f14:	4b35      	ldr	r3, [pc, #212]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002f16:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	// Pitch (Y-axis)
	imu_data.pit = asinf(2.0f*(q0*q2 - q3*q1));
 8002f1a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f2a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	f009 f989 	bl	800c254 <asinf>
 8002f42:	eef0 7a40 	vmov.f32	s15, s0
 8002f46:	4b29      	ldr	r3, [pc, #164]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002f48:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	// Yaw (Z-axis)
	imu_data.yaw = atan2f(2.0f*(q0*q3 + q1*q2), 1.0f - 2.0f*(q2*q2 + q3*q3));
 8002f4c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f50:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f58:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002f5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f68:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f6c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f70:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f74:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8c:	eef0 0a67 	vmov.f32	s1, s15
 8002f90:	eeb0 0a66 	vmov.f32	s0, s13
 8002f94:	f009 f98a 	bl	800c2ac <atan2f>
 8002f98:	eef0 7a40 	vmov.f32	s15, s0
 8002f9c:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002f9e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Radian to degree
	const float rad2deg = 57.2957795f;
 8002fa2:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <MPU6500_ReadData+0x52c>)
 8002fa4:	607b      	str	r3, [r7, #4]
	imu_data.rol *= rad2deg;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002fa8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002fac:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002fb6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu_data.pit *= rad2deg;
 8002fba:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002fbc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002fc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc8:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002fca:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu_data.yaw *= rad2deg;
 8002fce:	4b07      	ldr	r3, [pc, #28]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002fd0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <MPU6500_ReadData+0x528>)
 8002fde:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 8002fe2:	bf00      	nop
 8002fe4:	3740      	adds	r7, #64	@ 0x40
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000508 	.word	0x20000508
 8002ff0:	42652ee1 	.word	0x42652ee1

08002ff4 <MPU6500_InitStructures>:
  * @brief  Initialize MPU and IMU data structures
  * @param  None
  * @retval None
  */
void MPU6500_InitStructures(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
    // 初始化 mpu_data_t 结构体
    mpu_data.ax = 0;
 8002ff8:	4b33      	ldr	r3, [pc, #204]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = 0;
 8002ffe:	4b32      	ldr	r3, [pc, #200]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 8003000:	2200      	movs	r2, #0
 8003002:	805a      	strh	r2, [r3, #2]
    mpu_data.az = 0;
 8003004:	4b30      	ldr	r3, [pc, #192]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 8003006:	2200      	movs	r2, #0
 8003008:	809a      	strh	r2, [r3, #4]

    mpu_data.mx = 0;
 800300a:	4b2f      	ldr	r3, [pc, #188]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 800300c:	2200      	movs	r2, #0
 800300e:	80da      	strh	r2, [r3, #6]
    mpu_data.my = 0;
 8003010:	4b2d      	ldr	r3, [pc, #180]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 8003012:	2200      	movs	r2, #0
 8003014:	811a      	strh	r2, [r3, #8]
    mpu_data.mz = 0;
 8003016:	4b2c      	ldr	r3, [pc, #176]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 8003018:	2200      	movs	r2, #0
 800301a:	815a      	strh	r2, [r3, #10]

    mpu_data.temp = 0;
 800301c:	4b2a      	ldr	r3, [pc, #168]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 800301e:	2200      	movs	r2, #0
 8003020:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = 0;
 8003022:	4b29      	ldr	r3, [pc, #164]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 8003024:	2200      	movs	r2, #0
 8003026:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = 0;
 8003028:	4b27      	ldr	r3, [pc, #156]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 800302a:	2200      	movs	r2, #0
 800302c:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = 0;
 800302e:	4b26      	ldr	r3, [pc, #152]	@ (80030c8 <MPU6500_InitStructures+0xd4>)
 8003030:	2200      	movs	r2, #0
 8003032:	825a      	strh	r2, [r3, #18]

    // 初始化 imu_t 结构体
    imu_data.ax = 0.0f;
 8003034:	4b25      	ldr	r3, [pc, #148]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    imu_data.ay = 0.0f;
 800303c:	4b23      	ldr	r3, [pc, #140]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	605a      	str	r2, [r3, #4]
    imu_data.az = 0.0f;
 8003044:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	609a      	str	r2, [r3, #8]

    imu_data.temp = 0.0f;
 800304c:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	60da      	str	r2, [r3, #12]

    imu_data.gx = 0.0f;
 8003054:	4b1d      	ldr	r3, [pc, #116]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	611a      	str	r2, [r3, #16]
    imu_data.gy = 0.0f;
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
    imu_data.gz = 0.0f;
 8003064:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	619a      	str	r2, [r3, #24]

    imu_data.vx = 0.0f;
 800306c:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	61da      	str	r2, [r3, #28]
    imu_data.vy = 0.0f;
 8003074:	4b15      	ldr	r3, [pc, #84]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	621a      	str	r2, [r3, #32]
    imu_data.vz = 0.0f;
 800307c:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

    imu_data.q0 = 1.0f; // 初始化四元数为单位四元数
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 8003086:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28
    imu_data.q1 = 0.0f;
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu_data.q2 = 0.0f;
 8003094:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
    imu_data.q3 = 0.0f;
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	635a      	str	r2, [r3, #52]	@ 0x34

    imu_data.rol = 0.0f;
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
    imu_data.pit = 0.0f;
 80030ac:	4b07      	ldr	r3, [pc, #28]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu_data.yaw = 0.0f;
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <MPU6500_InitStructures+0xd8>)
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	200004e8 	.word	0x200004e8
 80030cc:	20000508 	.word	0x20000508

080030d0 <MPU6500_UpdateData>:
  * @brief  Update MPU6500 data (read and process)
  * @param  None
  * @retval None
  */
void MPU6500_UpdateData(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
    MPU6500_ReadReg(59, mpu_buffer, sizeof(mpu_buffer));
 80030d4:	220e      	movs	r2, #14
 80030d6:	4904      	ldr	r1, [pc, #16]	@ (80030e8 <MPU6500_UpdateData+0x18>)
 80030d8:	203b      	movs	r0, #59	@ 0x3b
 80030da:	f7ff fcc5 	bl	8002a68 <MPU6500_ReadReg>
    MPU6500_ReadData();
 80030de:	f7ff fcf1 	bl	8002ac4 <MPU6500_ReadData>
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	2000054c 	.word	0x2000054c

080030ec <PD_Balance_Init>:
  * @brief  初始化PD平衡控制器
  * @param  None
  * @retval None
  */
void PD_Balance_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
    // 参数已在静态初始化中设置
    PD_Balance_PrintParams();
 80030f0:	f000 f868 	bl	80031c4 <PD_Balance_PrintParams>
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <PD_Balance_Calculate>:
  * @param  current_angle: 当前角度（度）
  * @param  gyro: 角速度（度/秒）
  * @retval PWM控制值
  */
int PD_Balance_Calculate(float current_angle, float gyro)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8003102:	edc7 0a00 	vstr	s1, [r7]
    float angle_bias = pd_params.target_angle - current_angle;  // 计算角度误差
 8003106:	4b1d      	ldr	r3, [pc, #116]	@ (800317c <PD_Balance_Calculate+0x84>)
 8003108:	ed93 7a02 	vldr	s14, [r3, #8]
 800310c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003114:	edc7 7a05 	vstr	s15, [r7, #20]
    float gyro_bias = 0 - gyro;  // 角速度误差，目标角速度为0
 8003118:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003180 <PD_Balance_Calculate+0x88>
 800311c:	edd7 7a00 	vldr	s15, [r7]
 8003120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003124:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // PD控制计算
    int balance = -pd_params.kp/100 * angle_bias - gyro_bias * pd_params.kd/100;
 8003128:	4b14      	ldr	r3, [pc, #80]	@ (800317c <PD_Balance_Calculate+0x84>)
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	eef1 7a67 	vneg.f32	s15, s15
 8003132:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8003184 <PD_Balance_Calculate+0x8c>
 8003136:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800313a:	edd7 7a05 	vldr	s15, [r7, #20]
 800313e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <PD_Balance_Calculate+0x84>)
 8003144:	edd3 6a01 	vldr	s13, [r3, #4]
 8003148:	edd7 7a04 	vldr	s15, [r7, #16]
 800314c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003150:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8003184 <PD_Balance_Calculate+0x8c>
 8003154:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003160:	ee17 3a90 	vmov	r3, s15
 8003164:	60fb      	str	r3, [r7, #12]
    
    // PWM限幅
    return PWM_Limit(balance, PWM_LIMIT, -PWM_LIMIT);
 8003166:	4a08      	ldr	r2, [pc, #32]	@ (8003188 <PD_Balance_Calculate+0x90>)
 8003168:	f641 21f4 	movw	r1, #6900	@ 0x1af4
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f933 	bl	80033d8 <PWM_Limit>
 8003172:	4603      	mov	r3, r0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000010 	.word	0x20000010
 8003180:	00000000 	.word	0x00000000
 8003184:	42c80000 	.word	0x42c80000
 8003188:	ffffe50c 	.word	0xffffe50c

0800318c <PD_Balance_GetParams>:
  * @param  kp: 比例系数指针
  * @param  kd: 微分系数指针
  * @retval None
  */
void PD_Balance_GetParams(float *kp, float *kd)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    if (kp) *kp = pd_params.kp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <PD_Balance_GetParams+0x18>
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <PD_Balance_GetParams+0x34>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	601a      	str	r2, [r3, #0]
    if (kd) *kd = pd_params.kd;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <PD_Balance_GetParams+0x26>
 80031aa:	4b05      	ldr	r3, [pc, #20]	@ (80031c0 <PD_Balance_GetParams+0x34>)
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	601a      	str	r2, [r3, #0]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000010 	.word	0x20000010

080031c4 <PD_Balance_PrintParams>:
  * @brief  通过串口打印当前PD参数
  * @param  None
  * @retval None
  */
void PD_Balance_PrintParams(void)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b09c      	sub	sp, #112	@ 0x70
 80031c8:	af02      	add	r7, sp, #8
    char buffer[100];
    sprintf(buffer, "Balance_Kp=%.2f Balance_Kd=%.2f\r\n", 
            pd_params.kp, pd_params.kd);
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <PD_Balance_PrintParams+0x54>)
 80031cc:	681b      	ldr	r3, [r3, #0]
    sprintf(buffer, "Balance_Kp=%.2f Balance_Kd=%.2f\r\n", 
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f9c2 	bl	8000558 <__aeabi_f2d>
 80031d4:	4604      	mov	r4, r0
 80031d6:	460d      	mov	r5, r1
            pd_params.kp, pd_params.kd);
 80031d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <PD_Balance_PrintParams+0x54>)
 80031da:	685b      	ldr	r3, [r3, #4]
    sprintf(buffer, "Balance_Kp=%.2f Balance_Kd=%.2f\r\n", 
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f9bb 	bl	8000558 <__aeabi_f2d>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	1d38      	adds	r0, r7, #4
 80031e8:	e9cd 2300 	strd	r2, r3, [sp]
 80031ec:	4622      	mov	r2, r4
 80031ee:	462b      	mov	r3, r5
 80031f0:	490a      	ldr	r1, [pc, #40]	@ (800321c <PD_Balance_PrintParams+0x58>)
 80031f2:	f006 fec3 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd f841 	bl	8000280 <strlen>
 80031fe:	4603      	mov	r3, r0
 8003200:	b29a      	uxth	r2, r3
 8003202:	1d39      	adds	r1, r7, #4
 8003204:	f04f 33ff 	mov.w	r3, #4294967295
 8003208:	4805      	ldr	r0, [pc, #20]	@ (8003220 <PD_Balance_PrintParams+0x5c>)
 800320a:	f005 f997 	bl	800853c <HAL_UART_Transmit>
}
 800320e:	bf00      	nop
 8003210:	3768      	adds	r7, #104	@ 0x68
 8003212:	46bd      	mov	sp, r7
 8003214:	bdb0      	pop	{r4, r5, r7, pc}
 8003216:	bf00      	nop
 8003218:	20000010 	.word	0x20000010
 800321c:	0800d394 	.word	0x0800d394
 8003220:	20000464 	.word	0x20000464

08003224 <PD_Balance_IsDangerous>:
  * @brief  检查是否处于危险倾角
  * @param  angle: 当前角度
  * @retval 1: 危险，0: 安全
  */
uint8_t PD_Balance_IsDangerous(float angle)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (angle < -DANGEROUS_ANGLE || angle > DANGEROUS_ANGLE) {
 800322e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003232:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003264 <PD_Balance_IsDangerous+0x40>
 8003236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	d408      	bmi.n	8003252 <PD_Balance_IsDangerous+0x2e>
 8003240:	edd7 7a01 	vldr	s15, [r7, #4]
 8003244:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003268 <PD_Balance_IsDangerous+0x44>
 8003248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	dd01      	ble.n	8003256 <PD_Balance_IsDangerous+0x32>
        return 1;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <PD_Balance_IsDangerous+0x34>
    }
    return 0;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	c2200000 	.word	0xc2200000
 8003268:	42200000 	.word	0x42200000

0800326c <PD_Balance_AdjustKp>:
  * @brief  调整Kp参数
  * @param  increase: 1增加，0减少
  * @retval None
  */
void PD_Balance_AdjustKp(uint8_t increase)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
    if (increase) {
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <PD_Balance_AdjustKp+0x26>
        pd_params.kp += PARAM_ADJUST_STEP;
 800327c:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <PD_Balance_AdjustKp+0x5c>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80032cc <PD_Balance_AdjustKp+0x60>
 8003286:	ee77 7a87 	vadd.f32	s15, s15, s14
 800328a:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <PD_Balance_AdjustKp+0x5c>)
 800328c:	edc3 7a00 	vstr	s15, [r3]
 8003290:	e013      	b.n	80032ba <PD_Balance_AdjustKp+0x4e>
    } else {
        if (pd_params.kp > PARAM_ADJUST_STEP) {  // 防止变为负值
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <PD_Balance_AdjustKp+0x5c>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80032cc <PD_Balance_AdjustKp+0x60>
 800329c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	dd09      	ble.n	80032ba <PD_Balance_AdjustKp+0x4e>
            pd_params.kp -= PARAM_ADJUST_STEP;
 80032a6:	4b08      	ldr	r3, [pc, #32]	@ (80032c8 <PD_Balance_AdjustKp+0x5c>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80032cc <PD_Balance_AdjustKp+0x60>
 80032b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032b4:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <PD_Balance_AdjustKp+0x5c>)
 80032b6:	edc3 7a00 	vstr	s15, [r3]
        }
    }
    PD_Balance_PrintParams();
 80032ba:	f7ff ff83 	bl	80031c4 <PD_Balance_PrintParams>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000010 	.word	0x20000010
 80032cc:	42c80000 	.word	0x42c80000

080032d0 <PD_Balance_AdjustKd>:
  * @brief  调整Kd参数
  * @param  increase: 1增加，0减少
  * @retval None
  */
void PD_Balance_AdjustKd(uint8_t increase)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
    if (increase) {
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <PD_Balance_AdjustKd+0x26>
        pd_params.kd += PARAM_ADJUST_STEP;
 80032e0:	4b12      	ldr	r3, [pc, #72]	@ (800332c <PD_Balance_AdjustKd+0x5c>)
 80032e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80032e6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003330 <PD_Balance_AdjustKd+0x60>
 80032ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032ee:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <PD_Balance_AdjustKd+0x5c>)
 80032f0:	edc3 7a01 	vstr	s15, [r3, #4]
 80032f4:	e013      	b.n	800331e <PD_Balance_AdjustKd+0x4e>
    } else {
        if (pd_params.kd > PARAM_ADJUST_STEP) {  // 防止变为负值
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <PD_Balance_AdjustKd+0x5c>)
 80032f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80032fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003330 <PD_Balance_AdjustKd+0x60>
 8003300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	dd09      	ble.n	800331e <PD_Balance_AdjustKd+0x4e>
            pd_params.kd -= PARAM_ADJUST_STEP;
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <PD_Balance_AdjustKd+0x5c>)
 800330c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003310:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003330 <PD_Balance_AdjustKd+0x60>
 8003314:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003318:	4b04      	ldr	r3, [pc, #16]	@ (800332c <PD_Balance_AdjustKd+0x5c>)
 800331a:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }
    PD_Balance_PrintParams();
 800331e:	f7ff ff51 	bl	80031c4 <PD_Balance_PrintParams>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000010 	.word	0x20000010
 8003330:	42c80000 	.word	0x42c80000

08003334 <PD_Balance_ProcessCommand>:
  * @brief  处理蓝牙命令
  * @param  cmd: 命令字符
  * @retval None
  */
void PD_Balance_ProcessCommand(uint8_t cmd)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	3b61      	subs	r3, #97	@ 0x61
 8003342:	2b16      	cmp	r3, #22
 8003344:	d843      	bhi.n	80033ce <PD_Balance_ProcessCommand+0x9a>
 8003346:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <PD_Balance_ProcessCommand+0x18>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	080033b1 	.word	0x080033b1
 8003350:	080033cf 	.word	0x080033cf
 8003354:	080033cf 	.word	0x080033cf
 8003358:	080033cf 	.word	0x080033cf
 800335c:	080033cf 	.word	0x080033cf
 8003360:	080033cf 	.word	0x080033cf
 8003364:	080033cf 	.word	0x080033cf
 8003368:	080033cf 	.word	0x080033cf
 800336c:	080033cf 	.word	0x080033cf
 8003370:	080033cf 	.word	0x080033cf
 8003374:	080033cf 	.word	0x080033cf
 8003378:	080033cf 	.word	0x080033cf
 800337c:	080033cf 	.word	0x080033cf
 8003380:	080033cf 	.word	0x080033cf
 8003384:	080033cf 	.word	0x080033cf
 8003388:	080033c9 	.word	0x080033c9
 800338c:	080033a9 	.word	0x080033a9
 8003390:	080033cf 	.word	0x080033cf
 8003394:	080033c1 	.word	0x080033c1
 8003398:	080033cf 	.word	0x080033cf
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033cf 	.word	0x080033cf
 80033a4:	080033b9 	.word	0x080033b9
        case CMD_KP_UP:
            PD_Balance_AdjustKp(1);
 80033a8:	2001      	movs	r0, #1
 80033aa:	f7ff ff5f 	bl	800326c <PD_Balance_AdjustKp>
            break;
 80033ae:	e00f      	b.n	80033d0 <PD_Balance_ProcessCommand+0x9c>
        case CMD_KP_DOWN:
            PD_Balance_AdjustKp(0);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7ff ff5b 	bl	800326c <PD_Balance_AdjustKp>
            break;
 80033b6:	e00b      	b.n	80033d0 <PD_Balance_ProcessCommand+0x9c>
        case CMD_KD_UP:
            PD_Balance_AdjustKd(1);
 80033b8:	2001      	movs	r0, #1
 80033ba:	f7ff ff89 	bl	80032d0 <PD_Balance_AdjustKd>
            break;
 80033be:	e007      	b.n	80033d0 <PD_Balance_ProcessCommand+0x9c>
        case CMD_KD_DOWN:
            PD_Balance_AdjustKd(0);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7ff ff85 	bl	80032d0 <PD_Balance_AdjustKd>
            break;
 80033c6:	e003      	b.n	80033d0 <PD_Balance_ProcessCommand+0x9c>
        case CMD_PRINT:
            PD_Balance_PrintParams();
 80033c8:	f7ff fefc 	bl	80031c4 <PD_Balance_PrintParams>
            break;
 80033cc:	e000      	b.n	80033d0 <PD_Balance_ProcessCommand+0x9c>
        default:
            break;
 80033ce:	bf00      	nop
    }
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <PWM_Limit>:
  * @param  max: 最大限幅值
  * @param  min: 最小限幅值
  * @retval 限幅后的PWM值
  */
static int PWM_Limit(int pwm, int max, int min)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
    if (pwm > max) return max;
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	dd01      	ble.n	80033f0 <PWM_Limit+0x18>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	e006      	b.n	80033fe <PWM_Limit+0x26>
    if (pwm < min) return min;
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	da01      	bge.n	80033fc <PWM_Limit+0x24>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	e000      	b.n	80033fe <PWM_Limit+0x26>
    return pwm;
 80033fc:	68fb      	ldr	r3, [r7, #12]
} 
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <PI_Speed_Init>:
  * @brief  初始化PI速度控制器
  * @param  None
  * @retval None
  */
void PI_Speed_Init(void)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	af00      	add	r7, sp, #0
    // 参数已在静态初始化中设置
    PI_Speed_PrintParams();
 800340e:	f000 f8b5 	bl	800357c <PI_Speed_PrintParams>
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <PI_Speed_Calculate>:
  * @param  current_speed: 当前速度（编码器速度或实际速度）
  * @param  target_speed: 目标速度
  * @retval 速度控制输出 (-100 to 100)
  */
int16_t PI_Speed_Calculate(float current_speed, float target_speed)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003422:	edc7 0a00 	vstr	s1, [r7]
    // 计算速度误差
    float speed_error = target_speed - current_speed;
 8003426:	ed97 7a00 	vldr	s14, [r7]
 800342a:	edd7 7a01 	vldr	s15, [r7, #4]
 800342e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
    
    // 对速度误差进行一阶低通滤波
    pi_state.filtered_speed_error *= 0.84f;                    // 一阶低通滤波器
 8003436:	4b3f      	ldr	r3, [pc, #252]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 8003438:	edd3 7a02 	vldr	s15, [r3, #8]
 800343c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003538 <PI_Speed_Calculate+0x120>
 8003440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003444:	4b3b      	ldr	r3, [pc, #236]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 8003446:	edc3 7a02 	vstr	s15, [r3, #8]
    pi_state.filtered_speed_error += speed_error * 0.16f;      // 一阶低通滤波器，减缓速度变化
 800344a:	4b3a      	ldr	r3, [pc, #232]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 800344c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003450:	edd7 7a07 	vldr	s15, [r7, #28]
 8003454:	eddf 6a39 	vldr	s13, [pc, #228]	@ 800353c <PI_Speed_Calculate+0x124>
 8003458:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800345c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003460:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 8003462:	edc3 7a02 	vstr	s15, [r3, #8]
    
    // 计算比例项（使用滤波后的误差）
    float proportional = pi_params.kp * pi_state.filtered_speed_error;
 8003466:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <PI_Speed_Calculate+0x128>)
 8003468:	ed93 7a00 	vldr	s14, [r3]
 800346c:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 800346e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a06 	vstr	s15, [r7, #24]
    
    // 计算积分项（使用滤波后的误差）
    pi_state.integral += pi_state.filtered_speed_error;
 800347a:	4b2e      	ldr	r3, [pc, #184]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 800347c:	ed93 7a00 	vldr	s14, [r3]
 8003480:	4b2c      	ldr	r3, [pc, #176]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 8003482:	edd3 7a02 	vldr	s15, [r3, #8]
 8003486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348a:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 800348c:	edc3 7a00 	vstr	s15, [r3]
    
    // 积分限幅
    if (pi_state.integral > pi_params.integral_limit) {
 8003490:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 8003492:	ed93 7a00 	vldr	s14, [r3]
 8003496:	4b2a      	ldr	r3, [pc, #168]	@ (8003540 <PI_Speed_Calculate+0x128>)
 8003498:	edd3 7a03 	vldr	s15, [r3, #12]
 800349c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	dd04      	ble.n	80034b0 <PI_Speed_Calculate+0x98>
        pi_state.integral = pi_params.integral_limit;
 80034a6:	4b26      	ldr	r3, [pc, #152]	@ (8003540 <PI_Speed_Calculate+0x128>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4a22      	ldr	r2, [pc, #136]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e014      	b.n	80034da <PI_Speed_Calculate+0xc2>
    } else if (pi_state.integral < -pi_params.integral_limit) {
 80034b0:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 80034b2:	ed93 7a00 	vldr	s14, [r3]
 80034b6:	4b22      	ldr	r3, [pc, #136]	@ (8003540 <PI_Speed_Calculate+0x128>)
 80034b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80034bc:	eef1 7a67 	vneg.f32	s15, s15
 80034c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	d507      	bpl.n	80034da <PI_Speed_Calculate+0xc2>
        pi_state.integral = -pi_params.integral_limit;
 80034ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <PI_Speed_Calculate+0x128>)
 80034cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80034d0:	eef1 7a67 	vneg.f32	s15, s15
 80034d4:	4b17      	ldr	r3, [pc, #92]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 80034d6:	edc3 7a00 	vstr	s15, [r3]
    }
    
    float integral = pi_params.ki * pi_state.integral;
 80034da:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <PI_Speed_Calculate+0x128>)
 80034dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80034e0:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ea:	edc7 7a05 	vstr	s15, [r7, #20]
    
    // 计算总输出
    float output = proportional + integral;
 80034ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80034f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80034f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fa:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // 输出限幅
    int16_t speed_output = (int16_t)output;
 80034fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003506:	ee17 3a90 	vmov	r3, s15
 800350a:	81fb      	strh	r3, [r7, #14]
    speed_output = Speed_Limit(speed_output, 100, -100);
 800350c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003510:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8003514:	2164      	movs	r1, #100	@ 0x64
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f91c 	bl	8003754 <Speed_Limit>
 800351c:	4603      	mov	r3, r0
 800351e:	81fb      	strh	r3, [r7, #14]
    
    // 更新状态
    pi_state.prev_error = pi_state.filtered_speed_error;
 8003520:	4b04      	ldr	r3, [pc, #16]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a03      	ldr	r2, [pc, #12]	@ (8003534 <PI_Speed_Calculate+0x11c>)
 8003526:	6053      	str	r3, [r2, #4]
    
    return speed_output;
 8003528:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000584 	.word	0x20000584
 8003538:	3f570a3d 	.word	0x3f570a3d
 800353c:	3e23d70a 	.word	0x3e23d70a
 8003540:	2000001c 	.word	0x2000001c

08003544 <PI_Speed_GetParams>:
  * @param  kp: 比例系数指针
  * @param  ki: 积分系数指针
  * @retval None
  */
void PI_Speed_GetParams(float *kp, float *ki)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
    if (kp) *kp = pi_params.kp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <PI_Speed_GetParams+0x18>
 8003554:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <PI_Speed_GetParams+0x34>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	601a      	str	r2, [r3, #0]
    if (ki) *ki = pi_params.ki;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <PI_Speed_GetParams+0x26>
 8003562:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <PI_Speed_GetParams+0x34>)
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	2000001c 	.word	0x2000001c

0800357c <PI_Speed_PrintParams>:
  * @brief  通过串口打印当前PI速度参数
  * @param  None
  * @retval None
  */
void PI_Speed_PrintParams(void)
{
 800357c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003580:	b09e      	sub	sp, #120	@ 0x78
 8003582:	af04      	add	r7, sp, #16
    char buffer[100];
    sprintf(buffer, "Speed_Kp=%.2f Speed_Ki=%.2f Target=%.1f\r\n", 
            pi_params.kp, pi_params.ki, pi_params.target_speed);
 8003584:	4b17      	ldr	r3, [pc, #92]	@ (80035e4 <PI_Speed_PrintParams+0x68>)
 8003586:	681b      	ldr	r3, [r3, #0]
    sprintf(buffer, "Speed_Kp=%.2f Speed_Ki=%.2f Target=%.1f\r\n", 
 8003588:	4618      	mov	r0, r3
 800358a:	f7fc ffe5 	bl	8000558 <__aeabi_f2d>
 800358e:	4680      	mov	r8, r0
 8003590:	4689      	mov	r9, r1
            pi_params.kp, pi_params.ki, pi_params.target_speed);
 8003592:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <PI_Speed_PrintParams+0x68>)
 8003594:	685b      	ldr	r3, [r3, #4]
    sprintf(buffer, "Speed_Kp=%.2f Speed_Ki=%.2f Target=%.1f\r\n", 
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ffde 	bl	8000558 <__aeabi_f2d>
 800359c:	4604      	mov	r4, r0
 800359e:	460d      	mov	r5, r1
            pi_params.kp, pi_params.ki, pi_params.target_speed);
 80035a0:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <PI_Speed_PrintParams+0x68>)
 80035a2:	689b      	ldr	r3, [r3, #8]
    sprintf(buffer, "Speed_Kp=%.2f Speed_Ki=%.2f Target=%.1f\r\n", 
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffd7 	bl	8000558 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	1d38      	adds	r0, r7, #4
 80035b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035b4:	e9cd 4500 	strd	r4, r5, [sp]
 80035b8:	4642      	mov	r2, r8
 80035ba:	464b      	mov	r3, r9
 80035bc:	490a      	ldr	r1, [pc, #40]	@ (80035e8 <PI_Speed_PrintParams+0x6c>)
 80035be:	f006 fcdd 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc fe5b 	bl	8000280 <strlen>
 80035ca:	4603      	mov	r3, r0
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	1d39      	adds	r1, r7, #4
 80035d0:	f04f 33ff 	mov.w	r3, #4294967295
 80035d4:	4805      	ldr	r0, [pc, #20]	@ (80035ec <PI_Speed_PrintParams+0x70>)
 80035d6:	f004 ffb1 	bl	800853c <HAL_UART_Transmit>
}
 80035da:	bf00      	nop
 80035dc:	3768      	adds	r7, #104	@ 0x68
 80035de:	46bd      	mov	sp, r7
 80035e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035e4:	2000001c 	.word	0x2000001c
 80035e8:	0800d3b8 	.word	0x0800d3b8
 80035ec:	20000464 	.word	0x20000464

080035f0 <PI_Speed_AdjustKp>:
  * @brief  调整速度Kp参数
  * @param  increase: 1增加，0减少
  * @retval None
  */
void PI_Speed_AdjustKp(uint8_t increase)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
    if (increase) {
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <PI_Speed_AdjustKp+0x26>
        pi_params.kp += SPEED_PARAM_ADJUST_STEP;
 8003600:	4b12      	ldr	r3, [pc, #72]	@ (800364c <PI_Speed_AdjustKp+0x5c>)
 8003602:	edd3 7a00 	vldr	s15, [r3]
 8003606:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003650 <PI_Speed_AdjustKp+0x60>
 800360a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800360e:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <PI_Speed_AdjustKp+0x5c>)
 8003610:	edc3 7a00 	vstr	s15, [r3]
 8003614:	e013      	b.n	800363e <PI_Speed_AdjustKp+0x4e>
    } else {
        if (pi_params.kp > SPEED_PARAM_ADJUST_STEP) {
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <PI_Speed_AdjustKp+0x5c>)
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003650 <PI_Speed_AdjustKp+0x60>
 8003620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003628:	dd09      	ble.n	800363e <PI_Speed_AdjustKp+0x4e>
            pi_params.kp -= SPEED_PARAM_ADJUST_STEP;
 800362a:	4b08      	ldr	r3, [pc, #32]	@ (800364c <PI_Speed_AdjustKp+0x5c>)
 800362c:	edd3 7a00 	vldr	s15, [r3]
 8003630:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003650 <PI_Speed_AdjustKp+0x60>
 8003634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <PI_Speed_AdjustKp+0x5c>)
 800363a:	edc3 7a00 	vstr	s15, [r3]
        }
    }
    PI_Speed_PrintParams();
 800363e:	f7ff ff9d 	bl	800357c <PI_Speed_PrintParams>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	2000001c 	.word	0x2000001c
 8003650:	3dcccccd 	.word	0x3dcccccd

08003654 <PI_Speed_AdjustKi>:
  * @brief  调整速度Ki参数
  * @param  increase: 1增加，0减少
  * @retval None
  */
void PI_Speed_AdjustKi(uint8_t increase)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
    if (increase) {
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <PI_Speed_AdjustKi+0x26>
        pi_params.ki += SPEED_PARAM_ADJUST_STEP;
 8003664:	4b12      	ldr	r3, [pc, #72]	@ (80036b0 <PI_Speed_AdjustKi+0x5c>)
 8003666:	edd3 7a01 	vldr	s15, [r3, #4]
 800366a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80036b4 <PI_Speed_AdjustKi+0x60>
 800366e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003672:	4b0f      	ldr	r3, [pc, #60]	@ (80036b0 <PI_Speed_AdjustKi+0x5c>)
 8003674:	edc3 7a01 	vstr	s15, [r3, #4]
 8003678:	e013      	b.n	80036a2 <PI_Speed_AdjustKi+0x4e>
    } else {
        if (pi_params.ki > SPEED_PARAM_ADJUST_STEP) {
 800367a:	4b0d      	ldr	r3, [pc, #52]	@ (80036b0 <PI_Speed_AdjustKi+0x5c>)
 800367c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003680:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80036b4 <PI_Speed_AdjustKi+0x60>
 8003684:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368c:	dd09      	ble.n	80036a2 <PI_Speed_AdjustKi+0x4e>
            pi_params.ki -= SPEED_PARAM_ADJUST_STEP;
 800368e:	4b08      	ldr	r3, [pc, #32]	@ (80036b0 <PI_Speed_AdjustKi+0x5c>)
 8003690:	edd3 7a01 	vldr	s15, [r3, #4]
 8003694:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80036b4 <PI_Speed_AdjustKi+0x60>
 8003698:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800369c:	4b04      	ldr	r3, [pc, #16]	@ (80036b0 <PI_Speed_AdjustKi+0x5c>)
 800369e:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }
    PI_Speed_PrintParams();
 80036a2:	f7ff ff6b 	bl	800357c <PI_Speed_PrintParams>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	2000001c 	.word	0x2000001c
 80036b4:	3dcccccd 	.word	0x3dcccccd

080036b8 <PI_Speed_ProcessCommand>:
  * @brief  处理蓝牙命令
  * @param  cmd: 命令字符
  * @retval None
  */
void PI_Speed_ProcessCommand(uint8_t cmd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	3b69      	subs	r3, #105	@ 0x69
 80036c6:	2b0d      	cmp	r3, #13
 80036c8:	d831      	bhi.n	800372e <PI_Speed_ProcessCommand+0x76>
 80036ca:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <PI_Speed_ProcessCommand+0x18>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	08003719 	.word	0x08003719
 80036d4:	08003711 	.word	0x08003711
 80036d8:	08003721 	.word	0x08003721
 80036dc:	0800372f 	.word	0x0800372f
 80036e0:	0800372f 	.word	0x0800372f
 80036e4:	0800372f 	.word	0x0800372f
 80036e8:	0800372f 	.word	0x0800372f
 80036ec:	0800372f 	.word	0x0800372f
 80036f0:	0800372f 	.word	0x0800372f
 80036f4:	0800372f 	.word	0x0800372f
 80036f8:	0800372f 	.word	0x0800372f
 80036fc:	0800372f 	.word	0x0800372f
 8003700:	08003709 	.word	0x08003709
 8003704:	08003729 	.word	0x08003729
        case CMD_SPEED_KP_UP:
            PI_Speed_AdjustKp(1);
 8003708:	2001      	movs	r0, #1
 800370a:	f7ff ff71 	bl	80035f0 <PI_Speed_AdjustKp>
            break;
 800370e:	e00f      	b.n	8003730 <PI_Speed_ProcessCommand+0x78>
        case CMD_SPEED_KP_DOWN:
            PI_Speed_AdjustKp(0);
 8003710:	2000      	movs	r0, #0
 8003712:	f7ff ff6d 	bl	80035f0 <PI_Speed_AdjustKp>
            break;
 8003716:	e00b      	b.n	8003730 <PI_Speed_ProcessCommand+0x78>
        case CMD_SPEED_KI_UP:
            PI_Speed_AdjustKi(1);
 8003718:	2001      	movs	r0, #1
 800371a:	f7ff ff9b 	bl	8003654 <PI_Speed_AdjustKi>
            break;
 800371e:	e007      	b.n	8003730 <PI_Speed_ProcessCommand+0x78>
        case CMD_SPEED_KI_DOWN:
            PI_Speed_AdjustKi(0);
 8003720:	2000      	movs	r0, #0
 8003722:	f7ff ff97 	bl	8003654 <PI_Speed_AdjustKi>
            break;
 8003726:	e003      	b.n	8003730 <PI_Speed_ProcessCommand+0x78>
        case CMD_SPEED_PRINT:
            PI_Speed_PrintParams();
 8003728:	f7ff ff28 	bl	800357c <PI_Speed_PrintParams>
            break;
 800372c:	e000      	b.n	8003730 <PI_Speed_ProcessCommand+0x78>
        default:
            break;
 800372e:	bf00      	nop
    }
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <PI_Speed_GetTargetSpeed>:
  * @brief  获取目标速度
  * @param  None
  * @retval 目标速度
  */
float PI_Speed_GetTargetSpeed(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
    return pi_params.target_speed;
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <PI_Speed_GetTargetSpeed+0x18>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	ee07 3a90 	vmov	s15, r3
}
 8003744:	eeb0 0a67 	vmov.f32	s0, s15
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	2000001c 	.word	0x2000001c

08003754 <Speed_Limit>:
  * @param  max: 最大限幅值
  * @param  min: 最小限幅值
  * @retval 限幅后的速度值
  */
static int16_t Speed_Limit(int16_t speed, int16_t max, int16_t min)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	80fb      	strh	r3, [r7, #6]
 800375e:	460b      	mov	r3, r1
 8003760:	80bb      	strh	r3, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	807b      	strh	r3, [r7, #2]
    if (speed > max) return max;
 8003766:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800376a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	dd02      	ble.n	8003778 <Speed_Limit+0x24>
 8003772:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003776:	e00a      	b.n	800378e <Speed_Limit+0x3a>
    if (speed < min) return min;
 8003778:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800377c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003780:	429a      	cmp	r2, r3
 8003782:	da02      	bge.n	800378a <Speed_Limit+0x36>
 8003784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003788:	e001      	b.n	800378e <Speed_Limit+0x3a>
    return speed;
 800378a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
} 
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <PD_Turn_Init>:
  * @brief  初始化PD转向控制器
  * @param  None
  * @retval None
  */
void PD_Turn_Init(void)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	af00      	add	r7, sp, #0
    // 参数已在静态初始化中设置
    PD_Turn_PrintParams();
 800379e:	f000 f891 	bl	80038c4 <PD_Turn_PrintParams>
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <PD_Turn_Calculate>:
  * @param  current_angle: 当前角度 (Yaw角度)
  * @param  current_yaw_rate: 当前偏航角速度 (Yaw_dmp)
  * @retval 转向控制输出 (-100 to 100, 正值左转，负值右转)
  */
int16_t PD_Turn_Calculate(float target_angle, float current_angle)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80037b2:	edc7 0a00 	vstr	s1, [r7]
    // 计算角度误差
    float angle_error = target_angle - current_angle;
 80037b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80037ba:	edd7 7a00 	vldr	s15, [r7]
 80037be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037c2:	edc7 7a05 	vstr	s15, [r7, #20]
    
    // 处理角度跨越±180度的情况
    if (angle_error > 180.0f) {
 80037c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ca:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003874 <PD_Turn_Calculate+0xcc>
 80037ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d6:	dd08      	ble.n	80037ea <PD_Turn_Calculate+0x42>
        angle_error -= 360.0f;
 80037d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037dc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003878 <PD_Turn_Calculate+0xd0>
 80037e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037e4:	edc7 7a05 	vstr	s15, [r7, #20]
 80037e8:	e010      	b.n	800380c <PD_Turn_Calculate+0x64>
    } else if (angle_error < -180.0f) {
 80037ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ee:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800387c <PD_Turn_Calculate+0xd4>
 80037f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fa:	d507      	bpl.n	800380c <PD_Turn_Calculate+0x64>
        angle_error += 360.0f;
 80037fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003800:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003878 <PD_Turn_Calculate+0xd0>
 8003804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003808:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    // PD控制：比例项使用角度误差，微分项使用角速度
    // 参考control.c中的算法：turn = Turn_Target*Kp/100 + gyro*Kd/100
    float turn_output = angle_error * pd_turn_params.kp / 100.0f + 
 800380c:	4b1c      	ldr	r3, [pc, #112]	@ (8003880 <PD_Turn_Calculate+0xd8>)
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	edd7 7a05 	vldr	s15, [r7, #20]
 8003816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381a:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8003884 <PD_Turn_Calculate+0xdc>
 800381e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    		current_angle * pd_turn_params.kd / 100.0f;
 8003822:	4b17      	ldr	r3, [pc, #92]	@ (8003880 <PD_Turn_Calculate+0xd8>)
 8003824:	edd3 6a01 	vldr	s13, [r3, #4]
 8003828:	edd7 7a00 	vldr	s15, [r7]
 800382c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003830:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8003884 <PD_Turn_Calculate+0xdc>
 8003834:	eec6 7a86 	vdiv.f32	s15, s13, s12
    float turn_output = angle_error * pd_turn_params.kp / 100.0f + 
 8003838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383c:	edc7 7a04 	vstr	s15, [r7, #16]
    
    // 转向输出限幅
    int16_t turn_pwm = (int16_t)turn_output;
 8003840:	edd7 7a04 	vldr	s15, [r7, #16]
 8003844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003848:	ee17 3a90 	vmov	r3, s15
 800384c:	81fb      	strh	r3, [r7, #14]
    turn_pwm = Turn_Limit(turn_pwm, TURN_PWM_LIMIT, -TURN_PWM_LIMIT);
 800384e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003852:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8003856:	2164      	movs	r1, #100	@ 0x64
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f8eb 	bl	8003a34 <Turn_Limit>
 800385e:	4603      	mov	r3, r0
 8003860:	81fb      	strh	r3, [r7, #14]
    
    // 更新状态
    pd_turn_state.prev_gyro = current_angle;
 8003862:	4a09      	ldr	r2, [pc, #36]	@ (8003888 <PD_Turn_Calculate+0xe0>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6013      	str	r3, [r2, #0]
    
    return turn_pwm;
 8003868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	43340000 	.word	0x43340000
 8003878:	43b40000 	.word	0x43b40000
 800387c:	c3340000 	.word	0xc3340000
 8003880:	2000002c 	.word	0x2000002c
 8003884:	42c80000 	.word	0x42c80000
 8003888:	20000590 	.word	0x20000590

0800388c <PD_Turn_GetParams>:
  * @param  kp: 比例系数指针
  * @param  kd: 微分系数指针
  * @retval None
  */
void PD_Turn_GetParams(float *kp, float *kd)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
    if (kp) *kp = pd_turn_params.kp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <PD_Turn_GetParams+0x18>
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <PD_Turn_GetParams+0x34>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	601a      	str	r2, [r3, #0]
    if (kd) *kd = pd_turn_params.kd;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <PD_Turn_GetParams+0x26>
 80038aa:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <PD_Turn_GetParams+0x34>)
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	601a      	str	r2, [r3, #0]
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000002c 	.word	0x2000002c

080038c4 <PD_Turn_PrintParams>:
  * @brief  通过串口打印当前PD转向参数
  * @param  None
  * @retval None
  */
void PD_Turn_PrintParams(void)
{
 80038c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038c8:	b09e      	sub	sp, #120	@ 0x78
 80038ca:	af04      	add	r7, sp, #16
    char buffer[100];
    sprintf(buffer, "Turn_Kp=%.1f Turn_Kd=%.1f Amplitude=%.1f\r\n", 
            pd_turn_params.kp, pd_turn_params.kd, pd_turn_params.turn_amplitude);
 80038cc:	4b17      	ldr	r3, [pc, #92]	@ (800392c <PD_Turn_PrintParams+0x68>)
 80038ce:	681b      	ldr	r3, [r3, #0]
    sprintf(buffer, "Turn_Kp=%.1f Turn_Kd=%.1f Amplitude=%.1f\r\n", 
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fc fe41 	bl	8000558 <__aeabi_f2d>
 80038d6:	4680      	mov	r8, r0
 80038d8:	4689      	mov	r9, r1
            pd_turn_params.kp, pd_turn_params.kd, pd_turn_params.turn_amplitude);
 80038da:	4b14      	ldr	r3, [pc, #80]	@ (800392c <PD_Turn_PrintParams+0x68>)
 80038dc:	685b      	ldr	r3, [r3, #4]
    sprintf(buffer, "Turn_Kp=%.1f Turn_Kd=%.1f Amplitude=%.1f\r\n", 
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fc fe3a 	bl	8000558 <__aeabi_f2d>
 80038e4:	4604      	mov	r4, r0
 80038e6:	460d      	mov	r5, r1
            pd_turn_params.kp, pd_turn_params.kd, pd_turn_params.turn_amplitude);
 80038e8:	4b10      	ldr	r3, [pc, #64]	@ (800392c <PD_Turn_PrintParams+0x68>)
 80038ea:	689b      	ldr	r3, [r3, #8]
    sprintf(buffer, "Turn_Kp=%.1f Turn_Kd=%.1f Amplitude=%.1f\r\n", 
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fc fe33 	bl	8000558 <__aeabi_f2d>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	1d38      	adds	r0, r7, #4
 80038f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038fc:	e9cd 4500 	strd	r4, r5, [sp]
 8003900:	4642      	mov	r2, r8
 8003902:	464b      	mov	r3, r9
 8003904:	490a      	ldr	r1, [pc, #40]	@ (8003930 <PD_Turn_PrintParams+0x6c>)
 8003906:	f006 fb39 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800390a:	1d3b      	adds	r3, r7, #4
 800390c:	4618      	mov	r0, r3
 800390e:	f7fc fcb7 	bl	8000280 <strlen>
 8003912:	4603      	mov	r3, r0
 8003914:	b29a      	uxth	r2, r3
 8003916:	1d39      	adds	r1, r7, #4
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
 800391c:	4805      	ldr	r0, [pc, #20]	@ (8003934 <PD_Turn_PrintParams+0x70>)
 800391e:	f004 fe0d 	bl	800853c <HAL_UART_Transmit>
}
 8003922:	bf00      	nop
 8003924:	3768      	adds	r7, #104	@ 0x68
 8003926:	46bd      	mov	sp, r7
 8003928:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800392c:	2000002c 	.word	0x2000002c
 8003930:	0800d3e4 	.word	0x0800d3e4
 8003934:	20000464 	.word	0x20000464

08003938 <PD_Turn_AdjustKp>:
  * @brief  调整转向Kp参数
  * @param  increase: 1增加，0减少
  * @retval None
  */
void PD_Turn_AdjustKp(uint8_t increase)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
    if (increase) {
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <PD_Turn_AdjustKp+0x26>
        pd_turn_params.kp += TURN_PARAM_ADJUST_STEP;
 8003948:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <PD_Turn_AdjustKp+0x5c>)
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003956:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <PD_Turn_AdjustKp+0x5c>)
 8003958:	edc3 7a00 	vstr	s15, [r3]
 800395c:	e013      	b.n	8003986 <PD_Turn_AdjustKp+0x4e>
    } else {
        if (pd_turn_params.kp > TURN_PARAM_ADJUST_STEP) {
 800395e:	4b0d      	ldr	r3, [pc, #52]	@ (8003994 <PD_Turn_AdjustKp+0x5c>)
 8003960:	edd3 7a00 	vldr	s15, [r3]
 8003964:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003970:	dd09      	ble.n	8003986 <PD_Turn_AdjustKp+0x4e>
            pd_turn_params.kp -= TURN_PARAM_ADJUST_STEP;
 8003972:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <PD_Turn_AdjustKp+0x5c>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800397c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003980:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <PD_Turn_AdjustKp+0x5c>)
 8003982:	edc3 7a00 	vstr	s15, [r3]
        }
    }
    PD_Turn_PrintParams();
 8003986:	f7ff ff9d 	bl	80038c4 <PD_Turn_PrintParams>
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000002c 	.word	0x2000002c

08003998 <PD_Turn_AdjustKd>:
  * @brief  调整转向Kd参数
  * @param  increase: 1增加，0减少
  * @retval None
  */
void PD_Turn_AdjustKd(uint8_t increase)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
    if (increase) {
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <PD_Turn_AdjustKd+0x26>
        pd_turn_params.kd += TURN_PARAM_ADJUST_STEP;
 80039a8:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <PD_Turn_AdjustKd+0x5c>)
 80039aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ae:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80039b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039b6:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <PD_Turn_AdjustKd+0x5c>)
 80039b8:	edc3 7a01 	vstr	s15, [r3, #4]
 80039bc:	e013      	b.n	80039e6 <PD_Turn_AdjustKd+0x4e>
    } else {
        if (pd_turn_params.kd > TURN_PARAM_ADJUST_STEP) {
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <PD_Turn_AdjustKd+0x5c>)
 80039c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80039c4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80039c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d0:	dd09      	ble.n	80039e6 <PD_Turn_AdjustKd+0x4e>
            pd_turn_params.kd -= TURN_PARAM_ADJUST_STEP;
 80039d2:	4b08      	ldr	r3, [pc, #32]	@ (80039f4 <PD_Turn_AdjustKd+0x5c>)
 80039d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80039d8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80039dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039e0:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <PD_Turn_AdjustKd+0x5c>)
 80039e2:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }
    PD_Turn_PrintParams();
 80039e6:	f7ff ff6d 	bl	80038c4 <PD_Turn_PrintParams>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	2000002c 	.word	0x2000002c

080039f8 <PD_Turn_SetTargetAngle>:
  * @brief  设置目标角度
  * @param  target: 目标角度
  * @retval None
  */
void PD_Turn_SetTargetAngle(float target)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a01 	vstr	s0, [r7, #4]
    pd_turn_params.target_angle = target;
 8003a02:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <PD_Turn_SetTargetAngle+0x1c>)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60d3      	str	r3, [r2, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	2000002c 	.word	0x2000002c

08003a18 <PD_Turn_GetTargetAngle>:
  * @brief  获取目标角度
  * @param  None
  * @retval 目标角度
  */
float PD_Turn_GetTargetAngle(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
    return pd_turn_params.target_angle;
 8003a1c:	4b04      	ldr	r3, [pc, #16]	@ (8003a30 <PD_Turn_GetTargetAngle+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	ee07 3a90 	vmov	s15, r3
}
 8003a24:	eeb0 0a67 	vmov.f32	s0, s15
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	2000002c 	.word	0x2000002c

08003a34 <Turn_Limit>:
  * @param  max: 最大限幅值
  * @param  min: 最小限幅值
  * @retval 限幅后的转向值
  */
static int16_t Turn_Limit(int16_t turn, int16_t max, int16_t min)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	80bb      	strh	r3, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	807b      	strh	r3, [r7, #2]
    if (turn > max) return max;
 8003a46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	dd02      	ble.n	8003a58 <Turn_Limit+0x24>
 8003a52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a56:	e00a      	b.n	8003a6e <Turn_Limit+0x3a>
    if (turn < min) return min;
 8003a58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	da02      	bge.n	8003a6a <Turn_Limit+0x36>
 8003a64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a68:	e001      	b.n	8003a6e <Turn_Limit+0x3a>
    return turn;
 8003a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <PD_Turn_ProcessCommand>:
  * @brief  处理蓝牙命令
  * @param  cmd: 命令字符
  * @retval None
  */
void PD_Turn_ProcessCommand(uint8_t cmd)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
    switch(cmd) {
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	3b66      	subs	r3, #102	@ 0x66
 8003a8a:	2b0e      	cmp	r3, #14
 8003a8c:	d833      	bhi.n	8003af6 <PD_Turn_ProcessCommand+0x7a>
 8003a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <PD_Turn_ProcessCommand+0x18>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003ad9 	.word	0x08003ad9
 8003a98:	08003ae9 	.word	0x08003ae9
 8003a9c:	08003af7 	.word	0x08003af7
 8003aa0:	08003af7 	.word	0x08003af7
 8003aa4:	08003af7 	.word	0x08003af7
 8003aa8:	08003af7 	.word	0x08003af7
 8003aac:	08003af7 	.word	0x08003af7
 8003ab0:	08003af7 	.word	0x08003af7
 8003ab4:	08003af1 	.word	0x08003af1
 8003ab8:	08003af7 	.word	0x08003af7
 8003abc:	08003af7 	.word	0x08003af7
 8003ac0:	08003af7 	.word	0x08003af7
 8003ac4:	08003ad1 	.word	0x08003ad1
 8003ac8:	08003af7 	.word	0x08003af7
 8003acc:	08003ae1 	.word	0x08003ae1
        case CMD_TURN_KP_UP:
            PD_Turn_AdjustKp(1);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f7ff ff31 	bl	8003938 <PD_Turn_AdjustKp>
            break;
 8003ad6:	e00f      	b.n	8003af8 <PD_Turn_ProcessCommand+0x7c>
        case CMD_TURN_KP_DOWN:
            PD_Turn_AdjustKp(0);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7ff ff2d 	bl	8003938 <PD_Turn_AdjustKp>
            break;
 8003ade:	e00b      	b.n	8003af8 <PD_Turn_ProcessCommand+0x7c>
        case CMD_TURN_KD_UP:
            PD_Turn_AdjustKd(1);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f7ff ff59 	bl	8003998 <PD_Turn_AdjustKd>
            break;
 8003ae6:	e007      	b.n	8003af8 <PD_Turn_ProcessCommand+0x7c>
        case CMD_TURN_KD_DOWN:
            PD_Turn_AdjustKd(0);
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7ff ff55 	bl	8003998 <PD_Turn_AdjustKd>
            break;
 8003aee:	e003      	b.n	8003af8 <PD_Turn_ProcessCommand+0x7c>
        case CMD_TURN_PRINT:
            PD_Turn_PrintParams();
 8003af0:	f7ff fee8 	bl	80038c4 <PD_Turn_PrintParams>
            break;
 8003af4:	e000      	b.n	8003af8 <PD_Turn_ProcessCommand+0x7c>
        default:
            break;
 8003af6:	bf00      	nop
    }
} 
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af04      	add	r7, sp, #16
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003b0c:	230a      	movs	r3, #10
 8003b0e:	9302      	str	r3, [sp, #8]
 8003b10:	2301      	movs	r3, #1
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	1cfb      	adds	r3, r7, #3
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2178      	movs	r1, #120	@ 0x78
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f001 fce8 	bl	80054f4 <HAL_I2C_Mem_Write>
 8003b24:	4603      	mov	r3, r0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8003b38:	2064      	movs	r0, #100	@ 0x64
 8003b3a:	f001 f819 	bl	8004b70 <HAL_Delay>
    int status = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 8003b42:	21ae      	movs	r1, #174	@ 0xae
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ffdb 	bl	8003b00 <ssd1306_WriteCommand>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 8003b54:	2120      	movs	r1, #32
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ffd2 	bl	8003b00 <ssd1306_WriteCommand>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003b66:	2110      	movs	r1, #16
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ffc9 	bl	8003b00 <ssd1306_WriteCommand>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8003b78:	21b0      	movs	r1, #176	@ 0xb0
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff ffc0 	bl	8003b00 <ssd1306_WriteCommand>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8003b8a:	21c8      	movs	r1, #200	@ 0xc8
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffb7 	bl	8003b00 <ssd1306_WriteCommand>
 8003b92:	4603      	mov	r3, r0
 8003b94:	461a      	mov	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ffae 	bl	8003b00 <ssd1306_WriteCommand>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8003bae:	2110      	movs	r1, #16
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ffa5 	bl	8003b00 <ssd1306_WriteCommand>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ff9c 	bl	8003b00 <ssd1306_WriteCommand>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8003bd2:	2181      	movs	r1, #129	@ 0x81
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ff93 	bl	8003b00 <ssd1306_WriteCommand>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4413      	add	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8003be4:	21ff      	movs	r1, #255	@ 0xff
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ff8a 	bl	8003b00 <ssd1306_WriteCommand>
 8003bec:	4603      	mov	r3, r0
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8003bf6:	21a1      	movs	r1, #161	@ 0xa1
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff81 	bl	8003b00 <ssd1306_WriteCommand>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8003c08:	21a6      	movs	r1, #166	@ 0xa6
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff78 	bl	8003b00 <ssd1306_WriteCommand>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 8003c1a:	21a8      	movs	r1, #168	@ 0xa8
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff6f 	bl	8003b00 <ssd1306_WriteCommand>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 8003c2c:	213f      	movs	r1, #63	@ 0x3f
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ff66 	bl	8003b00 <ssd1306_WriteCommand>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003c3e:	21a4      	movs	r1, #164	@ 0xa4
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff5d 	bl	8003b00 <ssd1306_WriteCommand>
 8003c46:	4603      	mov	r3, r0
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 8003c50:	21d3      	movs	r1, #211	@ 0xd3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ff54 	bl	8003b00 <ssd1306_WriteCommand>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 8003c62:	2100      	movs	r1, #0
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff4b 	bl	8003b00 <ssd1306_WriteCommand>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 8003c74:	21d5      	movs	r1, #213	@ 0xd5
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ff42 	bl	8003b00 <ssd1306_WriteCommand>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4413      	add	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8003c86:	21f0      	movs	r1, #240	@ 0xf0
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff39 	bl	8003b00 <ssd1306_WriteCommand>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	461a      	mov	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8003c98:	21d9      	movs	r1, #217	@ 0xd9
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ff30 	bl	8003b00 <ssd1306_WriteCommand>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8003caa:	2122      	movs	r1, #34	@ 0x22
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff27 	bl	8003b00 <ssd1306_WriteCommand>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8003cbc:	21da      	movs	r1, #218	@ 0xda
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff ff1e 	bl	8003b00 <ssd1306_WriteCommand>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8003cce:	2112      	movs	r1, #18
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff15 	bl	8003b00 <ssd1306_WriteCommand>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8003ce0:	21db      	movs	r1, #219	@ 0xdb
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff ff0c 	bl	8003b00 <ssd1306_WriteCommand>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8003cf2:	2120      	movs	r1, #32
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff03 	bl	8003b00 <ssd1306_WriteCommand>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8003d04:	218d      	movs	r1, #141	@ 0x8d
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fefa 	bl	8003b00 <ssd1306_WriteCommand>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8003d16:	2114      	movs	r1, #20
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7ff fef1 	bl	8003b00 <ssd1306_WriteCommand>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461a      	mov	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 8003d28:	21af      	movs	r1, #175	@ 0xaf
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fee8 	bl	8003b00 <ssd1306_WriteCommand>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <ssd1306_Init+0x214>
        return 1;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e00f      	b.n	8003d64 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8003d44:	2000      	movs	r0, #0
 8003d46:	f000 f813 	bl	8003d70 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f834 	bl	8003db8 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003d50:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <ssd1306_Init+0x23c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003d56:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <ssd1306_Init+0x23c>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	@ (8003d6c <ssd1306_Init+0x23c>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	715a      	strb	r2, [r3, #5]

    return 0;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000994 	.word	0x20000994

08003d70 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	e00d      	b.n	8003d9c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <ssd1306_Fill+0x1a>
 8003d86:	2100      	movs	r1, #0
 8003d88:	e000      	b.n	8003d8c <ssd1306_Fill+0x1c>
 8003d8a:	21ff      	movs	r1, #255	@ 0xff
 8003d8c:	4a09      	ldr	r2, [pc, #36]	@ (8003db4 <ssd1306_Fill+0x44>)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	460a      	mov	r2, r1
 8003d94:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da2:	d3ed      	bcc.n	8003d80 <ssd1306_Fill+0x10>
    }
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000594 	.word	0x20000594

08003db8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af04      	add	r7, sp, #16
 8003dbe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	e020      	b.n	8003e08 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	3b50      	subs	r3, #80	@ 0x50
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fe96 	bl	8003b00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fe92 	bl	8003b00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8003ddc:	2110      	movs	r1, #16
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff fe8e 	bl	8003b00 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e18 <ssd1306_UpdateScreen+0x60>)
 8003dea:	4413      	add	r3, r2
 8003dec:	2264      	movs	r2, #100	@ 0x64
 8003dee:	9202      	str	r2, [sp, #8]
 8003df0:	2280      	movs	r2, #128	@ 0x80
 8003df2:	9201      	str	r2, [sp, #4]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	2301      	movs	r3, #1
 8003df8:	2240      	movs	r2, #64	@ 0x40
 8003dfa:	2178      	movs	r1, #120	@ 0x78
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 fb79 	bl	80054f4 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	3301      	adds	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	2b07      	cmp	r3, #7
 8003e0c:	d9db      	bls.n	8003dc6 <ssd1306_UpdateScreen+0xe>
    }
}
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000594 	.word	0x20000594

08003e1c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
 8003e26:	460b      	mov	r3, r1
 8003e28:	71bb      	strb	r3, [r7, #6]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db48      	blt.n	8003ec8 <ssd1306_DrawPixel+0xac>
 8003e36:	79bb      	ldrb	r3, [r7, #6]
 8003e38:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e3a:	d845      	bhi.n	8003ec8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003e3c:	4b25      	ldr	r3, [pc, #148]	@ (8003ed4 <ssd1306_DrawPixel+0xb8>)
 8003e3e:	791b      	ldrb	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8003e44:	797b      	ldrb	r3, [r7, #5]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8003e52:	797b      	ldrb	r3, [r7, #5]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d11a      	bne.n	8003e8e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003e58:	79fa      	ldrb	r2, [r7, #7]
 8003e5a:	79bb      	ldrb	r3, [r7, #6]
 8003e5c:	08db      	lsrs	r3, r3, #3
 8003e5e:	b2d8      	uxtb	r0, r3
 8003e60:	4603      	mov	r3, r0
 8003e62:	01db      	lsls	r3, r3, #7
 8003e64:	4413      	add	r3, r2
 8003e66:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed8 <ssd1306_DrawPixel+0xbc>)
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	b25a      	sxtb	r2, r3
 8003e6c:	79bb      	ldrb	r3, [r7, #6]
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b259      	sxtb	r1, r3
 8003e7e:	79fa      	ldrb	r2, [r7, #7]
 8003e80:	4603      	mov	r3, r0
 8003e82:	01db      	lsls	r3, r3, #7
 8003e84:	4413      	add	r3, r2
 8003e86:	b2c9      	uxtb	r1, r1
 8003e88:	4a13      	ldr	r2, [pc, #76]	@ (8003ed8 <ssd1306_DrawPixel+0xbc>)
 8003e8a:	54d1      	strb	r1, [r2, r3]
 8003e8c:	e01d      	b.n	8003eca <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003e8e:	79fa      	ldrb	r2, [r7, #7]
 8003e90:	79bb      	ldrb	r3, [r7, #6]
 8003e92:	08db      	lsrs	r3, r3, #3
 8003e94:	b2d8      	uxtb	r0, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	01db      	lsls	r3, r3, #7
 8003e9a:	4413      	add	r3, r2
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed8 <ssd1306_DrawPixel+0xbc>)
 8003e9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ea0:	b25a      	sxtb	r2, r3
 8003ea2:	79bb      	ldrb	r3, [r7, #6]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	b25b      	sxtb	r3, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	b259      	sxtb	r1, r3
 8003eb8:	79fa      	ldrb	r2, [r7, #7]
 8003eba:	4603      	mov	r3, r0
 8003ebc:	01db      	lsls	r3, r3, #7
 8003ebe:	4413      	add	r3, r2
 8003ec0:	b2c9      	uxtb	r1, r1
 8003ec2:	4a05      	ldr	r2, [pc, #20]	@ (8003ed8 <ssd1306_DrawPixel+0xbc>)
 8003ec4:	54d1      	strb	r1, [r2, r3]
 8003ec6:	e000      	b.n	8003eca <ssd1306_DrawPixel+0xae>
        return;
 8003ec8:	bf00      	nop
    }
}
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	20000994 	.word	0x20000994
 8003ed8:	20000594 	.word	0x20000594

08003edc <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b089      	sub	sp, #36	@ 0x24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	1d38      	adds	r0, r7, #4
 8003ee6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003eea:	461a      	mov	r2, r3
 8003eec:	4623      	mov	r3, r4
 8003eee:	73fb      	strb	r3, [r7, #15]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003ef4:	4b38      	ldr	r3, [pc, #224]	@ (8003fd8 <ssd1306_WriteChar+0xfc>)
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	793b      	ldrb	r3, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f00:	dc06      	bgt.n	8003f10 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8003f02:	4b35      	ldr	r3, [pc, #212]	@ (8003fd8 <ssd1306_WriteChar+0xfc>)
 8003f04:	885b      	ldrh	r3, [r3, #2]
 8003f06:	461a      	mov	r2, r3
 8003f08:	797b      	ldrb	r3, [r7, #5]
 8003f0a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003f0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f0e:	dd01      	ble.n	8003f14 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e05c      	b.n	8003fce <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	61fb      	str	r3, [r7, #28]
 8003f18:	e04c      	b.n	8003fb4 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	3b20      	subs	r3, #32
 8003f20:	7979      	ldrb	r1, [r7, #5]
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4619      	mov	r1, r3
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	440b      	add	r3, r1
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8003f34:	2300      	movs	r3, #0
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	e034      	b.n	8003fa4 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d012      	beq.n	8003f70 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003f4a:	4b23      	ldr	r3, [pc, #140]	@ (8003fd8 <ssd1306_WriteChar+0xfc>)
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	b2d8      	uxtb	r0, r3
 8003f58:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd8 <ssd1306_WriteChar+0xfc>)
 8003f5a:	885b      	ldrh	r3, [r3, #2]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	7bba      	ldrb	r2, [r7, #14]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f7ff ff57 	bl	8003e1c <ssd1306_DrawPixel>
 8003f6e:	e016      	b.n	8003f9e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003f70:	4b19      	ldr	r3, [pc, #100]	@ (8003fd8 <ssd1306_WriteChar+0xfc>)
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	b2d8      	uxtb	r0, r3
 8003f7e:	4b16      	ldr	r3, [pc, #88]	@ (8003fd8 <ssd1306_WriteChar+0xfc>)
 8003f80:	885b      	ldrh	r3, [r3, #2]
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	b2d9      	uxtb	r1, r3
 8003f8c:	7bbb      	ldrb	r3, [r7, #14]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f7ff ff3f 	bl	8003e1c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	793b      	ldrb	r3, [r7, #4]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d3c5      	bcc.n	8003f3a <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	797b      	ldrb	r3, [r7, #5]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d3ad      	bcc.n	8003f1a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003fbe:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <ssd1306_WriteChar+0xfc>)
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	793a      	ldrb	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <ssd1306_WriteChar+0xfc>)
 8003fca:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	@ 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd90      	pop	{r4, r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000994 	.word	0x20000994

08003fdc <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	1d38      	adds	r0, r7, #4
 8003fe6:	e880 0006 	stmia.w	r0, {r1, r2}
 8003fea:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8003fec:	e012      	b.n	8004014 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	7818      	ldrb	r0, [r3, #0]
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	1d3a      	adds	r2, r7, #4
 8003ff6:	ca06      	ldmia	r2, {r1, r2}
 8003ff8:	f7ff ff70 	bl	8003edc <ssd1306_WriteChar>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d002      	beq.n	800400e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	e008      	b.n	8004020 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
    while (*str)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e8      	bne.n	8003fee <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	781b      	ldrb	r3, [r3, #0]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	460a      	mov	r2, r1
 8004032:	71fb      	strb	r3, [r7, #7]
 8004034:	4613      	mov	r3, r2
 8004036:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	b29a      	uxth	r2, r3
 800403c:	4b05      	ldr	r3, [pc, #20]	@ (8004054 <ssd1306_SetCursor+0x2c>)
 800403e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004040:	79bb      	ldrb	r3, [r7, #6]
 8004042:	b29a      	uxth	r2, r3
 8004044:	4b03      	ldr	r3, [pc, #12]	@ (8004054 <ssd1306_SetCursor+0x2c>)
 8004046:	805a      	strh	r2, [r3, #2]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	20000994 	.word	0x20000994

08004058 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	4b10      	ldr	r3, [pc, #64]	@ (80040a4 <HAL_MspInit+0x4c>)
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	4a0f      	ldr	r2, [pc, #60]	@ (80040a4 <HAL_MspInit+0x4c>)
 8004068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800406c:	6453      	str	r3, [r2, #68]	@ 0x44
 800406e:	4b0d      	ldr	r3, [pc, #52]	@ (80040a4 <HAL_MspInit+0x4c>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <HAL_MspInit+0x4c>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	4a08      	ldr	r2, [pc, #32]	@ (80040a4 <HAL_MspInit+0x4c>)
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004088:	6413      	str	r3, [r2, #64]	@ 0x40
 800408a:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <HAL_MspInit+0x4c>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800

080040a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08c      	sub	sp, #48	@ 0x30
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b0:	f107 031c 	add.w	r3, r7, #28
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a4a      	ldr	r2, [pc, #296]	@ (80041f0 <HAL_I2C_MspInit+0x148>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d13d      	bne.n	8004146 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	4b49      	ldr	r3, [pc, #292]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	4a48      	ldr	r2, [pc, #288]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 80040d4:	f043 0302 	orr.w	r3, r3, #2
 80040d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040da:	4b46      	ldr	r3, [pc, #280]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ec:	2312      	movs	r3, #18
 80040ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f4:	2303      	movs	r3, #3
 80040f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80040f8:	2304      	movs	r3, #4
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040fc:	f107 031c 	add.w	r3, r7, #28
 8004100:	4619      	mov	r1, r3
 8004102:	483d      	ldr	r0, [pc, #244]	@ (80041f8 <HAL_I2C_MspInit+0x150>)
 8004104:	f000 fefc 	bl	8004f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004108:	2308      	movs	r3, #8
 800410a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800410c:	2312      	movs	r3, #18
 800410e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004114:	2303      	movs	r3, #3
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004118:	2309      	movs	r3, #9
 800411a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411c:	f107 031c 	add.w	r3, r7, #28
 8004120:	4619      	mov	r1, r3
 8004122:	4835      	ldr	r0, [pc, #212]	@ (80041f8 <HAL_I2C_MspInit+0x150>)
 8004124:	f000 feec 	bl	8004f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	4b31      	ldr	r3, [pc, #196]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	4a30      	ldr	r2, [pc, #192]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 8004132:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004136:	6413      	str	r3, [r2, #64]	@ 0x40
 8004138:	4b2e      	ldr	r3, [pc, #184]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004144:	e050      	b.n	80041e8 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C3)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2c      	ldr	r2, [pc, #176]	@ (80041fc <HAL_I2C_MspInit+0x154>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d14b      	bne.n	80041e8 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004150:	2300      	movs	r3, #0
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	4a26      	ldr	r2, [pc, #152]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 800415a:	f043 0304 	orr.w	r3, r3, #4
 800415e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004160:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	4b20      	ldr	r3, [pc, #128]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004174:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6313      	str	r3, [r2, #48]	@ 0x30
 800417c:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800418c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800418e:	2312      	movs	r3, #18
 8004190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004192:	2300      	movs	r3, #0
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004196:	2303      	movs	r3, #3
 8004198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800419a:	2304      	movs	r3, #4
 800419c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419e:	f107 031c 	add.w	r3, r7, #28
 80041a2:	4619      	mov	r1, r3
 80041a4:	4816      	ldr	r0, [pc, #88]	@ (8004200 <HAL_I2C_MspInit+0x158>)
 80041a6:	f000 feab 	bl	8004f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041b0:	2312      	movs	r3, #18
 80041b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b8:	2303      	movs	r3, #3
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041bc:	2304      	movs	r3, #4
 80041be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041c0:	f107 031c 	add.w	r3, r7, #28
 80041c4:	4619      	mov	r1, r3
 80041c6:	480f      	ldr	r0, [pc, #60]	@ (8004204 <HAL_I2C_MspInit+0x15c>)
 80041c8:	f000 fe9a 	bl	8004f00 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	4a07      	ldr	r2, [pc, #28]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 80041d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041da:	6413      	str	r3, [r2, #64]	@ 0x40
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <HAL_I2C_MspInit+0x14c>)
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
}
 80041e8:	bf00      	nop
 80041ea:	3730      	adds	r7, #48	@ 0x30
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40005800 	.word	0x40005800
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40020400 	.word	0x40020400
 80041fc:	40005c00 	.word	0x40005c00
 8004200:	40020800 	.word	0x40020800
 8004204:	40020000 	.word	0x40020000

08004208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	@ 0x28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 0314 	add.w	r3, r7, #20
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a19      	ldr	r2, [pc, #100]	@ (800428c <HAL_SPI_MspInit+0x84>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d12b      	bne.n	8004282 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	4b18      	ldr	r3, [pc, #96]	@ (8004290 <HAL_SPI_MspInit+0x88>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	4a17      	ldr	r2, [pc, #92]	@ (8004290 <HAL_SPI_MspInit+0x88>)
 8004234:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004238:	6453      	str	r3, [r2, #68]	@ 0x44
 800423a:	4b15      	ldr	r3, [pc, #84]	@ (8004290 <HAL_SPI_MspInit+0x88>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <HAL_SPI_MspInit+0x88>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <HAL_SPI_MspInit+0x88>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6313      	str	r3, [r2, #48]	@ 0x30
 8004256:	4b0e      	ldr	r3, [pc, #56]	@ (8004290 <HAL_SPI_MspInit+0x88>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004262:	23e0      	movs	r3, #224	@ 0xe0
 8004264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004266:	2302      	movs	r3, #2
 8004268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426e:	2303      	movs	r3, #3
 8004270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004272:	2305      	movs	r3, #5
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004276:	f107 0314 	add.w	r3, r7, #20
 800427a:	4619      	mov	r1, r3
 800427c:	4805      	ldr	r0, [pc, #20]	@ (8004294 <HAL_SPI_MspInit+0x8c>)
 800427e:	f000 fe3f 	bl	8004f00 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004282:	bf00      	nop
 8004284:	3728      	adds	r7, #40	@ 0x28
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40013000 	.word	0x40013000
 8004290:	40023800 	.word	0x40023800
 8004294:	40020000 	.word	0x40020000

08004298 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a18      	ldr	r2, [pc, #96]	@ (8004308 <HAL_TIM_Base_MspInit+0x70>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d116      	bne.n	80042d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4b17      	ldr	r3, [pc, #92]	@ (800430c <HAL_TIM_Base_MspInit+0x74>)
 80042b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042b2:	4a16      	ldr	r2, [pc, #88]	@ (800430c <HAL_TIM_Base_MspInit+0x74>)
 80042b4:	f043 0301 	orr.w	r3, r3, #1
 80042b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80042ba:	4b14      	ldr	r3, [pc, #80]	@ (800430c <HAL_TIM_Base_MspInit+0x74>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2100      	movs	r1, #0
 80042ca:	2019      	movs	r0, #25
 80042cc:	f000 fd4f 	bl	8004d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80042d0:	2019      	movs	r0, #25
 80042d2:	f000 fd68 	bl	8004da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80042d6:	e012      	b.n	80042fe <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004310 <HAL_TIM_Base_MspInit+0x78>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10d      	bne.n	80042fe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	4b09      	ldr	r3, [pc, #36]	@ (800430c <HAL_TIM_Base_MspInit+0x74>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	4a08      	ldr	r2, [pc, #32]	@ (800430c <HAL_TIM_Base_MspInit+0x74>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042f2:	4b06      	ldr	r3, [pc, #24]	@ (800430c <HAL_TIM_Base_MspInit+0x74>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40023800 	.word	0x40023800
 8004310:	40000800 	.word	0x40000800

08004314 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	@ 0x30
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800431c:	f107 031c 	add.w	r3, r7, #28
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004334:	d12c      	bne.n	8004390 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	4b3f      	ldr	r3, [pc, #252]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	4a3e      	ldr	r2, [pc, #248]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6413      	str	r3, [r2, #64]	@ 0x40
 8004346:	4b3c      	ldr	r3, [pc, #240]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	61bb      	str	r3, [r7, #24]
 8004350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	4b38      	ldr	r3, [pc, #224]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	4a37      	ldr	r2, [pc, #220]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6313      	str	r3, [r2, #48]	@ 0x30
 8004362:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A1_Pin|Encoder_A2_Pin;
 800436e:	2303      	movs	r3, #3
 8004370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004372:	2302      	movs	r3, #2
 8004374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437a:	2300      	movs	r3, #0
 800437c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800437e:	2301      	movs	r3, #1
 8004380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004382:	f107 031c 	add.w	r3, r7, #28
 8004386:	4619      	mov	r1, r3
 8004388:	482c      	ldr	r0, [pc, #176]	@ (800443c <HAL_TIM_Encoder_MspInit+0x128>)
 800438a:	f000 fdb9 	bl	8004f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800438e:	e04e      	b.n	800442e <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM3)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a2a      	ldr	r2, [pc, #168]	@ (8004440 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d149      	bne.n	800442e <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	4b26      	ldr	r3, [pc, #152]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	4a25      	ldr	r2, [pc, #148]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043a4:	f043 0302 	orr.w	r3, r3, #2
 80043a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043aa:	4b23      	ldr	r3, [pc, #140]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	4a1e      	ldr	r2, [pc, #120]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	4b18      	ldr	r3, [pc, #96]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	4a17      	ldr	r2, [pc, #92]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043e2:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <HAL_TIM_Encoder_MspInit+0x124>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_B1_Pin;
 80043ee:	2340      	movs	r3, #64	@ 0x40
 80043f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fa:	2300      	movs	r3, #0
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043fe:	2302      	movs	r3, #2
 8004400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_B1_GPIO_Port, &GPIO_InitStruct);
 8004402:	f107 031c 	add.w	r3, r7, #28
 8004406:	4619      	mov	r1, r3
 8004408:	480e      	ldr	r0, [pc, #56]	@ (8004444 <HAL_TIM_Encoder_MspInit+0x130>)
 800440a:	f000 fd79 	bl	8004f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_B2_Pin;
 800440e:	2320      	movs	r3, #32
 8004410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004412:	2302      	movs	r3, #2
 8004414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441a:	2300      	movs	r3, #0
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800441e:	2302      	movs	r3, #2
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_B2_GPIO_Port, &GPIO_InitStruct);
 8004422:	f107 031c 	add.w	r3, r7, #28
 8004426:	4619      	mov	r1, r3
 8004428:	4807      	ldr	r0, [pc, #28]	@ (8004448 <HAL_TIM_Encoder_MspInit+0x134>)
 800442a:	f000 fd69 	bl	8004f00 <HAL_GPIO_Init>
}
 800442e:	bf00      	nop
 8004430:	3730      	adds	r7, #48	@ 0x30
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	40020000 	.word	0x40020000
 8004440:	40000400 	.word	0x40000400
 8004444:	40020800 	.word	0x40020800
 8004448:	40020400 	.word	0x40020400

0800444c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	f107 030c 	add.w	r3, r7, #12
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a12      	ldr	r2, [pc, #72]	@ (80044b4 <HAL_TIM_MspPostInit+0x68>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d11e      	bne.n	80044ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	4b11      	ldr	r3, [pc, #68]	@ (80044b8 <HAL_TIM_MspPostInit+0x6c>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	4a10      	ldr	r2, [pc, #64]	@ (80044b8 <HAL_TIM_MspPostInit+0x6c>)
 8004478:	f043 0302 	orr.w	r3, r3, #2
 800447c:	6313      	str	r3, [r2, #48]	@ 0x30
 800447e:	4b0e      	ldr	r3, [pc, #56]	@ (80044b8 <HAL_TIM_MspPostInit+0x6c>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWMB1_Pin|PWMB2_Pin|PWMA1_Pin|PWMA2_Pin;
 800448a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800448e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004490:	2302      	movs	r3, #2
 8004492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004498:	2300      	movs	r3, #0
 800449a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800449c:	2302      	movs	r3, #2
 800449e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a0:	f107 030c 	add.w	r3, r7, #12
 80044a4:	4619      	mov	r1, r3
 80044a6:	4805      	ldr	r0, [pc, #20]	@ (80044bc <HAL_TIM_MspPostInit+0x70>)
 80044a8:	f000 fd2a 	bl	8004f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80044ac:	bf00      	nop
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40020400 	.word	0x40020400

080044c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	@ 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c8:	f107 0314 	add.w	r3, r7, #20
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
 80044d4:	60da      	str	r2, [r3, #12]
 80044d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_UART_MspInit+0x94>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d134      	bne.n	800454c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004558 <HAL_UART_MspInit+0x98>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004558 <HAL_UART_MspInit+0x98>)
 80044ec:	f043 0320 	orr.w	r3, r3, #32
 80044f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044f2:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_UART_MspInit+0x98>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	4b15      	ldr	r3, [pc, #84]	@ (8004558 <HAL_UART_MspInit+0x98>)
 8004504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004506:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <HAL_UART_MspInit+0x98>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	6313      	str	r3, [r2, #48]	@ 0x30
 800450e:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_UART_MspInit+0x98>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800451a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800451e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004520:	2302      	movs	r3, #2
 8004522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004528:	2303      	movs	r3, #3
 800452a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800452c:	2308      	movs	r3, #8
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	4619      	mov	r1, r3
 8004536:	4809      	ldr	r0, [pc, #36]	@ (800455c <HAL_UART_MspInit+0x9c>)
 8004538:	f000 fce2 	bl	8004f00 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800453c:	2200      	movs	r2, #0
 800453e:	2100      	movs	r1, #0
 8004540:	2047      	movs	r0, #71	@ 0x47
 8004542:	f000 fc14 	bl	8004d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004546:	2047      	movs	r0, #71	@ 0x47
 8004548:	f000 fc2d 	bl	8004da6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 800454c:	bf00      	nop
 800454e:	3728      	adds	r7, #40	@ 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40011400 	.word	0x40011400
 8004558:	40023800 	.word	0x40023800
 800455c:	40020000 	.word	0x40020000

08004560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004564:	bf00      	nop
 8004566:	e7fd      	b.n	8004564 <NMI_Handler+0x4>

08004568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <HardFault_Handler+0x4>

08004570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <MemManage_Handler+0x4>

08004578 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800457c:	bf00      	nop
 800457e:	e7fd      	b.n	800457c <BusFault_Handler+0x4>

08004580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004584:	bf00      	nop
 8004586:	e7fd      	b.n	8004584 <UsageFault_Handler+0x4>

08004588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800459a:	bf00      	nop
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045a8:	bf00      	nop
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045b6:	f000 fabb 	bl	8004b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}

080045be <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80045c2:	2002      	movs	r0, #2
 80045c4:	f000 fe3a 	bl	800523c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80045c8:	bf00      	nop
 80045ca:	bd80      	pop	{r7, pc}

080045cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045d0:	4802      	ldr	r0, [pc, #8]	@ (80045dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80045d2:	f003 f92d 	bl	8007830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000344 	.word	0x20000344

080045e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80045e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80045e8:	f000 fe28 	bl	800523c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80045f4:	4802      	ldr	r0, [pc, #8]	@ (8004600 <USART6_IRQHandler+0x10>)
 80045f6:	f004 f851 	bl	800869c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80045fa:	bf00      	nop
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000464 	.word	0x20000464

08004604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  return 1;
 8004608:	2301      	movs	r3, #1
}
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <_kill>:

int _kill(int pid, int sig)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800461e:	f005 fd63 	bl	800a0e8 <__errno>
 8004622:	4603      	mov	r3, r0
 8004624:	2216      	movs	r2, #22
 8004626:	601a      	str	r2, [r3, #0]
  return -1;
 8004628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_exit>:

void _exit (int status)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800463c:	f04f 31ff 	mov.w	r1, #4294967295
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ffe7 	bl	8004614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004646:	bf00      	nop
 8004648:	e7fd      	b.n	8004646 <_exit+0x12>

0800464a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e00a      	b.n	8004672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800465c:	f3af 8000 	nop.w
 8004660:	4601      	mov	r1, r0
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	60ba      	str	r2, [r7, #8]
 8004668:	b2ca      	uxtb	r2, r1
 800466a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3301      	adds	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	dbf0      	blt.n	800465c <_read+0x12>
  }

  return len;
 800467a:	687b      	ldr	r3, [r7, #4]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800468c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046ac:	605a      	str	r2, [r3, #4]
  return 0;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <_isatty>:

int _isatty(int file)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046c4:	2301      	movs	r3, #1
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b085      	sub	sp, #20
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046f4:	4a14      	ldr	r2, [pc, #80]	@ (8004748 <_sbrk+0x5c>)
 80046f6:	4b15      	ldr	r3, [pc, #84]	@ (800474c <_sbrk+0x60>)
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004700:	4b13      	ldr	r3, [pc, #76]	@ (8004750 <_sbrk+0x64>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004708:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <_sbrk+0x64>)
 800470a:	4a12      	ldr	r2, [pc, #72]	@ (8004754 <_sbrk+0x68>)
 800470c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800470e:	4b10      	ldr	r3, [pc, #64]	@ (8004750 <_sbrk+0x64>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	429a      	cmp	r2, r3
 800471a:	d207      	bcs.n	800472c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800471c:	f005 fce4 	bl	800a0e8 <__errno>
 8004720:	4603      	mov	r3, r0
 8004722:	220c      	movs	r2, #12
 8004724:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	e009      	b.n	8004740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800472c:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <_sbrk+0x64>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004732:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <_sbrk+0x64>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4413      	add	r3, r2
 800473a:	4a05      	ldr	r2, [pc, #20]	@ (8004750 <_sbrk+0x64>)
 800473c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800473e:	68fb      	ldr	r3, [r7, #12]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20018000 	.word	0x20018000
 800474c:	00000400 	.word	0x00000400
 8004750:	2000099c 	.word	0x2000099c
 8004754:	20000b10 	.word	0x20000b10

08004758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <SystemInit+0x20>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	4a05      	ldr	r2, [pc, #20]	@ (8004778 <SystemInit+0x20>)
 8004764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	e000ed00 	.word	0xe000ed00

0800477c <ultrasonic_delay>:
/**
  * @brief  微秒级延时函数
  * @param  time: 延时时间（微秒）
  * @retval None
  */
static void ultrasonic_delay(uint16_t time) {
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	80fb      	strh	r3, [r7, #6]
    if (ultrasonic_htim != NULL) {
 8004786:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <ultrasonic_delay+0x38>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <ultrasonic_delay+0x2c>
        __HAL_TIM_SET_COUNTER(ultrasonic_htim, 0);
 800478e:	4b09      	ldr	r3, [pc, #36]	@ (80047b4 <ultrasonic_delay+0x38>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24
        while (__HAL_TIM_GET_COUNTER(ultrasonic_htim) < time);
 8004798:	bf00      	nop
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <ultrasonic_delay+0x38>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047a2:	88fb      	ldrh	r3, [r7, #6]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3f8      	bcc.n	800479a <ultrasonic_delay+0x1e>
    }
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	200009a0 	.word	0x200009a0

080047b8 <Ultrasonic_Init>:
/**
  * @brief  初始化超声波测距模块
  * @param  htim: 定时器句柄指针
  * @retval None
  */
void Ultrasonic_Init(TIM_HandleTypeDef *htim) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
    ultrasonic_htim = htim;
 80047c0:	4a0e      	ldr	r2, [pc, #56]	@ (80047fc <Ultrasonic_Init+0x44>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6013      	str	r3, [r2, #0]
    ultrasonic_distance_mm = 0;
 80047c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <Ultrasonic_Init+0x48>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
    ultrasonic_data_ready = 0;
 80047cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <Ultrasonic_Init+0x4c>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
    ultrasonic_Is_First_Captured = 0;
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <Ultrasonic_Init+0x50>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
    ultrasonic_last_trigger_time = 0;
 80047d8:	4b0c      	ldr	r3, [pc, #48]	@ (800480c <Ultrasonic_Init+0x54>)
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    
    // 启动输入捕获中断
    if (ultrasonic_htim != NULL) {
 80047de:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <Ultrasonic_Init+0x44>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <Ultrasonic_Init+0x3a>
        HAL_TIM_IC_Start_IT(ultrasonic_htim, TIM_CHANNEL_1);
 80047e6:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <Ultrasonic_Init+0x44>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2100      	movs	r1, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	f002 fdd1 	bl	8007394 <HAL_TIM_IC_Start_IT>
    }
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	200009a0 	.word	0x200009a0
 8004800:	200009b4 	.word	0x200009b4
 8004804:	200009b8 	.word	0x200009b8
 8004808:	200009b0 	.word	0x200009b0
 800480c:	200009bc 	.word	0x200009bc

08004810 <Ultrasonic_TriggerMeasurement>:
/**
  * @brief  触发超声波测距
  * @param  None
  * @retval None
  */
void Ultrasonic_TriggerMeasurement(void) {
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
    if (ultrasonic_htim == NULL) return;
 8004814:	4b11      	ldr	r3, [pc, #68]	@ (800485c <Ultrasonic_TriggerMeasurement+0x4c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01c      	beq.n	8004856 <Ultrasonic_TriggerMeasurement+0x46>
    
    // 产生10us的高电平脉冲
    HAL_GPIO_WritePin(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, GPIO_PIN_SET);
 800481c:	2201      	movs	r2, #1
 800481e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004822:	480f      	ldr	r0, [pc, #60]	@ (8004860 <Ultrasonic_TriggerMeasurement+0x50>)
 8004824:	f000 fcf0 	bl	8005208 <HAL_GPIO_WritePin>
    ultrasonic_delay(10);
 8004828:	200a      	movs	r0, #10
 800482a:	f7ff ffa7 	bl	800477c <ultrasonic_delay>
    HAL_GPIO_WritePin(ULTRASONIC_TRIG_PORT, ULTRASONIC_TRIG_PIN, GPIO_PIN_RESET);
 800482e:	2200      	movs	r2, #0
 8004830:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004834:	480a      	ldr	r0, [pc, #40]	@ (8004860 <Ultrasonic_TriggerMeasurement+0x50>)
 8004836:	f000 fce7 	bl	8005208 <HAL_GPIO_WritePin>
    
    // 启用输入捕获中断
    __HAL_TIM_ENABLE_IT(ultrasonic_htim, TIM_IT_CC1);
 800483a:	4b08      	ldr	r3, [pc, #32]	@ (800485c <Ultrasonic_TriggerMeasurement+0x4c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <Ultrasonic_TriggerMeasurement+0x4c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0202 	orr.w	r2, r2, #2
 800484c:	60da      	str	r2, [r3, #12]
    
    ultrasonic_data_ready = 0;  // 标记数据未准备好
 800484e:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <Ultrasonic_TriggerMeasurement+0x54>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	e000      	b.n	8004858 <Ultrasonic_TriggerMeasurement+0x48>
    if (ultrasonic_htim == NULL) return;
 8004856:	bf00      	nop
}
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	200009a0 	.word	0x200009a0
 8004860:	40020000 	.word	0x40020000
 8004864:	200009b8 	.word	0x200009b8

08004868 <Ultrasonic_GetDistanceMM>:
/**
  * @brief  获取距离值（毫米）
  * @param  None
  * @retval 距离值（毫米）
  */
uint32_t Ultrasonic_GetDistanceMM(void) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 800486e:	f000 f973 	bl	8004b58 <HAL_GetTick>
 8004872:	6078      	str	r0, [r7, #4]
    
    // 自动触发测量
    if (current_time - ultrasonic_last_trigger_time >= ultrasonic_sampling_interval) {
 8004874:	4b09      	ldr	r3, [pc, #36]	@ (800489c <Ultrasonic_GetDistanceMM+0x34>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	4a08      	ldr	r2, [pc, #32]	@ (80048a0 <Ultrasonic_GetDistanceMM+0x38>)
 800487e:	8812      	ldrh	r2, [r2, #0]
 8004880:	4293      	cmp	r3, r2
 8004882:	d304      	bcc.n	800488e <Ultrasonic_GetDistanceMM+0x26>
        Ultrasonic_TriggerMeasurement();
 8004884:	f7ff ffc4 	bl	8004810 <Ultrasonic_TriggerMeasurement>
        ultrasonic_last_trigger_time = current_time;
 8004888:	4a04      	ldr	r2, [pc, #16]	@ (800489c <Ultrasonic_GetDistanceMM+0x34>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6013      	str	r3, [r2, #0]
    }
    
    return ultrasonic_distance_mm;
 800488e:	4b05      	ldr	r3, [pc, #20]	@ (80048a4 <Ultrasonic_GetDistanceMM+0x3c>)
 8004890:	681b      	ldr	r3, [r3, #0]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	200009bc 	.word	0x200009bc
 80048a0:	20000040 	.word	0x20000040
 80048a4:	200009b4 	.word	0x200009b4

080048a8 <Ultrasonic_SetSamplingInterval>:
/**
  * @brief  设置采样间隔
  * @param  interval_ms: 采样间隔（毫秒）
  * @retval None
  */
void Ultrasonic_SetSamplingInterval(uint16_t interval_ms) {
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	80fb      	strh	r3, [r7, #6]
    ultrasonic_sampling_interval = interval_ms;
 80048b2:	4a04      	ldr	r2, [pc, #16]	@ (80048c4 <Ultrasonic_SetSamplingInterval+0x1c>)
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	8013      	strh	r3, [r2, #0]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	20000040 	.word	0x20000040

080048c8 <Ultrasonic_TIM_IC_CaptureCallback>:
  * @brief  定时器输入捕获回调函数
  * @param  htim: 定时器句柄指针
  * @retval None
  * @note   这个函数应该在main.c的HAL_TIM_IC_CaptureCallback中调用
  */
void Ultrasonic_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	ed2d 8b02 	vpush	{d8}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
    if (htim->Instance != ultrasonic_htim->Instance) return;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004a14 <Ultrasonic_TIM_IC_CaptureCallback+0x14c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	f040 8092 	bne.w	8004a08 <Ultrasonic_TIM_IC_CaptureCallback+0x140>
    
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7f1b      	ldrb	r3, [r3, #28]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	f040 808e 	bne.w	8004a0a <Ultrasonic_TIM_IC_CaptureCallback+0x142>
        if (ultrasonic_Is_First_Captured == 0) {
 80048ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004a18 <Ultrasonic_TIM_IC_CaptureCallback+0x150>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d11a      	bne.n	800492c <Ultrasonic_TIM_IC_CaptureCallback+0x64>
            // 捕获第一个值（上升沿）
            ultrasonic_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80048f6:	2100      	movs	r1, #0
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f003 fa13 	bl	8007d24 <HAL_TIM_ReadCapturedValue>
 80048fe:	4603      	mov	r3, r0
 8004900:	4a46      	ldr	r2, [pc, #280]	@ (8004a1c <Ultrasonic_TIM_IC_CaptureCallback+0x154>)
 8004902:	6013      	str	r3, [r2, #0]
            ultrasonic_Is_First_Captured = 1;
 8004904:	4b44      	ldr	r3, [pc, #272]	@ (8004a18 <Ultrasonic_TIM_IC_CaptureCallback+0x150>)
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
            // 改变极性为下降沿
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 020a 	bic.w	r2, r2, #10
 8004918:	621a      	str	r2, [r3, #32]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0202 	orr.w	r2, r2, #2
 8004928:	621a      	str	r2, [r3, #32]
 800492a:	e06e      	b.n	8004a0a <Ultrasonic_TIM_IC_CaptureCallback+0x142>
        }
        else if (ultrasonic_Is_First_Captured == 1) {
 800492c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a18 <Ultrasonic_TIM_IC_CaptureCallback+0x150>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d16a      	bne.n	8004a0a <Ultrasonic_TIM_IC_CaptureCallback+0x142>
            // 捕获第二个值（下降沿）
            ultrasonic_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004934:	2100      	movs	r1, #0
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f003 f9f4 	bl	8007d24 <HAL_TIM_ReadCapturedValue>
 800493c:	4603      	mov	r3, r0
 800493e:	4a38      	ldr	r2, [pc, #224]	@ (8004a20 <Ultrasonic_TIM_IC_CaptureCallback+0x158>)
 8004940:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);  // 重置计数器
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	625a      	str	r2, [r3, #36]	@ 0x24
            
            // 计算时间差
            ultrasonic_Difference = (ultrasonic_IC_Val2 >= ultrasonic_IC_Val1) ? 
 800494a:	4b35      	ldr	r3, [pc, #212]	@ (8004a20 <Ultrasonic_TIM_IC_CaptureCallback+0x158>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4b33      	ldr	r3, [pc, #204]	@ (8004a1c <Ultrasonic_TIM_IC_CaptureCallback+0x154>)
 8004950:	681b      	ldr	r3, [r3, #0]
                                   (ultrasonic_IC_Val2 - ultrasonic_IC_Val1) : 
 8004952:	429a      	cmp	r2, r3
 8004954:	d305      	bcc.n	8004962 <Ultrasonic_TIM_IC_CaptureCallback+0x9a>
 8004956:	4b32      	ldr	r3, [pc, #200]	@ (8004a20 <Ultrasonic_TIM_IC_CaptureCallback+0x158>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b30      	ldr	r3, [pc, #192]	@ (8004a1c <Ultrasonic_TIM_IC_CaptureCallback+0x154>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	e006      	b.n	8004970 <Ultrasonic_TIM_IC_CaptureCallback+0xa8>
                                   (0xFFFF - ultrasonic_IC_Val1 + ultrasonic_IC_Val2 + 1);
 8004962:	4b2f      	ldr	r3, [pc, #188]	@ (8004a20 <Ultrasonic_TIM_IC_CaptureCallback+0x158>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b2d      	ldr	r3, [pc, #180]	@ (8004a1c <Ultrasonic_TIM_IC_CaptureCallback+0x154>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	1ad3      	subs	r3, r2, r3
                                   (ultrasonic_IC_Val2 - ultrasonic_IC_Val1) : 
 800496c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
            ultrasonic_Difference = (ultrasonic_IC_Val2 >= ultrasonic_IC_Val1) ? 
 8004970:	4a2c      	ldr	r2, [pc, #176]	@ (8004a24 <Ultrasonic_TIM_IC_CaptureCallback+0x15c>)
 8004972:	6013      	str	r3, [r2, #0]
            
            // 计算距离 (mm)
            // 公式: 距离 = (时间差 * 声速) / 2
            // 声速 = 343 m/s = 0.343 mm/us
            // 定时器每个tick的时间 = (Prescaler + 1) / PCLK2_Freq (微秒)
            float tick_duration_us = (float)(htim->Init.Prescaler + 1) / (HAL_RCC_GetPCLK2Freq() / 1000000.0f);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	3301      	adds	r3, #1
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8004982:	f001 fd65 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 8004986:	ee07 0a90 	vmov	s15, r0
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a28 <Ultrasonic_TIM_IC_CaptureCallback+0x160>
 8004992:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004996:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800499a:	edc7 7a03 	vstr	s15, [r7, #12]
            ultrasonic_distance_mm = (uint32_t)((ultrasonic_Difference * tick_duration_us * 0.343f) / 2.0f);
 800499e:	4b21      	ldr	r3, [pc, #132]	@ (8004a24 <Ultrasonic_TIM_IC_CaptureCallback+0x15c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80049ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004a2c <Ultrasonic_TIM_IC_CaptureCallback+0x164>
 80049b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80049be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c6:	ee17 2a90 	vmov	r2, s15
 80049ca:	4b19      	ldr	r3, [pc, #100]	@ (8004a30 <Ultrasonic_TIM_IC_CaptureCallback+0x168>)
 80049cc:	601a      	str	r2, [r3, #0]
            
            ultrasonic_Is_First_Captured = 0;  // 重置状态
 80049ce:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <Ultrasonic_TIM_IC_CaptureCallback+0x150>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
            ultrasonic_data_ready = 1;  // 标记数据准备好
 80049d4:	4b17      	ldr	r3, [pc, #92]	@ (8004a34 <Ultrasonic_TIM_IC_CaptureCallback+0x16c>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
            
            // 设置极性为上升沿
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a1a      	ldr	r2, [r3, #32]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 020a 	bic.w	r2, r2, #10
 80049e8:	621a      	str	r2, [r3, #32]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6a12      	ldr	r2, [r2, #32]
 80049f4:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);  // 禁用中断
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0202 	bic.w	r2, r2, #2
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	e000      	b.n	8004a0a <Ultrasonic_TIM_IC_CaptureCallback+0x142>
    if (htim->Instance != ultrasonic_htim->Instance) return;
 8004a08:	bf00      	nop
        }
    }
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	ecbd 8b02 	vpop	{d8}
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200009a0 	.word	0x200009a0
 8004a18:	200009b0 	.word	0x200009b0
 8004a1c:	200009a4 	.word	0x200009a4
 8004a20:	200009a8 	.word	0x200009a8
 8004a24:	200009ac 	.word	0x200009ac
 8004a28:	49742400 	.word	0x49742400
 8004a2c:	3eaf9db2 	.word	0x3eaf9db2
 8004a30:	200009b4 	.word	0x200009b4
 8004a34:	200009b8 	.word	0x200009b8

08004a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004a3c:	f7ff fe8c 	bl	8004758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a40:	480c      	ldr	r0, [pc, #48]	@ (8004a74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a42:	490d      	ldr	r1, [pc, #52]	@ (8004a78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a44:	4a0d      	ldr	r2, [pc, #52]	@ (8004a7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a48:	e002      	b.n	8004a50 <LoopCopyDataInit>

08004a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a4e:	3304      	adds	r3, #4

08004a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a54:	d3f9      	bcc.n	8004a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a56:	4a0a      	ldr	r2, [pc, #40]	@ (8004a80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a58:	4c0a      	ldr	r4, [pc, #40]	@ (8004a84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a5c:	e001      	b.n	8004a62 <LoopFillZerobss>

08004a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a60:	3204      	adds	r2, #4

08004a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a64:	d3fb      	bcc.n	8004a5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004a66:	f005 fb45 	bl	800a0f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a6a:	f7fc fb4d 	bl	8001108 <main>
  bx  lr    
 8004a6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a78:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8004a7c:	0800dfc0 	.word	0x0800dfc0
  ldr r2, =_sbss
 8004a80:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8004a84:	20000b10 	.word	0x20000b10

08004a88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a88:	e7fe      	b.n	8004a88 <ADC_IRQHandler>
	...

08004a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a90:	4b0e      	ldr	r3, [pc, #56]	@ (8004acc <HAL_Init+0x40>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a0d      	ldr	r2, [pc, #52]	@ (8004acc <HAL_Init+0x40>)
 8004a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <HAL_Init+0x40>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8004acc <HAL_Init+0x40>)
 8004aa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004aa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004aa8:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <HAL_Init+0x40>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a07      	ldr	r2, [pc, #28]	@ (8004acc <HAL_Init+0x40>)
 8004aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ab2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ab4:	2003      	movs	r0, #3
 8004ab6:	f000 f94f 	bl	8004d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004aba:	200f      	movs	r0, #15
 8004abc:	f000 f808 	bl	8004ad0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ac0:	f7ff faca 	bl	8004058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023c00 	.word	0x40023c00

08004ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ad8:	4b12      	ldr	r3, [pc, #72]	@ (8004b24 <HAL_InitTick+0x54>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_InitTick+0x58>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f967 	bl	8004dc2 <HAL_SYSTICK_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e00e      	b.n	8004b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b0f      	cmp	r3, #15
 8004b02:	d80a      	bhi.n	8004b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b04:	2200      	movs	r2, #0
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	f000 f92f 	bl	8004d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b10:	4a06      	ldr	r2, [pc, #24]	@ (8004b2c <HAL_InitTick+0x5c>)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e000      	b.n	8004b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	2000003c 	.word	0x2000003c
 8004b28:	20000048 	.word	0x20000048
 8004b2c:	20000044 	.word	0x20000044

08004b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b34:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <HAL_IncTick+0x20>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <HAL_IncTick+0x24>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4413      	add	r3, r2
 8004b40:	4a04      	ldr	r2, [pc, #16]	@ (8004b54 <HAL_IncTick+0x24>)
 8004b42:	6013      	str	r3, [r2, #0]
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000048 	.word	0x20000048
 8004b54:	200009c0 	.word	0x200009c0

08004b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <HAL_GetTick+0x14>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	200009c0 	.word	0x200009c0

08004b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b78:	f7ff ffee 	bl	8004b58 <HAL_GetTick>
 8004b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d005      	beq.n	8004b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <HAL_Delay+0x44>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b96:	bf00      	nop
 8004b98:	f7ff ffde 	bl	8004b58 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d8f7      	bhi.n	8004b98 <HAL_Delay+0x28>
  {
  }
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000048 	.word	0x20000048

08004bb8 <__NVIC_SetPriorityGrouping>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bfc <__NVIC_SetPriorityGrouping+0x44>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bea:	4a04      	ldr	r2, [pc, #16]	@ (8004bfc <__NVIC_SetPriorityGrouping+0x44>)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	60d3      	str	r3, [r2, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	e000ed00 	.word	0xe000ed00

08004c00 <__NVIC_GetPriorityGrouping>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c04:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <__NVIC_GetPriorityGrouping+0x18>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	f003 0307 	and.w	r3, r3, #7
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <__NVIC_EnableIRQ>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	db0b      	blt.n	8004c46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	f003 021f 	and.w	r2, r3, #31
 8004c34:	4907      	ldr	r1, [pc, #28]	@ (8004c54 <__NVIC_EnableIRQ+0x38>)
 8004c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	2001      	movs	r0, #1
 8004c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	e000e100 	.word	0xe000e100

08004c58 <__NVIC_SetPriority>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	6039      	str	r1, [r7, #0]
 8004c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	db0a      	blt.n	8004c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	490c      	ldr	r1, [pc, #48]	@ (8004ca4 <__NVIC_SetPriority+0x4c>)
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	0112      	lsls	r2, r2, #4
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c80:	e00a      	b.n	8004c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	4908      	ldr	r1, [pc, #32]	@ (8004ca8 <__NVIC_SetPriority+0x50>)
 8004c88:	79fb      	ldrb	r3, [r7, #7]
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	3b04      	subs	r3, #4
 8004c90:	0112      	lsls	r2, r2, #4
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	440b      	add	r3, r1
 8004c96:	761a      	strb	r2, [r3, #24]
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	e000e100 	.word	0xe000e100
 8004ca8:	e000ed00 	.word	0xe000ed00

08004cac <NVIC_EncodePriority>:
{
 8004cac:	b480      	push	{r7}
 8004cae:	b089      	sub	sp, #36	@ 0x24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f1c3 0307 	rsb	r3, r3, #7
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	bf28      	it	cs
 8004cca:	2304      	movcs	r3, #4
 8004ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d902      	bls.n	8004cdc <NVIC_EncodePriority+0x30>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3b03      	subs	r3, #3
 8004cda:	e000      	b.n	8004cde <NVIC_EncodePriority+0x32>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	43da      	mvns	r2, r3
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	401a      	ands	r2, r3
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	43d9      	mvns	r1, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d04:	4313      	orrs	r3, r2
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3724      	adds	r7, #36	@ 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <SysTick_Config>:
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d24:	d301      	bcc.n	8004d2a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004d26:	2301      	movs	r3, #1
 8004d28:	e00f      	b.n	8004d4a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d54 <SysTick_Config+0x40>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d32:	210f      	movs	r1, #15
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295
 8004d38:	f7ff ff8e 	bl	8004c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d3c:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <SysTick_Config+0x40>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d42:	4b04      	ldr	r3, [pc, #16]	@ (8004d54 <SysTick_Config+0x40>)
 8004d44:	2207      	movs	r2, #7
 8004d46:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	e000e010 	.word	0xe000e010

08004d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ff29 	bl	8004bb8 <__NVIC_SetPriorityGrouping>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b086      	sub	sp, #24
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	4603      	mov	r3, r0
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d80:	f7ff ff3e 	bl	8004c00 <__NVIC_GetPriorityGrouping>
 8004d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	6978      	ldr	r0, [r7, #20]
 8004d8c:	f7ff ff8e 	bl	8004cac <NVIC_EncodePriority>
 8004d90:	4602      	mov	r2, r0
 8004d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d96:	4611      	mov	r1, r2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff ff5d 	bl	8004c58 <__NVIC_SetPriority>
}
 8004d9e:	bf00      	nop
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	4603      	mov	r3, r0
 8004dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff ff31 	bl	8004c1c <__NVIC_EnableIRQ>
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff ffa2 	bl	8004d14 <SysTick_Config>
 8004dd0:	4603      	mov	r3, r0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004de8:	f7ff feb6 	bl	8004b58 <HAL_GetTick>
 8004dec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d008      	beq.n	8004e0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2280      	movs	r2, #128	@ 0x80
 8004dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e052      	b.n	8004eb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0216 	bic.w	r2, r2, #22
 8004e1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695a      	ldr	r2, [r3, #20]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d103      	bne.n	8004e3c <HAL_DMA_Abort+0x62>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0208 	bic.w	r2, r2, #8
 8004e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e5c:	e013      	b.n	8004e86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e5e:	f7ff fe7b 	bl	8004b58 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d90c      	bls.n	8004e86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2203      	movs	r2, #3
 8004e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e015      	b.n	8004eb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e4      	bne.n	8004e5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	223f      	movs	r2, #63	@ 0x3f
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2280      	movs	r2, #128	@ 0x80
 8004ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e00c      	b.n	8004ef2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2205      	movs	r2, #5
 8004edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	@ 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e159      	b.n	80051d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	f040 8148 	bne.w	80051ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d005      	beq.n	8004f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d130      	bne.n	8004fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	2203      	movs	r2, #3
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43db      	mvns	r3, r3
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	4013      	ands	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f88:	2201      	movs	r2, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 0201 	and.w	r2, r3, #1
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0303 	and.w	r3, r3, #3
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d017      	beq.n	8004ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	2203      	movs	r2, #3
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d123      	bne.n	8005044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	08da      	lsrs	r2, r3, #3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3208      	adds	r2, #8
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	220f      	movs	r2, #15
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	43db      	mvns	r3, r3
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4013      	ands	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4313      	orrs	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	08da      	lsrs	r2, r3, #3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3208      	adds	r2, #8
 800503e:	69b9      	ldr	r1, [r7, #24]
 8005040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	2203      	movs	r2, #3
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f003 0203 	and.w	r2, r3, #3
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80a2 	beq.w	80051ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	4b57      	ldr	r3, [pc, #348]	@ (80051e8 <HAL_GPIO_Init+0x2e8>)
 800508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508e:	4a56      	ldr	r2, [pc, #344]	@ (80051e8 <HAL_GPIO_Init+0x2e8>)
 8005090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005094:	6453      	str	r3, [r2, #68]	@ 0x44
 8005096:	4b54      	ldr	r3, [pc, #336]	@ (80051e8 <HAL_GPIO_Init+0x2e8>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050a2:	4a52      	ldr	r2, [pc, #328]	@ (80051ec <HAL_GPIO_Init+0x2ec>)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	3302      	adds	r3, #2
 80050aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	220f      	movs	r2, #15
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a49      	ldr	r2, [pc, #292]	@ (80051f0 <HAL_GPIO_Init+0x2f0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d019      	beq.n	8005102 <HAL_GPIO_Init+0x202>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a48      	ldr	r2, [pc, #288]	@ (80051f4 <HAL_GPIO_Init+0x2f4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_GPIO_Init+0x1fe>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a47      	ldr	r2, [pc, #284]	@ (80051f8 <HAL_GPIO_Init+0x2f8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00d      	beq.n	80050fa <HAL_GPIO_Init+0x1fa>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a46      	ldr	r2, [pc, #280]	@ (80051fc <HAL_GPIO_Init+0x2fc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d007      	beq.n	80050f6 <HAL_GPIO_Init+0x1f6>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a45      	ldr	r2, [pc, #276]	@ (8005200 <HAL_GPIO_Init+0x300>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d101      	bne.n	80050f2 <HAL_GPIO_Init+0x1f2>
 80050ee:	2304      	movs	r3, #4
 80050f0:	e008      	b.n	8005104 <HAL_GPIO_Init+0x204>
 80050f2:	2307      	movs	r3, #7
 80050f4:	e006      	b.n	8005104 <HAL_GPIO_Init+0x204>
 80050f6:	2303      	movs	r3, #3
 80050f8:	e004      	b.n	8005104 <HAL_GPIO_Init+0x204>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e002      	b.n	8005104 <HAL_GPIO_Init+0x204>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_GPIO_Init+0x204>
 8005102:	2300      	movs	r3, #0
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	f002 0203 	and.w	r2, r2, #3
 800510a:	0092      	lsls	r2, r2, #2
 800510c:	4093      	lsls	r3, r2
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4313      	orrs	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005114:	4935      	ldr	r1, [pc, #212]	@ (80051ec <HAL_GPIO_Init+0x2ec>)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	3302      	adds	r3, #2
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005122:	4b38      	ldr	r3, [pc, #224]	@ (8005204 <HAL_GPIO_Init+0x304>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005146:	4a2f      	ldr	r2, [pc, #188]	@ (8005204 <HAL_GPIO_Init+0x304>)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800514c:	4b2d      	ldr	r3, [pc, #180]	@ (8005204 <HAL_GPIO_Init+0x304>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	43db      	mvns	r3, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4013      	ands	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005170:	4a24      	ldr	r2, [pc, #144]	@ (8005204 <HAL_GPIO_Init+0x304>)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005176:	4b23      	ldr	r3, [pc, #140]	@ (8005204 <HAL_GPIO_Init+0x304>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800519a:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <HAL_GPIO_Init+0x304>)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051a0:	4b18      	ldr	r3, [pc, #96]	@ (8005204 <HAL_GPIO_Init+0x304>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005204 <HAL_GPIO_Init+0x304>)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3301      	adds	r3, #1
 80051ce:	61fb      	str	r3, [r7, #28]
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b0f      	cmp	r3, #15
 80051d4:	f67f aea2 	bls.w	8004f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	3724      	adds	r7, #36	@ 0x24
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40023800 	.word	0x40023800
 80051ec:	40013800 	.word	0x40013800
 80051f0:	40020000 	.word	0x40020000
 80051f4:	40020400 	.word	0x40020400
 80051f8:	40020800 	.word	0x40020800
 80051fc:	40020c00 	.word	0x40020c00
 8005200:	40021000 	.word	0x40021000
 8005204:	40013c00 	.word	0x40013c00

08005208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	807b      	strh	r3, [r7, #2]
 8005214:	4613      	mov	r3, r2
 8005216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005218:	787b      	ldrb	r3, [r7, #1]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005224:	e003      	b.n	800522e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005226:	887b      	ldrh	r3, [r7, #2]
 8005228:	041a      	lsls	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	619a      	str	r2, [r3, #24]
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005246:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d006      	beq.n	8005260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005252:	4a05      	ldr	r2, [pc, #20]	@ (8005268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fb fe9b 	bl	8000f96 <HAL_GPIO_EXTI_Callback>
  }
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40013c00 	.word	0x40013c00

0800526c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e12b      	b.n	80054d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fe ff08 	bl	80040a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	@ 0x24
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052d0:	f001 f8aa 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 80052d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4a81      	ldr	r2, [pc, #516]	@ (80054e0 <HAL_I2C_Init+0x274>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d807      	bhi.n	80052f0 <HAL_I2C_Init+0x84>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a80      	ldr	r2, [pc, #512]	@ (80054e4 <HAL_I2C_Init+0x278>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	bf94      	ite	ls
 80052e8:	2301      	movls	r3, #1
 80052ea:	2300      	movhi	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e006      	b.n	80052fe <HAL_I2C_Init+0x92>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a7d      	ldr	r2, [pc, #500]	@ (80054e8 <HAL_I2C_Init+0x27c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bf94      	ite	ls
 80052f8:	2301      	movls	r3, #1
 80052fa:	2300      	movhi	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0e7      	b.n	80054d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a78      	ldr	r2, [pc, #480]	@ (80054ec <HAL_I2C_Init+0x280>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0c9b      	lsrs	r3, r3, #18
 8005310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a6a      	ldr	r2, [pc, #424]	@ (80054e0 <HAL_I2C_Init+0x274>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d802      	bhi.n	8005340 <HAL_I2C_Init+0xd4>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	3301      	adds	r3, #1
 800533e:	e009      	b.n	8005354 <HAL_I2C_Init+0xe8>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	4a69      	ldr	r2, [pc, #420]	@ (80054f0 <HAL_I2C_Init+0x284>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	099b      	lsrs	r3, r3, #6
 8005352:	3301      	adds	r3, #1
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	430b      	orrs	r3, r1
 800535a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005366:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	495c      	ldr	r1, [pc, #368]	@ (80054e0 <HAL_I2C_Init+0x274>)
 8005370:	428b      	cmp	r3, r1
 8005372:	d819      	bhi.n	80053a8 <HAL_I2C_Init+0x13c>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1e59      	subs	r1, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005388:	400b      	ands	r3, r1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_I2C_Init+0x138>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1e59      	subs	r1, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fbb1 f3f3 	udiv	r3, r1, r3
 800539c:	3301      	adds	r3, #1
 800539e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a2:	e051      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 80053a4:	2304      	movs	r3, #4
 80053a6:	e04f      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d111      	bne.n	80053d4 <HAL_I2C_Init+0x168>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1e58      	subs	r0, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	440b      	add	r3, r1
 80053be:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c2:	3301      	adds	r3, #1
 80053c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e012      	b.n	80053fa <HAL_I2C_Init+0x18e>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1e58      	subs	r0, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	0099      	lsls	r1, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ea:	3301      	adds	r3, #1
 80053ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_I2C_Init+0x196>
 80053fe:	2301      	movs	r3, #1
 8005400:	e022      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10e      	bne.n	8005428 <HAL_I2C_Init+0x1bc>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1e58      	subs	r0, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	440b      	add	r3, r1
 8005418:	fbb0 f3f3 	udiv	r3, r0, r3
 800541c:	3301      	adds	r3, #1
 800541e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005426:	e00f      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1e58      	subs	r0, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	0099      	lsls	r1, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	fbb0 f3f3 	udiv	r3, r0, r3
 800543e:	3301      	adds	r3, #1
 8005440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005444:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	6809      	ldr	r1, [r1, #0]
 800544c:	4313      	orrs	r3, r2
 800544e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005476:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6911      	ldr	r1, [r2, #16]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68d2      	ldr	r2, [r2, #12]
 8005482:	4311      	orrs	r1, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	430b      	orrs	r3, r1
 800548a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	000186a0 	.word	0x000186a0
 80054e4:	001e847f 	.word	0x001e847f
 80054e8:	003d08ff 	.word	0x003d08ff
 80054ec:	431bde83 	.word	0x431bde83
 80054f0:	10624dd3 	.word	0x10624dd3

080054f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	461a      	mov	r2, r3
 8005502:	4603      	mov	r3, r0
 8005504:	817b      	strh	r3, [r7, #10]
 8005506:	460b      	mov	r3, r1
 8005508:	813b      	strh	r3, [r7, #8]
 800550a:	4613      	mov	r3, r2
 800550c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800550e:	f7ff fb23 	bl	8004b58 <HAL_GetTick>
 8005512:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b20      	cmp	r3, #32
 800551e:	f040 80d9 	bne.w	80056d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	2319      	movs	r3, #25
 8005528:	2201      	movs	r2, #1
 800552a:	496d      	ldr	r1, [pc, #436]	@ (80056e0 <HAL_I2C_Mem_Write+0x1ec>)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f971 	bl	8005814 <I2C_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
 800553a:	e0cc      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_I2C_Mem_Write+0x56>
 8005546:	2302      	movs	r3, #2
 8005548:	e0c5      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	d007      	beq.n	8005570 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800557e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2221      	movs	r2, #33	@ 0x21
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2240      	movs	r2, #64	@ 0x40
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a4d      	ldr	r2, [pc, #308]	@ (80056e4 <HAL_I2C_Mem_Write+0x1f0>)
 80055b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055b2:	88f8      	ldrh	r0, [r7, #6]
 80055b4:	893a      	ldrh	r2, [r7, #8]
 80055b6:	8979      	ldrh	r1, [r7, #10]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	4603      	mov	r3, r0
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f890 	bl	80056e8 <I2C_RequestMemoryWrite>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d052      	beq.n	8005674 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e081      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa36 	bl	8005a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d107      	bne.n	80055fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e06b      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d11b      	bne.n	8005674 <HAL_I2C_Mem_Write+0x180>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d017      	beq.n	8005674 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1aa      	bne.n	80055d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fa29 	bl	8005ad8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00d      	beq.n	80056a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	2b04      	cmp	r3, #4
 8005692:	d107      	bne.n	80056a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e016      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056d0:	2300      	movs	r3, #0
 80056d2:	e000      	b.n	80056d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
  }
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	00100002 	.word	0x00100002
 80056e4:	ffff0000 	.word	0xffff0000

080056e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	4608      	mov	r0, r1
 80056f2:	4611      	mov	r1, r2
 80056f4:	461a      	mov	r2, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	817b      	strh	r3, [r7, #10]
 80056fa:	460b      	mov	r3, r1
 80056fc:	813b      	strh	r3, [r7, #8]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	2200      	movs	r2, #0
 800571a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f878 	bl	8005814 <I2C_WaitOnFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00d      	beq.n	8005746 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005738:	d103      	bne.n	8005742 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005740:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e05f      	b.n	8005806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005746:	897b      	ldrh	r3, [r7, #10]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	6a3a      	ldr	r2, [r7, #32]
 800575a:	492d      	ldr	r1, [pc, #180]	@ (8005810 <I2C_RequestMemoryWrite+0x128>)
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 f8d3 	bl	8005908 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e04c      	b.n	8005806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005784:	6a39      	ldr	r1, [r7, #32]
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f95e 	bl	8005a48 <I2C_WaitOnTXEFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	2b04      	cmp	r3, #4
 8005798:	d107      	bne.n	80057aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e02b      	b.n	8005806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d105      	bne.n	80057c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b4:	893b      	ldrh	r3, [r7, #8]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	611a      	str	r2, [r3, #16]
 80057be:	e021      	b.n	8005804 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057c0:	893b      	ldrh	r3, [r7, #8]
 80057c2:	0a1b      	lsrs	r3, r3, #8
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d0:	6a39      	ldr	r1, [r7, #32]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f938 	bl	8005a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00d      	beq.n	80057fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d107      	bne.n	80057f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e005      	b.n	8005806 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057fa:	893b      	ldrh	r3, [r7, #8]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	00010002 	.word	0x00010002

08005814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005824:	e048      	b.n	80058b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582c:	d044      	beq.n	80058b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582e:	f7ff f993 	bl	8004b58 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d302      	bcc.n	8005844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d139      	bne.n	80058b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	0c1b      	lsrs	r3, r3, #16
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	d10d      	bne.n	800586a <I2C_WaitOnFlagUntilTimeout+0x56>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	43da      	mvns	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4013      	ands	r3, r2
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	bf0c      	ite	eq
 8005860:	2301      	moveq	r3, #1
 8005862:	2300      	movne	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	e00c      	b.n	8005884 <I2C_WaitOnFlagUntilTimeout+0x70>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	43da      	mvns	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	429a      	cmp	r2, r3
 8005888:	d116      	bne.n	80058b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	f043 0220 	orr.w	r2, r3, #32
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e023      	b.n	8005900 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	0c1b      	lsrs	r3, r3, #16
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10d      	bne.n	80058de <I2C_WaitOnFlagUntilTimeout+0xca>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	43da      	mvns	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4013      	ands	r3, r2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bf0c      	ite	eq
 80058d4:	2301      	moveq	r3, #1
 80058d6:	2300      	movne	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	e00c      	b.n	80058f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	43da      	mvns	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bf0c      	ite	eq
 80058f0:	2301      	moveq	r3, #1
 80058f2:	2300      	movne	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d093      	beq.n	8005826 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005916:	e071      	b.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005926:	d123      	bne.n	8005970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005936:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595c:	f043 0204 	orr.w	r2, r3, #4
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e067      	b.n	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d041      	beq.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005978:	f7ff f8ee 	bl	8004b58 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d302      	bcc.n	800598e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d136      	bne.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	0c1b      	lsrs	r3, r3, #16
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	d10c      	bne.n	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	43da      	mvns	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4013      	ands	r3, r2
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	e00b      	b.n	80059ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	43da      	mvns	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4013      	ands	r3, r2
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e021      	b.n	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d10c      	bne.n	8005a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	43da      	mvns	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4013      	ands	r3, r2
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bf14      	ite	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	2300      	moveq	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	e00b      	b.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	43da      	mvns	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f47f af6d 	bne.w	8005918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a54:	e034      	b.n	8005ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 f886 	bl	8005b68 <I2C_IsAcknowledgeFailed>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e034      	b.n	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d028      	beq.n	8005ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6e:	f7ff f873 	bl	8004b58 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d11d      	bne.n	8005ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8e:	2b80      	cmp	r3, #128	@ 0x80
 8005a90:	d016      	beq.n	8005ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e007      	b.n	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aca:	2b80      	cmp	r3, #128	@ 0x80
 8005acc:	d1c3      	bne.n	8005a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ae4:	e034      	b.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f83e 	bl	8005b68 <I2C_IsAcknowledgeFailed>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e034      	b.n	8005b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d028      	beq.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afe:	f7ff f82b 	bl	8004b58 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d11d      	bne.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d016      	beq.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	f043 0220 	orr.w	r2, r3, #32
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e007      	b.n	8005b60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d1c3      	bne.n	8005ae6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b7e:	d11b      	bne.n	8005bb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba4:	f043 0204 	orr.w	r2, r3, #4
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
	...

08005bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e267      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d075      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005be6:	4b88      	ldr	r3, [pc, #544]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d00c      	beq.n	8005c0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bf2:	4b85      	ldr	r3, [pc, #532]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d112      	bne.n	8005c24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bfe:	4b82      	ldr	r3, [pc, #520]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c0a:	d10b      	bne.n	8005c24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d05b      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x108>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d157      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e242      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2c:	d106      	bne.n	8005c3c <HAL_RCC_OscConfig+0x74>
 8005c2e:	4b76      	ldr	r3, [pc, #472]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a75      	ldr	r2, [pc, #468]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	e01d      	b.n	8005c78 <HAL_RCC_OscConfig+0xb0>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c44:	d10c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x98>
 8005c46:	4b70      	ldr	r3, [pc, #448]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	4b6d      	ldr	r3, [pc, #436]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a6c      	ldr	r2, [pc, #432]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	e00b      	b.n	8005c78 <HAL_RCC_OscConfig+0xb0>
 8005c60:	4b69      	ldr	r3, [pc, #420]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a68      	ldr	r2, [pc, #416]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	4b66      	ldr	r3, [pc, #408]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a65      	ldr	r2, [pc, #404]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d013      	beq.n	8005ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c80:	f7fe ff6a 	bl	8004b58 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c88:	f7fe ff66 	bl	8004b58 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b64      	cmp	r3, #100	@ 0x64
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e207      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0xc0>
 8005ca6:	e014      	b.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca8:	f7fe ff56 	bl	8004b58 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cb0:	f7fe ff52 	bl	8004b58 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b64      	cmp	r3, #100	@ 0x64
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e1f3      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc2:	4b51      	ldr	r3, [pc, #324]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0xe8>
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d063      	beq.n	8005da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cde:	4b4a      	ldr	r3, [pc, #296]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cea:	4b47      	ldr	r3, [pc, #284]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d11c      	bne.n	8005d30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf6:	4b44      	ldr	r3, [pc, #272]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d116      	bne.n	8005d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d02:	4b41      	ldr	r3, [pc, #260]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d005      	beq.n	8005d1a <HAL_RCC_OscConfig+0x152>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d001      	beq.n	8005d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e1c7      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4937      	ldr	r1, [pc, #220]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d2e:	e03a      	b.n	8005da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d020      	beq.n	8005d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d38:	4b34      	ldr	r3, [pc, #208]	@ (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3e:	f7fe ff0b 	bl	8004b58 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d46:	f7fe ff07 	bl	8004b58 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e1a8      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d58:	4b2b      	ldr	r3, [pc, #172]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d64:	4b28      	ldr	r3, [pc, #160]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4925      	ldr	r1, [pc, #148]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]
 8005d78:	e015      	b.n	8005da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7a:	4b24      	ldr	r3, [pc, #144]	@ (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fe feea 	bl	8004b58 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d88:	f7fe fee6 	bl	8004b58 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e187      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d036      	beq.n	8005e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d016      	beq.n	8005de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dba:	4b15      	ldr	r3, [pc, #84]	@ (8005e10 <HAL_RCC_OscConfig+0x248>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc0:	f7fe feca 	bl	8004b58 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc8:	f7fe fec6 	bl	8004b58 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e167      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dda:	4b0b      	ldr	r3, [pc, #44]	@ (8005e08 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x200>
 8005de6:	e01b      	b.n	8005e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de8:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <HAL_RCC_OscConfig+0x248>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dee:	f7fe feb3 	bl	8004b58 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df4:	e00e      	b.n	8005e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df6:	f7fe feaf 	bl	8004b58 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d907      	bls.n	8005e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e150      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	42470000 	.word	0x42470000
 8005e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e14:	4b88      	ldr	r3, [pc, #544]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1ea      	bne.n	8005df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8097 	beq.w	8005f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e32:	4b81      	ldr	r3, [pc, #516]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10f      	bne.n	8005e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	4b7d      	ldr	r3, [pc, #500]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	4a7c      	ldr	r2, [pc, #496]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	60bb      	str	r3, [r7, #8]
 8005e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5e:	4b77      	ldr	r3, [pc, #476]	@ (800603c <HAL_RCC_OscConfig+0x474>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d118      	bne.n	8005e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e6a:	4b74      	ldr	r3, [pc, #464]	@ (800603c <HAL_RCC_OscConfig+0x474>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a73      	ldr	r2, [pc, #460]	@ (800603c <HAL_RCC_OscConfig+0x474>)
 8005e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e76:	f7fe fe6f 	bl	8004b58 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7e:	f7fe fe6b 	bl	8004b58 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e10c      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e90:	4b6a      	ldr	r3, [pc, #424]	@ (800603c <HAL_RCC_OscConfig+0x474>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d106      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x2ea>
 8005ea4:	4b64      	ldr	r3, [pc, #400]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea8:	4a63      	ldr	r2, [pc, #396]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eb0:	e01c      	b.n	8005eec <HAL_RCC_OscConfig+0x324>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d10c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x30c>
 8005eba:	4b5f      	ldr	r3, [pc, #380]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	f043 0304 	orr.w	r3, r3, #4
 8005ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eca:	4a5b      	ldr	r2, [pc, #364]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed2:	e00b      	b.n	8005eec <HAL_RCC_OscConfig+0x324>
 8005ed4:	4b58      	ldr	r3, [pc, #352]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed8:	4a57      	ldr	r2, [pc, #348]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005eda:	f023 0301 	bic.w	r3, r3, #1
 8005ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee0:	4b55      	ldr	r3, [pc, #340]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee4:	4a54      	ldr	r2, [pc, #336]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	f023 0304 	bic.w	r3, r3, #4
 8005eea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d015      	beq.n	8005f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef4:	f7fe fe30 	bl	8004b58 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efa:	e00a      	b.n	8005f12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efc:	f7fe fe2c 	bl	8004b58 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e0cb      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f12:	4b49      	ldr	r3, [pc, #292]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0ee      	beq.n	8005efc <HAL_RCC_OscConfig+0x334>
 8005f1e:	e014      	b.n	8005f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f20:	f7fe fe1a 	bl	8004b58 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f26:	e00a      	b.n	8005f3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f28:	f7fe fe16 	bl	8004b58 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e0b5      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1ee      	bne.n	8005f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d105      	bne.n	8005f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f50:	4b39      	ldr	r3, [pc, #228]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f54:	4a38      	ldr	r2, [pc, #224]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80a1 	beq.w	80060a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f66:	4b34      	ldr	r3, [pc, #208]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 030c 	and.w	r3, r3, #12
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d05c      	beq.n	800602c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d141      	bne.n	8005ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f7a:	4b31      	ldr	r3, [pc, #196]	@ (8006040 <HAL_RCC_OscConfig+0x478>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fe fdea 	bl	8004b58 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f88:	f7fe fde6 	bl	8004b58 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e087      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f9a:	4b27      	ldr	r3, [pc, #156]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1f0      	bne.n	8005f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	019b      	lsls	r3, r3, #6
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	061b      	lsls	r3, r3, #24
 8005fca:	491b      	ldr	r1, [pc, #108]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8006040 <HAL_RCC_OscConfig+0x478>)
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd6:	f7fe fdbf 	bl	8004b58 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fde:	f7fe fdbb 	bl	8004b58 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e05c      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff0:	4b11      	ldr	r3, [pc, #68]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <HAL_RCC_OscConfig+0x416>
 8005ffc:	e054      	b.n	80060a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <HAL_RCC_OscConfig+0x478>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006004:	f7fe fda8 	bl	8004b58 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600c:	f7fe fda4 	bl	8004b58 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e045      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601e:	4b06      	ldr	r3, [pc, #24]	@ (8006038 <HAL_RCC_OscConfig+0x470>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x444>
 800602a:	e03d      	b.n	80060a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d107      	bne.n	8006044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e038      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
 8006038:	40023800 	.word	0x40023800
 800603c:	40007000 	.word	0x40007000
 8006040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006044:	4b1b      	ldr	r3, [pc, #108]	@ (80060b4 <HAL_RCC_OscConfig+0x4ec>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d028      	beq.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d121      	bne.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606a:	429a      	cmp	r2, r3
 800606c:	d11a      	bne.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800607a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800607c:	4293      	cmp	r3, r2
 800607e:	d111      	bne.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800608a:	085b      	lsrs	r3, r3, #1
 800608c:	3b01      	subs	r3, #1
 800608e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006090:	429a      	cmp	r2, r3
 8006092:	d107      	bne.n	80060a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d001      	beq.n	80060a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40023800 	.word	0x40023800

080060b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0cc      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060cc:	4b68      	ldr	r3, [pc, #416]	@ (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d90c      	bls.n	80060f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060da:	4b65      	ldr	r3, [pc, #404]	@ (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e2:	4b63      	ldr	r3, [pc, #396]	@ (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0b8      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800610c:	4b59      	ldr	r3, [pc, #356]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	4a58      	ldr	r2, [pc, #352]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006124:	4b53      	ldr	r3, [pc, #332]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4a52      	ldr	r2, [pc, #328]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800612e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006130:	4b50      	ldr	r3, [pc, #320]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	494d      	ldr	r1, [pc, #308]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d044      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d107      	bne.n	8006166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006156:	4b47      	ldr	r3, [pc, #284]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d119      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2b02      	cmp	r3, #2
 800616c:	d003      	beq.n	8006176 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006172:	2b03      	cmp	r3, #3
 8006174:	d107      	bne.n	8006186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006176:	4b3f      	ldr	r3, [pc, #252]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e06f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006186:	4b3b      	ldr	r3, [pc, #236]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e067      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006196:	4b37      	ldr	r3, [pc, #220]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f023 0203 	bic.w	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4934      	ldr	r1, [pc, #208]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a8:	f7fe fcd6 	bl	8004b58 <HAL_GetTick>
 80061ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ae:	e00a      	b.n	80061c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b0:	f7fe fcd2 	bl	8004b58 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e04f      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 020c 	and.w	r2, r3, #12
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d1eb      	bne.n	80061b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061d8:	4b25      	ldr	r3, [pc, #148]	@ (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d20c      	bcs.n	8006200 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e6:	4b22      	ldr	r3, [pc, #136]	@ (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ee:	4b20      	ldr	r3, [pc, #128]	@ (8006270 <HAL_RCC_ClockConfig+0x1b8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e032      	b.n	8006266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800620c:	4b19      	ldr	r3, [pc, #100]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4916      	ldr	r1, [pc, #88]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	4313      	orrs	r3, r2
 800621c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d009      	beq.n	800623e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800622a:	4b12      	ldr	r3, [pc, #72]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	490e      	ldr	r1, [pc, #56]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800623e:	f000 f821 	bl	8006284 <HAL_RCC_GetSysClockFreq>
 8006242:	4602      	mov	r2, r0
 8006244:	4b0b      	ldr	r3, [pc, #44]	@ (8006274 <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	490a      	ldr	r1, [pc, #40]	@ (8006278 <HAL_RCC_ClockConfig+0x1c0>)
 8006250:	5ccb      	ldrb	r3, [r1, r3]
 8006252:	fa22 f303 	lsr.w	r3, r2, r3
 8006256:	4a09      	ldr	r2, [pc, #36]	@ (800627c <HAL_RCC_ClockConfig+0x1c4>)
 8006258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800625a:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <HAL_RCC_ClockConfig+0x1c8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fc36 	bl	8004ad0 <HAL_InitTick>

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40023c00 	.word	0x40023c00
 8006274:	40023800 	.word	0x40023800
 8006278:	0800db7c 	.word	0x0800db7c
 800627c:	2000003c 	.word	0x2000003c
 8006280:	20000044 	.word	0x20000044

08006284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006288:	b090      	sub	sp, #64	@ 0x40
 800628a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800629c:	4b59      	ldr	r3, [pc, #356]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x180>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 030c 	and.w	r3, r3, #12
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d00d      	beq.n	80062c4 <HAL_RCC_GetSysClockFreq+0x40>
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	f200 80a1 	bhi.w	80063f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0x34>
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d003      	beq.n	80062be <HAL_RCC_GetSysClockFreq+0x3a>
 80062b6:	e09b      	b.n	80063f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b8:	4b53      	ldr	r3, [pc, #332]	@ (8006408 <HAL_RCC_GetSysClockFreq+0x184>)
 80062ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062bc:	e09b      	b.n	80063f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062be:	4b53      	ldr	r3, [pc, #332]	@ (800640c <HAL_RCC_GetSysClockFreq+0x188>)
 80062c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062c2:	e098      	b.n	80063f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c4:	4b4f      	ldr	r3, [pc, #316]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x180>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x180>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d028      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062da:	4b4a      	ldr	r3, [pc, #296]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x180>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	099b      	lsrs	r3, r3, #6
 80062e0:	2200      	movs	r2, #0
 80062e2:	623b      	str	r3, [r7, #32]
 80062e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80062ec:	2100      	movs	r1, #0
 80062ee:	4b47      	ldr	r3, [pc, #284]	@ (800640c <HAL_RCC_GetSysClockFreq+0x188>)
 80062f0:	fb03 f201 	mul.w	r2, r3, r1
 80062f4:	2300      	movs	r3, #0
 80062f6:	fb00 f303 	mul.w	r3, r0, r3
 80062fa:	4413      	add	r3, r2
 80062fc:	4a43      	ldr	r2, [pc, #268]	@ (800640c <HAL_RCC_GetSysClockFreq+0x188>)
 80062fe:	fba0 1202 	umull	r1, r2, r0, r2
 8006302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006304:	460a      	mov	r2, r1
 8006306:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800630a:	4413      	add	r3, r2
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800630e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006310:	2200      	movs	r2, #0
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	61fa      	str	r2, [r7, #28]
 8006316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800631a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800631e:	f7fa fc9b 	bl	8000c58 <__aeabi_uldivmod>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4613      	mov	r3, r2
 8006328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800632a:	e053      	b.n	80063d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800632c:	4b35      	ldr	r3, [pc, #212]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x180>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	099b      	lsrs	r3, r3, #6
 8006332:	2200      	movs	r2, #0
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	617a      	str	r2, [r7, #20]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800633e:	f04f 0b00 	mov.w	fp, #0
 8006342:	4652      	mov	r2, sl
 8006344:	465b      	mov	r3, fp
 8006346:	f04f 0000 	mov.w	r0, #0
 800634a:	f04f 0100 	mov.w	r1, #0
 800634e:	0159      	lsls	r1, r3, #5
 8006350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006354:	0150      	lsls	r0, r2, #5
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	ebb2 080a 	subs.w	r8, r2, sl
 800635e:	eb63 090b 	sbc.w	r9, r3, fp
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800636e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006372:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006376:	ebb2 0408 	subs.w	r4, r2, r8
 800637a:	eb63 0509 	sbc.w	r5, r3, r9
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	00eb      	lsls	r3, r5, #3
 8006388:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800638c:	00e2      	lsls	r2, r4, #3
 800638e:	4614      	mov	r4, r2
 8006390:	461d      	mov	r5, r3
 8006392:	eb14 030a 	adds.w	r3, r4, sl
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	eb45 030b 	adc.w	r3, r5, fp
 800639c:	607b      	str	r3, [r7, #4]
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063aa:	4629      	mov	r1, r5
 80063ac:	028b      	lsls	r3, r1, #10
 80063ae:	4621      	mov	r1, r4
 80063b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063b4:	4621      	mov	r1, r4
 80063b6:	028a      	lsls	r2, r1, #10
 80063b8:	4610      	mov	r0, r2
 80063ba:	4619      	mov	r1, r3
 80063bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063be:	2200      	movs	r2, #0
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	60fa      	str	r2, [r7, #12]
 80063c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063c8:	f7fa fc46 	bl	8000c58 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4613      	mov	r3, r2
 80063d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006404 <HAL_RCC_GetSysClockFreq+0x180>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	0c1b      	lsrs	r3, r3, #16
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	3301      	adds	r3, #1
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80063e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063ee:	e002      	b.n	80063f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063f0:	4b05      	ldr	r3, [pc, #20]	@ (8006408 <HAL_RCC_GetSysClockFreq+0x184>)
 80063f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80063f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3740      	adds	r7, #64	@ 0x40
 80063fc:	46bd      	mov	sp, r7
 80063fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800
 8006408:	00f42400 	.word	0x00f42400
 800640c:	017d7840 	.word	0x017d7840

08006410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006414:	4b03      	ldr	r3, [pc, #12]	@ (8006424 <HAL_RCC_GetHCLKFreq+0x14>)
 8006416:	681b      	ldr	r3, [r3, #0]
}
 8006418:	4618      	mov	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000003c 	.word	0x2000003c

08006428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800642c:	f7ff fff0 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006430:	4602      	mov	r2, r0
 8006432:	4b05      	ldr	r3, [pc, #20]	@ (8006448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	0a9b      	lsrs	r3, r3, #10
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	4903      	ldr	r1, [pc, #12]	@ (800644c <HAL_RCC_GetPCLK1Freq+0x24>)
 800643e:	5ccb      	ldrb	r3, [r1, r3]
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40023800 	.word	0x40023800
 800644c:	0800db8c 	.word	0x0800db8c

08006450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006454:	f7ff ffdc 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006458:	4602      	mov	r2, r0
 800645a:	4b05      	ldr	r3, [pc, #20]	@ (8006470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	0b5b      	lsrs	r3, r3, #13
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	4903      	ldr	r1, [pc, #12]	@ (8006474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006466:	5ccb      	ldrb	r3, [r1, r3]
 8006468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40023800 	.word	0x40023800
 8006474:	0800db8c 	.word	0x0800db8c

08006478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e07b      	b.n	8006582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d108      	bne.n	80064a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800649a:	d009      	beq.n	80064b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	61da      	str	r2, [r3, #28]
 80064a2:	e005      	b.n	80064b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fd fe9c 	bl	8004208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006534:	ea42 0103 	orr.w	r1, r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	f003 0104 	and.w	r1, r3, #4
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	f003 0210 	and.w	r2, r3, #16
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69da      	ldr	r2, [r3, #28]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b088      	sub	sp, #32
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	603b      	str	r3, [r7, #0]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800659a:	f7fe fadd 	bl	8004b58 <HAL_GetTick>
 800659e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d001      	beq.n	80065b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80065b0:	2302      	movs	r3, #2
 80065b2:	e12a      	b.n	800680a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_SPI_Transmit+0x36>
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e122      	b.n	800680a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_SPI_Transmit+0x48>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e11b      	b.n	800680a <HAL_SPI_Transmit+0x280>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2203      	movs	r2, #3
 80065de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	88fa      	ldrh	r2, [r7, #6]
 80065f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	88fa      	ldrh	r2, [r7, #6]
 80065f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006620:	d10f      	bne.n	8006642 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664c:	2b40      	cmp	r3, #64	@ 0x40
 800664e:	d007      	beq.n	8006660 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800665e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006668:	d152      	bne.n	8006710 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_SPI_Transmit+0xee>
 8006672:	8b7b      	ldrh	r3, [r7, #26]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d145      	bne.n	8006704 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667c:	881a      	ldrh	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006688:	1c9a      	adds	r2, r3, #2
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b29a      	uxth	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800669c:	e032      	b.n	8006704 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d112      	bne.n	80066d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b0:	881a      	ldrh	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066bc:	1c9a      	adds	r2, r3, #2
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066d0:	e018      	b.n	8006704 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d2:	f7fe fa41 	bl	8004b58 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d803      	bhi.n	80066ea <HAL_SPI_Transmit+0x160>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	d102      	bne.n	80066f0 <HAL_SPI_Transmit+0x166>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d109      	bne.n	8006704 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e082      	b.n	800680a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1c7      	bne.n	800669e <HAL_SPI_Transmit+0x114>
 800670e:	e053      	b.n	80067b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <HAL_SPI_Transmit+0x194>
 8006718:	8b7b      	ldrh	r3, [r7, #26]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d147      	bne.n	80067ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	330c      	adds	r3, #12
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006744:	e033      	b.n	80067ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b02      	cmp	r3, #2
 8006752:	d113      	bne.n	800677c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	86da      	strh	r2, [r3, #54]	@ 0x36
 800677a:	e018      	b.n	80067ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800677c:	f7fe f9ec 	bl	8004b58 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d803      	bhi.n	8006794 <HAL_SPI_Transmit+0x20a>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d102      	bne.n	800679a <HAL_SPI_Transmit+0x210>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e02d      	b.n	800680a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1c6      	bne.n	8006746 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fbd9 	bl	8006f74 <SPI_EndRxTxTransaction>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006808:	2300      	movs	r3, #0
  }
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b088      	sub	sp, #32
 8006816:	af02      	add	r7, sp, #8
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	d001      	beq.n	8006832 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800682e:	2302      	movs	r3, #2
 8006830:	e104      	b.n	8006a3c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800683a:	d112      	bne.n	8006862 <HAL_SPI_Receive+0x50>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10e      	bne.n	8006862 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2204      	movs	r2, #4
 8006848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800684c:	88fa      	ldrh	r2, [r7, #6]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	4613      	mov	r3, r2
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	68b9      	ldr	r1, [r7, #8]
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f8f3 	bl	8006a44 <HAL_SPI_TransmitReceive>
 800685e:	4603      	mov	r3, r0
 8006860:	e0ec      	b.n	8006a3c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006862:	f7fe f979 	bl	8004b58 <HAL_GetTick>
 8006866:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_SPI_Receive+0x62>
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0e1      	b.n	8006a3c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_SPI_Receive+0x74>
 8006882:	2302      	movs	r3, #2
 8006884:	e0da      	b.n	8006a3c <HAL_SPI_Receive+0x22a>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2204      	movs	r2, #4
 8006892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	88fa      	ldrh	r2, [r7, #6]
 80068a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	88fa      	ldrh	r2, [r7, #6]
 80068ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068d4:	d10f      	bne.n	80068f6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80068f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006900:	2b40      	cmp	r3, #64	@ 0x40
 8006902:	d007      	beq.n	8006914 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006912:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d170      	bne.n	80069fe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800691c:	e035      	b.n	800698a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d115      	bne.n	8006958 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f103 020c 	add.w	r2, r3, #12
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006956:	e018      	b.n	800698a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006958:	f7fe f8fe 	bl	8004b58 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d803      	bhi.n	8006970 <HAL_SPI_Receive+0x15e>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d102      	bne.n	8006976 <HAL_SPI_Receive+0x164>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e058      	b.n	8006a3c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1c4      	bne.n	800691e <HAL_SPI_Receive+0x10c>
 8006994:	e038      	b.n	8006a08 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d113      	bne.n	80069cc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ae:	b292      	uxth	r2, r2
 80069b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069b6:	1c9a      	adds	r2, r3, #2
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069ca:	e018      	b.n	80069fe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069cc:	f7fe f8c4 	bl	8004b58 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d803      	bhi.n	80069e4 <HAL_SPI_Receive+0x1d2>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d102      	bne.n	80069ea <HAL_SPI_Receive+0x1d8>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e01e      	b.n	8006a3c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1c6      	bne.n	8006996 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fa4b 	bl	8006ea8 <SPI_EndRxTransaction>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
  }
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	@ 0x28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a52:	2301      	movs	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a56:	f7fe f87f 	bl	8004b58 <HAL_GetTick>
 8006a5a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a62:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006a6a:	887b      	ldrh	r3, [r7, #2]
 8006a6c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a6e:	7ffb      	ldrb	r3, [r7, #31]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d00c      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x4a>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a7a:	d106      	bne.n	8006a8a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <HAL_SPI_TransmitReceive+0x46>
 8006a84:	7ffb      	ldrb	r3, [r7, #31]
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d001      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e17f      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x5c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x5c>
 8006a9a:	887b      	ldrh	r3, [r7, #2]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e174      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x6e>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e16d      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34a>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	d003      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2205      	movs	r2, #5
 8006aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	887a      	ldrh	r2, [r7, #2]
 8006ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	887a      	ldrh	r2, [r7, #2]
 8006ae4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	887a      	ldrh	r2, [r7, #2]
 8006af0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0e:	2b40      	cmp	r3, #64	@ 0x40
 8006b10:	d007      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b2a:	d17e      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <HAL_SPI_TransmitReceive+0xf6>
 8006b34:	8afb      	ldrh	r3, [r7, #22]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d16c      	bne.n	8006c14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3e:	881a      	ldrh	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4a:	1c9a      	adds	r2, r3, #2
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b5e:	e059      	b.n	8006c14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d11b      	bne.n	8006ba6 <HAL_SPI_TransmitReceive+0x162>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d016      	beq.n	8006ba6 <HAL_SPI_TransmitReceive+0x162>
 8006b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d113      	bne.n	8006ba6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b82:	881a      	ldrh	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8e:	1c9a      	adds	r2, r3, #2
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d119      	bne.n	8006be8 <HAL_SPI_TransmitReceive+0x1a4>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d014      	beq.n	8006be8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc8:	b292      	uxth	r2, r2
 8006bca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd0:	1c9a      	adds	r2, r3, #2
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006be4:	2301      	movs	r3, #1
 8006be6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006be8:	f7fd ffb6 	bl	8004b58 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d80d      	bhi.n	8006c14 <HAL_SPI_TransmitReceive+0x1d0>
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	d009      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e0bc      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1a0      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x11c>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d19b      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x11c>
 8006c28:	e082      	b.n	8006d30 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_TransmitReceive+0x1f4>
 8006c32:	8afb      	ldrh	r3, [r7, #22]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d171      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c5e:	e05d      	b.n	8006d1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d11c      	bne.n	8006ca8 <HAL_SPI_TransmitReceive+0x264>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d017      	beq.n	8006ca8 <HAL_SPI_TransmitReceive+0x264>
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d114      	bne.n	8006ca8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	7812      	ldrb	r2, [r2, #0]
 8006c8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d119      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x2a6>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d014      	beq.n	8006cea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cea:	f7fd ff35 	bl	8004b58 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d803      	bhi.n	8006d02 <HAL_SPI_TransmitReceive+0x2be>
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d102      	bne.n	8006d08 <HAL_SPI_TransmitReceive+0x2c4>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e038      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d19c      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x21c>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d197      	bne.n	8006c60 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f91d 	bl	8006f74 <SPI_EndRxTxTransaction>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d008      	beq.n	8006d52 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e01d      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e000      	b.n	8006d8e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
  }
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3728      	adds	r7, #40	@ 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	4613      	mov	r3, r2
 8006da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006da8:	f7fd fed6 	bl	8004b58 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db0:	1a9b      	subs	r3, r3, r2
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	4413      	add	r3, r2
 8006db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006db8:	f7fd fece 	bl	8004b58 <HAL_GetTick>
 8006dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dbe:	4b39      	ldr	r3, [pc, #228]	@ (8006ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	015b      	lsls	r3, r3, #5
 8006dc4:	0d1b      	lsrs	r3, r3, #20
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	fb02 f303 	mul.w	r3, r2, r3
 8006dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006dce:	e054      	b.n	8006e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd6:	d050      	beq.n	8006e7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dd8:	f7fd febe 	bl	8004b58 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d902      	bls.n	8006dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d13d      	bne.n	8006e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e06:	d111      	bne.n	8006e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e10:	d004      	beq.n	8006e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e1a:	d107      	bne.n	8006e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e34:	d10f      	bne.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e017      	b.n	8006e9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4013      	ands	r3, r2
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	bf0c      	ite	eq
 8006e8a:	2301      	moveq	r3, #1
 8006e8c:	2300      	movne	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d19b      	bne.n	8006dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3720      	adds	r7, #32
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000003c 	.word	0x2000003c

08006ea8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ebc:	d111      	bne.n	8006ee2 <SPI_EndRxTransaction+0x3a>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ec6:	d004      	beq.n	8006ed2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed0:	d107      	bne.n	8006ee2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ee0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006eea:	d12a      	bne.n	8006f42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef4:	d012      	beq.n	8006f1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2200      	movs	r2, #0
 8006efe:	2180      	movs	r1, #128	@ 0x80
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff ff49 	bl	8006d98 <SPI_WaitFlagStateUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d02d      	beq.n	8006f68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f10:	f043 0220 	orr.w	r2, r3, #32
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e026      	b.n	8006f6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	2101      	movs	r1, #1
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff ff36 	bl	8006d98 <SPI_WaitFlagStateUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01a      	beq.n	8006f68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f36:	f043 0220 	orr.w	r2, r3, #32
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e013      	b.n	8006f6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff ff23 	bl	8006d98 <SPI_WaitFlagStateUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e000      	b.n	8006f6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2201      	movs	r2, #1
 8006f88:	2102      	movs	r1, #2
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff ff04 	bl	8006d98 <SPI_WaitFlagStateUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f9a:	f043 0220 	orr.w	r2, r3, #32
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e032      	b.n	800700c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8007014 <SPI_EndRxTxTransaction+0xa0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1b      	ldr	r2, [pc, #108]	@ (8007018 <SPI_EndRxTxTransaction+0xa4>)
 8006fac:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb0:	0d5b      	lsrs	r3, r3, #21
 8006fb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fb6:	fb02 f303 	mul.w	r3, r2, r3
 8006fba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc4:	d112      	bne.n	8006fec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2180      	movs	r1, #128	@ 0x80
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7ff fee1 	bl	8006d98 <SPI_WaitFlagStateUntilTimeout>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d016      	beq.n	800700a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe0:	f043 0220 	orr.w	r2, r3, #32
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e00f      	b.n	800700c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007002:	2b80      	cmp	r3, #128	@ 0x80
 8007004:	d0f2      	beq.n	8006fec <SPI_EndRxTxTransaction+0x78>
 8007006:	e000      	b.n	800700a <SPI_EndRxTxTransaction+0x96>
        break;
 8007008:	bf00      	nop
  }

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	2000003c 	.word	0x2000003c
 8007018:	165e9f81 	.word	0x165e9f81

0800701c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e041      	b.n	80070b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fd f928 	bl	8004298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f000 fec4 	bl	8007de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d001      	beq.n	80070d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e044      	b.n	800715e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2202      	movs	r2, #2
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0201 	orr.w	r2, r2, #1
 80070ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1e      	ldr	r2, [pc, #120]	@ (800716c <HAL_TIM_Base_Start_IT+0xb0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070fe:	d013      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1a      	ldr	r2, [pc, #104]	@ (8007170 <HAL_TIM_Base_Start_IT+0xb4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a19      	ldr	r2, [pc, #100]	@ (8007174 <HAL_TIM_Base_Start_IT+0xb8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a17      	ldr	r2, [pc, #92]	@ (8007178 <HAL_TIM_Base_Start_IT+0xbc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0x6c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a16      	ldr	r2, [pc, #88]	@ (800717c <HAL_TIM_Base_Start_IT+0xc0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d111      	bne.n	800714c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f003 0307 	and.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b06      	cmp	r3, #6
 8007138:	d010      	beq.n	800715c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0201 	orr.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714a:	e007      	b.n	800715c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40014000 	.word	0x40014000

08007180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e041      	b.n	8007216 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f839 	bl	800721e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f000 fe12 	bl	8007de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <HAL_TIM_PWM_Start+0x24>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b01      	cmp	r3, #1
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e022      	b.n	800729e <HAL_TIM_PWM_Start+0x6a>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b04      	cmp	r3, #4
 800725c:	d109      	bne.n	8007272 <HAL_TIM_PWM_Start+0x3e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b01      	cmp	r3, #1
 8007268:	bf14      	ite	ne
 800726a:	2301      	movne	r3, #1
 800726c:	2300      	moveq	r3, #0
 800726e:	b2db      	uxtb	r3, r3
 8007270:	e015      	b.n	800729e <HAL_TIM_PWM_Start+0x6a>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b08      	cmp	r3, #8
 8007276:	d109      	bne.n	800728c <HAL_TIM_PWM_Start+0x58>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	bf14      	ite	ne
 8007284:	2301      	movne	r3, #1
 8007286:	2300      	moveq	r3, #0
 8007288:	b2db      	uxtb	r3, r3
 800728a:	e008      	b.n	800729e <HAL_TIM_PWM_Start+0x6a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b01      	cmp	r3, #1
 8007296:	bf14      	ite	ne
 8007298:	2301      	movne	r3, #1
 800729a:	2300      	moveq	r3, #0
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e068      	b.n	8007378 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <HAL_TIM_PWM_Start+0x82>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072b4:	e013      	b.n	80072de <HAL_TIM_PWM_Start+0xaa>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Start+0x92>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072c4:	e00b      	b.n	80072de <HAL_TIM_PWM_Start+0xaa>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b08      	cmp	r3, #8
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Start+0xa2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072d4:	e003      	b.n	80072de <HAL_TIM_PWM_Start+0xaa>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 f830 	bl	800834c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a23      	ldr	r2, [pc, #140]	@ (8007380 <HAL_TIM_PWM_Start+0x14c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d107      	bne.n	8007306 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007304:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1d      	ldr	r2, [pc, #116]	@ (8007380 <HAL_TIM_PWM_Start+0x14c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007318:	d013      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a19      	ldr	r2, [pc, #100]	@ (8007384 <HAL_TIM_PWM_Start+0x150>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a17      	ldr	r2, [pc, #92]	@ (8007388 <HAL_TIM_PWM_Start+0x154>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a16      	ldr	r2, [pc, #88]	@ (800738c <HAL_TIM_PWM_Start+0x158>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_TIM_PWM_Start+0x10e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a14      	ldr	r2, [pc, #80]	@ (8007390 <HAL_TIM_PWM_Start+0x15c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d111      	bne.n	8007366 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d010      	beq.n	8007376 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	e007      	b.n	8007376 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40010000 	.word	0x40010000
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800
 800738c:	40000c00 	.word	0x40000c00
 8007390:	40014000 	.word	0x40014000

08007394 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <HAL_TIM_IC_Start_IT+0x1e>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	e013      	b.n	80073da <HAL_TIM_IC_Start_IT+0x46>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d104      	bne.n	80073c2 <HAL_TIM_IC_Start_IT+0x2e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e00b      	b.n	80073da <HAL_TIM_IC_Start_IT+0x46>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_IC_Start_IT+0x3e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	e003      	b.n	80073da <HAL_TIM_IC_Start_IT+0x46>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d104      	bne.n	80073ec <HAL_TIM_IC_Start_IT+0x58>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	e013      	b.n	8007414 <HAL_TIM_IC_Start_IT+0x80>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d104      	bne.n	80073fc <HAL_TIM_IC_Start_IT+0x68>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e00b      	b.n	8007414 <HAL_TIM_IC_Start_IT+0x80>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d104      	bne.n	800740c <HAL_TIM_IC_Start_IT+0x78>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007408:	b2db      	uxtb	r3, r3
 800740a:	e003      	b.n	8007414 <HAL_TIM_IC_Start_IT+0x80>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007412:	b2db      	uxtb	r3, r3
 8007414:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d102      	bne.n	8007422 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800741c:	7b7b      	ldrb	r3, [r7, #13]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d001      	beq.n	8007426 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e0c2      	b.n	80075ac <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d104      	bne.n	8007436 <HAL_TIM_IC_Start_IT+0xa2>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007434:	e013      	b.n	800745e <HAL_TIM_IC_Start_IT+0xca>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b04      	cmp	r3, #4
 800743a:	d104      	bne.n	8007446 <HAL_TIM_IC_Start_IT+0xb2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007444:	e00b      	b.n	800745e <HAL_TIM_IC_Start_IT+0xca>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d104      	bne.n	8007456 <HAL_TIM_IC_Start_IT+0xc2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007454:	e003      	b.n	800745e <HAL_TIM_IC_Start_IT+0xca>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2202      	movs	r2, #2
 800745a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <HAL_TIM_IC_Start_IT+0xda>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800746c:	e013      	b.n	8007496 <HAL_TIM_IC_Start_IT+0x102>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b04      	cmp	r3, #4
 8007472:	d104      	bne.n	800747e <HAL_TIM_IC_Start_IT+0xea>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800747c:	e00b      	b.n	8007496 <HAL_TIM_IC_Start_IT+0x102>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b08      	cmp	r3, #8
 8007482:	d104      	bne.n	800748e <HAL_TIM_IC_Start_IT+0xfa>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800748c:	e003      	b.n	8007496 <HAL_TIM_IC_Start_IT+0x102>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b0c      	cmp	r3, #12
 800749a:	d841      	bhi.n	8007520 <HAL_TIM_IC_Start_IT+0x18c>
 800749c:	a201      	add	r2, pc, #4	@ (adr r2, 80074a4 <HAL_TIM_IC_Start_IT+0x110>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	080074d9 	.word	0x080074d9
 80074a8:	08007521 	.word	0x08007521
 80074ac:	08007521 	.word	0x08007521
 80074b0:	08007521 	.word	0x08007521
 80074b4:	080074eb 	.word	0x080074eb
 80074b8:	08007521 	.word	0x08007521
 80074bc:	08007521 	.word	0x08007521
 80074c0:	08007521 	.word	0x08007521
 80074c4:	080074fd 	.word	0x080074fd
 80074c8:	08007521 	.word	0x08007521
 80074cc:	08007521 	.word	0x08007521
 80074d0:	08007521 	.word	0x08007521
 80074d4:	0800750f 	.word	0x0800750f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0202 	orr.w	r2, r2, #2
 80074e6:	60da      	str	r2, [r3, #12]
      break;
 80074e8:	e01d      	b.n	8007526 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f042 0204 	orr.w	r2, r2, #4
 80074f8:	60da      	str	r2, [r3, #12]
      break;
 80074fa:	e014      	b.n	8007526 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0208 	orr.w	r2, r2, #8
 800750a:	60da      	str	r2, [r3, #12]
      break;
 800750c:	e00b      	b.n	8007526 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68da      	ldr	r2, [r3, #12]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0210 	orr.w	r2, r2, #16
 800751c:	60da      	str	r2, [r3, #12]
      break;
 800751e:	e002      	b.n	8007526 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
      break;
 8007524:	bf00      	nop
  }

  if (status == HAL_OK)
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d13e      	bne.n	80075aa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2201      	movs	r2, #1
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f000 ff09 	bl	800834c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1d      	ldr	r2, [pc, #116]	@ (80075b4 <HAL_TIM_IC_Start_IT+0x220>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d018      	beq.n	8007576 <HAL_TIM_IC_Start_IT+0x1e2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800754c:	d013      	beq.n	8007576 <HAL_TIM_IC_Start_IT+0x1e2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a19      	ldr	r2, [pc, #100]	@ (80075b8 <HAL_TIM_IC_Start_IT+0x224>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00e      	beq.n	8007576 <HAL_TIM_IC_Start_IT+0x1e2>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a17      	ldr	r2, [pc, #92]	@ (80075bc <HAL_TIM_IC_Start_IT+0x228>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_TIM_IC_Start_IT+0x1e2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a16      	ldr	r2, [pc, #88]	@ (80075c0 <HAL_TIM_IC_Start_IT+0x22c>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <HAL_TIM_IC_Start_IT+0x1e2>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a14      	ldr	r2, [pc, #80]	@ (80075c4 <HAL_TIM_IC_Start_IT+0x230>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d111      	bne.n	800759a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2b06      	cmp	r3, #6
 8007586:	d010      	beq.n	80075aa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0201 	orr.w	r2, r2, #1
 8007596:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007598:	e007      	b.n	80075aa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40000c00 	.word	0x40000c00
 80075c4:	40014000 	.word	0x40014000

080075c8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e097      	b.n	800770c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7fc fe8f 	bl	8004314 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2202      	movs	r2, #2
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800760c:	f023 0307 	bic.w	r3, r3, #7
 8007610:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3304      	adds	r3, #4
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f000 fbe3 	bl	8007de8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	4313      	orrs	r3, r2
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007668:	f023 030c 	bic.w	r3, r3, #12
 800766c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007674:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	4313      	orrs	r3, r2
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	011a      	lsls	r2, r3, #4
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	031b      	lsls	r3, r3, #12
 8007698:	4313      	orrs	r3, r2
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80076a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80076ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	011b      	lsls	r3, r3, #4
 80076ba:	4313      	orrs	r3, r2
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007724:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800772c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007734:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800773c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d110      	bne.n	8007766 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d102      	bne.n	8007750 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800774a:	7b7b      	ldrb	r3, [r7, #13]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d001      	beq.n	8007754 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e069      	b.n	8007828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007764:	e031      	b.n	80077ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b04      	cmp	r3, #4
 800776a:	d110      	bne.n	800778e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d102      	bne.n	8007778 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007772:	7b3b      	ldrb	r3, [r7, #12]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d001      	beq.n	800777c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e055      	b.n	8007828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800778c:	e01d      	b.n	80077ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d108      	bne.n	80077a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d105      	bne.n	80077a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800779a:	7b7b      	ldrb	r3, [r7, #13]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d102      	bne.n	80077a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077a0:	7b3b      	ldrb	r3, [r7, #12]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d001      	beq.n	80077aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e03e      	b.n	8007828 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2202      	movs	r2, #2
 80077ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2202      	movs	r2, #2
 80077b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2202      	movs	r2, #2
 80077be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_TIM_Encoder_Start+0xc4>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d008      	beq.n	80077e8 <HAL_TIM_Encoder_Start+0xd4>
 80077d6:	e00f      	b.n	80077f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2201      	movs	r2, #1
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 fdb3 	bl	800834c <TIM_CCxChannelCmd>
      break;
 80077e6:	e016      	b.n	8007816 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2201      	movs	r2, #1
 80077ee:	2104      	movs	r1, #4
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fdab 	bl	800834c <TIM_CCxChannelCmd>
      break;
 80077f6:	e00e      	b.n	8007816 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2201      	movs	r2, #1
 80077fe:	2100      	movs	r1, #0
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fda3 	bl	800834c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2201      	movs	r2, #1
 800780c:	2104      	movs	r1, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fd9c 	bl	800834c <TIM_CCxChannelCmd>
      break;
 8007814:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f042 0201 	orr.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01b      	beq.n	8007894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0202 	mvn.w	r2, #2
 8007864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7f9 fc38 	bl	80010f0 <HAL_TIM_IC_CaptureCallback>
 8007880:	e005      	b.n	800788e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa92 	bl	8007dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fa99 	bl	8007dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 0304 	and.w	r3, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	d020      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01b      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0204 	mvn.w	r2, #4
 80078b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7f9 fc12 	bl	80010f0 <HAL_TIM_IC_CaptureCallback>
 80078cc:	e005      	b.n	80078da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa6c 	bl	8007dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fa73 	bl	8007dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d020      	beq.n	800792c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 0308 	and.w	r3, r3, #8
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01b      	beq.n	800792c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0208 	mvn.w	r2, #8
 80078fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2204      	movs	r2, #4
 8007902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7f9 fbec 	bl	80010f0 <HAL_TIM_IC_CaptureCallback>
 8007918:	e005      	b.n	8007926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa46 	bl	8007dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fa4d 	bl	8007dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	2b00      	cmp	r3, #0
 8007934:	d020      	beq.n	8007978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01b      	beq.n	8007978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0210 	mvn.w	r2, #16
 8007948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2208      	movs	r2, #8
 800794e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7f9 fbc6 	bl	80010f0 <HAL_TIM_IC_CaptureCallback>
 8007964:	e005      	b.n	8007972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fa20 	bl	8007dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa27 	bl	8007dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00c      	beq.n	800799c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f06f 0201 	mvn.w	r2, #1
 8007994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fa fa20 	bl	8001ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00c      	beq.n	80079c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80079b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fd64 	bl	8008488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00c      	beq.n	80079e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d007      	beq.n	80079e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f9f8 	bl	8007dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00c      	beq.n	8007a08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d007      	beq.n	8007a08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0220 	mvn.w	r2, #32
 8007a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fd36 	bl	8008474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e0ae      	b.n	8007b8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b0c      	cmp	r3, #12
 8007a3a:	f200 809f 	bhi.w	8007b7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a79 	.word	0x08007a79
 8007a48:	08007b7d 	.word	0x08007b7d
 8007a4c:	08007b7d 	.word	0x08007b7d
 8007a50:	08007b7d 	.word	0x08007b7d
 8007a54:	08007ab9 	.word	0x08007ab9
 8007a58:	08007b7d 	.word	0x08007b7d
 8007a5c:	08007b7d 	.word	0x08007b7d
 8007a60:	08007b7d 	.word	0x08007b7d
 8007a64:	08007afb 	.word	0x08007afb
 8007a68:	08007b7d 	.word	0x08007b7d
 8007a6c:	08007b7d 	.word	0x08007b7d
 8007a70:	08007b7d 	.word	0x08007b7d
 8007a74:	08007b3b 	.word	0x08007b3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fa3e 	bl	8007f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699a      	ldr	r2, [r3, #24]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0208 	orr.w	r2, r2, #8
 8007a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0204 	bic.w	r2, r2, #4
 8007aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6999      	ldr	r1, [r3, #24]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	691a      	ldr	r2, [r3, #16]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	619a      	str	r2, [r3, #24]
      break;
 8007ab6:	e064      	b.n	8007b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fa84 	bl	8007fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699a      	ldr	r2, [r3, #24]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6999      	ldr	r1, [r3, #24]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	021a      	lsls	r2, r3, #8
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	619a      	str	r2, [r3, #24]
      break;
 8007af8:	e043      	b.n	8007b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 facf 	bl	80080a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69da      	ldr	r2, [r3, #28]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0208 	orr.w	r2, r2, #8
 8007b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69da      	ldr	r2, [r3, #28]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0204 	bic.w	r2, r2, #4
 8007b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69d9      	ldr	r1, [r3, #28]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	691a      	ldr	r2, [r3, #16]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	61da      	str	r2, [r3, #28]
      break;
 8007b38:	e023      	b.n	8007b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fb19 	bl	8008178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69da      	ldr	r2, [r3, #28]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69d9      	ldr	r1, [r3, #28]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	021a      	lsls	r2, r3, #8
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	61da      	str	r2, [r3, #28]
      break;
 8007b7a:	e002      	b.n	8007b82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007b80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d101      	bne.n	8007bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8007bac:	2302      	movs	r3, #2
 8007bae:	e0b4      	b.n	8007d1a <HAL_TIM_ConfigClockSource+0x186>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be8:	d03e      	beq.n	8007c68 <HAL_TIM_ConfigClockSource+0xd4>
 8007bea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bee:	f200 8087 	bhi.w	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bf6:	f000 8086 	beq.w	8007d06 <HAL_TIM_ConfigClockSource+0x172>
 8007bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bfe:	d87f      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007c00:	2b70      	cmp	r3, #112	@ 0x70
 8007c02:	d01a      	beq.n	8007c3a <HAL_TIM_ConfigClockSource+0xa6>
 8007c04:	2b70      	cmp	r3, #112	@ 0x70
 8007c06:	d87b      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007c08:	2b60      	cmp	r3, #96	@ 0x60
 8007c0a:	d050      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0x11a>
 8007c0c:	2b60      	cmp	r3, #96	@ 0x60
 8007c0e:	d877      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007c10:	2b50      	cmp	r3, #80	@ 0x50
 8007c12:	d03c      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0xfa>
 8007c14:	2b50      	cmp	r3, #80	@ 0x50
 8007c16:	d873      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007c18:	2b40      	cmp	r3, #64	@ 0x40
 8007c1a:	d058      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x13a>
 8007c1c:	2b40      	cmp	r3, #64	@ 0x40
 8007c1e:	d86f      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007c20:	2b30      	cmp	r3, #48	@ 0x30
 8007c22:	d064      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x15a>
 8007c24:	2b30      	cmp	r3, #48	@ 0x30
 8007c26:	d86b      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d060      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x15a>
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d867      	bhi.n	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d05c      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x15a>
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d05a      	beq.n	8007cee <HAL_TIM_ConfigClockSource+0x15a>
 8007c38:	e062      	b.n	8007d00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c4a:	f000 fb5f 	bl	800830c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	609a      	str	r2, [r3, #8]
      break;
 8007c66:	e04f      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c78:	f000 fb48 	bl	800830c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c8a:	609a      	str	r2, [r3, #8]
      break;
 8007c8c:	e03c      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f000 fabc 	bl	8008218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2150      	movs	r1, #80	@ 0x50
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fb15 	bl	80082d6 <TIM_ITRx_SetConfig>
      break;
 8007cac:	e02c      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f000 fadb 	bl	8008276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2160      	movs	r1, #96	@ 0x60
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fb05 	bl	80082d6 <TIM_ITRx_SetConfig>
      break;
 8007ccc:	e01c      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f000 fa9c 	bl	8008218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2140      	movs	r1, #64	@ 0x40
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 faf5 	bl	80082d6 <TIM_ITRx_SetConfig>
      break;
 8007cec:	e00c      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f000 faec 	bl	80082d6 <TIM_ITRx_SetConfig>
      break;
 8007cfe:	e003      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	73fb      	strb	r3, [r7, #15]
      break;
 8007d04:	e000      	b.n	8007d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b0c      	cmp	r3, #12
 8007d36:	d831      	bhi.n	8007d9c <HAL_TIM_ReadCapturedValue+0x78>
 8007d38:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d75 	.word	0x08007d75
 8007d44:	08007d9d 	.word	0x08007d9d
 8007d48:	08007d9d 	.word	0x08007d9d
 8007d4c:	08007d9d 	.word	0x08007d9d
 8007d50:	08007d7f 	.word	0x08007d7f
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007d9d 	.word	0x08007d9d
 8007d5c:	08007d9d 	.word	0x08007d9d
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d9d 	.word	0x08007d9d
 8007d68:	08007d9d 	.word	0x08007d9d
 8007d6c:	08007d9d 	.word	0x08007d9d
 8007d70:	08007d93 	.word	0x08007d93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d7a:	60fb      	str	r3, [r7, #12]

      break;
 8007d7c:	e00f      	b.n	8007d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d84:	60fb      	str	r3, [r7, #12]

      break;
 8007d86:	e00a      	b.n	8007d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8e:	60fb      	str	r3, [r7, #12]

      break;
 8007d90:	e005      	b.n	8007d9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d98:	60fb      	str	r3, [r7, #12]

      break;
 8007d9a:	e000      	b.n	8007d9e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007d9c:	bf00      	nop
  }

  return tmpreg;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a3a      	ldr	r2, [pc, #232]	@ (8007ee4 <TIM_Base_SetConfig+0xfc>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00f      	beq.n	8007e20 <TIM_Base_SetConfig+0x38>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e06:	d00b      	beq.n	8007e20 <TIM_Base_SetConfig+0x38>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a37      	ldr	r2, [pc, #220]	@ (8007ee8 <TIM_Base_SetConfig+0x100>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d007      	beq.n	8007e20 <TIM_Base_SetConfig+0x38>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a36      	ldr	r2, [pc, #216]	@ (8007eec <TIM_Base_SetConfig+0x104>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_Base_SetConfig+0x38>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a35      	ldr	r2, [pc, #212]	@ (8007ef0 <TIM_Base_SetConfig+0x108>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d108      	bne.n	8007e32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a2b      	ldr	r2, [pc, #172]	@ (8007ee4 <TIM_Base_SetConfig+0xfc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d01b      	beq.n	8007e72 <TIM_Base_SetConfig+0x8a>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e40:	d017      	beq.n	8007e72 <TIM_Base_SetConfig+0x8a>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a28      	ldr	r2, [pc, #160]	@ (8007ee8 <TIM_Base_SetConfig+0x100>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <TIM_Base_SetConfig+0x8a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a27      	ldr	r2, [pc, #156]	@ (8007eec <TIM_Base_SetConfig+0x104>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00f      	beq.n	8007e72 <TIM_Base_SetConfig+0x8a>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a26      	ldr	r2, [pc, #152]	@ (8007ef0 <TIM_Base_SetConfig+0x108>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00b      	beq.n	8007e72 <TIM_Base_SetConfig+0x8a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a25      	ldr	r2, [pc, #148]	@ (8007ef4 <TIM_Base_SetConfig+0x10c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d007      	beq.n	8007e72 <TIM_Base_SetConfig+0x8a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a24      	ldr	r2, [pc, #144]	@ (8007ef8 <TIM_Base_SetConfig+0x110>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d003      	beq.n	8007e72 <TIM_Base_SetConfig+0x8a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a23      	ldr	r2, [pc, #140]	@ (8007efc <TIM_Base_SetConfig+0x114>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d108      	bne.n	8007e84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8007ee4 <TIM_Base_SetConfig+0xfc>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d103      	bne.n	8007eb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d105      	bne.n	8007ed6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	611a      	str	r2, [r3, #16]
  }
}
 8007ed6:	bf00      	nop
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40010000 	.word	0x40010000
 8007ee8:	40000400 	.word	0x40000400
 8007eec:	40000800 	.word	0x40000800
 8007ef0:	40000c00 	.word	0x40000c00
 8007ef4:	40014000 	.word	0x40014000
 8007ef8:	40014400 	.word	0x40014400
 8007efc:	40014800 	.word	0x40014800

08007f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a1b      	ldr	r3, [r3, #32]
 8007f14:	f023 0201 	bic.w	r2, r3, #1
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 0303 	bic.w	r3, r3, #3
 8007f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f023 0302 	bic.w	r3, r3, #2
 8007f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc8 <TIM_OC1_SetConfig+0xc8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d10c      	bne.n	8007f76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f023 0308 	bic.w	r3, r3, #8
 8007f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f023 0304 	bic.w	r3, r3, #4
 8007f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a13      	ldr	r2, [pc, #76]	@ (8007fc8 <TIM_OC1_SetConfig+0xc8>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d111      	bne.n	8007fa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	621a      	str	r2, [r3, #32]
}
 8007fbc:	bf00      	nop
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	40010000 	.word	0x40010000

08007fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f023 0210 	bic.w	r2, r3, #16
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	021b      	lsls	r3, r3, #8
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f023 0320 	bic.w	r3, r3, #32
 8008016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	011b      	lsls	r3, r3, #4
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a1e      	ldr	r2, [pc, #120]	@ (80080a0 <TIM_OC2_SetConfig+0xd4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d10d      	bne.n	8008048 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008046:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a15      	ldr	r2, [pc, #84]	@ (80080a0 <TIM_OC2_SetConfig+0xd4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d113      	bne.n	8008078 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800805e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	621a      	str	r2, [r3, #32]
}
 8008092:	bf00      	nop
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	40010000 	.word	0x40010000

080080a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008174 <TIM_OC3_SetConfig+0xd0>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10d      	bne.n	800811e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800811c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a14      	ldr	r2, [pc, #80]	@ (8008174 <TIM_OC3_SetConfig+0xd0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d113      	bne.n	800814e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800812c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	621a      	str	r2, [r3, #32]
}
 8008168:	bf00      	nop
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	40010000 	.word	0x40010000

08008178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	031b      	lsls	r3, r3, #12
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a10      	ldr	r2, [pc, #64]	@ (8008214 <TIM_OC4_SetConfig+0x9c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d109      	bne.n	80081ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80081de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	019b      	lsls	r3, r3, #6
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	40010000 	.word	0x40010000

08008218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	f023 0201 	bic.w	r2, r3, #1
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f023 030a 	bic.w	r3, r3, #10
 8008254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008276:	b480      	push	{r7}
 8008278:	b087      	sub	sp, #28
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	f023 0210 	bic.w	r2, r3, #16
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	031b      	lsls	r3, r3, #12
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	621a      	str	r2, [r3, #32]
}
 80082ca:	bf00      	nop
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f043 0307 	orr.w	r3, r3, #7
 80082f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	609a      	str	r2, [r3, #8]
}
 8008300:	bf00      	nop
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
 8008318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	021a      	lsls	r2, r3, #8
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	431a      	orrs	r2, r3
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4313      	orrs	r3, r2
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	609a      	str	r2, [r3, #8]
}
 8008340:	bf00      	nop
 8008342:	371c      	adds	r7, #28
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f003 031f 	and.w	r3, r3, #31
 800835e:	2201      	movs	r2, #1
 8008360:	fa02 f303 	lsl.w	r3, r2, r3
 8008364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a1a      	ldr	r2, [r3, #32]
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	43db      	mvns	r3, r3
 800836e:	401a      	ands	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a1a      	ldr	r2, [r3, #32]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 031f 	and.w	r3, r3, #31
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	fa01 f303 	lsl.w	r3, r1, r3
 8008384:	431a      	orrs	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	621a      	str	r2, [r3, #32]
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
	...

08008398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e050      	b.n	8008452 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4313      	orrs	r3, r2
 80083e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008460 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d018      	beq.n	8008426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083fc:	d013      	beq.n	8008426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a18      	ldr	r2, [pc, #96]	@ (8008464 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00e      	beq.n	8008426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a16      	ldr	r2, [pc, #88]	@ (8008468 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d009      	beq.n	8008426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a15      	ldr	r2, [pc, #84]	@ (800846c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d004      	beq.n	8008426 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a13      	ldr	r2, [pc, #76]	@ (8008470 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d10c      	bne.n	8008440 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800842c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	4313      	orrs	r3, r2
 8008436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40010000 	.word	0x40010000
 8008464:	40000400 	.word	0x40000400
 8008468:	40000800 	.word	0x40000800
 800846c:	40000c00 	.word	0x40000c00
 8008470:	40014000 	.word	0x40014000

08008474 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e042      	b.n	8008534 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7fb fffc 	bl	80044c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2224      	movs	r2, #36	@ 0x24
 80084cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fdbd 	bl	8009060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2220      	movs	r2, #32
 8008520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08a      	sub	sp, #40	@ 0x28
 8008540:	af02      	add	r7, sp, #8
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	603b      	str	r3, [r7, #0]
 8008548:	4613      	mov	r3, r2
 800854a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b20      	cmp	r3, #32
 800855a:	d175      	bne.n	8008648 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_UART_Transmit+0x2c>
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e06e      	b.n	800864a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2221      	movs	r2, #33	@ 0x21
 8008576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800857a:	f7fc faed 	bl	8004b58 <HAL_GetTick>
 800857e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008594:	d108      	bne.n	80085a8 <HAL_UART_Transmit+0x6c>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	61bb      	str	r3, [r7, #24]
 80085a6:	e003      	b.n	80085b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085b0:	e02e      	b.n	8008610 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2200      	movs	r2, #0
 80085ba:	2180      	movs	r1, #128	@ 0x80
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 fb1f 	bl	8008c00 <UART_WaitOnFlagUntilTimeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e03a      	b.n	800864a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	3302      	adds	r3, #2
 80085ee:	61bb      	str	r3, [r7, #24]
 80085f0:	e007      	b.n	8008602 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	3301      	adds	r3, #1
 8008600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008606:	b29b      	uxth	r3, r3
 8008608:	3b01      	subs	r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1cb      	bne.n	80085b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2200      	movs	r2, #0
 8008622:	2140      	movs	r1, #64	@ 0x40
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 faeb 	bl	8008c00 <UART_WaitOnFlagUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d005      	beq.n	800863c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e006      	b.n	800864a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	e000      	b.n	800864a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008648:	2302      	movs	r3, #2
  }
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	4613      	mov	r3, r2
 800865e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b20      	cmp	r3, #32
 800866a:	d112      	bne.n	8008692 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <HAL_UART_Receive_IT+0x26>
 8008672:	88fb      	ldrh	r3, [r7, #6]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e00b      	b.n	8008694 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008682:	88fb      	ldrh	r3, [r7, #6]
 8008684:	461a      	mov	r2, r3
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fb12 	bl	8008cb2 <UART_Start_Receive_IT>
 800868e:	4603      	mov	r3, r0
 8008690:	e000      	b.n	8008694 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008692:	2302      	movs	r3, #2
  }
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b0ba      	sub	sp, #232	@ 0xe8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80086da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10f      	bne.n	8008702 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e6:	f003 0320 	and.w	r3, r3, #32
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <HAL_UART_IRQHandler+0x66>
 80086ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fbf2 	bl	8008ee4 <UART_Receive_IT>
      return;
 8008700:	e25b      	b.n	8008bba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 80de 	beq.w	80088c8 <HAL_UART_IRQHandler+0x22c>
 800870c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d106      	bne.n	8008726 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800871c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 80d1 	beq.w	80088c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00b      	beq.n	800874a <HAL_UART_IRQHandler+0xae>
 8008732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800873a:	2b00      	cmp	r3, #0
 800873c:	d005      	beq.n	800874a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008742:	f043 0201 	orr.w	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800874a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874e:	f003 0304 	and.w	r3, r3, #4
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <HAL_UART_IRQHandler+0xd2>
 8008756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008766:	f043 0202 	orr.w	r2, r3, #2
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800876e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00b      	beq.n	8008792 <HAL_UART_IRQHandler+0xf6>
 800877a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800878a:	f043 0204 	orr.w	r2, r3, #4
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008796:	f003 0308 	and.w	r3, r3, #8
 800879a:	2b00      	cmp	r3, #0
 800879c:	d011      	beq.n	80087c2 <HAL_UART_IRQHandler+0x126>
 800879e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d105      	bne.n	80087b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80087aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d005      	beq.n	80087c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ba:	f043 0208 	orr.w	r2, r3, #8
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 81f2 	beq.w	8008bb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d0:	f003 0320 	and.w	r3, r3, #32
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d008      	beq.n	80087ea <HAL_UART_IRQHandler+0x14e>
 80087d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087dc:	f003 0320 	and.w	r3, r3, #32
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fb7d 	bl	8008ee4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f4:	2b40      	cmp	r3, #64	@ 0x40
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <HAL_UART_IRQHandler+0x17a>
 800880e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d04f      	beq.n	80088b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa85 	bl	8008d26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008826:	2b40      	cmp	r3, #64	@ 0x40
 8008828:	d141      	bne.n	80088ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3314      	adds	r3, #20
 8008830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3314      	adds	r3, #20
 8008852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008856:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800885a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800886e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1d9      	bne.n	800882a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d013      	beq.n	80088a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008882:	4a7e      	ldr	r2, [pc, #504]	@ (8008a7c <HAL_UART_IRQHandler+0x3e0>)
 8008884:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800888a:	4618      	mov	r0, r3
 800888c:	f7fc fb15 	bl	8004eba <HAL_DMA_Abort_IT>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d016      	beq.n	80088c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800889a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80088a0:	4610      	mov	r0, r2
 80088a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a4:	e00e      	b.n	80088c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f994 	bl	8008bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ac:	e00a      	b.n	80088c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f990 	bl	8008bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b4:	e006      	b.n	80088c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f98c 	bl	8008bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80088c2:	e175      	b.n	8008bb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	bf00      	nop
    return;
 80088c6:	e173      	b.n	8008bb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	f040 814f 	bne.w	8008b70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088d6:	f003 0310 	and.w	r3, r3, #16
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 8148 	beq.w	8008b70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e4:	f003 0310 	and.w	r3, r3, #16
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 8141 	beq.w	8008b70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088ee:	2300      	movs	r3, #0
 80088f0:	60bb      	str	r3, [r7, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	60bb      	str	r3, [r7, #8]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	60bb      	str	r3, [r7, #8]
 8008902:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800890e:	2b40      	cmp	r3, #64	@ 0x40
 8008910:	f040 80b6 	bne.w	8008a80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008920:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 8145 	beq.w	8008bb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800892e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008932:	429a      	cmp	r2, r3
 8008934:	f080 813e 	bcs.w	8008bb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800893e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800894a:	f000 8088 	beq.w	8008a5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330c      	adds	r3, #12
 8008954:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008964:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800896c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	330c      	adds	r3, #12
 8008976:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800897a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800897e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008982:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008986:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008992:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1d9      	bne.n	800894e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3314      	adds	r3, #20
 80089a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089a4:	e853 3f00 	ldrex	r3, [r3]
 80089a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80089aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089ac:	f023 0301 	bic.w	r3, r3, #1
 80089b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3314      	adds	r3, #20
 80089ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e1      	bne.n	800899a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3314      	adds	r3, #20
 80089dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3314      	adds	r3, #20
 80089f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a02:	e841 2300 	strex	r3, r2, [r1]
 8008a06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1e3      	bne.n	80089d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	330c      	adds	r3, #12
 8008a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a2e:	f023 0310 	bic.w	r3, r3, #16
 8008a32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	330c      	adds	r3, #12
 8008a3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e3      	bne.n	8008a1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fc f9be 	bl	8004dda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2202      	movs	r2, #2
 8008a62:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8b7 	bl	8008be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a7a:	e09b      	b.n	8008bb4 <HAL_UART_IRQHandler+0x518>
 8008a7c:	08008ded 	.word	0x08008ded
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 808e 	beq.w	8008bb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 8089 	beq.w	8008bb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008abc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008aca:	647a      	str	r2, [r7, #68]	@ 0x44
 8008acc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ad0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e3      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3314      	adds	r3, #20
 8008ae4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	623b      	str	r3, [r7, #32]
   return(result);
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	f023 0301 	bic.w	r3, r3, #1
 8008af4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3314      	adds	r3, #20
 8008afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e3      	bne.n	8008ade <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	330c      	adds	r3, #12
 8008b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0310 	bic.w	r3, r3, #16
 8008b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	330c      	adds	r3, #12
 8008b44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b48:	61fa      	str	r2, [r7, #28]
 8008b4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	69b9      	ldr	r1, [r7, #24]
 8008b4e:	69fa      	ldr	r2, [r7, #28]
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	617b      	str	r3, [r7, #20]
   return(result);
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e3      	bne.n	8008b24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f83d 	bl	8008be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b6e:	e023      	b.n	8008bb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d009      	beq.n	8008b90 <HAL_UART_IRQHandler+0x4f4>
 8008b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f943 	bl	8008e14 <UART_Transmit_IT>
    return;
 8008b8e:	e014      	b.n	8008bba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00e      	beq.n	8008bba <HAL_UART_IRQHandler+0x51e>
 8008b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d008      	beq.n	8008bba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f983 	bl	8008eb4 <UART_EndTransmit_IT>
    return;
 8008bae:	e004      	b.n	8008bba <HAL_UART_IRQHandler+0x51e>
    return;
 8008bb0:	bf00      	nop
 8008bb2:	e002      	b.n	8008bba <HAL_UART_IRQHandler+0x51e>
      return;
 8008bb4:	bf00      	nop
 8008bb6:	e000      	b.n	8008bba <HAL_UART_IRQHandler+0x51e>
      return;
 8008bb8:	bf00      	nop
  }
}
 8008bba:	37e8      	adds	r7, #232	@ 0xe8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c10:	e03b      	b.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c18:	d037      	beq.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c1a:	f7fb ff9d 	bl	8004b58 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	6a3a      	ldr	r2, [r7, #32]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d302      	bcc.n	8008c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c2a:	6a3b      	ldr	r3, [r7, #32]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e03a      	b.n	8008caa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f003 0304 	and.w	r3, r3, #4
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d023      	beq.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b80      	cmp	r3, #128	@ 0x80
 8008c46:	d020      	beq.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b40      	cmp	r3, #64	@ 0x40
 8008c4c:	d01d      	beq.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0308 	and.w	r3, r3, #8
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	d116      	bne.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	617b      	str	r3, [r7, #20]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f000 f857 	bl	8008d26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e00f      	b.n	8008caa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4013      	ands	r3, r2
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	bf0c      	ite	eq
 8008c9a:	2301      	moveq	r3, #1
 8008c9c:	2300      	movne	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d0b4      	beq.n	8008c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	60f8      	str	r0, [r7, #12]
 8008cba:	60b9      	str	r1, [r7, #8]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	88fa      	ldrh	r2, [r7, #6]
 8008cca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	88fa      	ldrh	r2, [r7, #6]
 8008cd0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2222      	movs	r2, #34	@ 0x22
 8008cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cf6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695a      	ldr	r2, [r3, #20]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0201 	orr.w	r2, r2, #1
 8008d06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0220 	orr.w	r2, r2, #32
 8008d16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr

08008d26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d26:	b480      	push	{r7}
 8008d28:	b095      	sub	sp, #84	@ 0x54
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	330c      	adds	r3, #12
 8008d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	330c      	adds	r3, #12
 8008d4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e5      	bne.n	8008d2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3314      	adds	r3, #20
 8008d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	f023 0301 	bic.w	r3, r3, #1
 8008d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3314      	adds	r3, #20
 8008d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e5      	bne.n	8008d62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d119      	bne.n	8008dd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	330c      	adds	r3, #12
 8008da4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	f023 0310 	bic.w	r3, r3, #16
 8008db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dbe:	61ba      	str	r2, [r7, #24]
 8008dc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6979      	ldr	r1, [r7, #20]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	613b      	str	r3, [r7, #16]
   return(result);
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e5      	bne.n	8008d9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008de0:	bf00      	nop
 8008de2:	3754      	adds	r7, #84	@ 0x54
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f7ff fee4 	bl	8008bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e0c:	bf00      	nop
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b21      	cmp	r3, #33	@ 0x21
 8008e26:	d13e      	bne.n	8008ea6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e30:	d114      	bne.n	8008e5c <UART_Transmit_IT+0x48>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d110      	bne.n	8008e5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	1c9a      	adds	r2, r3, #2
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	621a      	str	r2, [r3, #32]
 8008e5a:	e008      	b.n	8008e6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a1b      	ldr	r3, [r3, #32]
 8008e60:	1c59      	adds	r1, r3, #1
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6211      	str	r1, [r2, #32]
 8008e66:	781a      	ldrb	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	3b01      	subs	r3, #1
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10f      	bne.n	8008ea2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ea0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e000      	b.n	8008ea8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ea6:	2302      	movs	r3, #2
  }
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff fe73 	bl	8008bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08c      	sub	sp, #48	@ 0x30
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	2b22      	cmp	r3, #34	@ 0x22
 8008ef6:	f040 80ae 	bne.w	8009056 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f02:	d117      	bne.n	8008f34 <UART_Receive_IT+0x50>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d113      	bne.n	8008f34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2c:	1c9a      	adds	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f32:	e026      	b.n	8008f82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f46:	d007      	beq.n	8008f58 <UART_Receive_IT+0x74>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <UART_Receive_IT+0x82>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d106      	bne.n	8008f66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f62:	701a      	strb	r2, [r3, #0]
 8008f64:	e008      	b.n	8008f78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d15d      	bne.n	8009052 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0220 	bic.w	r2, r2, #32
 8008fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	695a      	ldr	r2, [r3, #20]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f022 0201 	bic.w	r2, r2, #1
 8008fc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d135      	bne.n	8009048 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	330c      	adds	r3, #12
 8008fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f023 0310 	bic.w	r3, r3, #16
 8008ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	330c      	adds	r3, #12
 8009000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009002:	623a      	str	r2, [r7, #32]
 8009004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	69f9      	ldr	r1, [r7, #28]
 8009008:	6a3a      	ldr	r2, [r7, #32]
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e5      	bne.n	8008fe2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0310 	and.w	r3, r3, #16
 8009020:	2b10      	cmp	r3, #16
 8009022:	d10a      	bne.n	800903a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff fdd1 	bl	8008be8 <HAL_UARTEx_RxEventCallback>
 8009046:	e002      	b.n	800904e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7f7 ffb3 	bl	8000fb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	e002      	b.n	8009058 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e000      	b.n	8009058 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009056:	2302      	movs	r3, #2
  }
}
 8009058:	4618      	mov	r0, r3
 800905a:	3730      	adds	r7, #48	@ 0x30
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009064:	b0c0      	sub	sp, #256	@ 0x100
 8009066:	af00      	add	r7, sp, #0
 8009068:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800906c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907c:	68d9      	ldr	r1, [r3, #12]
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	ea40 0301 	orr.w	r3, r0, r1
 8009088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800908a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	431a      	orrs	r2, r3
 8009098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	431a      	orrs	r2, r3
 80090a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80090b8:	f021 010c 	bic.w	r1, r1, #12
 80090bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090c6:	430b      	orrs	r3, r1
 80090c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090da:	6999      	ldr	r1, [r3, #24]
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	ea40 0301 	orr.w	r3, r0, r1
 80090e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	4b8f      	ldr	r3, [pc, #572]	@ (800932c <UART_SetConfig+0x2cc>)
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d005      	beq.n	8009100 <UART_SetConfig+0xa0>
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4b8d      	ldr	r3, [pc, #564]	@ (8009330 <UART_SetConfig+0x2d0>)
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d104      	bne.n	800910a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009100:	f7fd f9a6 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 8009104:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009108:	e003      	b.n	8009112 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800910a:	f7fd f98d 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800910e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800911c:	f040 810c 	bne.w	8009338 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009124:	2200      	movs	r2, #0
 8009126:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800912a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800912e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009132:	4622      	mov	r2, r4
 8009134:	462b      	mov	r3, r5
 8009136:	1891      	adds	r1, r2, r2
 8009138:	65b9      	str	r1, [r7, #88]	@ 0x58
 800913a:	415b      	adcs	r3, r3
 800913c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800913e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009142:	4621      	mov	r1, r4
 8009144:	eb12 0801 	adds.w	r8, r2, r1
 8009148:	4629      	mov	r1, r5
 800914a:	eb43 0901 	adc.w	r9, r3, r1
 800914e:	f04f 0200 	mov.w	r2, #0
 8009152:	f04f 0300 	mov.w	r3, #0
 8009156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800915a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800915e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009162:	4690      	mov	r8, r2
 8009164:	4699      	mov	r9, r3
 8009166:	4623      	mov	r3, r4
 8009168:	eb18 0303 	adds.w	r3, r8, r3
 800916c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009170:	462b      	mov	r3, r5
 8009172:	eb49 0303 	adc.w	r3, r9, r3
 8009176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009186:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800918a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800918e:	460b      	mov	r3, r1
 8009190:	18db      	adds	r3, r3, r3
 8009192:	653b      	str	r3, [r7, #80]	@ 0x50
 8009194:	4613      	mov	r3, r2
 8009196:	eb42 0303 	adc.w	r3, r2, r3
 800919a:	657b      	str	r3, [r7, #84]	@ 0x54
 800919c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80091a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80091a4:	f7f7 fd58 	bl	8000c58 <__aeabi_uldivmod>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4b61      	ldr	r3, [pc, #388]	@ (8009334 <UART_SetConfig+0x2d4>)
 80091ae:	fba3 2302 	umull	r2, r3, r3, r2
 80091b2:	095b      	lsrs	r3, r3, #5
 80091b4:	011c      	lsls	r4, r3, #4
 80091b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80091c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091c8:	4642      	mov	r2, r8
 80091ca:	464b      	mov	r3, r9
 80091cc:	1891      	adds	r1, r2, r2
 80091ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091d0:	415b      	adcs	r3, r3
 80091d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091d8:	4641      	mov	r1, r8
 80091da:	eb12 0a01 	adds.w	sl, r2, r1
 80091de:	4649      	mov	r1, r9
 80091e0:	eb43 0b01 	adc.w	fp, r3, r1
 80091e4:	f04f 0200 	mov.w	r2, #0
 80091e8:	f04f 0300 	mov.w	r3, #0
 80091ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091f8:	4692      	mov	sl, r2
 80091fa:	469b      	mov	fp, r3
 80091fc:	4643      	mov	r3, r8
 80091fe:	eb1a 0303 	adds.w	r3, sl, r3
 8009202:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009206:	464b      	mov	r3, r9
 8009208:	eb4b 0303 	adc.w	r3, fp, r3
 800920c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800921c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009220:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009224:	460b      	mov	r3, r1
 8009226:	18db      	adds	r3, r3, r3
 8009228:	643b      	str	r3, [r7, #64]	@ 0x40
 800922a:	4613      	mov	r3, r2
 800922c:	eb42 0303 	adc.w	r3, r2, r3
 8009230:	647b      	str	r3, [r7, #68]	@ 0x44
 8009232:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009236:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800923a:	f7f7 fd0d 	bl	8000c58 <__aeabi_uldivmod>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4611      	mov	r1, r2
 8009244:	4b3b      	ldr	r3, [pc, #236]	@ (8009334 <UART_SetConfig+0x2d4>)
 8009246:	fba3 2301 	umull	r2, r3, r3, r1
 800924a:	095b      	lsrs	r3, r3, #5
 800924c:	2264      	movs	r2, #100	@ 0x64
 800924e:	fb02 f303 	mul.w	r3, r2, r3
 8009252:	1acb      	subs	r3, r1, r3
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800925a:	4b36      	ldr	r3, [pc, #216]	@ (8009334 <UART_SetConfig+0x2d4>)
 800925c:	fba3 2302 	umull	r2, r3, r3, r2
 8009260:	095b      	lsrs	r3, r3, #5
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009268:	441c      	add	r4, r3
 800926a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800926e:	2200      	movs	r2, #0
 8009270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009274:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009278:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800927c:	4642      	mov	r2, r8
 800927e:	464b      	mov	r3, r9
 8009280:	1891      	adds	r1, r2, r2
 8009282:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009284:	415b      	adcs	r3, r3
 8009286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800928c:	4641      	mov	r1, r8
 800928e:	1851      	adds	r1, r2, r1
 8009290:	6339      	str	r1, [r7, #48]	@ 0x30
 8009292:	4649      	mov	r1, r9
 8009294:	414b      	adcs	r3, r1
 8009296:	637b      	str	r3, [r7, #52]	@ 0x34
 8009298:	f04f 0200 	mov.w	r2, #0
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80092a4:	4659      	mov	r1, fp
 80092a6:	00cb      	lsls	r3, r1, #3
 80092a8:	4651      	mov	r1, sl
 80092aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ae:	4651      	mov	r1, sl
 80092b0:	00ca      	lsls	r2, r1, #3
 80092b2:	4610      	mov	r0, r2
 80092b4:	4619      	mov	r1, r3
 80092b6:	4603      	mov	r3, r0
 80092b8:	4642      	mov	r2, r8
 80092ba:	189b      	adds	r3, r3, r2
 80092bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092c0:	464b      	mov	r3, r9
 80092c2:	460a      	mov	r2, r1
 80092c4:	eb42 0303 	adc.w	r3, r2, r3
 80092c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092e0:	460b      	mov	r3, r1
 80092e2:	18db      	adds	r3, r3, r3
 80092e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092e6:	4613      	mov	r3, r2
 80092e8:	eb42 0303 	adc.w	r3, r2, r3
 80092ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092f6:	f7f7 fcaf 	bl	8000c58 <__aeabi_uldivmod>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009334 <UART_SetConfig+0x2d4>)
 8009300:	fba3 1302 	umull	r1, r3, r3, r2
 8009304:	095b      	lsrs	r3, r3, #5
 8009306:	2164      	movs	r1, #100	@ 0x64
 8009308:	fb01 f303 	mul.w	r3, r1, r3
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	3332      	adds	r3, #50	@ 0x32
 8009312:	4a08      	ldr	r2, [pc, #32]	@ (8009334 <UART_SetConfig+0x2d4>)
 8009314:	fba2 2303 	umull	r2, r3, r2, r3
 8009318:	095b      	lsrs	r3, r3, #5
 800931a:	f003 0207 	and.w	r2, r3, #7
 800931e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4422      	add	r2, r4
 8009326:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009328:	e106      	b.n	8009538 <UART_SetConfig+0x4d8>
 800932a:	bf00      	nop
 800932c:	40011000 	.word	0x40011000
 8009330:	40011400 	.word	0x40011400
 8009334:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800933c:	2200      	movs	r2, #0
 800933e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009342:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009346:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800934a:	4642      	mov	r2, r8
 800934c:	464b      	mov	r3, r9
 800934e:	1891      	adds	r1, r2, r2
 8009350:	6239      	str	r1, [r7, #32]
 8009352:	415b      	adcs	r3, r3
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
 8009356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800935a:	4641      	mov	r1, r8
 800935c:	1854      	adds	r4, r2, r1
 800935e:	4649      	mov	r1, r9
 8009360:	eb43 0501 	adc.w	r5, r3, r1
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	f04f 0300 	mov.w	r3, #0
 800936c:	00eb      	lsls	r3, r5, #3
 800936e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009372:	00e2      	lsls	r2, r4, #3
 8009374:	4614      	mov	r4, r2
 8009376:	461d      	mov	r5, r3
 8009378:	4643      	mov	r3, r8
 800937a:	18e3      	adds	r3, r4, r3
 800937c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009380:	464b      	mov	r3, r9
 8009382:	eb45 0303 	adc.w	r3, r5, r3
 8009386:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800938a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009396:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80093a6:	4629      	mov	r1, r5
 80093a8:	008b      	lsls	r3, r1, #2
 80093aa:	4621      	mov	r1, r4
 80093ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093b0:	4621      	mov	r1, r4
 80093b2:	008a      	lsls	r2, r1, #2
 80093b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093b8:	f7f7 fc4e 	bl	8000c58 <__aeabi_uldivmod>
 80093bc:	4602      	mov	r2, r0
 80093be:	460b      	mov	r3, r1
 80093c0:	4b60      	ldr	r3, [pc, #384]	@ (8009544 <UART_SetConfig+0x4e4>)
 80093c2:	fba3 2302 	umull	r2, r3, r3, r2
 80093c6:	095b      	lsrs	r3, r3, #5
 80093c8:	011c      	lsls	r4, r3, #4
 80093ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093dc:	4642      	mov	r2, r8
 80093de:	464b      	mov	r3, r9
 80093e0:	1891      	adds	r1, r2, r2
 80093e2:	61b9      	str	r1, [r7, #24]
 80093e4:	415b      	adcs	r3, r3
 80093e6:	61fb      	str	r3, [r7, #28]
 80093e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093ec:	4641      	mov	r1, r8
 80093ee:	1851      	adds	r1, r2, r1
 80093f0:	6139      	str	r1, [r7, #16]
 80093f2:	4649      	mov	r1, r9
 80093f4:	414b      	adcs	r3, r1
 80093f6:	617b      	str	r3, [r7, #20]
 80093f8:	f04f 0200 	mov.w	r2, #0
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009404:	4659      	mov	r1, fp
 8009406:	00cb      	lsls	r3, r1, #3
 8009408:	4651      	mov	r1, sl
 800940a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800940e:	4651      	mov	r1, sl
 8009410:	00ca      	lsls	r2, r1, #3
 8009412:	4610      	mov	r0, r2
 8009414:	4619      	mov	r1, r3
 8009416:	4603      	mov	r3, r0
 8009418:	4642      	mov	r2, r8
 800941a:	189b      	adds	r3, r3, r2
 800941c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009420:	464b      	mov	r3, r9
 8009422:	460a      	mov	r2, r1
 8009424:	eb42 0303 	adc.w	r3, r2, r3
 8009428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800942c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009436:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	f04f 0300 	mov.w	r3, #0
 8009440:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009444:	4649      	mov	r1, r9
 8009446:	008b      	lsls	r3, r1, #2
 8009448:	4641      	mov	r1, r8
 800944a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800944e:	4641      	mov	r1, r8
 8009450:	008a      	lsls	r2, r1, #2
 8009452:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009456:	f7f7 fbff 	bl	8000c58 <__aeabi_uldivmod>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	4611      	mov	r1, r2
 8009460:	4b38      	ldr	r3, [pc, #224]	@ (8009544 <UART_SetConfig+0x4e4>)
 8009462:	fba3 2301 	umull	r2, r3, r3, r1
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	2264      	movs	r2, #100	@ 0x64
 800946a:	fb02 f303 	mul.w	r3, r2, r3
 800946e:	1acb      	subs	r3, r1, r3
 8009470:	011b      	lsls	r3, r3, #4
 8009472:	3332      	adds	r3, #50	@ 0x32
 8009474:	4a33      	ldr	r2, [pc, #204]	@ (8009544 <UART_SetConfig+0x4e4>)
 8009476:	fba2 2303 	umull	r2, r3, r2, r3
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009480:	441c      	add	r4, r3
 8009482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009486:	2200      	movs	r2, #0
 8009488:	673b      	str	r3, [r7, #112]	@ 0x70
 800948a:	677a      	str	r2, [r7, #116]	@ 0x74
 800948c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009490:	4642      	mov	r2, r8
 8009492:	464b      	mov	r3, r9
 8009494:	1891      	adds	r1, r2, r2
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	415b      	adcs	r3, r3
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094a0:	4641      	mov	r1, r8
 80094a2:	1851      	adds	r1, r2, r1
 80094a4:	6039      	str	r1, [r7, #0]
 80094a6:	4649      	mov	r1, r9
 80094a8:	414b      	adcs	r3, r1
 80094aa:	607b      	str	r3, [r7, #4]
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094b8:	4659      	mov	r1, fp
 80094ba:	00cb      	lsls	r3, r1, #3
 80094bc:	4651      	mov	r1, sl
 80094be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094c2:	4651      	mov	r1, sl
 80094c4:	00ca      	lsls	r2, r1, #3
 80094c6:	4610      	mov	r0, r2
 80094c8:	4619      	mov	r1, r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	4642      	mov	r2, r8
 80094ce:	189b      	adds	r3, r3, r2
 80094d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094d2:	464b      	mov	r3, r9
 80094d4:	460a      	mov	r2, r1
 80094d6:	eb42 0303 	adc.w	r3, r2, r3
 80094da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80094e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094f4:	4649      	mov	r1, r9
 80094f6:	008b      	lsls	r3, r1, #2
 80094f8:	4641      	mov	r1, r8
 80094fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094fe:	4641      	mov	r1, r8
 8009500:	008a      	lsls	r2, r1, #2
 8009502:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009506:	f7f7 fba7 	bl	8000c58 <__aeabi_uldivmod>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4b0d      	ldr	r3, [pc, #52]	@ (8009544 <UART_SetConfig+0x4e4>)
 8009510:	fba3 1302 	umull	r1, r3, r3, r2
 8009514:	095b      	lsrs	r3, r3, #5
 8009516:	2164      	movs	r1, #100	@ 0x64
 8009518:	fb01 f303 	mul.w	r3, r1, r3
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	3332      	adds	r3, #50	@ 0x32
 8009522:	4a08      	ldr	r2, [pc, #32]	@ (8009544 <UART_SetConfig+0x4e4>)
 8009524:	fba2 2303 	umull	r2, r3, r2, r3
 8009528:	095b      	lsrs	r3, r3, #5
 800952a:	f003 020f 	and.w	r2, r3, #15
 800952e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4422      	add	r2, r4
 8009536:	609a      	str	r2, [r3, #8]
}
 8009538:	bf00      	nop
 800953a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800953e:	46bd      	mov	sp, r7
 8009540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009544:	51eb851f 	.word	0x51eb851f

08009548 <__cvt>:
 8009548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	ec57 6b10 	vmov	r6, r7, d0
 8009550:	2f00      	cmp	r7, #0
 8009552:	460c      	mov	r4, r1
 8009554:	4619      	mov	r1, r3
 8009556:	463b      	mov	r3, r7
 8009558:	bfbb      	ittet	lt
 800955a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800955e:	461f      	movlt	r7, r3
 8009560:	2300      	movge	r3, #0
 8009562:	232d      	movlt	r3, #45	@ 0x2d
 8009564:	700b      	strb	r3, [r1, #0]
 8009566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009568:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800956c:	4691      	mov	r9, r2
 800956e:	f023 0820 	bic.w	r8, r3, #32
 8009572:	bfbc      	itt	lt
 8009574:	4632      	movlt	r2, r6
 8009576:	4616      	movlt	r6, r2
 8009578:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800957c:	d005      	beq.n	800958a <__cvt+0x42>
 800957e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009582:	d100      	bne.n	8009586 <__cvt+0x3e>
 8009584:	3401      	adds	r4, #1
 8009586:	2102      	movs	r1, #2
 8009588:	e000      	b.n	800958c <__cvt+0x44>
 800958a:	2103      	movs	r1, #3
 800958c:	ab03      	add	r3, sp, #12
 800958e:	9301      	str	r3, [sp, #4]
 8009590:	ab02      	add	r3, sp, #8
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	ec47 6b10 	vmov	d0, r6, r7
 8009598:	4653      	mov	r3, sl
 800959a:	4622      	mov	r2, r4
 800959c:	f000 fe5c 	bl	800a258 <_dtoa_r>
 80095a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095a4:	4605      	mov	r5, r0
 80095a6:	d119      	bne.n	80095dc <__cvt+0x94>
 80095a8:	f019 0f01 	tst.w	r9, #1
 80095ac:	d00e      	beq.n	80095cc <__cvt+0x84>
 80095ae:	eb00 0904 	add.w	r9, r0, r4
 80095b2:	2200      	movs	r2, #0
 80095b4:	2300      	movs	r3, #0
 80095b6:	4630      	mov	r0, r6
 80095b8:	4639      	mov	r1, r7
 80095ba:	f7f7 fa8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80095be:	b108      	cbz	r0, 80095c4 <__cvt+0x7c>
 80095c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80095c4:	2230      	movs	r2, #48	@ 0x30
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	454b      	cmp	r3, r9
 80095ca:	d31e      	bcc.n	800960a <__cvt+0xc2>
 80095cc:	9b03      	ldr	r3, [sp, #12]
 80095ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095d0:	1b5b      	subs	r3, r3, r5
 80095d2:	4628      	mov	r0, r5
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	b004      	add	sp, #16
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095e0:	eb00 0904 	add.w	r9, r0, r4
 80095e4:	d1e5      	bne.n	80095b2 <__cvt+0x6a>
 80095e6:	7803      	ldrb	r3, [r0, #0]
 80095e8:	2b30      	cmp	r3, #48	@ 0x30
 80095ea:	d10a      	bne.n	8009602 <__cvt+0xba>
 80095ec:	2200      	movs	r2, #0
 80095ee:	2300      	movs	r3, #0
 80095f0:	4630      	mov	r0, r6
 80095f2:	4639      	mov	r1, r7
 80095f4:	f7f7 fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 80095f8:	b918      	cbnz	r0, 8009602 <__cvt+0xba>
 80095fa:	f1c4 0401 	rsb	r4, r4, #1
 80095fe:	f8ca 4000 	str.w	r4, [sl]
 8009602:	f8da 3000 	ldr.w	r3, [sl]
 8009606:	4499      	add	r9, r3
 8009608:	e7d3      	b.n	80095b2 <__cvt+0x6a>
 800960a:	1c59      	adds	r1, r3, #1
 800960c:	9103      	str	r1, [sp, #12]
 800960e:	701a      	strb	r2, [r3, #0]
 8009610:	e7d9      	b.n	80095c6 <__cvt+0x7e>

08009612 <__exponent>:
 8009612:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009614:	2900      	cmp	r1, #0
 8009616:	bfba      	itte	lt
 8009618:	4249      	neglt	r1, r1
 800961a:	232d      	movlt	r3, #45	@ 0x2d
 800961c:	232b      	movge	r3, #43	@ 0x2b
 800961e:	2909      	cmp	r1, #9
 8009620:	7002      	strb	r2, [r0, #0]
 8009622:	7043      	strb	r3, [r0, #1]
 8009624:	dd29      	ble.n	800967a <__exponent+0x68>
 8009626:	f10d 0307 	add.w	r3, sp, #7
 800962a:	461d      	mov	r5, r3
 800962c:	270a      	movs	r7, #10
 800962e:	461a      	mov	r2, r3
 8009630:	fbb1 f6f7 	udiv	r6, r1, r7
 8009634:	fb07 1416 	mls	r4, r7, r6, r1
 8009638:	3430      	adds	r4, #48	@ 0x30
 800963a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800963e:	460c      	mov	r4, r1
 8009640:	2c63      	cmp	r4, #99	@ 0x63
 8009642:	f103 33ff 	add.w	r3, r3, #4294967295
 8009646:	4631      	mov	r1, r6
 8009648:	dcf1      	bgt.n	800962e <__exponent+0x1c>
 800964a:	3130      	adds	r1, #48	@ 0x30
 800964c:	1e94      	subs	r4, r2, #2
 800964e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009652:	1c41      	adds	r1, r0, #1
 8009654:	4623      	mov	r3, r4
 8009656:	42ab      	cmp	r3, r5
 8009658:	d30a      	bcc.n	8009670 <__exponent+0x5e>
 800965a:	f10d 0309 	add.w	r3, sp, #9
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	42ac      	cmp	r4, r5
 8009662:	bf88      	it	hi
 8009664:	2300      	movhi	r3, #0
 8009666:	3302      	adds	r3, #2
 8009668:	4403      	add	r3, r0
 800966a:	1a18      	subs	r0, r3, r0
 800966c:	b003      	add	sp, #12
 800966e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009670:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009674:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009678:	e7ed      	b.n	8009656 <__exponent+0x44>
 800967a:	2330      	movs	r3, #48	@ 0x30
 800967c:	3130      	adds	r1, #48	@ 0x30
 800967e:	7083      	strb	r3, [r0, #2]
 8009680:	70c1      	strb	r1, [r0, #3]
 8009682:	1d03      	adds	r3, r0, #4
 8009684:	e7f1      	b.n	800966a <__exponent+0x58>
	...

08009688 <_printf_float>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	b08d      	sub	sp, #52	@ 0x34
 800968e:	460c      	mov	r4, r1
 8009690:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009694:	4616      	mov	r6, r2
 8009696:	461f      	mov	r7, r3
 8009698:	4605      	mov	r5, r0
 800969a:	f000 fcdb 	bl	800a054 <_localeconv_r>
 800969e:	6803      	ldr	r3, [r0, #0]
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f6 fdec 	bl	8000280 <strlen>
 80096a8:	2300      	movs	r3, #0
 80096aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80096ac:	f8d8 3000 	ldr.w	r3, [r8]
 80096b0:	9005      	str	r0, [sp, #20]
 80096b2:	3307      	adds	r3, #7
 80096b4:	f023 0307 	bic.w	r3, r3, #7
 80096b8:	f103 0208 	add.w	r2, r3, #8
 80096bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096c0:	f8d4 b000 	ldr.w	fp, [r4]
 80096c4:	f8c8 2000 	str.w	r2, [r8]
 80096c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80096d0:	9307      	str	r3, [sp, #28]
 80096d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80096d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80096da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096de:	4b9c      	ldr	r3, [pc, #624]	@ (8009950 <_printf_float+0x2c8>)
 80096e0:	f04f 32ff 	mov.w	r2, #4294967295
 80096e4:	f7f7 fa2a 	bl	8000b3c <__aeabi_dcmpun>
 80096e8:	bb70      	cbnz	r0, 8009748 <_printf_float+0xc0>
 80096ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096ee:	4b98      	ldr	r3, [pc, #608]	@ (8009950 <_printf_float+0x2c8>)
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295
 80096f4:	f7f7 fa04 	bl	8000b00 <__aeabi_dcmple>
 80096f8:	bb30      	cbnz	r0, 8009748 <_printf_float+0xc0>
 80096fa:	2200      	movs	r2, #0
 80096fc:	2300      	movs	r3, #0
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f7 f9f3 	bl	8000aec <__aeabi_dcmplt>
 8009706:	b110      	cbz	r0, 800970e <_printf_float+0x86>
 8009708:	232d      	movs	r3, #45	@ 0x2d
 800970a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800970e:	4a91      	ldr	r2, [pc, #580]	@ (8009954 <_printf_float+0x2cc>)
 8009710:	4b91      	ldr	r3, [pc, #580]	@ (8009958 <_printf_float+0x2d0>)
 8009712:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009716:	bf94      	ite	ls
 8009718:	4690      	movls	r8, r2
 800971a:	4698      	movhi	r8, r3
 800971c:	2303      	movs	r3, #3
 800971e:	6123      	str	r3, [r4, #16]
 8009720:	f02b 0304 	bic.w	r3, fp, #4
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	f04f 0900 	mov.w	r9, #0
 800972a:	9700      	str	r7, [sp, #0]
 800972c:	4633      	mov	r3, r6
 800972e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009730:	4621      	mov	r1, r4
 8009732:	4628      	mov	r0, r5
 8009734:	f000 f9d2 	bl	8009adc <_printf_common>
 8009738:	3001      	adds	r0, #1
 800973a:	f040 808d 	bne.w	8009858 <_printf_float+0x1d0>
 800973e:	f04f 30ff 	mov.w	r0, #4294967295
 8009742:	b00d      	add	sp, #52	@ 0x34
 8009744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009748:	4642      	mov	r2, r8
 800974a:	464b      	mov	r3, r9
 800974c:	4640      	mov	r0, r8
 800974e:	4649      	mov	r1, r9
 8009750:	f7f7 f9f4 	bl	8000b3c <__aeabi_dcmpun>
 8009754:	b140      	cbz	r0, 8009768 <_printf_float+0xe0>
 8009756:	464b      	mov	r3, r9
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfbc      	itt	lt
 800975c:	232d      	movlt	r3, #45	@ 0x2d
 800975e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009762:	4a7e      	ldr	r2, [pc, #504]	@ (800995c <_printf_float+0x2d4>)
 8009764:	4b7e      	ldr	r3, [pc, #504]	@ (8009960 <_printf_float+0x2d8>)
 8009766:	e7d4      	b.n	8009712 <_printf_float+0x8a>
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800976e:	9206      	str	r2, [sp, #24]
 8009770:	1c5a      	adds	r2, r3, #1
 8009772:	d13b      	bne.n	80097ec <_printf_float+0x164>
 8009774:	2306      	movs	r3, #6
 8009776:	6063      	str	r3, [r4, #4]
 8009778:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800977c:	2300      	movs	r3, #0
 800977e:	6022      	str	r2, [r4, #0]
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	ab0a      	add	r3, sp, #40	@ 0x28
 8009784:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009788:	ab09      	add	r3, sp, #36	@ 0x24
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	6861      	ldr	r1, [r4, #4]
 800978e:	ec49 8b10 	vmov	d0, r8, r9
 8009792:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009796:	4628      	mov	r0, r5
 8009798:	f7ff fed6 	bl	8009548 <__cvt>
 800979c:	9b06      	ldr	r3, [sp, #24]
 800979e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097a0:	2b47      	cmp	r3, #71	@ 0x47
 80097a2:	4680      	mov	r8, r0
 80097a4:	d129      	bne.n	80097fa <_printf_float+0x172>
 80097a6:	1cc8      	adds	r0, r1, #3
 80097a8:	db02      	blt.n	80097b0 <_printf_float+0x128>
 80097aa:	6863      	ldr	r3, [r4, #4]
 80097ac:	4299      	cmp	r1, r3
 80097ae:	dd41      	ble.n	8009834 <_printf_float+0x1ac>
 80097b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80097b4:	fa5f fa8a 	uxtb.w	sl, sl
 80097b8:	3901      	subs	r1, #1
 80097ba:	4652      	mov	r2, sl
 80097bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80097c2:	f7ff ff26 	bl	8009612 <__exponent>
 80097c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097c8:	1813      	adds	r3, r2, r0
 80097ca:	2a01      	cmp	r2, #1
 80097cc:	4681      	mov	r9, r0
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	dc02      	bgt.n	80097d8 <_printf_float+0x150>
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	07d2      	lsls	r2, r2, #31
 80097d6:	d501      	bpl.n	80097dc <_printf_float+0x154>
 80097d8:	3301      	adds	r3, #1
 80097da:	6123      	str	r3, [r4, #16]
 80097dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0a2      	beq.n	800972a <_printf_float+0xa2>
 80097e4:	232d      	movs	r3, #45	@ 0x2d
 80097e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097ea:	e79e      	b.n	800972a <_printf_float+0xa2>
 80097ec:	9a06      	ldr	r2, [sp, #24]
 80097ee:	2a47      	cmp	r2, #71	@ 0x47
 80097f0:	d1c2      	bne.n	8009778 <_printf_float+0xf0>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1c0      	bne.n	8009778 <_printf_float+0xf0>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e7bd      	b.n	8009776 <_printf_float+0xee>
 80097fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097fe:	d9db      	bls.n	80097b8 <_printf_float+0x130>
 8009800:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009804:	d118      	bne.n	8009838 <_printf_float+0x1b0>
 8009806:	2900      	cmp	r1, #0
 8009808:	6863      	ldr	r3, [r4, #4]
 800980a:	dd0b      	ble.n	8009824 <_printf_float+0x19c>
 800980c:	6121      	str	r1, [r4, #16]
 800980e:	b913      	cbnz	r3, 8009816 <_printf_float+0x18e>
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	07d0      	lsls	r0, r2, #31
 8009814:	d502      	bpl.n	800981c <_printf_float+0x194>
 8009816:	3301      	adds	r3, #1
 8009818:	440b      	add	r3, r1
 800981a:	6123      	str	r3, [r4, #16]
 800981c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800981e:	f04f 0900 	mov.w	r9, #0
 8009822:	e7db      	b.n	80097dc <_printf_float+0x154>
 8009824:	b913      	cbnz	r3, 800982c <_printf_float+0x1a4>
 8009826:	6822      	ldr	r2, [r4, #0]
 8009828:	07d2      	lsls	r2, r2, #31
 800982a:	d501      	bpl.n	8009830 <_printf_float+0x1a8>
 800982c:	3302      	adds	r3, #2
 800982e:	e7f4      	b.n	800981a <_printf_float+0x192>
 8009830:	2301      	movs	r3, #1
 8009832:	e7f2      	b.n	800981a <_printf_float+0x192>
 8009834:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800983a:	4299      	cmp	r1, r3
 800983c:	db05      	blt.n	800984a <_printf_float+0x1c2>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	6121      	str	r1, [r4, #16]
 8009842:	07d8      	lsls	r0, r3, #31
 8009844:	d5ea      	bpl.n	800981c <_printf_float+0x194>
 8009846:	1c4b      	adds	r3, r1, #1
 8009848:	e7e7      	b.n	800981a <_printf_float+0x192>
 800984a:	2900      	cmp	r1, #0
 800984c:	bfd4      	ite	le
 800984e:	f1c1 0202 	rsble	r2, r1, #2
 8009852:	2201      	movgt	r2, #1
 8009854:	4413      	add	r3, r2
 8009856:	e7e0      	b.n	800981a <_printf_float+0x192>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	055a      	lsls	r2, r3, #21
 800985c:	d407      	bmi.n	800986e <_printf_float+0x1e6>
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	4642      	mov	r2, r8
 8009862:	4631      	mov	r1, r6
 8009864:	4628      	mov	r0, r5
 8009866:	47b8      	blx	r7
 8009868:	3001      	adds	r0, #1
 800986a:	d12b      	bne.n	80098c4 <_printf_float+0x23c>
 800986c:	e767      	b.n	800973e <_printf_float+0xb6>
 800986e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009872:	f240 80dd 	bls.w	8009a30 <_printf_float+0x3a8>
 8009876:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800987a:	2200      	movs	r2, #0
 800987c:	2300      	movs	r3, #0
 800987e:	f7f7 f92b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009882:	2800      	cmp	r0, #0
 8009884:	d033      	beq.n	80098ee <_printf_float+0x266>
 8009886:	4a37      	ldr	r2, [pc, #220]	@ (8009964 <_printf_float+0x2dc>)
 8009888:	2301      	movs	r3, #1
 800988a:	4631      	mov	r1, r6
 800988c:	4628      	mov	r0, r5
 800988e:	47b8      	blx	r7
 8009890:	3001      	adds	r0, #1
 8009892:	f43f af54 	beq.w	800973e <_printf_float+0xb6>
 8009896:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800989a:	4543      	cmp	r3, r8
 800989c:	db02      	blt.n	80098a4 <_printf_float+0x21c>
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	07d8      	lsls	r0, r3, #31
 80098a2:	d50f      	bpl.n	80098c4 <_printf_float+0x23c>
 80098a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098a8:	4631      	mov	r1, r6
 80098aa:	4628      	mov	r0, r5
 80098ac:	47b8      	blx	r7
 80098ae:	3001      	adds	r0, #1
 80098b0:	f43f af45 	beq.w	800973e <_printf_float+0xb6>
 80098b4:	f04f 0900 	mov.w	r9, #0
 80098b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80098bc:	f104 0a1a 	add.w	sl, r4, #26
 80098c0:	45c8      	cmp	r8, r9
 80098c2:	dc09      	bgt.n	80098d8 <_printf_float+0x250>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	079b      	lsls	r3, r3, #30
 80098c8:	f100 8103 	bmi.w	8009ad2 <_printf_float+0x44a>
 80098cc:	68e0      	ldr	r0, [r4, #12]
 80098ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098d0:	4298      	cmp	r0, r3
 80098d2:	bfb8      	it	lt
 80098d4:	4618      	movlt	r0, r3
 80098d6:	e734      	b.n	8009742 <_printf_float+0xba>
 80098d8:	2301      	movs	r3, #1
 80098da:	4652      	mov	r2, sl
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	f43f af2b 	beq.w	800973e <_printf_float+0xb6>
 80098e8:	f109 0901 	add.w	r9, r9, #1
 80098ec:	e7e8      	b.n	80098c0 <_printf_float+0x238>
 80098ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	dc39      	bgt.n	8009968 <_printf_float+0x2e0>
 80098f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009964 <_printf_float+0x2dc>)
 80098f6:	2301      	movs	r3, #1
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	f43f af1d 	beq.w	800973e <_printf_float+0xb6>
 8009904:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009908:	ea59 0303 	orrs.w	r3, r9, r3
 800990c:	d102      	bne.n	8009914 <_printf_float+0x28c>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	07d9      	lsls	r1, r3, #31
 8009912:	d5d7      	bpl.n	80098c4 <_printf_float+0x23c>
 8009914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009918:	4631      	mov	r1, r6
 800991a:	4628      	mov	r0, r5
 800991c:	47b8      	blx	r7
 800991e:	3001      	adds	r0, #1
 8009920:	f43f af0d 	beq.w	800973e <_printf_float+0xb6>
 8009924:	f04f 0a00 	mov.w	sl, #0
 8009928:	f104 0b1a 	add.w	fp, r4, #26
 800992c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800992e:	425b      	negs	r3, r3
 8009930:	4553      	cmp	r3, sl
 8009932:	dc01      	bgt.n	8009938 <_printf_float+0x2b0>
 8009934:	464b      	mov	r3, r9
 8009936:	e793      	b.n	8009860 <_printf_float+0x1d8>
 8009938:	2301      	movs	r3, #1
 800993a:	465a      	mov	r2, fp
 800993c:	4631      	mov	r1, r6
 800993e:	4628      	mov	r0, r5
 8009940:	47b8      	blx	r7
 8009942:	3001      	adds	r0, #1
 8009944:	f43f aefb 	beq.w	800973e <_printf_float+0xb6>
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	e7ee      	b.n	800992c <_printf_float+0x2a4>
 800994e:	bf00      	nop
 8009950:	7fefffff 	.word	0x7fefffff
 8009954:	0800db94 	.word	0x0800db94
 8009958:	0800db98 	.word	0x0800db98
 800995c:	0800db9c 	.word	0x0800db9c
 8009960:	0800dba0 	.word	0x0800dba0
 8009964:	0800dba4 	.word	0x0800dba4
 8009968:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800996a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800996e:	4553      	cmp	r3, sl
 8009970:	bfa8      	it	ge
 8009972:	4653      	movge	r3, sl
 8009974:	2b00      	cmp	r3, #0
 8009976:	4699      	mov	r9, r3
 8009978:	dc36      	bgt.n	80099e8 <_printf_float+0x360>
 800997a:	f04f 0b00 	mov.w	fp, #0
 800997e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009982:	f104 021a 	add.w	r2, r4, #26
 8009986:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009988:	9306      	str	r3, [sp, #24]
 800998a:	eba3 0309 	sub.w	r3, r3, r9
 800998e:	455b      	cmp	r3, fp
 8009990:	dc31      	bgt.n	80099f6 <_printf_float+0x36e>
 8009992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009994:	459a      	cmp	sl, r3
 8009996:	dc3a      	bgt.n	8009a0e <_printf_float+0x386>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	07da      	lsls	r2, r3, #31
 800999c:	d437      	bmi.n	8009a0e <_printf_float+0x386>
 800999e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a0:	ebaa 0903 	sub.w	r9, sl, r3
 80099a4:	9b06      	ldr	r3, [sp, #24]
 80099a6:	ebaa 0303 	sub.w	r3, sl, r3
 80099aa:	4599      	cmp	r9, r3
 80099ac:	bfa8      	it	ge
 80099ae:	4699      	movge	r9, r3
 80099b0:	f1b9 0f00 	cmp.w	r9, #0
 80099b4:	dc33      	bgt.n	8009a1e <_printf_float+0x396>
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099be:	f104 0b1a 	add.w	fp, r4, #26
 80099c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c4:	ebaa 0303 	sub.w	r3, sl, r3
 80099c8:	eba3 0309 	sub.w	r3, r3, r9
 80099cc:	4543      	cmp	r3, r8
 80099ce:	f77f af79 	ble.w	80098c4 <_printf_float+0x23c>
 80099d2:	2301      	movs	r3, #1
 80099d4:	465a      	mov	r2, fp
 80099d6:	4631      	mov	r1, r6
 80099d8:	4628      	mov	r0, r5
 80099da:	47b8      	blx	r7
 80099dc:	3001      	adds	r0, #1
 80099de:	f43f aeae 	beq.w	800973e <_printf_float+0xb6>
 80099e2:	f108 0801 	add.w	r8, r8, #1
 80099e6:	e7ec      	b.n	80099c2 <_printf_float+0x33a>
 80099e8:	4642      	mov	r2, r8
 80099ea:	4631      	mov	r1, r6
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b8      	blx	r7
 80099f0:	3001      	adds	r0, #1
 80099f2:	d1c2      	bne.n	800997a <_printf_float+0x2f2>
 80099f4:	e6a3      	b.n	800973e <_printf_float+0xb6>
 80099f6:	2301      	movs	r3, #1
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	9206      	str	r2, [sp, #24]
 80099fe:	47b8      	blx	r7
 8009a00:	3001      	adds	r0, #1
 8009a02:	f43f ae9c 	beq.w	800973e <_printf_float+0xb6>
 8009a06:	9a06      	ldr	r2, [sp, #24]
 8009a08:	f10b 0b01 	add.w	fp, fp, #1
 8009a0c:	e7bb      	b.n	8009986 <_printf_float+0x2fe>
 8009a0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	d1c0      	bne.n	800999e <_printf_float+0x316>
 8009a1c:	e68f      	b.n	800973e <_printf_float+0xb6>
 8009a1e:	9a06      	ldr	r2, [sp, #24]
 8009a20:	464b      	mov	r3, r9
 8009a22:	4442      	add	r2, r8
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d1c3      	bne.n	80099b6 <_printf_float+0x32e>
 8009a2e:	e686      	b.n	800973e <_printf_float+0xb6>
 8009a30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a34:	f1ba 0f01 	cmp.w	sl, #1
 8009a38:	dc01      	bgt.n	8009a3e <_printf_float+0x3b6>
 8009a3a:	07db      	lsls	r3, r3, #31
 8009a3c:	d536      	bpl.n	8009aac <_printf_float+0x424>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4642      	mov	r2, r8
 8009a42:	4631      	mov	r1, r6
 8009a44:	4628      	mov	r0, r5
 8009a46:	47b8      	blx	r7
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f43f ae78 	beq.w	800973e <_printf_float+0xb6>
 8009a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f43f ae70 	beq.w	800973e <_printf_float+0xb6>
 8009a5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a62:	2200      	movs	r2, #0
 8009a64:	2300      	movs	r3, #0
 8009a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a6a:	f7f7 f835 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a6e:	b9c0      	cbnz	r0, 8009aa2 <_printf_float+0x41a>
 8009a70:	4653      	mov	r3, sl
 8009a72:	f108 0201 	add.w	r2, r8, #1
 8009a76:	4631      	mov	r1, r6
 8009a78:	4628      	mov	r0, r5
 8009a7a:	47b8      	blx	r7
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d10c      	bne.n	8009a9a <_printf_float+0x412>
 8009a80:	e65d      	b.n	800973e <_printf_float+0xb6>
 8009a82:	2301      	movs	r3, #1
 8009a84:	465a      	mov	r2, fp
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	f43f ae56 	beq.w	800973e <_printf_float+0xb6>
 8009a92:	f108 0801 	add.w	r8, r8, #1
 8009a96:	45d0      	cmp	r8, sl
 8009a98:	dbf3      	blt.n	8009a82 <_printf_float+0x3fa>
 8009a9a:	464b      	mov	r3, r9
 8009a9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009aa0:	e6df      	b.n	8009862 <_printf_float+0x1da>
 8009aa2:	f04f 0800 	mov.w	r8, #0
 8009aa6:	f104 0b1a 	add.w	fp, r4, #26
 8009aaa:	e7f4      	b.n	8009a96 <_printf_float+0x40e>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4642      	mov	r2, r8
 8009ab0:	e7e1      	b.n	8009a76 <_printf_float+0x3ee>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	464a      	mov	r2, r9
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	f43f ae3e 	beq.w	800973e <_printf_float+0xb6>
 8009ac2:	f108 0801 	add.w	r8, r8, #1
 8009ac6:	68e3      	ldr	r3, [r4, #12]
 8009ac8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009aca:	1a5b      	subs	r3, r3, r1
 8009acc:	4543      	cmp	r3, r8
 8009ace:	dcf0      	bgt.n	8009ab2 <_printf_float+0x42a>
 8009ad0:	e6fc      	b.n	80098cc <_printf_float+0x244>
 8009ad2:	f04f 0800 	mov.w	r8, #0
 8009ad6:	f104 0919 	add.w	r9, r4, #25
 8009ada:	e7f4      	b.n	8009ac6 <_printf_float+0x43e>

08009adc <_printf_common>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	4698      	mov	r8, r3
 8009ae4:	688a      	ldr	r2, [r1, #8]
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bfb8      	it	lt
 8009af0:	4613      	movlt	r3, r2
 8009af2:	6033      	str	r3, [r6, #0]
 8009af4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009af8:	4607      	mov	r7, r0
 8009afa:	460c      	mov	r4, r1
 8009afc:	b10a      	cbz	r2, 8009b02 <_printf_common+0x26>
 8009afe:	3301      	adds	r3, #1
 8009b00:	6033      	str	r3, [r6, #0]
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	0699      	lsls	r1, r3, #26
 8009b06:	bf42      	ittt	mi
 8009b08:	6833      	ldrmi	r3, [r6, #0]
 8009b0a:	3302      	addmi	r3, #2
 8009b0c:	6033      	strmi	r3, [r6, #0]
 8009b0e:	6825      	ldr	r5, [r4, #0]
 8009b10:	f015 0506 	ands.w	r5, r5, #6
 8009b14:	d106      	bne.n	8009b24 <_printf_common+0x48>
 8009b16:	f104 0a19 	add.w	sl, r4, #25
 8009b1a:	68e3      	ldr	r3, [r4, #12]
 8009b1c:	6832      	ldr	r2, [r6, #0]
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	42ab      	cmp	r3, r5
 8009b22:	dc26      	bgt.n	8009b72 <_printf_common+0x96>
 8009b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b28:	6822      	ldr	r2, [r4, #0]
 8009b2a:	3b00      	subs	r3, #0
 8009b2c:	bf18      	it	ne
 8009b2e:	2301      	movne	r3, #1
 8009b30:	0692      	lsls	r2, r2, #26
 8009b32:	d42b      	bmi.n	8009b8c <_printf_common+0xb0>
 8009b34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b38:	4641      	mov	r1, r8
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	47c8      	blx	r9
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d01e      	beq.n	8009b80 <_printf_common+0xa4>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	f003 0306 	and.w	r3, r3, #6
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	bf02      	ittt	eq
 8009b4e:	68e5      	ldreq	r5, [r4, #12]
 8009b50:	6833      	ldreq	r3, [r6, #0]
 8009b52:	1aed      	subeq	r5, r5, r3
 8009b54:	68a3      	ldr	r3, [r4, #8]
 8009b56:	bf0c      	ite	eq
 8009b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b5c:	2500      	movne	r5, #0
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	bfc4      	itt	gt
 8009b62:	1a9b      	subgt	r3, r3, r2
 8009b64:	18ed      	addgt	r5, r5, r3
 8009b66:	2600      	movs	r6, #0
 8009b68:	341a      	adds	r4, #26
 8009b6a:	42b5      	cmp	r5, r6
 8009b6c:	d11a      	bne.n	8009ba4 <_printf_common+0xc8>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e008      	b.n	8009b84 <_printf_common+0xa8>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4652      	mov	r2, sl
 8009b76:	4641      	mov	r1, r8
 8009b78:	4638      	mov	r0, r7
 8009b7a:	47c8      	blx	r9
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d103      	bne.n	8009b88 <_printf_common+0xac>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b88:	3501      	adds	r5, #1
 8009b8a:	e7c6      	b.n	8009b1a <_printf_common+0x3e>
 8009b8c:	18e1      	adds	r1, r4, r3
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	2030      	movs	r0, #48	@ 0x30
 8009b92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b96:	4422      	add	r2, r4
 8009b98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ba0:	3302      	adds	r3, #2
 8009ba2:	e7c7      	b.n	8009b34 <_printf_common+0x58>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4641      	mov	r1, r8
 8009baa:	4638      	mov	r0, r7
 8009bac:	47c8      	blx	r9
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d0e6      	beq.n	8009b80 <_printf_common+0xa4>
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7d9      	b.n	8009b6a <_printf_common+0x8e>
	...

08009bb8 <_printf_i>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	7e0f      	ldrb	r7, [r1, #24]
 8009bbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bc0:	2f78      	cmp	r7, #120	@ 0x78
 8009bc2:	4691      	mov	r9, r2
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	469a      	mov	sl, r3
 8009bca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bce:	d807      	bhi.n	8009be0 <_printf_i+0x28>
 8009bd0:	2f62      	cmp	r7, #98	@ 0x62
 8009bd2:	d80a      	bhi.n	8009bea <_printf_i+0x32>
 8009bd4:	2f00      	cmp	r7, #0
 8009bd6:	f000 80d2 	beq.w	8009d7e <_printf_i+0x1c6>
 8009bda:	2f58      	cmp	r7, #88	@ 0x58
 8009bdc:	f000 80b9 	beq.w	8009d52 <_printf_i+0x19a>
 8009be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009be4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009be8:	e03a      	b.n	8009c60 <_printf_i+0xa8>
 8009bea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bee:	2b15      	cmp	r3, #21
 8009bf0:	d8f6      	bhi.n	8009be0 <_printf_i+0x28>
 8009bf2:	a101      	add	r1, pc, #4	@ (adr r1, 8009bf8 <_printf_i+0x40>)
 8009bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bf8:	08009c51 	.word	0x08009c51
 8009bfc:	08009c65 	.word	0x08009c65
 8009c00:	08009be1 	.word	0x08009be1
 8009c04:	08009be1 	.word	0x08009be1
 8009c08:	08009be1 	.word	0x08009be1
 8009c0c:	08009be1 	.word	0x08009be1
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009be1 	.word	0x08009be1
 8009c18:	08009be1 	.word	0x08009be1
 8009c1c:	08009be1 	.word	0x08009be1
 8009c20:	08009be1 	.word	0x08009be1
 8009c24:	08009d65 	.word	0x08009d65
 8009c28:	08009c8f 	.word	0x08009c8f
 8009c2c:	08009d1f 	.word	0x08009d1f
 8009c30:	08009be1 	.word	0x08009be1
 8009c34:	08009be1 	.word	0x08009be1
 8009c38:	08009d87 	.word	0x08009d87
 8009c3c:	08009be1 	.word	0x08009be1
 8009c40:	08009c8f 	.word	0x08009c8f
 8009c44:	08009be1 	.word	0x08009be1
 8009c48:	08009be1 	.word	0x08009be1
 8009c4c:	08009d27 	.word	0x08009d27
 8009c50:	6833      	ldr	r3, [r6, #0]
 8009c52:	1d1a      	adds	r2, r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6032      	str	r2, [r6, #0]
 8009c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c60:	2301      	movs	r3, #1
 8009c62:	e09d      	b.n	8009da0 <_printf_i+0x1e8>
 8009c64:	6833      	ldr	r3, [r6, #0]
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	1d19      	adds	r1, r3, #4
 8009c6a:	6031      	str	r1, [r6, #0]
 8009c6c:	0606      	lsls	r6, r0, #24
 8009c6e:	d501      	bpl.n	8009c74 <_printf_i+0xbc>
 8009c70:	681d      	ldr	r5, [r3, #0]
 8009c72:	e003      	b.n	8009c7c <_printf_i+0xc4>
 8009c74:	0645      	lsls	r5, r0, #25
 8009c76:	d5fb      	bpl.n	8009c70 <_printf_i+0xb8>
 8009c78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	da03      	bge.n	8009c88 <_printf_i+0xd0>
 8009c80:	232d      	movs	r3, #45	@ 0x2d
 8009c82:	426d      	negs	r5, r5
 8009c84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c88:	4859      	ldr	r0, [pc, #356]	@ (8009df0 <_printf_i+0x238>)
 8009c8a:	230a      	movs	r3, #10
 8009c8c:	e011      	b.n	8009cb2 <_printf_i+0xfa>
 8009c8e:	6821      	ldr	r1, [r4, #0]
 8009c90:	6833      	ldr	r3, [r6, #0]
 8009c92:	0608      	lsls	r0, r1, #24
 8009c94:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c98:	d402      	bmi.n	8009ca0 <_printf_i+0xe8>
 8009c9a:	0649      	lsls	r1, r1, #25
 8009c9c:	bf48      	it	mi
 8009c9e:	b2ad      	uxthmi	r5, r5
 8009ca0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ca2:	4853      	ldr	r0, [pc, #332]	@ (8009df0 <_printf_i+0x238>)
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	bf14      	ite	ne
 8009ca8:	230a      	movne	r3, #10
 8009caa:	2308      	moveq	r3, #8
 8009cac:	2100      	movs	r1, #0
 8009cae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cb2:	6866      	ldr	r6, [r4, #4]
 8009cb4:	60a6      	str	r6, [r4, #8]
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	bfa2      	ittt	ge
 8009cba:	6821      	ldrge	r1, [r4, #0]
 8009cbc:	f021 0104 	bicge.w	r1, r1, #4
 8009cc0:	6021      	strge	r1, [r4, #0]
 8009cc2:	b90d      	cbnz	r5, 8009cc8 <_printf_i+0x110>
 8009cc4:	2e00      	cmp	r6, #0
 8009cc6:	d04b      	beq.n	8009d60 <_printf_i+0x1a8>
 8009cc8:	4616      	mov	r6, r2
 8009cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cce:	fb03 5711 	mls	r7, r3, r1, r5
 8009cd2:	5dc7      	ldrb	r7, [r0, r7]
 8009cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cd8:	462f      	mov	r7, r5
 8009cda:	42bb      	cmp	r3, r7
 8009cdc:	460d      	mov	r5, r1
 8009cde:	d9f4      	bls.n	8009cca <_printf_i+0x112>
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d10b      	bne.n	8009cfc <_printf_i+0x144>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	07df      	lsls	r7, r3, #31
 8009ce8:	d508      	bpl.n	8009cfc <_printf_i+0x144>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	6861      	ldr	r1, [r4, #4]
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	bfde      	ittt	le
 8009cf2:	2330      	movle	r3, #48	@ 0x30
 8009cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cfc:	1b92      	subs	r2, r2, r6
 8009cfe:	6122      	str	r2, [r4, #16]
 8009d00:	f8cd a000 	str.w	sl, [sp]
 8009d04:	464b      	mov	r3, r9
 8009d06:	aa03      	add	r2, sp, #12
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f7ff fee6 	bl	8009adc <_printf_common>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d14a      	bne.n	8009daa <_printf_i+0x1f2>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	b004      	add	sp, #16
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f043 0320 	orr.w	r3, r3, #32
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	4833      	ldr	r0, [pc, #204]	@ (8009df4 <_printf_i+0x23c>)
 8009d28:	2778      	movs	r7, #120	@ 0x78
 8009d2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	6831      	ldr	r1, [r6, #0]
 8009d32:	061f      	lsls	r7, r3, #24
 8009d34:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d38:	d402      	bmi.n	8009d40 <_printf_i+0x188>
 8009d3a:	065f      	lsls	r7, r3, #25
 8009d3c:	bf48      	it	mi
 8009d3e:	b2ad      	uxthmi	r5, r5
 8009d40:	6031      	str	r1, [r6, #0]
 8009d42:	07d9      	lsls	r1, r3, #31
 8009d44:	bf44      	itt	mi
 8009d46:	f043 0320 	orrmi.w	r3, r3, #32
 8009d4a:	6023      	strmi	r3, [r4, #0]
 8009d4c:	b11d      	cbz	r5, 8009d56 <_printf_i+0x19e>
 8009d4e:	2310      	movs	r3, #16
 8009d50:	e7ac      	b.n	8009cac <_printf_i+0xf4>
 8009d52:	4827      	ldr	r0, [pc, #156]	@ (8009df0 <_printf_i+0x238>)
 8009d54:	e7e9      	b.n	8009d2a <_printf_i+0x172>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	f023 0320 	bic.w	r3, r3, #32
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	e7f6      	b.n	8009d4e <_printf_i+0x196>
 8009d60:	4616      	mov	r6, r2
 8009d62:	e7bd      	b.n	8009ce0 <_printf_i+0x128>
 8009d64:	6833      	ldr	r3, [r6, #0]
 8009d66:	6825      	ldr	r5, [r4, #0]
 8009d68:	6961      	ldr	r1, [r4, #20]
 8009d6a:	1d18      	adds	r0, r3, #4
 8009d6c:	6030      	str	r0, [r6, #0]
 8009d6e:	062e      	lsls	r6, r5, #24
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	d501      	bpl.n	8009d78 <_printf_i+0x1c0>
 8009d74:	6019      	str	r1, [r3, #0]
 8009d76:	e002      	b.n	8009d7e <_printf_i+0x1c6>
 8009d78:	0668      	lsls	r0, r5, #25
 8009d7a:	d5fb      	bpl.n	8009d74 <_printf_i+0x1bc>
 8009d7c:	8019      	strh	r1, [r3, #0]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	4616      	mov	r6, r2
 8009d84:	e7bc      	b.n	8009d00 <_printf_i+0x148>
 8009d86:	6833      	ldr	r3, [r6, #0]
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	6032      	str	r2, [r6, #0]
 8009d8c:	681e      	ldr	r6, [r3, #0]
 8009d8e:	6862      	ldr	r2, [r4, #4]
 8009d90:	2100      	movs	r1, #0
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7f6 fa24 	bl	80001e0 <memchr>
 8009d98:	b108      	cbz	r0, 8009d9e <_printf_i+0x1e6>
 8009d9a:	1b80      	subs	r0, r0, r6
 8009d9c:	6060      	str	r0, [r4, #4]
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	2300      	movs	r3, #0
 8009da4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009da8:	e7aa      	b.n	8009d00 <_printf_i+0x148>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	4632      	mov	r2, r6
 8009dae:	4649      	mov	r1, r9
 8009db0:	4640      	mov	r0, r8
 8009db2:	47d0      	blx	sl
 8009db4:	3001      	adds	r0, #1
 8009db6:	d0ad      	beq.n	8009d14 <_printf_i+0x15c>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	079b      	lsls	r3, r3, #30
 8009dbc:	d413      	bmi.n	8009de6 <_printf_i+0x22e>
 8009dbe:	68e0      	ldr	r0, [r4, #12]
 8009dc0:	9b03      	ldr	r3, [sp, #12]
 8009dc2:	4298      	cmp	r0, r3
 8009dc4:	bfb8      	it	lt
 8009dc6:	4618      	movlt	r0, r3
 8009dc8:	e7a6      	b.n	8009d18 <_printf_i+0x160>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	4632      	mov	r2, r6
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	47d0      	blx	sl
 8009dd4:	3001      	adds	r0, #1
 8009dd6:	d09d      	beq.n	8009d14 <_printf_i+0x15c>
 8009dd8:	3501      	adds	r5, #1
 8009dda:	68e3      	ldr	r3, [r4, #12]
 8009ddc:	9903      	ldr	r1, [sp, #12]
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	42ab      	cmp	r3, r5
 8009de2:	dcf2      	bgt.n	8009dca <_printf_i+0x212>
 8009de4:	e7eb      	b.n	8009dbe <_printf_i+0x206>
 8009de6:	2500      	movs	r5, #0
 8009de8:	f104 0619 	add.w	r6, r4, #25
 8009dec:	e7f5      	b.n	8009dda <_printf_i+0x222>
 8009dee:	bf00      	nop
 8009df0:	0800dba6 	.word	0x0800dba6
 8009df4:	0800dbb7 	.word	0x0800dbb7

08009df8 <std>:
 8009df8:	2300      	movs	r3, #0
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8009e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e06:	6083      	str	r3, [r0, #8]
 8009e08:	8181      	strh	r1, [r0, #12]
 8009e0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e0c:	81c2      	strh	r2, [r0, #14]
 8009e0e:	6183      	str	r3, [r0, #24]
 8009e10:	4619      	mov	r1, r3
 8009e12:	2208      	movs	r2, #8
 8009e14:	305c      	adds	r0, #92	@ 0x5c
 8009e16:	f000 f914 	bl	800a042 <memset>
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e50 <std+0x58>)
 8009e1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <std+0x5c>)
 8009e20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e22:	4b0d      	ldr	r3, [pc, #52]	@ (8009e58 <std+0x60>)
 8009e24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e26:	4b0d      	ldr	r3, [pc, #52]	@ (8009e5c <std+0x64>)
 8009e28:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e60 <std+0x68>)
 8009e2c:	6224      	str	r4, [r4, #32]
 8009e2e:	429c      	cmp	r4, r3
 8009e30:	d006      	beq.n	8009e40 <std+0x48>
 8009e32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e36:	4294      	cmp	r4, r2
 8009e38:	d002      	beq.n	8009e40 <std+0x48>
 8009e3a:	33d0      	adds	r3, #208	@ 0xd0
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	d105      	bne.n	8009e4c <std+0x54>
 8009e40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e48:	f000 b978 	b.w	800a13c <__retarget_lock_init_recursive>
 8009e4c:	bd10      	pop	{r4, pc}
 8009e4e:	bf00      	nop
 8009e50:	08009fbd 	.word	0x08009fbd
 8009e54:	08009fdf 	.word	0x08009fdf
 8009e58:	0800a017 	.word	0x0800a017
 8009e5c:	0800a03b 	.word	0x0800a03b
 8009e60:	200009c4 	.word	0x200009c4

08009e64 <stdio_exit_handler>:
 8009e64:	4a02      	ldr	r2, [pc, #8]	@ (8009e70 <stdio_exit_handler+0xc>)
 8009e66:	4903      	ldr	r1, [pc, #12]	@ (8009e74 <stdio_exit_handler+0x10>)
 8009e68:	4803      	ldr	r0, [pc, #12]	@ (8009e78 <stdio_exit_handler+0x14>)
 8009e6a:	f000 b869 	b.w	8009f40 <_fwalk_sglue>
 8009e6e:	bf00      	nop
 8009e70:	2000004c 	.word	0x2000004c
 8009e74:	0800ba9d 	.word	0x0800ba9d
 8009e78:	2000005c 	.word	0x2000005c

08009e7c <cleanup_stdio>:
 8009e7c:	6841      	ldr	r1, [r0, #4]
 8009e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb0 <cleanup_stdio+0x34>)
 8009e80:	4299      	cmp	r1, r3
 8009e82:	b510      	push	{r4, lr}
 8009e84:	4604      	mov	r4, r0
 8009e86:	d001      	beq.n	8009e8c <cleanup_stdio+0x10>
 8009e88:	f001 fe08 	bl	800ba9c <_fflush_r>
 8009e8c:	68a1      	ldr	r1, [r4, #8]
 8009e8e:	4b09      	ldr	r3, [pc, #36]	@ (8009eb4 <cleanup_stdio+0x38>)
 8009e90:	4299      	cmp	r1, r3
 8009e92:	d002      	beq.n	8009e9a <cleanup_stdio+0x1e>
 8009e94:	4620      	mov	r0, r4
 8009e96:	f001 fe01 	bl	800ba9c <_fflush_r>
 8009e9a:	68e1      	ldr	r1, [r4, #12]
 8009e9c:	4b06      	ldr	r3, [pc, #24]	@ (8009eb8 <cleanup_stdio+0x3c>)
 8009e9e:	4299      	cmp	r1, r3
 8009ea0:	d004      	beq.n	8009eac <cleanup_stdio+0x30>
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea8:	f001 bdf8 	b.w	800ba9c <_fflush_r>
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	bf00      	nop
 8009eb0:	200009c4 	.word	0x200009c4
 8009eb4:	20000a2c 	.word	0x20000a2c
 8009eb8:	20000a94 	.word	0x20000a94

08009ebc <global_stdio_init.part.0>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <global_stdio_init.part.0+0x30>)
 8009ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8009ef0 <global_stdio_init.part.0+0x34>)
 8009ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef4 <global_stdio_init.part.0+0x38>)
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2104      	movs	r1, #4
 8009ecc:	f7ff ff94 	bl	8009df8 <std>
 8009ed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	2109      	movs	r1, #9
 8009ed8:	f7ff ff8e 	bl	8009df8 <std>
 8009edc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee6:	2112      	movs	r1, #18
 8009ee8:	f7ff bf86 	b.w	8009df8 <std>
 8009eec:	20000afc 	.word	0x20000afc
 8009ef0:	200009c4 	.word	0x200009c4
 8009ef4:	08009e65 	.word	0x08009e65

08009ef8 <__sfp_lock_acquire>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	@ (8009f00 <__sfp_lock_acquire+0x8>)
 8009efa:	f000 b920 	b.w	800a13e <__retarget_lock_acquire_recursive>
 8009efe:	bf00      	nop
 8009f00:	20000b05 	.word	0x20000b05

08009f04 <__sfp_lock_release>:
 8009f04:	4801      	ldr	r0, [pc, #4]	@ (8009f0c <__sfp_lock_release+0x8>)
 8009f06:	f000 b91b 	b.w	800a140 <__retarget_lock_release_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	20000b05 	.word	0x20000b05

08009f10 <__sinit>:
 8009f10:	b510      	push	{r4, lr}
 8009f12:	4604      	mov	r4, r0
 8009f14:	f7ff fff0 	bl	8009ef8 <__sfp_lock_acquire>
 8009f18:	6a23      	ldr	r3, [r4, #32]
 8009f1a:	b11b      	cbz	r3, 8009f24 <__sinit+0x14>
 8009f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f20:	f7ff bff0 	b.w	8009f04 <__sfp_lock_release>
 8009f24:	4b04      	ldr	r3, [pc, #16]	@ (8009f38 <__sinit+0x28>)
 8009f26:	6223      	str	r3, [r4, #32]
 8009f28:	4b04      	ldr	r3, [pc, #16]	@ (8009f3c <__sinit+0x2c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1f5      	bne.n	8009f1c <__sinit+0xc>
 8009f30:	f7ff ffc4 	bl	8009ebc <global_stdio_init.part.0>
 8009f34:	e7f2      	b.n	8009f1c <__sinit+0xc>
 8009f36:	bf00      	nop
 8009f38:	08009e7d 	.word	0x08009e7d
 8009f3c:	20000afc 	.word	0x20000afc

08009f40 <_fwalk_sglue>:
 8009f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	4607      	mov	r7, r0
 8009f46:	4688      	mov	r8, r1
 8009f48:	4614      	mov	r4, r2
 8009f4a:	2600      	movs	r6, #0
 8009f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f50:	f1b9 0901 	subs.w	r9, r9, #1
 8009f54:	d505      	bpl.n	8009f62 <_fwalk_sglue+0x22>
 8009f56:	6824      	ldr	r4, [r4, #0]
 8009f58:	2c00      	cmp	r4, #0
 8009f5a:	d1f7      	bne.n	8009f4c <_fwalk_sglue+0xc>
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f62:	89ab      	ldrh	r3, [r5, #12]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d907      	bls.n	8009f78 <_fwalk_sglue+0x38>
 8009f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	d003      	beq.n	8009f78 <_fwalk_sglue+0x38>
 8009f70:	4629      	mov	r1, r5
 8009f72:	4638      	mov	r0, r7
 8009f74:	47c0      	blx	r8
 8009f76:	4306      	orrs	r6, r0
 8009f78:	3568      	adds	r5, #104	@ 0x68
 8009f7a:	e7e9      	b.n	8009f50 <_fwalk_sglue+0x10>

08009f7c <siprintf>:
 8009f7c:	b40e      	push	{r1, r2, r3}
 8009f7e:	b500      	push	{lr}
 8009f80:	b09c      	sub	sp, #112	@ 0x70
 8009f82:	ab1d      	add	r3, sp, #116	@ 0x74
 8009f84:	9002      	str	r0, [sp, #8]
 8009f86:	9006      	str	r0, [sp, #24]
 8009f88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f8c:	4809      	ldr	r0, [pc, #36]	@ (8009fb4 <siprintf+0x38>)
 8009f8e:	9107      	str	r1, [sp, #28]
 8009f90:	9104      	str	r1, [sp, #16]
 8009f92:	4909      	ldr	r1, [pc, #36]	@ (8009fb8 <siprintf+0x3c>)
 8009f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f98:	9105      	str	r1, [sp, #20]
 8009f9a:	6800      	ldr	r0, [r0, #0]
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	a902      	add	r1, sp, #8
 8009fa0:	f001 fbfc 	bl	800b79c <_svfiprintf_r>
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	b01c      	add	sp, #112	@ 0x70
 8009fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb0:	b003      	add	sp, #12
 8009fb2:	4770      	bx	lr
 8009fb4:	20000058 	.word	0x20000058
 8009fb8:	ffff0208 	.word	0xffff0208

08009fbc <__sread>:
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc4:	f000 f86c 	bl	800a0a0 <_read_r>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	bfab      	itete	ge
 8009fcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fce:	89a3      	ldrhlt	r3, [r4, #12]
 8009fd0:	181b      	addge	r3, r3, r0
 8009fd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fd6:	bfac      	ite	ge
 8009fd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fda:	81a3      	strhlt	r3, [r4, #12]
 8009fdc:	bd10      	pop	{r4, pc}

08009fde <__swrite>:
 8009fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe2:	461f      	mov	r7, r3
 8009fe4:	898b      	ldrh	r3, [r1, #12]
 8009fe6:	05db      	lsls	r3, r3, #23
 8009fe8:	4605      	mov	r5, r0
 8009fea:	460c      	mov	r4, r1
 8009fec:	4616      	mov	r6, r2
 8009fee:	d505      	bpl.n	8009ffc <__swrite+0x1e>
 8009ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f000 f840 	bl	800a07c <_lseek_r>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a002:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a006:	81a3      	strh	r3, [r4, #12]
 800a008:	4632      	mov	r2, r6
 800a00a:	463b      	mov	r3, r7
 800a00c:	4628      	mov	r0, r5
 800a00e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a012:	f000 b857 	b.w	800a0c4 <_write_r>

0800a016 <__sseek>:
 800a016:	b510      	push	{r4, lr}
 800a018:	460c      	mov	r4, r1
 800a01a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01e:	f000 f82d 	bl	800a07c <_lseek_r>
 800a022:	1c43      	adds	r3, r0, #1
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	bf15      	itete	ne
 800a028:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a02a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a02e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a032:	81a3      	strheq	r3, [r4, #12]
 800a034:	bf18      	it	ne
 800a036:	81a3      	strhne	r3, [r4, #12]
 800a038:	bd10      	pop	{r4, pc}

0800a03a <__sclose>:
 800a03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a03e:	f000 b80d 	b.w	800a05c <_close_r>

0800a042 <memset>:
 800a042:	4402      	add	r2, r0
 800a044:	4603      	mov	r3, r0
 800a046:	4293      	cmp	r3, r2
 800a048:	d100      	bne.n	800a04c <memset+0xa>
 800a04a:	4770      	bx	lr
 800a04c:	f803 1b01 	strb.w	r1, [r3], #1
 800a050:	e7f9      	b.n	800a046 <memset+0x4>
	...

0800a054 <_localeconv_r>:
 800a054:	4800      	ldr	r0, [pc, #0]	@ (800a058 <_localeconv_r+0x4>)
 800a056:	4770      	bx	lr
 800a058:	20000198 	.word	0x20000198

0800a05c <_close_r>:
 800a05c:	b538      	push	{r3, r4, r5, lr}
 800a05e:	4d06      	ldr	r5, [pc, #24]	@ (800a078 <_close_r+0x1c>)
 800a060:	2300      	movs	r3, #0
 800a062:	4604      	mov	r4, r0
 800a064:	4608      	mov	r0, r1
 800a066:	602b      	str	r3, [r5, #0]
 800a068:	f7fa fb0c 	bl	8004684 <_close>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_close_r+0x1a>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	b103      	cbz	r3, 800a076 <_close_r+0x1a>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	20000b00 	.word	0x20000b00

0800a07c <_lseek_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d07      	ldr	r5, [pc, #28]	@ (800a09c <_lseek_r+0x20>)
 800a080:	4604      	mov	r4, r0
 800a082:	4608      	mov	r0, r1
 800a084:	4611      	mov	r1, r2
 800a086:	2200      	movs	r2, #0
 800a088:	602a      	str	r2, [r5, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f7fa fb21 	bl	80046d2 <_lseek>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_lseek_r+0x1e>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	b103      	cbz	r3, 800a09a <_lseek_r+0x1e>
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	20000b00 	.word	0x20000b00

0800a0a0 <_read_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d07      	ldr	r5, [pc, #28]	@ (800a0c0 <_read_r+0x20>)
 800a0a4:	4604      	mov	r4, r0
 800a0a6:	4608      	mov	r0, r1
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	602a      	str	r2, [r5, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	f7fa facb 	bl	800464a <_read>
 800a0b4:	1c43      	adds	r3, r0, #1
 800a0b6:	d102      	bne.n	800a0be <_read_r+0x1e>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	b103      	cbz	r3, 800a0be <_read_r+0x1e>
 800a0bc:	6023      	str	r3, [r4, #0]
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	20000b00 	.word	0x20000b00

0800a0c4 <_write_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	4d07      	ldr	r5, [pc, #28]	@ (800a0e4 <_write_r+0x20>)
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	602a      	str	r2, [r5, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f7f7 fe98 	bl	8001e08 <_write>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_write_r+0x1e>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_write_r+0x1e>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	20000b00 	.word	0x20000b00

0800a0e8 <__errno>:
 800a0e8:	4b01      	ldr	r3, [pc, #4]	@ (800a0f0 <__errno+0x8>)
 800a0ea:	6818      	ldr	r0, [r3, #0]
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20000058 	.word	0x20000058

0800a0f4 <__libc_init_array>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	4d0d      	ldr	r5, [pc, #52]	@ (800a12c <__libc_init_array+0x38>)
 800a0f8:	4c0d      	ldr	r4, [pc, #52]	@ (800a130 <__libc_init_array+0x3c>)
 800a0fa:	1b64      	subs	r4, r4, r5
 800a0fc:	10a4      	asrs	r4, r4, #2
 800a0fe:	2600      	movs	r6, #0
 800a100:	42a6      	cmp	r6, r4
 800a102:	d109      	bne.n	800a118 <__libc_init_array+0x24>
 800a104:	4d0b      	ldr	r5, [pc, #44]	@ (800a134 <__libc_init_array+0x40>)
 800a106:	4c0c      	ldr	r4, [pc, #48]	@ (800a138 <__libc_init_array+0x44>)
 800a108:	f003 f8a6 	bl	800d258 <_init>
 800a10c:	1b64      	subs	r4, r4, r5
 800a10e:	10a4      	asrs	r4, r4, #2
 800a110:	2600      	movs	r6, #0
 800a112:	42a6      	cmp	r6, r4
 800a114:	d105      	bne.n	800a122 <__libc_init_array+0x2e>
 800a116:	bd70      	pop	{r4, r5, r6, pc}
 800a118:	f855 3b04 	ldr.w	r3, [r5], #4
 800a11c:	4798      	blx	r3
 800a11e:	3601      	adds	r6, #1
 800a120:	e7ee      	b.n	800a100 <__libc_init_array+0xc>
 800a122:	f855 3b04 	ldr.w	r3, [r5], #4
 800a126:	4798      	blx	r3
 800a128:	3601      	adds	r6, #1
 800a12a:	e7f2      	b.n	800a112 <__libc_init_array+0x1e>
 800a12c:	0800dfb8 	.word	0x0800dfb8
 800a130:	0800dfb8 	.word	0x0800dfb8
 800a134:	0800dfb8 	.word	0x0800dfb8
 800a138:	0800dfbc 	.word	0x0800dfbc

0800a13c <__retarget_lock_init_recursive>:
 800a13c:	4770      	bx	lr

0800a13e <__retarget_lock_acquire_recursive>:
 800a13e:	4770      	bx	lr

0800a140 <__retarget_lock_release_recursive>:
 800a140:	4770      	bx	lr

0800a142 <quorem>:
 800a142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a146:	6903      	ldr	r3, [r0, #16]
 800a148:	690c      	ldr	r4, [r1, #16]
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	4607      	mov	r7, r0
 800a14e:	db7e      	blt.n	800a24e <quorem+0x10c>
 800a150:	3c01      	subs	r4, #1
 800a152:	f101 0814 	add.w	r8, r1, #20
 800a156:	00a3      	lsls	r3, r4, #2
 800a158:	f100 0514 	add.w	r5, r0, #20
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a162:	9301      	str	r3, [sp, #4]
 800a164:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a168:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a16c:	3301      	adds	r3, #1
 800a16e:	429a      	cmp	r2, r3
 800a170:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a174:	fbb2 f6f3 	udiv	r6, r2, r3
 800a178:	d32e      	bcc.n	800a1d8 <quorem+0x96>
 800a17a:	f04f 0a00 	mov.w	sl, #0
 800a17e:	46c4      	mov	ip, r8
 800a180:	46ae      	mov	lr, r5
 800a182:	46d3      	mov	fp, sl
 800a184:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a188:	b298      	uxth	r0, r3
 800a18a:	fb06 a000 	mla	r0, r6, r0, sl
 800a18e:	0c02      	lsrs	r2, r0, #16
 800a190:	0c1b      	lsrs	r3, r3, #16
 800a192:	fb06 2303 	mla	r3, r6, r3, r2
 800a196:	f8de 2000 	ldr.w	r2, [lr]
 800a19a:	b280      	uxth	r0, r0
 800a19c:	b292      	uxth	r2, r2
 800a19e:	1a12      	subs	r2, r2, r0
 800a1a0:	445a      	add	r2, fp
 800a1a2:	f8de 0000 	ldr.w	r0, [lr]
 800a1a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1b4:	b292      	uxth	r2, r2
 800a1b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1ba:	45e1      	cmp	r9, ip
 800a1bc:	f84e 2b04 	str.w	r2, [lr], #4
 800a1c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1c4:	d2de      	bcs.n	800a184 <quorem+0x42>
 800a1c6:	9b00      	ldr	r3, [sp, #0]
 800a1c8:	58eb      	ldr	r3, [r5, r3]
 800a1ca:	b92b      	cbnz	r3, 800a1d8 <quorem+0x96>
 800a1cc:	9b01      	ldr	r3, [sp, #4]
 800a1ce:	3b04      	subs	r3, #4
 800a1d0:	429d      	cmp	r5, r3
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	d32f      	bcc.n	800a236 <quorem+0xf4>
 800a1d6:	613c      	str	r4, [r7, #16]
 800a1d8:	4638      	mov	r0, r7
 800a1da:	f001 f97b 	bl	800b4d4 <__mcmp>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	db25      	blt.n	800a22e <quorem+0xec>
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1ea:	f8d1 c000 	ldr.w	ip, [r1]
 800a1ee:	fa1f fe82 	uxth.w	lr, r2
 800a1f2:	fa1f f38c 	uxth.w	r3, ip
 800a1f6:	eba3 030e 	sub.w	r3, r3, lr
 800a1fa:	4403      	add	r3, r0
 800a1fc:	0c12      	lsrs	r2, r2, #16
 800a1fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a202:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a206:	b29b      	uxth	r3, r3
 800a208:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a20c:	45c1      	cmp	r9, r8
 800a20e:	f841 3b04 	str.w	r3, [r1], #4
 800a212:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a216:	d2e6      	bcs.n	800a1e6 <quorem+0xa4>
 800a218:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a21c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a220:	b922      	cbnz	r2, 800a22c <quorem+0xea>
 800a222:	3b04      	subs	r3, #4
 800a224:	429d      	cmp	r5, r3
 800a226:	461a      	mov	r2, r3
 800a228:	d30b      	bcc.n	800a242 <quorem+0x100>
 800a22a:	613c      	str	r4, [r7, #16]
 800a22c:	3601      	adds	r6, #1
 800a22e:	4630      	mov	r0, r6
 800a230:	b003      	add	sp, #12
 800a232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	3b04      	subs	r3, #4
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	d1cb      	bne.n	800a1d6 <quorem+0x94>
 800a23e:	3c01      	subs	r4, #1
 800a240:	e7c6      	b.n	800a1d0 <quorem+0x8e>
 800a242:	6812      	ldr	r2, [r2, #0]
 800a244:	3b04      	subs	r3, #4
 800a246:	2a00      	cmp	r2, #0
 800a248:	d1ef      	bne.n	800a22a <quorem+0xe8>
 800a24a:	3c01      	subs	r4, #1
 800a24c:	e7ea      	b.n	800a224 <quorem+0xe2>
 800a24e:	2000      	movs	r0, #0
 800a250:	e7ee      	b.n	800a230 <quorem+0xee>
 800a252:	0000      	movs	r0, r0
 800a254:	0000      	movs	r0, r0
	...

0800a258 <_dtoa_r>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	69c7      	ldr	r7, [r0, #28]
 800a25e:	b099      	sub	sp, #100	@ 0x64
 800a260:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a264:	ec55 4b10 	vmov	r4, r5, d0
 800a268:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a26a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a26c:	4683      	mov	fp, r0
 800a26e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a270:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a272:	b97f      	cbnz	r7, 800a294 <_dtoa_r+0x3c>
 800a274:	2010      	movs	r0, #16
 800a276:	f000 fdfd 	bl	800ae74 <malloc>
 800a27a:	4602      	mov	r2, r0
 800a27c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a280:	b920      	cbnz	r0, 800a28c <_dtoa_r+0x34>
 800a282:	4ba7      	ldr	r3, [pc, #668]	@ (800a520 <_dtoa_r+0x2c8>)
 800a284:	21ef      	movs	r1, #239	@ 0xef
 800a286:	48a7      	ldr	r0, [pc, #668]	@ (800a524 <_dtoa_r+0x2cc>)
 800a288:	f001 fc68 	bl	800bb5c <__assert_func>
 800a28c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a290:	6007      	str	r7, [r0, #0]
 800a292:	60c7      	str	r7, [r0, #12]
 800a294:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a298:	6819      	ldr	r1, [r3, #0]
 800a29a:	b159      	cbz	r1, 800a2b4 <_dtoa_r+0x5c>
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	604a      	str	r2, [r1, #4]
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4093      	lsls	r3, r2
 800a2a4:	608b      	str	r3, [r1, #8]
 800a2a6:	4658      	mov	r0, fp
 800a2a8:	f000 feda 	bl	800b060 <_Bfree>
 800a2ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	1e2b      	subs	r3, r5, #0
 800a2b6:	bfb9      	ittee	lt
 800a2b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2bc:	9303      	strlt	r3, [sp, #12]
 800a2be:	2300      	movge	r3, #0
 800a2c0:	6033      	strge	r3, [r6, #0]
 800a2c2:	9f03      	ldr	r7, [sp, #12]
 800a2c4:	4b98      	ldr	r3, [pc, #608]	@ (800a528 <_dtoa_r+0x2d0>)
 800a2c6:	bfbc      	itt	lt
 800a2c8:	2201      	movlt	r2, #1
 800a2ca:	6032      	strlt	r2, [r6, #0]
 800a2cc:	43bb      	bics	r3, r7
 800a2ce:	d112      	bne.n	800a2f6 <_dtoa_r+0x9e>
 800a2d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a2d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2dc:	4323      	orrs	r3, r4
 800a2de:	f000 854d 	beq.w	800ad7c <_dtoa_r+0xb24>
 800a2e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a53c <_dtoa_r+0x2e4>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 854f 	beq.w	800ad8c <_dtoa_r+0xb34>
 800a2ee:	f10a 0303 	add.w	r3, sl, #3
 800a2f2:	f000 bd49 	b.w	800ad88 <_dtoa_r+0xb30>
 800a2f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	ec51 0b17 	vmov	r0, r1, d7
 800a300:	2300      	movs	r3, #0
 800a302:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a306:	f7f6 fbe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a30a:	4680      	mov	r8, r0
 800a30c:	b158      	cbz	r0, 800a326 <_dtoa_r+0xce>
 800a30e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a310:	2301      	movs	r3, #1
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a316:	b113      	cbz	r3, 800a31e <_dtoa_r+0xc6>
 800a318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a31a:	4b84      	ldr	r3, [pc, #528]	@ (800a52c <_dtoa_r+0x2d4>)
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a540 <_dtoa_r+0x2e8>
 800a322:	f000 bd33 	b.w	800ad8c <_dtoa_r+0xb34>
 800a326:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a32a:	aa16      	add	r2, sp, #88	@ 0x58
 800a32c:	a917      	add	r1, sp, #92	@ 0x5c
 800a32e:	4658      	mov	r0, fp
 800a330:	f001 f980 	bl	800b634 <__d2b>
 800a334:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a338:	4681      	mov	r9, r0
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d077      	beq.n	800a42e <_dtoa_r+0x1d6>
 800a33e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a340:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a34c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a350:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a354:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a358:	4619      	mov	r1, r3
 800a35a:	2200      	movs	r2, #0
 800a35c:	4b74      	ldr	r3, [pc, #464]	@ (800a530 <_dtoa_r+0x2d8>)
 800a35e:	f7f5 ff9b 	bl	8000298 <__aeabi_dsub>
 800a362:	a369      	add	r3, pc, #420	@ (adr r3, 800a508 <_dtoa_r+0x2b0>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f6 f94e 	bl	8000608 <__aeabi_dmul>
 800a36c:	a368      	add	r3, pc, #416	@ (adr r3, 800a510 <_dtoa_r+0x2b8>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f5 ff93 	bl	800029c <__adddf3>
 800a376:	4604      	mov	r4, r0
 800a378:	4630      	mov	r0, r6
 800a37a:	460d      	mov	r5, r1
 800a37c:	f7f6 f8da 	bl	8000534 <__aeabi_i2d>
 800a380:	a365      	add	r3, pc, #404	@ (adr r3, 800a518 <_dtoa_r+0x2c0>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f6 f93f 	bl	8000608 <__aeabi_dmul>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7f5 ff83 	bl	800029c <__adddf3>
 800a396:	4604      	mov	r4, r0
 800a398:	460d      	mov	r5, r1
 800a39a:	f7f6 fbe5 	bl	8000b68 <__aeabi_d2iz>
 800a39e:	2200      	movs	r2, #0
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f6 fba0 	bl	8000aec <__aeabi_dcmplt>
 800a3ac:	b140      	cbz	r0, 800a3c0 <_dtoa_r+0x168>
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f7f6 f8c0 	bl	8000534 <__aeabi_i2d>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	f7f6 fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3bc:	b900      	cbnz	r0, 800a3c0 <_dtoa_r+0x168>
 800a3be:	3f01      	subs	r7, #1
 800a3c0:	2f16      	cmp	r7, #22
 800a3c2:	d851      	bhi.n	800a468 <_dtoa_r+0x210>
 800a3c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a534 <_dtoa_r+0x2dc>)
 800a3c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3d2:	f7f6 fb8b 	bl	8000aec <__aeabi_dcmplt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d048      	beq.n	800a46c <_dtoa_r+0x214>
 800a3da:	3f01      	subs	r7, #1
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3e2:	1b9b      	subs	r3, r3, r6
 800a3e4:	1e5a      	subs	r2, r3, #1
 800a3e6:	bf44      	itt	mi
 800a3e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a3ec:	2300      	movmi	r3, #0
 800a3ee:	9208      	str	r2, [sp, #32]
 800a3f0:	bf54      	ite	pl
 800a3f2:	f04f 0800 	movpl.w	r8, #0
 800a3f6:	9308      	strmi	r3, [sp, #32]
 800a3f8:	2f00      	cmp	r7, #0
 800a3fa:	db39      	blt.n	800a470 <_dtoa_r+0x218>
 800a3fc:	9b08      	ldr	r3, [sp, #32]
 800a3fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a400:	443b      	add	r3, r7
 800a402:	9308      	str	r3, [sp, #32]
 800a404:	2300      	movs	r3, #0
 800a406:	930a      	str	r3, [sp, #40]	@ 0x28
 800a408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a40a:	2b09      	cmp	r3, #9
 800a40c:	d864      	bhi.n	800a4d8 <_dtoa_r+0x280>
 800a40e:	2b05      	cmp	r3, #5
 800a410:	bfc4      	itt	gt
 800a412:	3b04      	subgt	r3, #4
 800a414:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a418:	f1a3 0302 	sub.w	r3, r3, #2
 800a41c:	bfcc      	ite	gt
 800a41e:	2400      	movgt	r4, #0
 800a420:	2401      	movle	r4, #1
 800a422:	2b03      	cmp	r3, #3
 800a424:	d863      	bhi.n	800a4ee <_dtoa_r+0x296>
 800a426:	e8df f003 	tbb	[pc, r3]
 800a42a:	372a      	.short	0x372a
 800a42c:	5535      	.short	0x5535
 800a42e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a432:	441e      	add	r6, r3
 800a434:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a438:	2b20      	cmp	r3, #32
 800a43a:	bfc1      	itttt	gt
 800a43c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a440:	409f      	lslgt	r7, r3
 800a442:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a446:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a44a:	bfd6      	itet	le
 800a44c:	f1c3 0320 	rsble	r3, r3, #32
 800a450:	ea47 0003 	orrgt.w	r0, r7, r3
 800a454:	fa04 f003 	lslle.w	r0, r4, r3
 800a458:	f7f6 f85c 	bl	8000514 <__aeabi_ui2d>
 800a45c:	2201      	movs	r2, #1
 800a45e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a462:	3e01      	subs	r6, #1
 800a464:	9214      	str	r2, [sp, #80]	@ 0x50
 800a466:	e777      	b.n	800a358 <_dtoa_r+0x100>
 800a468:	2301      	movs	r3, #1
 800a46a:	e7b8      	b.n	800a3de <_dtoa_r+0x186>
 800a46c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a46e:	e7b7      	b.n	800a3e0 <_dtoa_r+0x188>
 800a470:	427b      	negs	r3, r7
 800a472:	930a      	str	r3, [sp, #40]	@ 0x28
 800a474:	2300      	movs	r3, #0
 800a476:	eba8 0807 	sub.w	r8, r8, r7
 800a47a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a47c:	e7c4      	b.n	800a408 <_dtoa_r+0x1b0>
 800a47e:	2300      	movs	r3, #0
 800a480:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc35      	bgt.n	800a4f4 <_dtoa_r+0x29c>
 800a488:	2301      	movs	r3, #1
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	461a      	mov	r2, r3
 800a490:	920e      	str	r2, [sp, #56]	@ 0x38
 800a492:	e00b      	b.n	800a4ac <_dtoa_r+0x254>
 800a494:	2301      	movs	r3, #1
 800a496:	e7f3      	b.n	800a480 <_dtoa_r+0x228>
 800a498:	2300      	movs	r3, #0
 800a49a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a49e:	18fb      	adds	r3, r7, r3
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	9307      	str	r3, [sp, #28]
 800a4a8:	bfb8      	it	lt
 800a4aa:	2301      	movlt	r3, #1
 800a4ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	2204      	movs	r2, #4
 800a4b4:	f102 0514 	add.w	r5, r2, #20
 800a4b8:	429d      	cmp	r5, r3
 800a4ba:	d91f      	bls.n	800a4fc <_dtoa_r+0x2a4>
 800a4bc:	6041      	str	r1, [r0, #4]
 800a4be:	4658      	mov	r0, fp
 800a4c0:	f000 fd8e 	bl	800afe0 <_Balloc>
 800a4c4:	4682      	mov	sl, r0
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d13c      	bne.n	800a544 <_dtoa_r+0x2ec>
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a538 <_dtoa_r+0x2e0>)
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4d2:	e6d8      	b.n	800a286 <_dtoa_r+0x2e>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e7e0      	b.n	800a49a <_dtoa_r+0x242>
 800a4d8:	2401      	movs	r4, #1
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	9307      	str	r3, [sp, #28]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2312      	movs	r3, #18
 800a4ec:	e7d0      	b.n	800a490 <_dtoa_r+0x238>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4f2:	e7f5      	b.n	800a4e0 <_dtoa_r+0x288>
 800a4f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	9307      	str	r3, [sp, #28]
 800a4fa:	e7d7      	b.n	800a4ac <_dtoa_r+0x254>
 800a4fc:	3101      	adds	r1, #1
 800a4fe:	0052      	lsls	r2, r2, #1
 800a500:	e7d8      	b.n	800a4b4 <_dtoa_r+0x25c>
 800a502:	bf00      	nop
 800a504:	f3af 8000 	nop.w
 800a508:	636f4361 	.word	0x636f4361
 800a50c:	3fd287a7 	.word	0x3fd287a7
 800a510:	8b60c8b3 	.word	0x8b60c8b3
 800a514:	3fc68a28 	.word	0x3fc68a28
 800a518:	509f79fb 	.word	0x509f79fb
 800a51c:	3fd34413 	.word	0x3fd34413
 800a520:	0800dbd5 	.word	0x0800dbd5
 800a524:	0800dbec 	.word	0x0800dbec
 800a528:	7ff00000 	.word	0x7ff00000
 800a52c:	0800dba5 	.word	0x0800dba5
 800a530:	3ff80000 	.word	0x3ff80000
 800a534:	0800dce8 	.word	0x0800dce8
 800a538:	0800dc44 	.word	0x0800dc44
 800a53c:	0800dbd1 	.word	0x0800dbd1
 800a540:	0800dba4 	.word	0x0800dba4
 800a544:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a548:	6018      	str	r0, [r3, #0]
 800a54a:	9b07      	ldr	r3, [sp, #28]
 800a54c:	2b0e      	cmp	r3, #14
 800a54e:	f200 80a4 	bhi.w	800a69a <_dtoa_r+0x442>
 800a552:	2c00      	cmp	r4, #0
 800a554:	f000 80a1 	beq.w	800a69a <_dtoa_r+0x442>
 800a558:	2f00      	cmp	r7, #0
 800a55a:	dd33      	ble.n	800a5c4 <_dtoa_r+0x36c>
 800a55c:	4bad      	ldr	r3, [pc, #692]	@ (800a814 <_dtoa_r+0x5bc>)
 800a55e:	f007 020f 	and.w	r2, r7, #15
 800a562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a566:	ed93 7b00 	vldr	d7, [r3]
 800a56a:	05f8      	lsls	r0, r7, #23
 800a56c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a570:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a574:	d516      	bpl.n	800a5a4 <_dtoa_r+0x34c>
 800a576:	4ba8      	ldr	r3, [pc, #672]	@ (800a818 <_dtoa_r+0x5c0>)
 800a578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a57c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a580:	f7f6 f96c 	bl	800085c <__aeabi_ddiv>
 800a584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a588:	f004 040f 	and.w	r4, r4, #15
 800a58c:	2603      	movs	r6, #3
 800a58e:	4da2      	ldr	r5, [pc, #648]	@ (800a818 <_dtoa_r+0x5c0>)
 800a590:	b954      	cbnz	r4, 800a5a8 <_dtoa_r+0x350>
 800a592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a59a:	f7f6 f95f 	bl	800085c <__aeabi_ddiv>
 800a59e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a2:	e028      	b.n	800a5f6 <_dtoa_r+0x39e>
 800a5a4:	2602      	movs	r6, #2
 800a5a6:	e7f2      	b.n	800a58e <_dtoa_r+0x336>
 800a5a8:	07e1      	lsls	r1, r4, #31
 800a5aa:	d508      	bpl.n	800a5be <_dtoa_r+0x366>
 800a5ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5b4:	f7f6 f828 	bl	8000608 <__aeabi_dmul>
 800a5b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5bc:	3601      	adds	r6, #1
 800a5be:	1064      	asrs	r4, r4, #1
 800a5c0:	3508      	adds	r5, #8
 800a5c2:	e7e5      	b.n	800a590 <_dtoa_r+0x338>
 800a5c4:	f000 80d2 	beq.w	800a76c <_dtoa_r+0x514>
 800a5c8:	427c      	negs	r4, r7
 800a5ca:	4b92      	ldr	r3, [pc, #584]	@ (800a814 <_dtoa_r+0x5bc>)
 800a5cc:	4d92      	ldr	r5, [pc, #584]	@ (800a818 <_dtoa_r+0x5c0>)
 800a5ce:	f004 020f 	and.w	r2, r4, #15
 800a5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5de:	f7f6 f813 	bl	8000608 <__aeabi_dmul>
 800a5e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e6:	1124      	asrs	r4, r4, #4
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	2602      	movs	r6, #2
 800a5ec:	2c00      	cmp	r4, #0
 800a5ee:	f040 80b2 	bne.w	800a756 <_dtoa_r+0x4fe>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1d3      	bne.n	800a59e <_dtoa_r+0x346>
 800a5f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a5f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80b7 	beq.w	800a770 <_dtoa_r+0x518>
 800a602:	4b86      	ldr	r3, [pc, #536]	@ (800a81c <_dtoa_r+0x5c4>)
 800a604:	2200      	movs	r2, #0
 800a606:	4620      	mov	r0, r4
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f6 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f000 80ae 	beq.w	800a770 <_dtoa_r+0x518>
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 80aa 	beq.w	800a770 <_dtoa_r+0x518>
 800a61c:	9b00      	ldr	r3, [sp, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dd37      	ble.n	800a692 <_dtoa_r+0x43a>
 800a622:	1e7b      	subs	r3, r7, #1
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	4620      	mov	r0, r4
 800a628:	4b7d      	ldr	r3, [pc, #500]	@ (800a820 <_dtoa_r+0x5c8>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7f5 ffeb 	bl	8000608 <__aeabi_dmul>
 800a632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a636:	9c00      	ldr	r4, [sp, #0]
 800a638:	3601      	adds	r6, #1
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7f5 ff7a 	bl	8000534 <__aeabi_i2d>
 800a640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a644:	f7f5 ffe0 	bl	8000608 <__aeabi_dmul>
 800a648:	4b76      	ldr	r3, [pc, #472]	@ (800a824 <_dtoa_r+0x5cc>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	f7f5 fe26 	bl	800029c <__adddf3>
 800a650:	4605      	mov	r5, r0
 800a652:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a656:	2c00      	cmp	r4, #0
 800a658:	f040 808d 	bne.w	800a776 <_dtoa_r+0x51e>
 800a65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a660:	4b71      	ldr	r3, [pc, #452]	@ (800a828 <_dtoa_r+0x5d0>)
 800a662:	2200      	movs	r2, #0
 800a664:	f7f5 fe18 	bl	8000298 <__aeabi_dsub>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a670:	462a      	mov	r2, r5
 800a672:	4633      	mov	r3, r6
 800a674:	f7f6 fa58 	bl	8000b28 <__aeabi_dcmpgt>
 800a678:	2800      	cmp	r0, #0
 800a67a:	f040 828b 	bne.w	800ab94 <_dtoa_r+0x93c>
 800a67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a682:	462a      	mov	r2, r5
 800a684:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a688:	f7f6 fa30 	bl	8000aec <__aeabi_dcmplt>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 8128 	bne.w	800a8e2 <_dtoa_r+0x68a>
 800a692:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a696:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a69a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f2c0 815a 	blt.w	800a956 <_dtoa_r+0x6fe>
 800a6a2:	2f0e      	cmp	r7, #14
 800a6a4:	f300 8157 	bgt.w	800a956 <_dtoa_r+0x6fe>
 800a6a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a814 <_dtoa_r+0x5bc>)
 800a6aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6ae:	ed93 7b00 	vldr	d7, [r3]
 800a6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	ed8d 7b00 	vstr	d7, [sp]
 800a6ba:	da03      	bge.n	800a6c4 <_dtoa_r+0x46c>
 800a6bc:	9b07      	ldr	r3, [sp, #28]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f340 8101 	ble.w	800a8c6 <_dtoa_r+0x66e>
 800a6c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a6c8:	4656      	mov	r6, sl
 800a6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	f7f6 f8c3 	bl	800085c <__aeabi_ddiv>
 800a6d6:	f7f6 fa47 	bl	8000b68 <__aeabi_d2iz>
 800a6da:	4680      	mov	r8, r0
 800a6dc:	f7f5 ff2a 	bl	8000534 <__aeabi_i2d>
 800a6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6e4:	f7f5 ff90 	bl	8000608 <__aeabi_dmul>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a6f4:	f7f5 fdd0 	bl	8000298 <__aeabi_dsub>
 800a6f8:	f806 4b01 	strb.w	r4, [r6], #1
 800a6fc:	9d07      	ldr	r5, [sp, #28]
 800a6fe:	eba6 040a 	sub.w	r4, r6, sl
 800a702:	42a5      	cmp	r5, r4
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	f040 8117 	bne.w	800a93a <_dtoa_r+0x6e2>
 800a70c:	f7f5 fdc6 	bl	800029c <__adddf3>
 800a710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a714:	4604      	mov	r4, r0
 800a716:	460d      	mov	r5, r1
 800a718:	f7f6 fa06 	bl	8000b28 <__aeabi_dcmpgt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 80f9 	bne.w	800a914 <_dtoa_r+0x6bc>
 800a722:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a726:	4620      	mov	r0, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	f7f6 f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a72e:	b118      	cbz	r0, 800a738 <_dtoa_r+0x4e0>
 800a730:	f018 0f01 	tst.w	r8, #1
 800a734:	f040 80ee 	bne.w	800a914 <_dtoa_r+0x6bc>
 800a738:	4649      	mov	r1, r9
 800a73a:	4658      	mov	r0, fp
 800a73c:	f000 fc90 	bl	800b060 <_Bfree>
 800a740:	2300      	movs	r3, #0
 800a742:	7033      	strb	r3, [r6, #0]
 800a744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a746:	3701      	adds	r7, #1
 800a748:	601f      	str	r7, [r3, #0]
 800a74a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 831d 	beq.w	800ad8c <_dtoa_r+0xb34>
 800a752:	601e      	str	r6, [r3, #0]
 800a754:	e31a      	b.n	800ad8c <_dtoa_r+0xb34>
 800a756:	07e2      	lsls	r2, r4, #31
 800a758:	d505      	bpl.n	800a766 <_dtoa_r+0x50e>
 800a75a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a75e:	f7f5 ff53 	bl	8000608 <__aeabi_dmul>
 800a762:	3601      	adds	r6, #1
 800a764:	2301      	movs	r3, #1
 800a766:	1064      	asrs	r4, r4, #1
 800a768:	3508      	adds	r5, #8
 800a76a:	e73f      	b.n	800a5ec <_dtoa_r+0x394>
 800a76c:	2602      	movs	r6, #2
 800a76e:	e742      	b.n	800a5f6 <_dtoa_r+0x39e>
 800a770:	9c07      	ldr	r4, [sp, #28]
 800a772:	9704      	str	r7, [sp, #16]
 800a774:	e761      	b.n	800a63a <_dtoa_r+0x3e2>
 800a776:	4b27      	ldr	r3, [pc, #156]	@ (800a814 <_dtoa_r+0x5bc>)
 800a778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a77a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a77e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a782:	4454      	add	r4, sl
 800a784:	2900      	cmp	r1, #0
 800a786:	d053      	beq.n	800a830 <_dtoa_r+0x5d8>
 800a788:	4928      	ldr	r1, [pc, #160]	@ (800a82c <_dtoa_r+0x5d4>)
 800a78a:	2000      	movs	r0, #0
 800a78c:	f7f6 f866 	bl	800085c <__aeabi_ddiv>
 800a790:	4633      	mov	r3, r6
 800a792:	462a      	mov	r2, r5
 800a794:	f7f5 fd80 	bl	8000298 <__aeabi_dsub>
 800a798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a79c:	4656      	mov	r6, sl
 800a79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a2:	f7f6 f9e1 	bl	8000b68 <__aeabi_d2iz>
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	f7f5 fec4 	bl	8000534 <__aeabi_i2d>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b4:	f7f5 fd70 	bl	8000298 <__aeabi_dsub>
 800a7b8:	3530      	adds	r5, #48	@ 0x30
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7c2:	f806 5b01 	strb.w	r5, [r6], #1
 800a7c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7ca:	f7f6 f98f 	bl	8000aec <__aeabi_dcmplt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d171      	bne.n	800a8b6 <_dtoa_r+0x65e>
 800a7d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d6:	4911      	ldr	r1, [pc, #68]	@ (800a81c <_dtoa_r+0x5c4>)
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f7f5 fd5d 	bl	8000298 <__aeabi_dsub>
 800a7de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7e2:	f7f6 f983 	bl	8000aec <__aeabi_dcmplt>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f040 8095 	bne.w	800a916 <_dtoa_r+0x6be>
 800a7ec:	42a6      	cmp	r6, r4
 800a7ee:	f43f af50 	beq.w	800a692 <_dtoa_r+0x43a>
 800a7f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a820 <_dtoa_r+0x5c8>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f7f5 ff05 	bl	8000608 <__aeabi_dmul>
 800a7fe:	4b08      	ldr	r3, [pc, #32]	@ (800a820 <_dtoa_r+0x5c8>)
 800a800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a804:	2200      	movs	r2, #0
 800a806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a80a:	f7f5 fefd 	bl	8000608 <__aeabi_dmul>
 800a80e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a812:	e7c4      	b.n	800a79e <_dtoa_r+0x546>
 800a814:	0800dce8 	.word	0x0800dce8
 800a818:	0800dcc0 	.word	0x0800dcc0
 800a81c:	3ff00000 	.word	0x3ff00000
 800a820:	40240000 	.word	0x40240000
 800a824:	401c0000 	.word	0x401c0000
 800a828:	40140000 	.word	0x40140000
 800a82c:	3fe00000 	.word	0x3fe00000
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	f7f5 fee8 	bl	8000608 <__aeabi_dmul>
 800a838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a83c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a83e:	4656      	mov	r6, sl
 800a840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a844:	f7f6 f990 	bl	8000b68 <__aeabi_d2iz>
 800a848:	4605      	mov	r5, r0
 800a84a:	f7f5 fe73 	bl	8000534 <__aeabi_i2d>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a856:	f7f5 fd1f 	bl	8000298 <__aeabi_dsub>
 800a85a:	3530      	adds	r5, #48	@ 0x30
 800a85c:	f806 5b01 	strb.w	r5, [r6], #1
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	42a6      	cmp	r6, r4
 800a866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a86a:	f04f 0200 	mov.w	r2, #0
 800a86e:	d124      	bne.n	800a8ba <_dtoa_r+0x662>
 800a870:	4bac      	ldr	r3, [pc, #688]	@ (800ab24 <_dtoa_r+0x8cc>)
 800a872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a876:	f7f5 fd11 	bl	800029c <__adddf3>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a882:	f7f6 f951 	bl	8000b28 <__aeabi_dcmpgt>
 800a886:	2800      	cmp	r0, #0
 800a888:	d145      	bne.n	800a916 <_dtoa_r+0x6be>
 800a88a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a88e:	49a5      	ldr	r1, [pc, #660]	@ (800ab24 <_dtoa_r+0x8cc>)
 800a890:	2000      	movs	r0, #0
 800a892:	f7f5 fd01 	bl	8000298 <__aeabi_dsub>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a89e:	f7f6 f925 	bl	8000aec <__aeabi_dcmplt>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f43f aef5 	beq.w	800a692 <_dtoa_r+0x43a>
 800a8a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a8aa:	1e73      	subs	r3, r6, #1
 800a8ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8b2:	2b30      	cmp	r3, #48	@ 0x30
 800a8b4:	d0f8      	beq.n	800a8a8 <_dtoa_r+0x650>
 800a8b6:	9f04      	ldr	r7, [sp, #16]
 800a8b8:	e73e      	b.n	800a738 <_dtoa_r+0x4e0>
 800a8ba:	4b9b      	ldr	r3, [pc, #620]	@ (800ab28 <_dtoa_r+0x8d0>)
 800a8bc:	f7f5 fea4 	bl	8000608 <__aeabi_dmul>
 800a8c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8c4:	e7bc      	b.n	800a840 <_dtoa_r+0x5e8>
 800a8c6:	d10c      	bne.n	800a8e2 <_dtoa_r+0x68a>
 800a8c8:	4b98      	ldr	r3, [pc, #608]	@ (800ab2c <_dtoa_r+0x8d4>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8d0:	f7f5 fe9a 	bl	8000608 <__aeabi_dmul>
 800a8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8d8:	f7f6 f91c 	bl	8000b14 <__aeabi_dcmpge>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	f000 8157 	beq.w	800ab90 <_dtoa_r+0x938>
 800a8e2:	2400      	movs	r4, #0
 800a8e4:	4625      	mov	r5, r4
 800a8e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e8:	43db      	mvns	r3, r3
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	4656      	mov	r6, sl
 800a8ee:	2700      	movs	r7, #0
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4658      	mov	r0, fp
 800a8f4:	f000 fbb4 	bl	800b060 <_Bfree>
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	d0dc      	beq.n	800a8b6 <_dtoa_r+0x65e>
 800a8fc:	b12f      	cbz	r7, 800a90a <_dtoa_r+0x6b2>
 800a8fe:	42af      	cmp	r7, r5
 800a900:	d003      	beq.n	800a90a <_dtoa_r+0x6b2>
 800a902:	4639      	mov	r1, r7
 800a904:	4658      	mov	r0, fp
 800a906:	f000 fbab 	bl	800b060 <_Bfree>
 800a90a:	4629      	mov	r1, r5
 800a90c:	4658      	mov	r0, fp
 800a90e:	f000 fba7 	bl	800b060 <_Bfree>
 800a912:	e7d0      	b.n	800a8b6 <_dtoa_r+0x65e>
 800a914:	9704      	str	r7, [sp, #16]
 800a916:	4633      	mov	r3, r6
 800a918:	461e      	mov	r6, r3
 800a91a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a91e:	2a39      	cmp	r2, #57	@ 0x39
 800a920:	d107      	bne.n	800a932 <_dtoa_r+0x6da>
 800a922:	459a      	cmp	sl, r3
 800a924:	d1f8      	bne.n	800a918 <_dtoa_r+0x6c0>
 800a926:	9a04      	ldr	r2, [sp, #16]
 800a928:	3201      	adds	r2, #1
 800a92a:	9204      	str	r2, [sp, #16]
 800a92c:	2230      	movs	r2, #48	@ 0x30
 800a92e:	f88a 2000 	strb.w	r2, [sl]
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	3201      	adds	r2, #1
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e7bd      	b.n	800a8b6 <_dtoa_r+0x65e>
 800a93a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab28 <_dtoa_r+0x8d0>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	f7f5 fe63 	bl	8000608 <__aeabi_dmul>
 800a942:	2200      	movs	r2, #0
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	460d      	mov	r5, r1
 800a94a:	f7f6 f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f aebb 	beq.w	800a6ca <_dtoa_r+0x472>
 800a954:	e6f0      	b.n	800a738 <_dtoa_r+0x4e0>
 800a956:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a958:	2a00      	cmp	r2, #0
 800a95a:	f000 80db 	beq.w	800ab14 <_dtoa_r+0x8bc>
 800a95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a960:	2a01      	cmp	r2, #1
 800a962:	f300 80bf 	bgt.w	800aae4 <_dtoa_r+0x88c>
 800a966:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a968:	2a00      	cmp	r2, #0
 800a96a:	f000 80b7 	beq.w	800aadc <_dtoa_r+0x884>
 800a96e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a972:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a974:	4646      	mov	r6, r8
 800a976:	9a08      	ldr	r2, [sp, #32]
 800a978:	2101      	movs	r1, #1
 800a97a:	441a      	add	r2, r3
 800a97c:	4658      	mov	r0, fp
 800a97e:	4498      	add	r8, r3
 800a980:	9208      	str	r2, [sp, #32]
 800a982:	f000 fc21 	bl	800b1c8 <__i2b>
 800a986:	4605      	mov	r5, r0
 800a988:	b15e      	cbz	r6, 800a9a2 <_dtoa_r+0x74a>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd08      	ble.n	800a9a2 <_dtoa_r+0x74a>
 800a990:	42b3      	cmp	r3, r6
 800a992:	9a08      	ldr	r2, [sp, #32]
 800a994:	bfa8      	it	ge
 800a996:	4633      	movge	r3, r6
 800a998:	eba8 0803 	sub.w	r8, r8, r3
 800a99c:	1af6      	subs	r6, r6, r3
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	9308      	str	r3, [sp, #32]
 800a9a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a4:	b1f3      	cbz	r3, 800a9e4 <_dtoa_r+0x78c>
 800a9a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 80b7 	beq.w	800ab1c <_dtoa_r+0x8c4>
 800a9ae:	b18c      	cbz	r4, 800a9d4 <_dtoa_r+0x77c>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	4658      	mov	r0, fp
 800a9b6:	f000 fcc7 	bl	800b348 <__pow5mult>
 800a9ba:	464a      	mov	r2, r9
 800a9bc:	4601      	mov	r1, r0
 800a9be:	4605      	mov	r5, r0
 800a9c0:	4658      	mov	r0, fp
 800a9c2:	f000 fc17 	bl	800b1f4 <__multiply>
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	9004      	str	r0, [sp, #16]
 800a9ca:	4658      	mov	r0, fp
 800a9cc:	f000 fb48 	bl	800b060 <_Bfree>
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	4699      	mov	r9, r3
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d6:	1b1a      	subs	r2, r3, r4
 800a9d8:	d004      	beq.n	800a9e4 <_dtoa_r+0x78c>
 800a9da:	4649      	mov	r1, r9
 800a9dc:	4658      	mov	r0, fp
 800a9de:	f000 fcb3 	bl	800b348 <__pow5mult>
 800a9e2:	4681      	mov	r9, r0
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	4658      	mov	r0, fp
 800a9e8:	f000 fbee 	bl	800b1c8 <__i2b>
 800a9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 81cf 	beq.w	800ad94 <_dtoa_r+0xb3c>
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	4658      	mov	r0, fp
 800a9fc:	f000 fca4 	bl	800b348 <__pow5mult>
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	4604      	mov	r4, r0
 800aa06:	f300 8095 	bgt.w	800ab34 <_dtoa_r+0x8dc>
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 8087 	bne.w	800ab20 <_dtoa_r+0x8c8>
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f040 8089 	bne.w	800ab30 <_dtoa_r+0x8d8>
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa24:	0d1b      	lsrs	r3, r3, #20
 800aa26:	051b      	lsls	r3, r3, #20
 800aa28:	b12b      	cbz	r3, 800aa36 <_dtoa_r+0x7de>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	9308      	str	r3, [sp, #32]
 800aa30:	f108 0801 	add.w	r8, r8, #1
 800aa34:	2301      	movs	r3, #1
 800aa36:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 81b0 	beq.w	800ada0 <_dtoa_r+0xb48>
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa46:	6918      	ldr	r0, [r3, #16]
 800aa48:	f000 fb72 	bl	800b130 <__hi0bits>
 800aa4c:	f1c0 0020 	rsb	r0, r0, #32
 800aa50:	9b08      	ldr	r3, [sp, #32]
 800aa52:	4418      	add	r0, r3
 800aa54:	f010 001f 	ands.w	r0, r0, #31
 800aa58:	d077      	beq.n	800ab4a <_dtoa_r+0x8f2>
 800aa5a:	f1c0 0320 	rsb	r3, r0, #32
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	dd6b      	ble.n	800ab3a <_dtoa_r+0x8e2>
 800aa62:	9b08      	ldr	r3, [sp, #32]
 800aa64:	f1c0 001c 	rsb	r0, r0, #28
 800aa68:	4403      	add	r3, r0
 800aa6a:	4480      	add	r8, r0
 800aa6c:	4406      	add	r6, r0
 800aa6e:	9308      	str	r3, [sp, #32]
 800aa70:	f1b8 0f00 	cmp.w	r8, #0
 800aa74:	dd05      	ble.n	800aa82 <_dtoa_r+0x82a>
 800aa76:	4649      	mov	r1, r9
 800aa78:	4642      	mov	r2, r8
 800aa7a:	4658      	mov	r0, fp
 800aa7c:	f000 fcbe 	bl	800b3fc <__lshift>
 800aa80:	4681      	mov	r9, r0
 800aa82:	9b08      	ldr	r3, [sp, #32]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dd05      	ble.n	800aa94 <_dtoa_r+0x83c>
 800aa88:	4621      	mov	r1, r4
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4658      	mov	r0, fp
 800aa8e:	f000 fcb5 	bl	800b3fc <__lshift>
 800aa92:	4604      	mov	r4, r0
 800aa94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d059      	beq.n	800ab4e <_dtoa_r+0x8f6>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4648      	mov	r0, r9
 800aa9e:	f000 fd19 	bl	800b4d4 <__mcmp>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	da53      	bge.n	800ab4e <_dtoa_r+0x8f6>
 800aaa6:	1e7b      	subs	r3, r7, #1
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	4649      	mov	r1, r9
 800aaac:	2300      	movs	r3, #0
 800aaae:	220a      	movs	r2, #10
 800aab0:	4658      	mov	r0, fp
 800aab2:	f000 faf7 	bl	800b0a4 <__multadd>
 800aab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab8:	4681      	mov	r9, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 8172 	beq.w	800ada4 <_dtoa_r+0xb4c>
 800aac0:	2300      	movs	r3, #0
 800aac2:	4629      	mov	r1, r5
 800aac4:	220a      	movs	r2, #10
 800aac6:	4658      	mov	r0, fp
 800aac8:	f000 faec 	bl	800b0a4 <__multadd>
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	4605      	mov	r5, r0
 800aad2:	dc67      	bgt.n	800aba4 <_dtoa_r+0x94c>
 800aad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	dc41      	bgt.n	800ab5e <_dtoa_r+0x906>
 800aada:	e063      	b.n	800aba4 <_dtoa_r+0x94c>
 800aadc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aae2:	e746      	b.n	800a972 <_dtoa_r+0x71a>
 800aae4:	9b07      	ldr	r3, [sp, #28]
 800aae6:	1e5c      	subs	r4, r3, #1
 800aae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaea:	42a3      	cmp	r3, r4
 800aaec:	bfbf      	itttt	lt
 800aaee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aaf0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aaf2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aaf4:	1ae3      	sublt	r3, r4, r3
 800aaf6:	bfb4      	ite	lt
 800aaf8:	18d2      	addlt	r2, r2, r3
 800aafa:	1b1c      	subge	r4, r3, r4
 800aafc:	9b07      	ldr	r3, [sp, #28]
 800aafe:	bfbc      	itt	lt
 800ab00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ab02:	2400      	movlt	r4, #0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfb5      	itete	lt
 800ab08:	eba8 0603 	sublt.w	r6, r8, r3
 800ab0c:	9b07      	ldrge	r3, [sp, #28]
 800ab0e:	2300      	movlt	r3, #0
 800ab10:	4646      	movge	r6, r8
 800ab12:	e730      	b.n	800a976 <_dtoa_r+0x71e>
 800ab14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab18:	4646      	mov	r6, r8
 800ab1a:	e735      	b.n	800a988 <_dtoa_r+0x730>
 800ab1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab1e:	e75c      	b.n	800a9da <_dtoa_r+0x782>
 800ab20:	2300      	movs	r3, #0
 800ab22:	e788      	b.n	800aa36 <_dtoa_r+0x7de>
 800ab24:	3fe00000 	.word	0x3fe00000
 800ab28:	40240000 	.word	0x40240000
 800ab2c:	40140000 	.word	0x40140000
 800ab30:	9b02      	ldr	r3, [sp, #8]
 800ab32:	e780      	b.n	800aa36 <_dtoa_r+0x7de>
 800ab34:	2300      	movs	r3, #0
 800ab36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab38:	e782      	b.n	800aa40 <_dtoa_r+0x7e8>
 800ab3a:	d099      	beq.n	800aa70 <_dtoa_r+0x818>
 800ab3c:	9a08      	ldr	r2, [sp, #32]
 800ab3e:	331c      	adds	r3, #28
 800ab40:	441a      	add	r2, r3
 800ab42:	4498      	add	r8, r3
 800ab44:	441e      	add	r6, r3
 800ab46:	9208      	str	r2, [sp, #32]
 800ab48:	e792      	b.n	800aa70 <_dtoa_r+0x818>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	e7f6      	b.n	800ab3c <_dtoa_r+0x8e4>
 800ab4e:	9b07      	ldr	r3, [sp, #28]
 800ab50:	9704      	str	r7, [sp, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dc20      	bgt.n	800ab98 <_dtoa_r+0x940>
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	dd1e      	ble.n	800ab9c <_dtoa_r+0x944>
 800ab5e:	9b00      	ldr	r3, [sp, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f47f aec0 	bne.w	800a8e6 <_dtoa_r+0x68e>
 800ab66:	4621      	mov	r1, r4
 800ab68:	2205      	movs	r2, #5
 800ab6a:	4658      	mov	r0, fp
 800ab6c:	f000 fa9a 	bl	800b0a4 <__multadd>
 800ab70:	4601      	mov	r1, r0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4648      	mov	r0, r9
 800ab76:	f000 fcad 	bl	800b4d4 <__mcmp>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f77f aeb3 	ble.w	800a8e6 <_dtoa_r+0x68e>
 800ab80:	4656      	mov	r6, sl
 800ab82:	2331      	movs	r3, #49	@ 0x31
 800ab84:	f806 3b01 	strb.w	r3, [r6], #1
 800ab88:	9b04      	ldr	r3, [sp, #16]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	e6ae      	b.n	800a8ee <_dtoa_r+0x696>
 800ab90:	9c07      	ldr	r4, [sp, #28]
 800ab92:	9704      	str	r7, [sp, #16]
 800ab94:	4625      	mov	r5, r4
 800ab96:	e7f3      	b.n	800ab80 <_dtoa_r+0x928>
 800ab98:	9b07      	ldr	r3, [sp, #28]
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8104 	beq.w	800adac <_dtoa_r+0xb54>
 800aba4:	2e00      	cmp	r6, #0
 800aba6:	dd05      	ble.n	800abb4 <_dtoa_r+0x95c>
 800aba8:	4629      	mov	r1, r5
 800abaa:	4632      	mov	r2, r6
 800abac:	4658      	mov	r0, fp
 800abae:	f000 fc25 	bl	800b3fc <__lshift>
 800abb2:	4605      	mov	r5, r0
 800abb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d05a      	beq.n	800ac70 <_dtoa_r+0xa18>
 800abba:	6869      	ldr	r1, [r5, #4]
 800abbc:	4658      	mov	r0, fp
 800abbe:	f000 fa0f 	bl	800afe0 <_Balloc>
 800abc2:	4606      	mov	r6, r0
 800abc4:	b928      	cbnz	r0, 800abd2 <_dtoa_r+0x97a>
 800abc6:	4b84      	ldr	r3, [pc, #528]	@ (800add8 <_dtoa_r+0xb80>)
 800abc8:	4602      	mov	r2, r0
 800abca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800abce:	f7ff bb5a 	b.w	800a286 <_dtoa_r+0x2e>
 800abd2:	692a      	ldr	r2, [r5, #16]
 800abd4:	3202      	adds	r2, #2
 800abd6:	0092      	lsls	r2, r2, #2
 800abd8:	f105 010c 	add.w	r1, r5, #12
 800abdc:	300c      	adds	r0, #12
 800abde:	f000 ffaf 	bl	800bb40 <memcpy>
 800abe2:	2201      	movs	r2, #1
 800abe4:	4631      	mov	r1, r6
 800abe6:	4658      	mov	r0, fp
 800abe8:	f000 fc08 	bl	800b3fc <__lshift>
 800abec:	f10a 0301 	add.w	r3, sl, #1
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	9b00      	ldr	r3, [sp, #0]
 800abf4:	4453      	add	r3, sl
 800abf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abf8:	9b02      	ldr	r3, [sp, #8]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	462f      	mov	r7, r5
 800ac00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac02:	4605      	mov	r5, r0
 800ac04:	9b07      	ldr	r3, [sp, #28]
 800ac06:	4621      	mov	r1, r4
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	4648      	mov	r0, r9
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	f7ff fa98 	bl	800a142 <quorem>
 800ac12:	4639      	mov	r1, r7
 800ac14:	9002      	str	r0, [sp, #8]
 800ac16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac1a:	4648      	mov	r0, r9
 800ac1c:	f000 fc5a 	bl	800b4d4 <__mcmp>
 800ac20:	462a      	mov	r2, r5
 800ac22:	9008      	str	r0, [sp, #32]
 800ac24:	4621      	mov	r1, r4
 800ac26:	4658      	mov	r0, fp
 800ac28:	f000 fc70 	bl	800b50c <__mdiff>
 800ac2c:	68c2      	ldr	r2, [r0, #12]
 800ac2e:	4606      	mov	r6, r0
 800ac30:	bb02      	cbnz	r2, 800ac74 <_dtoa_r+0xa1c>
 800ac32:	4601      	mov	r1, r0
 800ac34:	4648      	mov	r0, r9
 800ac36:	f000 fc4d 	bl	800b4d4 <__mcmp>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4658      	mov	r0, fp
 800ac40:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac42:	f000 fa0d 	bl	800b060 <_Bfree>
 800ac46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac4a:	9e07      	ldr	r6, [sp, #28]
 800ac4c:	ea43 0102 	orr.w	r1, r3, r2
 800ac50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac52:	4319      	orrs	r1, r3
 800ac54:	d110      	bne.n	800ac78 <_dtoa_r+0xa20>
 800ac56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac5a:	d029      	beq.n	800acb0 <_dtoa_r+0xa58>
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dd02      	ble.n	800ac68 <_dtoa_r+0xa10>
 800ac62:	9b02      	ldr	r3, [sp, #8]
 800ac64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac68:	9b00      	ldr	r3, [sp, #0]
 800ac6a:	f883 8000 	strb.w	r8, [r3]
 800ac6e:	e63f      	b.n	800a8f0 <_dtoa_r+0x698>
 800ac70:	4628      	mov	r0, r5
 800ac72:	e7bb      	b.n	800abec <_dtoa_r+0x994>
 800ac74:	2201      	movs	r2, #1
 800ac76:	e7e1      	b.n	800ac3c <_dtoa_r+0x9e4>
 800ac78:	9b08      	ldr	r3, [sp, #32]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	db04      	blt.n	800ac88 <_dtoa_r+0xa30>
 800ac7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac80:	430b      	orrs	r3, r1
 800ac82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac84:	430b      	orrs	r3, r1
 800ac86:	d120      	bne.n	800acca <_dtoa_r+0xa72>
 800ac88:	2a00      	cmp	r2, #0
 800ac8a:	dded      	ble.n	800ac68 <_dtoa_r+0xa10>
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4658      	mov	r0, fp
 800ac92:	f000 fbb3 	bl	800b3fc <__lshift>
 800ac96:	4621      	mov	r1, r4
 800ac98:	4681      	mov	r9, r0
 800ac9a:	f000 fc1b 	bl	800b4d4 <__mcmp>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	dc03      	bgt.n	800acaa <_dtoa_r+0xa52>
 800aca2:	d1e1      	bne.n	800ac68 <_dtoa_r+0xa10>
 800aca4:	f018 0f01 	tst.w	r8, #1
 800aca8:	d0de      	beq.n	800ac68 <_dtoa_r+0xa10>
 800acaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acae:	d1d8      	bne.n	800ac62 <_dtoa_r+0xa0a>
 800acb0:	9a00      	ldr	r2, [sp, #0]
 800acb2:	2339      	movs	r3, #57	@ 0x39
 800acb4:	7013      	strb	r3, [r2, #0]
 800acb6:	4633      	mov	r3, r6
 800acb8:	461e      	mov	r6, r3
 800acba:	3b01      	subs	r3, #1
 800acbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acc0:	2a39      	cmp	r2, #57	@ 0x39
 800acc2:	d052      	beq.n	800ad6a <_dtoa_r+0xb12>
 800acc4:	3201      	adds	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e612      	b.n	800a8f0 <_dtoa_r+0x698>
 800acca:	2a00      	cmp	r2, #0
 800accc:	dd07      	ble.n	800acde <_dtoa_r+0xa86>
 800acce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acd2:	d0ed      	beq.n	800acb0 <_dtoa_r+0xa58>
 800acd4:	9a00      	ldr	r2, [sp, #0]
 800acd6:	f108 0301 	add.w	r3, r8, #1
 800acda:	7013      	strb	r3, [r2, #0]
 800acdc:	e608      	b.n	800a8f0 <_dtoa_r+0x698>
 800acde:	9b07      	ldr	r3, [sp, #28]
 800ace0:	9a07      	ldr	r2, [sp, #28]
 800ace2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ace6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace8:	4293      	cmp	r3, r2
 800acea:	d028      	beq.n	800ad3e <_dtoa_r+0xae6>
 800acec:	4649      	mov	r1, r9
 800acee:	2300      	movs	r3, #0
 800acf0:	220a      	movs	r2, #10
 800acf2:	4658      	mov	r0, fp
 800acf4:	f000 f9d6 	bl	800b0a4 <__multadd>
 800acf8:	42af      	cmp	r7, r5
 800acfa:	4681      	mov	r9, r0
 800acfc:	f04f 0300 	mov.w	r3, #0
 800ad00:	f04f 020a 	mov.w	r2, #10
 800ad04:	4639      	mov	r1, r7
 800ad06:	4658      	mov	r0, fp
 800ad08:	d107      	bne.n	800ad1a <_dtoa_r+0xac2>
 800ad0a:	f000 f9cb 	bl	800b0a4 <__multadd>
 800ad0e:	4607      	mov	r7, r0
 800ad10:	4605      	mov	r5, r0
 800ad12:	9b07      	ldr	r3, [sp, #28]
 800ad14:	3301      	adds	r3, #1
 800ad16:	9307      	str	r3, [sp, #28]
 800ad18:	e774      	b.n	800ac04 <_dtoa_r+0x9ac>
 800ad1a:	f000 f9c3 	bl	800b0a4 <__multadd>
 800ad1e:	4629      	mov	r1, r5
 800ad20:	4607      	mov	r7, r0
 800ad22:	2300      	movs	r3, #0
 800ad24:	220a      	movs	r2, #10
 800ad26:	4658      	mov	r0, fp
 800ad28:	f000 f9bc 	bl	800b0a4 <__multadd>
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	e7f0      	b.n	800ad12 <_dtoa_r+0xaba>
 800ad30:	9b00      	ldr	r3, [sp, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bfcc      	ite	gt
 800ad36:	461e      	movgt	r6, r3
 800ad38:	2601      	movle	r6, #1
 800ad3a:	4456      	add	r6, sl
 800ad3c:	2700      	movs	r7, #0
 800ad3e:	4649      	mov	r1, r9
 800ad40:	2201      	movs	r2, #1
 800ad42:	4658      	mov	r0, fp
 800ad44:	f000 fb5a 	bl	800b3fc <__lshift>
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4681      	mov	r9, r0
 800ad4c:	f000 fbc2 	bl	800b4d4 <__mcmp>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	dcb0      	bgt.n	800acb6 <_dtoa_r+0xa5e>
 800ad54:	d102      	bne.n	800ad5c <_dtoa_r+0xb04>
 800ad56:	f018 0f01 	tst.w	r8, #1
 800ad5a:	d1ac      	bne.n	800acb6 <_dtoa_r+0xa5e>
 800ad5c:	4633      	mov	r3, r6
 800ad5e:	461e      	mov	r6, r3
 800ad60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad64:	2a30      	cmp	r2, #48	@ 0x30
 800ad66:	d0fa      	beq.n	800ad5e <_dtoa_r+0xb06>
 800ad68:	e5c2      	b.n	800a8f0 <_dtoa_r+0x698>
 800ad6a:	459a      	cmp	sl, r3
 800ad6c:	d1a4      	bne.n	800acb8 <_dtoa_r+0xa60>
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	3301      	adds	r3, #1
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	2331      	movs	r3, #49	@ 0x31
 800ad76:	f88a 3000 	strb.w	r3, [sl]
 800ad7a:	e5b9      	b.n	800a8f0 <_dtoa_r+0x698>
 800ad7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800addc <_dtoa_r+0xb84>
 800ad82:	b11b      	cbz	r3, 800ad8c <_dtoa_r+0xb34>
 800ad84:	f10a 0308 	add.w	r3, sl, #8
 800ad88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	b019      	add	sp, #100	@ 0x64
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	f77f ae37 	ble.w	800aa0a <_dtoa_r+0x7b2>
 800ad9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ada0:	2001      	movs	r0, #1
 800ada2:	e655      	b.n	800aa50 <_dtoa_r+0x7f8>
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f77f aed6 	ble.w	800ab58 <_dtoa_r+0x900>
 800adac:	4656      	mov	r6, sl
 800adae:	4621      	mov	r1, r4
 800adb0:	4648      	mov	r0, r9
 800adb2:	f7ff f9c6 	bl	800a142 <quorem>
 800adb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adba:	f806 8b01 	strb.w	r8, [r6], #1
 800adbe:	9b00      	ldr	r3, [sp, #0]
 800adc0:	eba6 020a 	sub.w	r2, r6, sl
 800adc4:	4293      	cmp	r3, r2
 800adc6:	ddb3      	ble.n	800ad30 <_dtoa_r+0xad8>
 800adc8:	4649      	mov	r1, r9
 800adca:	2300      	movs	r3, #0
 800adcc:	220a      	movs	r2, #10
 800adce:	4658      	mov	r0, fp
 800add0:	f000 f968 	bl	800b0a4 <__multadd>
 800add4:	4681      	mov	r9, r0
 800add6:	e7ea      	b.n	800adae <_dtoa_r+0xb56>
 800add8:	0800dc44 	.word	0x0800dc44
 800addc:	0800dbc8 	.word	0x0800dbc8

0800ade0 <_free_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4605      	mov	r5, r0
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d041      	beq.n	800ae6c <_free_r+0x8c>
 800ade8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adec:	1f0c      	subs	r4, r1, #4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfb8      	it	lt
 800adf2:	18e4      	addlt	r4, r4, r3
 800adf4:	f000 f8e8 	bl	800afc8 <__malloc_lock>
 800adf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <_free_r+0x90>)
 800adfa:	6813      	ldr	r3, [r2, #0]
 800adfc:	b933      	cbnz	r3, 800ae0c <_free_r+0x2c>
 800adfe:	6063      	str	r3, [r4, #4]
 800ae00:	6014      	str	r4, [r2, #0]
 800ae02:	4628      	mov	r0, r5
 800ae04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae08:	f000 b8e4 	b.w	800afd4 <__malloc_unlock>
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	d908      	bls.n	800ae22 <_free_r+0x42>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	1821      	adds	r1, r4, r0
 800ae14:	428b      	cmp	r3, r1
 800ae16:	bf01      	itttt	eq
 800ae18:	6819      	ldreq	r1, [r3, #0]
 800ae1a:	685b      	ldreq	r3, [r3, #4]
 800ae1c:	1809      	addeq	r1, r1, r0
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	e7ed      	b.n	800adfe <_free_r+0x1e>
 800ae22:	461a      	mov	r2, r3
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	b10b      	cbz	r3, 800ae2c <_free_r+0x4c>
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d9fa      	bls.n	800ae22 <_free_r+0x42>
 800ae2c:	6811      	ldr	r1, [r2, #0]
 800ae2e:	1850      	adds	r0, r2, r1
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d10b      	bne.n	800ae4c <_free_r+0x6c>
 800ae34:	6820      	ldr	r0, [r4, #0]
 800ae36:	4401      	add	r1, r0
 800ae38:	1850      	adds	r0, r2, r1
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	6011      	str	r1, [r2, #0]
 800ae3e:	d1e0      	bne.n	800ae02 <_free_r+0x22>
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	6053      	str	r3, [r2, #4]
 800ae46:	4408      	add	r0, r1
 800ae48:	6010      	str	r0, [r2, #0]
 800ae4a:	e7da      	b.n	800ae02 <_free_r+0x22>
 800ae4c:	d902      	bls.n	800ae54 <_free_r+0x74>
 800ae4e:	230c      	movs	r3, #12
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	e7d6      	b.n	800ae02 <_free_r+0x22>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	1821      	adds	r1, r4, r0
 800ae58:	428b      	cmp	r3, r1
 800ae5a:	bf04      	itt	eq
 800ae5c:	6819      	ldreq	r1, [r3, #0]
 800ae5e:	685b      	ldreq	r3, [r3, #4]
 800ae60:	6063      	str	r3, [r4, #4]
 800ae62:	bf04      	itt	eq
 800ae64:	1809      	addeq	r1, r1, r0
 800ae66:	6021      	streq	r1, [r4, #0]
 800ae68:	6054      	str	r4, [r2, #4]
 800ae6a:	e7ca      	b.n	800ae02 <_free_r+0x22>
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000b0c 	.word	0x20000b0c

0800ae74 <malloc>:
 800ae74:	4b02      	ldr	r3, [pc, #8]	@ (800ae80 <malloc+0xc>)
 800ae76:	4601      	mov	r1, r0
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	f000 b825 	b.w	800aec8 <_malloc_r>
 800ae7e:	bf00      	nop
 800ae80:	20000058 	.word	0x20000058

0800ae84 <sbrk_aligned>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4e0f      	ldr	r6, [pc, #60]	@ (800aec4 <sbrk_aligned+0x40>)
 800ae88:	460c      	mov	r4, r1
 800ae8a:	6831      	ldr	r1, [r6, #0]
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	b911      	cbnz	r1, 800ae96 <sbrk_aligned+0x12>
 800ae90:	f000 fe46 	bl	800bb20 <_sbrk_r>
 800ae94:	6030      	str	r0, [r6, #0]
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 fe41 	bl	800bb20 <_sbrk_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d103      	bne.n	800aeaa <sbrk_aligned+0x26>
 800aea2:	f04f 34ff 	mov.w	r4, #4294967295
 800aea6:	4620      	mov	r0, r4
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	1cc4      	adds	r4, r0, #3
 800aeac:	f024 0403 	bic.w	r4, r4, #3
 800aeb0:	42a0      	cmp	r0, r4
 800aeb2:	d0f8      	beq.n	800aea6 <sbrk_aligned+0x22>
 800aeb4:	1a21      	subs	r1, r4, r0
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f000 fe32 	bl	800bb20 <_sbrk_r>
 800aebc:	3001      	adds	r0, #1
 800aebe:	d1f2      	bne.n	800aea6 <sbrk_aligned+0x22>
 800aec0:	e7ef      	b.n	800aea2 <sbrk_aligned+0x1e>
 800aec2:	bf00      	nop
 800aec4:	20000b08 	.word	0x20000b08

0800aec8 <_malloc_r>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	1ccd      	adds	r5, r1, #3
 800aece:	f025 0503 	bic.w	r5, r5, #3
 800aed2:	3508      	adds	r5, #8
 800aed4:	2d0c      	cmp	r5, #12
 800aed6:	bf38      	it	cc
 800aed8:	250c      	movcc	r5, #12
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	4606      	mov	r6, r0
 800aede:	db01      	blt.n	800aee4 <_malloc_r+0x1c>
 800aee0:	42a9      	cmp	r1, r5
 800aee2:	d904      	bls.n	800aeee <_malloc_r+0x26>
 800aee4:	230c      	movs	r3, #12
 800aee6:	6033      	str	r3, [r6, #0]
 800aee8:	2000      	movs	r0, #0
 800aeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afc4 <_malloc_r+0xfc>
 800aef2:	f000 f869 	bl	800afc8 <__malloc_lock>
 800aef6:	f8d8 3000 	ldr.w	r3, [r8]
 800aefa:	461c      	mov	r4, r3
 800aefc:	bb44      	cbnz	r4, 800af50 <_malloc_r+0x88>
 800aefe:	4629      	mov	r1, r5
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff ffbf 	bl	800ae84 <sbrk_aligned>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	4604      	mov	r4, r0
 800af0a:	d158      	bne.n	800afbe <_malloc_r+0xf6>
 800af0c:	f8d8 4000 	ldr.w	r4, [r8]
 800af10:	4627      	mov	r7, r4
 800af12:	2f00      	cmp	r7, #0
 800af14:	d143      	bne.n	800af9e <_malloc_r+0xd6>
 800af16:	2c00      	cmp	r4, #0
 800af18:	d04b      	beq.n	800afb2 <_malloc_r+0xea>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	4639      	mov	r1, r7
 800af1e:	4630      	mov	r0, r6
 800af20:	eb04 0903 	add.w	r9, r4, r3
 800af24:	f000 fdfc 	bl	800bb20 <_sbrk_r>
 800af28:	4581      	cmp	r9, r0
 800af2a:	d142      	bne.n	800afb2 <_malloc_r+0xea>
 800af2c:	6821      	ldr	r1, [r4, #0]
 800af2e:	1a6d      	subs	r5, r5, r1
 800af30:	4629      	mov	r1, r5
 800af32:	4630      	mov	r0, r6
 800af34:	f7ff ffa6 	bl	800ae84 <sbrk_aligned>
 800af38:	3001      	adds	r0, #1
 800af3a:	d03a      	beq.n	800afb2 <_malloc_r+0xea>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	442b      	add	r3, r5
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	f8d8 3000 	ldr.w	r3, [r8]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	bb62      	cbnz	r2, 800afa4 <_malloc_r+0xdc>
 800af4a:	f8c8 7000 	str.w	r7, [r8]
 800af4e:	e00f      	b.n	800af70 <_malloc_r+0xa8>
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	1b52      	subs	r2, r2, r5
 800af54:	d420      	bmi.n	800af98 <_malloc_r+0xd0>
 800af56:	2a0b      	cmp	r2, #11
 800af58:	d917      	bls.n	800af8a <_malloc_r+0xc2>
 800af5a:	1961      	adds	r1, r4, r5
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	6025      	str	r5, [r4, #0]
 800af60:	bf18      	it	ne
 800af62:	6059      	strne	r1, [r3, #4]
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	bf08      	it	eq
 800af68:	f8c8 1000 	streq.w	r1, [r8]
 800af6c:	5162      	str	r2, [r4, r5]
 800af6e:	604b      	str	r3, [r1, #4]
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f82f 	bl	800afd4 <__malloc_unlock>
 800af76:	f104 000b 	add.w	r0, r4, #11
 800af7a:	1d23      	adds	r3, r4, #4
 800af7c:	f020 0007 	bic.w	r0, r0, #7
 800af80:	1ac2      	subs	r2, r0, r3
 800af82:	bf1c      	itt	ne
 800af84:	1a1b      	subne	r3, r3, r0
 800af86:	50a3      	strne	r3, [r4, r2]
 800af88:	e7af      	b.n	800aeea <_malloc_r+0x22>
 800af8a:	6862      	ldr	r2, [r4, #4]
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	bf0c      	ite	eq
 800af90:	f8c8 2000 	streq.w	r2, [r8]
 800af94:	605a      	strne	r2, [r3, #4]
 800af96:	e7eb      	b.n	800af70 <_malloc_r+0xa8>
 800af98:	4623      	mov	r3, r4
 800af9a:	6864      	ldr	r4, [r4, #4]
 800af9c:	e7ae      	b.n	800aefc <_malloc_r+0x34>
 800af9e:	463c      	mov	r4, r7
 800afa0:	687f      	ldr	r7, [r7, #4]
 800afa2:	e7b6      	b.n	800af12 <_malloc_r+0x4a>
 800afa4:	461a      	mov	r2, r3
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	42a3      	cmp	r3, r4
 800afaa:	d1fb      	bne.n	800afa4 <_malloc_r+0xdc>
 800afac:	2300      	movs	r3, #0
 800afae:	6053      	str	r3, [r2, #4]
 800afb0:	e7de      	b.n	800af70 <_malloc_r+0xa8>
 800afb2:	230c      	movs	r3, #12
 800afb4:	6033      	str	r3, [r6, #0]
 800afb6:	4630      	mov	r0, r6
 800afb8:	f000 f80c 	bl	800afd4 <__malloc_unlock>
 800afbc:	e794      	b.n	800aee8 <_malloc_r+0x20>
 800afbe:	6005      	str	r5, [r0, #0]
 800afc0:	e7d6      	b.n	800af70 <_malloc_r+0xa8>
 800afc2:	bf00      	nop
 800afc4:	20000b0c 	.word	0x20000b0c

0800afc8 <__malloc_lock>:
 800afc8:	4801      	ldr	r0, [pc, #4]	@ (800afd0 <__malloc_lock+0x8>)
 800afca:	f7ff b8b8 	b.w	800a13e <__retarget_lock_acquire_recursive>
 800afce:	bf00      	nop
 800afd0:	20000b04 	.word	0x20000b04

0800afd4 <__malloc_unlock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	@ (800afdc <__malloc_unlock+0x8>)
 800afd6:	f7ff b8b3 	b.w	800a140 <__retarget_lock_release_recursive>
 800afda:	bf00      	nop
 800afdc:	20000b04 	.word	0x20000b04

0800afe0 <_Balloc>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	69c6      	ldr	r6, [r0, #28]
 800afe4:	4604      	mov	r4, r0
 800afe6:	460d      	mov	r5, r1
 800afe8:	b976      	cbnz	r6, 800b008 <_Balloc+0x28>
 800afea:	2010      	movs	r0, #16
 800afec:	f7ff ff42 	bl	800ae74 <malloc>
 800aff0:	4602      	mov	r2, r0
 800aff2:	61e0      	str	r0, [r4, #28]
 800aff4:	b920      	cbnz	r0, 800b000 <_Balloc+0x20>
 800aff6:	4b18      	ldr	r3, [pc, #96]	@ (800b058 <_Balloc+0x78>)
 800aff8:	4818      	ldr	r0, [pc, #96]	@ (800b05c <_Balloc+0x7c>)
 800affa:	216b      	movs	r1, #107	@ 0x6b
 800affc:	f000 fdae 	bl	800bb5c <__assert_func>
 800b000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b004:	6006      	str	r6, [r0, #0]
 800b006:	60c6      	str	r6, [r0, #12]
 800b008:	69e6      	ldr	r6, [r4, #28]
 800b00a:	68f3      	ldr	r3, [r6, #12]
 800b00c:	b183      	cbz	r3, 800b030 <_Balloc+0x50>
 800b00e:	69e3      	ldr	r3, [r4, #28]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b016:	b9b8      	cbnz	r0, 800b048 <_Balloc+0x68>
 800b018:	2101      	movs	r1, #1
 800b01a:	fa01 f605 	lsl.w	r6, r1, r5
 800b01e:	1d72      	adds	r2, r6, #5
 800b020:	0092      	lsls	r2, r2, #2
 800b022:	4620      	mov	r0, r4
 800b024:	f000 fdb8 	bl	800bb98 <_calloc_r>
 800b028:	b160      	cbz	r0, 800b044 <_Balloc+0x64>
 800b02a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b02e:	e00e      	b.n	800b04e <_Balloc+0x6e>
 800b030:	2221      	movs	r2, #33	@ 0x21
 800b032:	2104      	movs	r1, #4
 800b034:	4620      	mov	r0, r4
 800b036:	f000 fdaf 	bl	800bb98 <_calloc_r>
 800b03a:	69e3      	ldr	r3, [r4, #28]
 800b03c:	60f0      	str	r0, [r6, #12]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e4      	bne.n	800b00e <_Balloc+0x2e>
 800b044:	2000      	movs	r0, #0
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	6802      	ldr	r2, [r0, #0]
 800b04a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b04e:	2300      	movs	r3, #0
 800b050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b054:	e7f7      	b.n	800b046 <_Balloc+0x66>
 800b056:	bf00      	nop
 800b058:	0800dbd5 	.word	0x0800dbd5
 800b05c:	0800dc55 	.word	0x0800dc55

0800b060 <_Bfree>:
 800b060:	b570      	push	{r4, r5, r6, lr}
 800b062:	69c6      	ldr	r6, [r0, #28]
 800b064:	4605      	mov	r5, r0
 800b066:	460c      	mov	r4, r1
 800b068:	b976      	cbnz	r6, 800b088 <_Bfree+0x28>
 800b06a:	2010      	movs	r0, #16
 800b06c:	f7ff ff02 	bl	800ae74 <malloc>
 800b070:	4602      	mov	r2, r0
 800b072:	61e8      	str	r0, [r5, #28]
 800b074:	b920      	cbnz	r0, 800b080 <_Bfree+0x20>
 800b076:	4b09      	ldr	r3, [pc, #36]	@ (800b09c <_Bfree+0x3c>)
 800b078:	4809      	ldr	r0, [pc, #36]	@ (800b0a0 <_Bfree+0x40>)
 800b07a:	218f      	movs	r1, #143	@ 0x8f
 800b07c:	f000 fd6e 	bl	800bb5c <__assert_func>
 800b080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b084:	6006      	str	r6, [r0, #0]
 800b086:	60c6      	str	r6, [r0, #12]
 800b088:	b13c      	cbz	r4, 800b09a <_Bfree+0x3a>
 800b08a:	69eb      	ldr	r3, [r5, #28]
 800b08c:	6862      	ldr	r2, [r4, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b094:	6021      	str	r1, [r4, #0]
 800b096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
 800b09c:	0800dbd5 	.word	0x0800dbd5
 800b0a0:	0800dc55 	.word	0x0800dc55

0800b0a4 <__multadd>:
 800b0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a8:	690d      	ldr	r5, [r1, #16]
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	461e      	mov	r6, r3
 800b0b0:	f101 0c14 	add.w	ip, r1, #20
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b0ba:	b299      	uxth	r1, r3
 800b0bc:	fb02 6101 	mla	r1, r2, r1, r6
 800b0c0:	0c1e      	lsrs	r6, r3, #16
 800b0c2:	0c0b      	lsrs	r3, r1, #16
 800b0c4:	fb02 3306 	mla	r3, r2, r6, r3
 800b0c8:	b289      	uxth	r1, r1
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0d0:	4285      	cmp	r5, r0
 800b0d2:	f84c 1b04 	str.w	r1, [ip], #4
 800b0d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0da:	dcec      	bgt.n	800b0b6 <__multadd+0x12>
 800b0dc:	b30e      	cbz	r6, 800b122 <__multadd+0x7e>
 800b0de:	68a3      	ldr	r3, [r4, #8]
 800b0e0:	42ab      	cmp	r3, r5
 800b0e2:	dc19      	bgt.n	800b118 <__multadd+0x74>
 800b0e4:	6861      	ldr	r1, [r4, #4]
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	3101      	adds	r1, #1
 800b0ea:	f7ff ff79 	bl	800afe0 <_Balloc>
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	b928      	cbnz	r0, 800b0fe <__multadd+0x5a>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <__multadd+0x84>)
 800b0f6:	480d      	ldr	r0, [pc, #52]	@ (800b12c <__multadd+0x88>)
 800b0f8:	21ba      	movs	r1, #186	@ 0xba
 800b0fa:	f000 fd2f 	bl	800bb5c <__assert_func>
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	3202      	adds	r2, #2
 800b102:	f104 010c 	add.w	r1, r4, #12
 800b106:	0092      	lsls	r2, r2, #2
 800b108:	300c      	adds	r0, #12
 800b10a:	f000 fd19 	bl	800bb40 <memcpy>
 800b10e:	4621      	mov	r1, r4
 800b110:	4638      	mov	r0, r7
 800b112:	f7ff ffa5 	bl	800b060 <_Bfree>
 800b116:	4644      	mov	r4, r8
 800b118:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b11c:	3501      	adds	r5, #1
 800b11e:	615e      	str	r6, [r3, #20]
 800b120:	6125      	str	r5, [r4, #16]
 800b122:	4620      	mov	r0, r4
 800b124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b128:	0800dc44 	.word	0x0800dc44
 800b12c:	0800dc55 	.word	0x0800dc55

0800b130 <__hi0bits>:
 800b130:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b134:	4603      	mov	r3, r0
 800b136:	bf36      	itet	cc
 800b138:	0403      	lslcc	r3, r0, #16
 800b13a:	2000      	movcs	r0, #0
 800b13c:	2010      	movcc	r0, #16
 800b13e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b142:	bf3c      	itt	cc
 800b144:	021b      	lslcc	r3, r3, #8
 800b146:	3008      	addcc	r0, #8
 800b148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b14c:	bf3c      	itt	cc
 800b14e:	011b      	lslcc	r3, r3, #4
 800b150:	3004      	addcc	r0, #4
 800b152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b156:	bf3c      	itt	cc
 800b158:	009b      	lslcc	r3, r3, #2
 800b15a:	3002      	addcc	r0, #2
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	db05      	blt.n	800b16c <__hi0bits+0x3c>
 800b160:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b164:	f100 0001 	add.w	r0, r0, #1
 800b168:	bf08      	it	eq
 800b16a:	2020      	moveq	r0, #32
 800b16c:	4770      	bx	lr

0800b16e <__lo0bits>:
 800b16e:	6803      	ldr	r3, [r0, #0]
 800b170:	4602      	mov	r2, r0
 800b172:	f013 0007 	ands.w	r0, r3, #7
 800b176:	d00b      	beq.n	800b190 <__lo0bits+0x22>
 800b178:	07d9      	lsls	r1, r3, #31
 800b17a:	d421      	bmi.n	800b1c0 <__lo0bits+0x52>
 800b17c:	0798      	lsls	r0, r3, #30
 800b17e:	bf49      	itett	mi
 800b180:	085b      	lsrmi	r3, r3, #1
 800b182:	089b      	lsrpl	r3, r3, #2
 800b184:	2001      	movmi	r0, #1
 800b186:	6013      	strmi	r3, [r2, #0]
 800b188:	bf5c      	itt	pl
 800b18a:	6013      	strpl	r3, [r2, #0]
 800b18c:	2002      	movpl	r0, #2
 800b18e:	4770      	bx	lr
 800b190:	b299      	uxth	r1, r3
 800b192:	b909      	cbnz	r1, 800b198 <__lo0bits+0x2a>
 800b194:	0c1b      	lsrs	r3, r3, #16
 800b196:	2010      	movs	r0, #16
 800b198:	b2d9      	uxtb	r1, r3
 800b19a:	b909      	cbnz	r1, 800b1a0 <__lo0bits+0x32>
 800b19c:	3008      	adds	r0, #8
 800b19e:	0a1b      	lsrs	r3, r3, #8
 800b1a0:	0719      	lsls	r1, r3, #28
 800b1a2:	bf04      	itt	eq
 800b1a4:	091b      	lsreq	r3, r3, #4
 800b1a6:	3004      	addeq	r0, #4
 800b1a8:	0799      	lsls	r1, r3, #30
 800b1aa:	bf04      	itt	eq
 800b1ac:	089b      	lsreq	r3, r3, #2
 800b1ae:	3002      	addeq	r0, #2
 800b1b0:	07d9      	lsls	r1, r3, #31
 800b1b2:	d403      	bmi.n	800b1bc <__lo0bits+0x4e>
 800b1b4:	085b      	lsrs	r3, r3, #1
 800b1b6:	f100 0001 	add.w	r0, r0, #1
 800b1ba:	d003      	beq.n	800b1c4 <__lo0bits+0x56>
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	4770      	bx	lr
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	4770      	bx	lr
 800b1c4:	2020      	movs	r0, #32
 800b1c6:	4770      	bx	lr

0800b1c8 <__i2b>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	f7ff ff07 	bl	800afe0 <_Balloc>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	b928      	cbnz	r0, 800b1e2 <__i2b+0x1a>
 800b1d6:	4b05      	ldr	r3, [pc, #20]	@ (800b1ec <__i2b+0x24>)
 800b1d8:	4805      	ldr	r0, [pc, #20]	@ (800b1f0 <__i2b+0x28>)
 800b1da:	f240 1145 	movw	r1, #325	@ 0x145
 800b1de:	f000 fcbd 	bl	800bb5c <__assert_func>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	6144      	str	r4, [r0, #20]
 800b1e6:	6103      	str	r3, [r0, #16]
 800b1e8:	bd10      	pop	{r4, pc}
 800b1ea:	bf00      	nop
 800b1ec:	0800dc44 	.word	0x0800dc44
 800b1f0:	0800dc55 	.word	0x0800dc55

0800b1f4 <__multiply>:
 800b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f8:	4614      	mov	r4, r2
 800b1fa:	690a      	ldr	r2, [r1, #16]
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	bfa8      	it	ge
 800b202:	4623      	movge	r3, r4
 800b204:	460f      	mov	r7, r1
 800b206:	bfa4      	itt	ge
 800b208:	460c      	movge	r4, r1
 800b20a:	461f      	movge	r7, r3
 800b20c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b210:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b214:	68a3      	ldr	r3, [r4, #8]
 800b216:	6861      	ldr	r1, [r4, #4]
 800b218:	eb0a 0609 	add.w	r6, sl, r9
 800b21c:	42b3      	cmp	r3, r6
 800b21e:	b085      	sub	sp, #20
 800b220:	bfb8      	it	lt
 800b222:	3101      	addlt	r1, #1
 800b224:	f7ff fedc 	bl	800afe0 <_Balloc>
 800b228:	b930      	cbnz	r0, 800b238 <__multiply+0x44>
 800b22a:	4602      	mov	r2, r0
 800b22c:	4b44      	ldr	r3, [pc, #272]	@ (800b340 <__multiply+0x14c>)
 800b22e:	4845      	ldr	r0, [pc, #276]	@ (800b344 <__multiply+0x150>)
 800b230:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b234:	f000 fc92 	bl	800bb5c <__assert_func>
 800b238:	f100 0514 	add.w	r5, r0, #20
 800b23c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b240:	462b      	mov	r3, r5
 800b242:	2200      	movs	r2, #0
 800b244:	4543      	cmp	r3, r8
 800b246:	d321      	bcc.n	800b28c <__multiply+0x98>
 800b248:	f107 0114 	add.w	r1, r7, #20
 800b24c:	f104 0214 	add.w	r2, r4, #20
 800b250:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b254:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b258:	9302      	str	r3, [sp, #8]
 800b25a:	1b13      	subs	r3, r2, r4
 800b25c:	3b15      	subs	r3, #21
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	3304      	adds	r3, #4
 800b264:	f104 0715 	add.w	r7, r4, #21
 800b268:	42ba      	cmp	r2, r7
 800b26a:	bf38      	it	cc
 800b26c:	2304      	movcc	r3, #4
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	9b02      	ldr	r3, [sp, #8]
 800b272:	9103      	str	r1, [sp, #12]
 800b274:	428b      	cmp	r3, r1
 800b276:	d80c      	bhi.n	800b292 <__multiply+0x9e>
 800b278:	2e00      	cmp	r6, #0
 800b27a:	dd03      	ble.n	800b284 <__multiply+0x90>
 800b27c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b280:	2b00      	cmp	r3, #0
 800b282:	d05b      	beq.n	800b33c <__multiply+0x148>
 800b284:	6106      	str	r6, [r0, #16]
 800b286:	b005      	add	sp, #20
 800b288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28c:	f843 2b04 	str.w	r2, [r3], #4
 800b290:	e7d8      	b.n	800b244 <__multiply+0x50>
 800b292:	f8b1 a000 	ldrh.w	sl, [r1]
 800b296:	f1ba 0f00 	cmp.w	sl, #0
 800b29a:	d024      	beq.n	800b2e6 <__multiply+0xf2>
 800b29c:	f104 0e14 	add.w	lr, r4, #20
 800b2a0:	46a9      	mov	r9, r5
 800b2a2:	f04f 0c00 	mov.w	ip, #0
 800b2a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2aa:	f8d9 3000 	ldr.w	r3, [r9]
 800b2ae:	fa1f fb87 	uxth.w	fp, r7
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b2bc:	f8d9 7000 	ldr.w	r7, [r9]
 800b2c0:	4463      	add	r3, ip
 800b2c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800b2ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2d4:	4572      	cmp	r2, lr
 800b2d6:	f849 3b04 	str.w	r3, [r9], #4
 800b2da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2de:	d8e2      	bhi.n	800b2a6 <__multiply+0xb2>
 800b2e0:	9b01      	ldr	r3, [sp, #4]
 800b2e2:	f845 c003 	str.w	ip, [r5, r3]
 800b2e6:	9b03      	ldr	r3, [sp, #12]
 800b2e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b2ec:	3104      	adds	r1, #4
 800b2ee:	f1b9 0f00 	cmp.w	r9, #0
 800b2f2:	d021      	beq.n	800b338 <__multiply+0x144>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	f104 0c14 	add.w	ip, r4, #20
 800b2fa:	46ae      	mov	lr, r5
 800b2fc:	f04f 0a00 	mov.w	sl, #0
 800b300:	f8bc b000 	ldrh.w	fp, [ip]
 800b304:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b308:	fb09 770b 	mla	r7, r9, fp, r7
 800b30c:	4457      	add	r7, sl
 800b30e:	b29b      	uxth	r3, r3
 800b310:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b314:	f84e 3b04 	str.w	r3, [lr], #4
 800b318:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b31c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b320:	f8be 3000 	ldrh.w	r3, [lr]
 800b324:	fb09 330a 	mla	r3, r9, sl, r3
 800b328:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b32c:	4562      	cmp	r2, ip
 800b32e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b332:	d8e5      	bhi.n	800b300 <__multiply+0x10c>
 800b334:	9f01      	ldr	r7, [sp, #4]
 800b336:	51eb      	str	r3, [r5, r7]
 800b338:	3504      	adds	r5, #4
 800b33a:	e799      	b.n	800b270 <__multiply+0x7c>
 800b33c:	3e01      	subs	r6, #1
 800b33e:	e79b      	b.n	800b278 <__multiply+0x84>
 800b340:	0800dc44 	.word	0x0800dc44
 800b344:	0800dc55 	.word	0x0800dc55

0800b348 <__pow5mult>:
 800b348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b34c:	4615      	mov	r5, r2
 800b34e:	f012 0203 	ands.w	r2, r2, #3
 800b352:	4607      	mov	r7, r0
 800b354:	460e      	mov	r6, r1
 800b356:	d007      	beq.n	800b368 <__pow5mult+0x20>
 800b358:	4c25      	ldr	r4, [pc, #148]	@ (800b3f0 <__pow5mult+0xa8>)
 800b35a:	3a01      	subs	r2, #1
 800b35c:	2300      	movs	r3, #0
 800b35e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b362:	f7ff fe9f 	bl	800b0a4 <__multadd>
 800b366:	4606      	mov	r6, r0
 800b368:	10ad      	asrs	r5, r5, #2
 800b36a:	d03d      	beq.n	800b3e8 <__pow5mult+0xa0>
 800b36c:	69fc      	ldr	r4, [r7, #28]
 800b36e:	b97c      	cbnz	r4, 800b390 <__pow5mult+0x48>
 800b370:	2010      	movs	r0, #16
 800b372:	f7ff fd7f 	bl	800ae74 <malloc>
 800b376:	4602      	mov	r2, r0
 800b378:	61f8      	str	r0, [r7, #28]
 800b37a:	b928      	cbnz	r0, 800b388 <__pow5mult+0x40>
 800b37c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f4 <__pow5mult+0xac>)
 800b37e:	481e      	ldr	r0, [pc, #120]	@ (800b3f8 <__pow5mult+0xb0>)
 800b380:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b384:	f000 fbea 	bl	800bb5c <__assert_func>
 800b388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b38c:	6004      	str	r4, [r0, #0]
 800b38e:	60c4      	str	r4, [r0, #12]
 800b390:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b398:	b94c      	cbnz	r4, 800b3ae <__pow5mult+0x66>
 800b39a:	f240 2171 	movw	r1, #625	@ 0x271
 800b39e:	4638      	mov	r0, r7
 800b3a0:	f7ff ff12 	bl	800b1c8 <__i2b>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	6003      	str	r3, [r0, #0]
 800b3ae:	f04f 0900 	mov.w	r9, #0
 800b3b2:	07eb      	lsls	r3, r5, #31
 800b3b4:	d50a      	bpl.n	800b3cc <__pow5mult+0x84>
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	4622      	mov	r2, r4
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f7ff ff1a 	bl	800b1f4 <__multiply>
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f7ff fe4b 	bl	800b060 <_Bfree>
 800b3ca:	4646      	mov	r6, r8
 800b3cc:	106d      	asrs	r5, r5, #1
 800b3ce:	d00b      	beq.n	800b3e8 <__pow5mult+0xa0>
 800b3d0:	6820      	ldr	r0, [r4, #0]
 800b3d2:	b938      	cbnz	r0, 800b3e4 <__pow5mult+0x9c>
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f7ff ff0b 	bl	800b1f4 <__multiply>
 800b3de:	6020      	str	r0, [r4, #0]
 800b3e0:	f8c0 9000 	str.w	r9, [r0]
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	e7e4      	b.n	800b3b2 <__pow5mult+0x6a>
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ee:	bf00      	nop
 800b3f0:	0800dcb0 	.word	0x0800dcb0
 800b3f4:	0800dbd5 	.word	0x0800dbd5
 800b3f8:	0800dc55 	.word	0x0800dc55

0800b3fc <__lshift>:
 800b3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	460c      	mov	r4, r1
 800b402:	6849      	ldr	r1, [r1, #4]
 800b404:	6923      	ldr	r3, [r4, #16]
 800b406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	4607      	mov	r7, r0
 800b40e:	4691      	mov	r9, r2
 800b410:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b414:	f108 0601 	add.w	r6, r8, #1
 800b418:	42b3      	cmp	r3, r6
 800b41a:	db0b      	blt.n	800b434 <__lshift+0x38>
 800b41c:	4638      	mov	r0, r7
 800b41e:	f7ff fddf 	bl	800afe0 <_Balloc>
 800b422:	4605      	mov	r5, r0
 800b424:	b948      	cbnz	r0, 800b43a <__lshift+0x3e>
 800b426:	4602      	mov	r2, r0
 800b428:	4b28      	ldr	r3, [pc, #160]	@ (800b4cc <__lshift+0xd0>)
 800b42a:	4829      	ldr	r0, [pc, #164]	@ (800b4d0 <__lshift+0xd4>)
 800b42c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b430:	f000 fb94 	bl	800bb5c <__assert_func>
 800b434:	3101      	adds	r1, #1
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	e7ee      	b.n	800b418 <__lshift+0x1c>
 800b43a:	2300      	movs	r3, #0
 800b43c:	f100 0114 	add.w	r1, r0, #20
 800b440:	f100 0210 	add.w	r2, r0, #16
 800b444:	4618      	mov	r0, r3
 800b446:	4553      	cmp	r3, sl
 800b448:	db33      	blt.n	800b4b2 <__lshift+0xb6>
 800b44a:	6920      	ldr	r0, [r4, #16]
 800b44c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b450:	f104 0314 	add.w	r3, r4, #20
 800b454:	f019 091f 	ands.w	r9, r9, #31
 800b458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b45c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b460:	d02b      	beq.n	800b4ba <__lshift+0xbe>
 800b462:	f1c9 0e20 	rsb	lr, r9, #32
 800b466:	468a      	mov	sl, r1
 800b468:	2200      	movs	r2, #0
 800b46a:	6818      	ldr	r0, [r3, #0]
 800b46c:	fa00 f009 	lsl.w	r0, r0, r9
 800b470:	4310      	orrs	r0, r2
 800b472:	f84a 0b04 	str.w	r0, [sl], #4
 800b476:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47a:	459c      	cmp	ip, r3
 800b47c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b480:	d8f3      	bhi.n	800b46a <__lshift+0x6e>
 800b482:	ebac 0304 	sub.w	r3, ip, r4
 800b486:	3b15      	subs	r3, #21
 800b488:	f023 0303 	bic.w	r3, r3, #3
 800b48c:	3304      	adds	r3, #4
 800b48e:	f104 0015 	add.w	r0, r4, #21
 800b492:	4584      	cmp	ip, r0
 800b494:	bf38      	it	cc
 800b496:	2304      	movcc	r3, #4
 800b498:	50ca      	str	r2, [r1, r3]
 800b49a:	b10a      	cbz	r2, 800b4a0 <__lshift+0xa4>
 800b49c:	f108 0602 	add.w	r6, r8, #2
 800b4a0:	3e01      	subs	r6, #1
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	612e      	str	r6, [r5, #16]
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f7ff fdda 	bl	800b060 <_Bfree>
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	e7c5      	b.n	800b446 <__lshift+0x4a>
 800b4ba:	3904      	subs	r1, #4
 800b4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4c4:	459c      	cmp	ip, r3
 800b4c6:	d8f9      	bhi.n	800b4bc <__lshift+0xc0>
 800b4c8:	e7ea      	b.n	800b4a0 <__lshift+0xa4>
 800b4ca:	bf00      	nop
 800b4cc:	0800dc44 	.word	0x0800dc44
 800b4d0:	0800dc55 	.word	0x0800dc55

0800b4d4 <__mcmp>:
 800b4d4:	690a      	ldr	r2, [r1, #16]
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	6900      	ldr	r0, [r0, #16]
 800b4da:	1a80      	subs	r0, r0, r2
 800b4dc:	b530      	push	{r4, r5, lr}
 800b4de:	d10e      	bne.n	800b4fe <__mcmp+0x2a>
 800b4e0:	3314      	adds	r3, #20
 800b4e2:	3114      	adds	r1, #20
 800b4e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b4ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b4f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4f4:	4295      	cmp	r5, r2
 800b4f6:	d003      	beq.n	800b500 <__mcmp+0x2c>
 800b4f8:	d205      	bcs.n	800b506 <__mcmp+0x32>
 800b4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fe:	bd30      	pop	{r4, r5, pc}
 800b500:	42a3      	cmp	r3, r4
 800b502:	d3f3      	bcc.n	800b4ec <__mcmp+0x18>
 800b504:	e7fb      	b.n	800b4fe <__mcmp+0x2a>
 800b506:	2001      	movs	r0, #1
 800b508:	e7f9      	b.n	800b4fe <__mcmp+0x2a>
	...

0800b50c <__mdiff>:
 800b50c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	4689      	mov	r9, r1
 800b512:	4606      	mov	r6, r0
 800b514:	4611      	mov	r1, r2
 800b516:	4648      	mov	r0, r9
 800b518:	4614      	mov	r4, r2
 800b51a:	f7ff ffdb 	bl	800b4d4 <__mcmp>
 800b51e:	1e05      	subs	r5, r0, #0
 800b520:	d112      	bne.n	800b548 <__mdiff+0x3c>
 800b522:	4629      	mov	r1, r5
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff fd5b 	bl	800afe0 <_Balloc>
 800b52a:	4602      	mov	r2, r0
 800b52c:	b928      	cbnz	r0, 800b53a <__mdiff+0x2e>
 800b52e:	4b3f      	ldr	r3, [pc, #252]	@ (800b62c <__mdiff+0x120>)
 800b530:	f240 2137 	movw	r1, #567	@ 0x237
 800b534:	483e      	ldr	r0, [pc, #248]	@ (800b630 <__mdiff+0x124>)
 800b536:	f000 fb11 	bl	800bb5c <__assert_func>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b540:	4610      	mov	r0, r2
 800b542:	b003      	add	sp, #12
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	bfbc      	itt	lt
 800b54a:	464b      	movlt	r3, r9
 800b54c:	46a1      	movlt	r9, r4
 800b54e:	4630      	mov	r0, r6
 800b550:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b554:	bfba      	itte	lt
 800b556:	461c      	movlt	r4, r3
 800b558:	2501      	movlt	r5, #1
 800b55a:	2500      	movge	r5, #0
 800b55c:	f7ff fd40 	bl	800afe0 <_Balloc>
 800b560:	4602      	mov	r2, r0
 800b562:	b918      	cbnz	r0, 800b56c <__mdiff+0x60>
 800b564:	4b31      	ldr	r3, [pc, #196]	@ (800b62c <__mdiff+0x120>)
 800b566:	f240 2145 	movw	r1, #581	@ 0x245
 800b56a:	e7e3      	b.n	800b534 <__mdiff+0x28>
 800b56c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b570:	6926      	ldr	r6, [r4, #16]
 800b572:	60c5      	str	r5, [r0, #12]
 800b574:	f109 0310 	add.w	r3, r9, #16
 800b578:	f109 0514 	add.w	r5, r9, #20
 800b57c:	f104 0e14 	add.w	lr, r4, #20
 800b580:	f100 0b14 	add.w	fp, r0, #20
 800b584:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b588:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	46d9      	mov	r9, fp
 800b590:	f04f 0c00 	mov.w	ip, #0
 800b594:	9b01      	ldr	r3, [sp, #4]
 800b596:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b59a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	fa1f f38a 	uxth.w	r3, sl
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	b283      	uxth	r3, r0
 800b5a8:	1acb      	subs	r3, r1, r3
 800b5aa:	0c00      	lsrs	r0, r0, #16
 800b5ac:	4463      	add	r3, ip
 800b5ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5bc:	4576      	cmp	r6, lr
 800b5be:	f849 3b04 	str.w	r3, [r9], #4
 800b5c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5c6:	d8e5      	bhi.n	800b594 <__mdiff+0x88>
 800b5c8:	1b33      	subs	r3, r6, r4
 800b5ca:	3b15      	subs	r3, #21
 800b5cc:	f023 0303 	bic.w	r3, r3, #3
 800b5d0:	3415      	adds	r4, #21
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	42a6      	cmp	r6, r4
 800b5d6:	bf38      	it	cc
 800b5d8:	2304      	movcc	r3, #4
 800b5da:	441d      	add	r5, r3
 800b5dc:	445b      	add	r3, fp
 800b5de:	461e      	mov	r6, r3
 800b5e0:	462c      	mov	r4, r5
 800b5e2:	4544      	cmp	r4, r8
 800b5e4:	d30e      	bcc.n	800b604 <__mdiff+0xf8>
 800b5e6:	f108 0103 	add.w	r1, r8, #3
 800b5ea:	1b49      	subs	r1, r1, r5
 800b5ec:	f021 0103 	bic.w	r1, r1, #3
 800b5f0:	3d03      	subs	r5, #3
 800b5f2:	45a8      	cmp	r8, r5
 800b5f4:	bf38      	it	cc
 800b5f6:	2100      	movcc	r1, #0
 800b5f8:	440b      	add	r3, r1
 800b5fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5fe:	b191      	cbz	r1, 800b626 <__mdiff+0x11a>
 800b600:	6117      	str	r7, [r2, #16]
 800b602:	e79d      	b.n	800b540 <__mdiff+0x34>
 800b604:	f854 1b04 	ldr.w	r1, [r4], #4
 800b608:	46e6      	mov	lr, ip
 800b60a:	0c08      	lsrs	r0, r1, #16
 800b60c:	fa1c fc81 	uxtah	ip, ip, r1
 800b610:	4471      	add	r1, lr
 800b612:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b616:	b289      	uxth	r1, r1
 800b618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b61c:	f846 1b04 	str.w	r1, [r6], #4
 800b620:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b624:	e7dd      	b.n	800b5e2 <__mdiff+0xd6>
 800b626:	3f01      	subs	r7, #1
 800b628:	e7e7      	b.n	800b5fa <__mdiff+0xee>
 800b62a:	bf00      	nop
 800b62c:	0800dc44 	.word	0x0800dc44
 800b630:	0800dc55 	.word	0x0800dc55

0800b634 <__d2b>:
 800b634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b638:	460f      	mov	r7, r1
 800b63a:	2101      	movs	r1, #1
 800b63c:	ec59 8b10 	vmov	r8, r9, d0
 800b640:	4616      	mov	r6, r2
 800b642:	f7ff fccd 	bl	800afe0 <_Balloc>
 800b646:	4604      	mov	r4, r0
 800b648:	b930      	cbnz	r0, 800b658 <__d2b+0x24>
 800b64a:	4602      	mov	r2, r0
 800b64c:	4b23      	ldr	r3, [pc, #140]	@ (800b6dc <__d2b+0xa8>)
 800b64e:	4824      	ldr	r0, [pc, #144]	@ (800b6e0 <__d2b+0xac>)
 800b650:	f240 310f 	movw	r1, #783	@ 0x30f
 800b654:	f000 fa82 	bl	800bb5c <__assert_func>
 800b658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b660:	b10d      	cbz	r5, 800b666 <__d2b+0x32>
 800b662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	f1b8 0300 	subs.w	r3, r8, #0
 800b66c:	d023      	beq.n	800b6b6 <__d2b+0x82>
 800b66e:	4668      	mov	r0, sp
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	f7ff fd7c 	bl	800b16e <__lo0bits>
 800b676:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b67a:	b1d0      	cbz	r0, 800b6b2 <__d2b+0x7e>
 800b67c:	f1c0 0320 	rsb	r3, r0, #32
 800b680:	fa02 f303 	lsl.w	r3, r2, r3
 800b684:	430b      	orrs	r3, r1
 800b686:	40c2      	lsrs	r2, r0
 800b688:	6163      	str	r3, [r4, #20]
 800b68a:	9201      	str	r2, [sp, #4]
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	61a3      	str	r3, [r4, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	bf0c      	ite	eq
 800b694:	2201      	moveq	r2, #1
 800b696:	2202      	movne	r2, #2
 800b698:	6122      	str	r2, [r4, #16]
 800b69a:	b1a5      	cbz	r5, 800b6c6 <__d2b+0x92>
 800b69c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6a0:	4405      	add	r5, r0
 800b6a2:	603d      	str	r5, [r7, #0]
 800b6a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6a8:	6030      	str	r0, [r6, #0]
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	b003      	add	sp, #12
 800b6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6b2:	6161      	str	r1, [r4, #20]
 800b6b4:	e7ea      	b.n	800b68c <__d2b+0x58>
 800b6b6:	a801      	add	r0, sp, #4
 800b6b8:	f7ff fd59 	bl	800b16e <__lo0bits>
 800b6bc:	9b01      	ldr	r3, [sp, #4]
 800b6be:	6163      	str	r3, [r4, #20]
 800b6c0:	3020      	adds	r0, #32
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	e7e8      	b.n	800b698 <__d2b+0x64>
 800b6c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6ce:	6038      	str	r0, [r7, #0]
 800b6d0:	6918      	ldr	r0, [r3, #16]
 800b6d2:	f7ff fd2d 	bl	800b130 <__hi0bits>
 800b6d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6da:	e7e5      	b.n	800b6a8 <__d2b+0x74>
 800b6dc:	0800dc44 	.word	0x0800dc44
 800b6e0:	0800dc55 	.word	0x0800dc55

0800b6e4 <__ssputs_r>:
 800b6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	688e      	ldr	r6, [r1, #8]
 800b6ea:	461f      	mov	r7, r3
 800b6ec:	42be      	cmp	r6, r7
 800b6ee:	680b      	ldr	r3, [r1, #0]
 800b6f0:	4682      	mov	sl, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	4690      	mov	r8, r2
 800b6f6:	d82d      	bhi.n	800b754 <__ssputs_r+0x70>
 800b6f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b700:	d026      	beq.n	800b750 <__ssputs_r+0x6c>
 800b702:	6965      	ldr	r5, [r4, #20]
 800b704:	6909      	ldr	r1, [r1, #16]
 800b706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b70a:	eba3 0901 	sub.w	r9, r3, r1
 800b70e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b712:	1c7b      	adds	r3, r7, #1
 800b714:	444b      	add	r3, r9
 800b716:	106d      	asrs	r5, r5, #1
 800b718:	429d      	cmp	r5, r3
 800b71a:	bf38      	it	cc
 800b71c:	461d      	movcc	r5, r3
 800b71e:	0553      	lsls	r3, r2, #21
 800b720:	d527      	bpl.n	800b772 <__ssputs_r+0x8e>
 800b722:	4629      	mov	r1, r5
 800b724:	f7ff fbd0 	bl	800aec8 <_malloc_r>
 800b728:	4606      	mov	r6, r0
 800b72a:	b360      	cbz	r0, 800b786 <__ssputs_r+0xa2>
 800b72c:	6921      	ldr	r1, [r4, #16]
 800b72e:	464a      	mov	r2, r9
 800b730:	f000 fa06 	bl	800bb40 <memcpy>
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b73e:	81a3      	strh	r3, [r4, #12]
 800b740:	6126      	str	r6, [r4, #16]
 800b742:	6165      	str	r5, [r4, #20]
 800b744:	444e      	add	r6, r9
 800b746:	eba5 0509 	sub.w	r5, r5, r9
 800b74a:	6026      	str	r6, [r4, #0]
 800b74c:	60a5      	str	r5, [r4, #8]
 800b74e:	463e      	mov	r6, r7
 800b750:	42be      	cmp	r6, r7
 800b752:	d900      	bls.n	800b756 <__ssputs_r+0x72>
 800b754:	463e      	mov	r6, r7
 800b756:	6820      	ldr	r0, [r4, #0]
 800b758:	4632      	mov	r2, r6
 800b75a:	4641      	mov	r1, r8
 800b75c:	f000 f9c6 	bl	800baec <memmove>
 800b760:	68a3      	ldr	r3, [r4, #8]
 800b762:	1b9b      	subs	r3, r3, r6
 800b764:	60a3      	str	r3, [r4, #8]
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	4433      	add	r3, r6
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	2000      	movs	r0, #0
 800b76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b772:	462a      	mov	r2, r5
 800b774:	f000 fa36 	bl	800bbe4 <_realloc_r>
 800b778:	4606      	mov	r6, r0
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d1e0      	bne.n	800b740 <__ssputs_r+0x5c>
 800b77e:	6921      	ldr	r1, [r4, #16]
 800b780:	4650      	mov	r0, sl
 800b782:	f7ff fb2d 	bl	800ade0 <_free_r>
 800b786:	230c      	movs	r3, #12
 800b788:	f8ca 3000 	str.w	r3, [sl]
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	e7e9      	b.n	800b76e <__ssputs_r+0x8a>
	...

0800b79c <_svfiprintf_r>:
 800b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	4698      	mov	r8, r3
 800b7a2:	898b      	ldrh	r3, [r1, #12]
 800b7a4:	061b      	lsls	r3, r3, #24
 800b7a6:	b09d      	sub	sp, #116	@ 0x74
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	460d      	mov	r5, r1
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	d510      	bpl.n	800b7d2 <_svfiprintf_r+0x36>
 800b7b0:	690b      	ldr	r3, [r1, #16]
 800b7b2:	b973      	cbnz	r3, 800b7d2 <_svfiprintf_r+0x36>
 800b7b4:	2140      	movs	r1, #64	@ 0x40
 800b7b6:	f7ff fb87 	bl	800aec8 <_malloc_r>
 800b7ba:	6028      	str	r0, [r5, #0]
 800b7bc:	6128      	str	r0, [r5, #16]
 800b7be:	b930      	cbnz	r0, 800b7ce <_svfiprintf_r+0x32>
 800b7c0:	230c      	movs	r3, #12
 800b7c2:	603b      	str	r3, [r7, #0]
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c8:	b01d      	add	sp, #116	@ 0x74
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	2340      	movs	r3, #64	@ 0x40
 800b7d0:	616b      	str	r3, [r5, #20]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7d6:	2320      	movs	r3, #32
 800b7d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e0:	2330      	movs	r3, #48	@ 0x30
 800b7e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b980 <_svfiprintf_r+0x1e4>
 800b7e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7ea:	f04f 0901 	mov.w	r9, #1
 800b7ee:	4623      	mov	r3, r4
 800b7f0:	469a      	mov	sl, r3
 800b7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f6:	b10a      	cbz	r2, 800b7fc <_svfiprintf_r+0x60>
 800b7f8:	2a25      	cmp	r2, #37	@ 0x25
 800b7fa:	d1f9      	bne.n	800b7f0 <_svfiprintf_r+0x54>
 800b7fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b800:	d00b      	beq.n	800b81a <_svfiprintf_r+0x7e>
 800b802:	465b      	mov	r3, fp
 800b804:	4622      	mov	r2, r4
 800b806:	4629      	mov	r1, r5
 800b808:	4638      	mov	r0, r7
 800b80a:	f7ff ff6b 	bl	800b6e4 <__ssputs_r>
 800b80e:	3001      	adds	r0, #1
 800b810:	f000 80a7 	beq.w	800b962 <_svfiprintf_r+0x1c6>
 800b814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b816:	445a      	add	r2, fp
 800b818:	9209      	str	r2, [sp, #36]	@ 0x24
 800b81a:	f89a 3000 	ldrb.w	r3, [sl]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 809f 	beq.w	800b962 <_svfiprintf_r+0x1c6>
 800b824:	2300      	movs	r3, #0
 800b826:	f04f 32ff 	mov.w	r2, #4294967295
 800b82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b82e:	f10a 0a01 	add.w	sl, sl, #1
 800b832:	9304      	str	r3, [sp, #16]
 800b834:	9307      	str	r3, [sp, #28]
 800b836:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b83a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b83c:	4654      	mov	r4, sl
 800b83e:	2205      	movs	r2, #5
 800b840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b844:	484e      	ldr	r0, [pc, #312]	@ (800b980 <_svfiprintf_r+0x1e4>)
 800b846:	f7f4 fccb 	bl	80001e0 <memchr>
 800b84a:	9a04      	ldr	r2, [sp, #16]
 800b84c:	b9d8      	cbnz	r0, 800b886 <_svfiprintf_r+0xea>
 800b84e:	06d0      	lsls	r0, r2, #27
 800b850:	bf44      	itt	mi
 800b852:	2320      	movmi	r3, #32
 800b854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b858:	0711      	lsls	r1, r2, #28
 800b85a:	bf44      	itt	mi
 800b85c:	232b      	movmi	r3, #43	@ 0x2b
 800b85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b862:	f89a 3000 	ldrb.w	r3, [sl]
 800b866:	2b2a      	cmp	r3, #42	@ 0x2a
 800b868:	d015      	beq.n	800b896 <_svfiprintf_r+0xfa>
 800b86a:	9a07      	ldr	r2, [sp, #28]
 800b86c:	4654      	mov	r4, sl
 800b86e:	2000      	movs	r0, #0
 800b870:	f04f 0c0a 	mov.w	ip, #10
 800b874:	4621      	mov	r1, r4
 800b876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b87a:	3b30      	subs	r3, #48	@ 0x30
 800b87c:	2b09      	cmp	r3, #9
 800b87e:	d94b      	bls.n	800b918 <_svfiprintf_r+0x17c>
 800b880:	b1b0      	cbz	r0, 800b8b0 <_svfiprintf_r+0x114>
 800b882:	9207      	str	r2, [sp, #28]
 800b884:	e014      	b.n	800b8b0 <_svfiprintf_r+0x114>
 800b886:	eba0 0308 	sub.w	r3, r0, r8
 800b88a:	fa09 f303 	lsl.w	r3, r9, r3
 800b88e:	4313      	orrs	r3, r2
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	46a2      	mov	sl, r4
 800b894:	e7d2      	b.n	800b83c <_svfiprintf_r+0xa0>
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	1d19      	adds	r1, r3, #4
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	9103      	str	r1, [sp, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bfbb      	ittet	lt
 800b8a2:	425b      	neglt	r3, r3
 800b8a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8a8:	9307      	strge	r3, [sp, #28]
 800b8aa:	9307      	strlt	r3, [sp, #28]
 800b8ac:	bfb8      	it	lt
 800b8ae:	9204      	strlt	r2, [sp, #16]
 800b8b0:	7823      	ldrb	r3, [r4, #0]
 800b8b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8b4:	d10a      	bne.n	800b8cc <_svfiprintf_r+0x130>
 800b8b6:	7863      	ldrb	r3, [r4, #1]
 800b8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ba:	d132      	bne.n	800b922 <_svfiprintf_r+0x186>
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	1d1a      	adds	r2, r3, #4
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	9203      	str	r2, [sp, #12]
 800b8c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8c8:	3402      	adds	r4, #2
 800b8ca:	9305      	str	r3, [sp, #20]
 800b8cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b990 <_svfiprintf_r+0x1f4>
 800b8d0:	7821      	ldrb	r1, [r4, #0]
 800b8d2:	2203      	movs	r2, #3
 800b8d4:	4650      	mov	r0, sl
 800b8d6:	f7f4 fc83 	bl	80001e0 <memchr>
 800b8da:	b138      	cbz	r0, 800b8ec <_svfiprintf_r+0x150>
 800b8dc:	9b04      	ldr	r3, [sp, #16]
 800b8de:	eba0 000a 	sub.w	r0, r0, sl
 800b8e2:	2240      	movs	r2, #64	@ 0x40
 800b8e4:	4082      	lsls	r2, r0
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	3401      	adds	r4, #1
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f0:	4824      	ldr	r0, [pc, #144]	@ (800b984 <_svfiprintf_r+0x1e8>)
 800b8f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8f6:	2206      	movs	r2, #6
 800b8f8:	f7f4 fc72 	bl	80001e0 <memchr>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d036      	beq.n	800b96e <_svfiprintf_r+0x1d2>
 800b900:	4b21      	ldr	r3, [pc, #132]	@ (800b988 <_svfiprintf_r+0x1ec>)
 800b902:	bb1b      	cbnz	r3, 800b94c <_svfiprintf_r+0x1b0>
 800b904:	9b03      	ldr	r3, [sp, #12]
 800b906:	3307      	adds	r3, #7
 800b908:	f023 0307 	bic.w	r3, r3, #7
 800b90c:	3308      	adds	r3, #8
 800b90e:	9303      	str	r3, [sp, #12]
 800b910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b912:	4433      	add	r3, r6
 800b914:	9309      	str	r3, [sp, #36]	@ 0x24
 800b916:	e76a      	b.n	800b7ee <_svfiprintf_r+0x52>
 800b918:	fb0c 3202 	mla	r2, ip, r2, r3
 800b91c:	460c      	mov	r4, r1
 800b91e:	2001      	movs	r0, #1
 800b920:	e7a8      	b.n	800b874 <_svfiprintf_r+0xd8>
 800b922:	2300      	movs	r3, #0
 800b924:	3401      	adds	r4, #1
 800b926:	9305      	str	r3, [sp, #20]
 800b928:	4619      	mov	r1, r3
 800b92a:	f04f 0c0a 	mov.w	ip, #10
 800b92e:	4620      	mov	r0, r4
 800b930:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b934:	3a30      	subs	r2, #48	@ 0x30
 800b936:	2a09      	cmp	r2, #9
 800b938:	d903      	bls.n	800b942 <_svfiprintf_r+0x1a6>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0c6      	beq.n	800b8cc <_svfiprintf_r+0x130>
 800b93e:	9105      	str	r1, [sp, #20]
 800b940:	e7c4      	b.n	800b8cc <_svfiprintf_r+0x130>
 800b942:	fb0c 2101 	mla	r1, ip, r1, r2
 800b946:	4604      	mov	r4, r0
 800b948:	2301      	movs	r3, #1
 800b94a:	e7f0      	b.n	800b92e <_svfiprintf_r+0x192>
 800b94c:	ab03      	add	r3, sp, #12
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	462a      	mov	r2, r5
 800b952:	4b0e      	ldr	r3, [pc, #56]	@ (800b98c <_svfiprintf_r+0x1f0>)
 800b954:	a904      	add	r1, sp, #16
 800b956:	4638      	mov	r0, r7
 800b958:	f7fd fe96 	bl	8009688 <_printf_float>
 800b95c:	1c42      	adds	r2, r0, #1
 800b95e:	4606      	mov	r6, r0
 800b960:	d1d6      	bne.n	800b910 <_svfiprintf_r+0x174>
 800b962:	89ab      	ldrh	r3, [r5, #12]
 800b964:	065b      	lsls	r3, r3, #25
 800b966:	f53f af2d 	bmi.w	800b7c4 <_svfiprintf_r+0x28>
 800b96a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b96c:	e72c      	b.n	800b7c8 <_svfiprintf_r+0x2c>
 800b96e:	ab03      	add	r3, sp, #12
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	462a      	mov	r2, r5
 800b974:	4b05      	ldr	r3, [pc, #20]	@ (800b98c <_svfiprintf_r+0x1f0>)
 800b976:	a904      	add	r1, sp, #16
 800b978:	4638      	mov	r0, r7
 800b97a:	f7fe f91d 	bl	8009bb8 <_printf_i>
 800b97e:	e7ed      	b.n	800b95c <_svfiprintf_r+0x1c0>
 800b980:	0800ddb0 	.word	0x0800ddb0
 800b984:	0800ddba 	.word	0x0800ddba
 800b988:	08009689 	.word	0x08009689
 800b98c:	0800b6e5 	.word	0x0800b6e5
 800b990:	0800ddb6 	.word	0x0800ddb6

0800b994 <__sflush_r>:
 800b994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99c:	0716      	lsls	r6, r2, #28
 800b99e:	4605      	mov	r5, r0
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	d454      	bmi.n	800ba4e <__sflush_r+0xba>
 800b9a4:	684b      	ldr	r3, [r1, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	dc02      	bgt.n	800b9b0 <__sflush_r+0x1c>
 800b9aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	dd48      	ble.n	800ba42 <__sflush_r+0xae>
 800b9b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9b2:	2e00      	cmp	r6, #0
 800b9b4:	d045      	beq.n	800ba42 <__sflush_r+0xae>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9bc:	682f      	ldr	r7, [r5, #0]
 800b9be:	6a21      	ldr	r1, [r4, #32]
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	d030      	beq.n	800ba26 <__sflush_r+0x92>
 800b9c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	0759      	lsls	r1, r3, #29
 800b9ca:	d505      	bpl.n	800b9d8 <__sflush_r+0x44>
 800b9cc:	6863      	ldr	r3, [r4, #4]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9d2:	b10b      	cbz	r3, 800b9d8 <__sflush_r+0x44>
 800b9d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9d6:	1ad2      	subs	r2, r2, r3
 800b9d8:	2300      	movs	r3, #0
 800b9da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9dc:	6a21      	ldr	r1, [r4, #32]
 800b9de:	4628      	mov	r0, r5
 800b9e0:	47b0      	blx	r6
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	d106      	bne.n	800b9f6 <__sflush_r+0x62>
 800b9e8:	6829      	ldr	r1, [r5, #0]
 800b9ea:	291d      	cmp	r1, #29
 800b9ec:	d82b      	bhi.n	800ba46 <__sflush_r+0xb2>
 800b9ee:	4a2a      	ldr	r2, [pc, #168]	@ (800ba98 <__sflush_r+0x104>)
 800b9f0:	410a      	asrs	r2, r1
 800b9f2:	07d6      	lsls	r6, r2, #31
 800b9f4:	d427      	bmi.n	800ba46 <__sflush_r+0xb2>
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	6062      	str	r2, [r4, #4]
 800b9fa:	04d9      	lsls	r1, r3, #19
 800b9fc:	6922      	ldr	r2, [r4, #16]
 800b9fe:	6022      	str	r2, [r4, #0]
 800ba00:	d504      	bpl.n	800ba0c <__sflush_r+0x78>
 800ba02:	1c42      	adds	r2, r0, #1
 800ba04:	d101      	bne.n	800ba0a <__sflush_r+0x76>
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	b903      	cbnz	r3, 800ba0c <__sflush_r+0x78>
 800ba0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba0e:	602f      	str	r7, [r5, #0]
 800ba10:	b1b9      	cbz	r1, 800ba42 <__sflush_r+0xae>
 800ba12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba16:	4299      	cmp	r1, r3
 800ba18:	d002      	beq.n	800ba20 <__sflush_r+0x8c>
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f7ff f9e0 	bl	800ade0 <_free_r>
 800ba20:	2300      	movs	r3, #0
 800ba22:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba24:	e00d      	b.n	800ba42 <__sflush_r+0xae>
 800ba26:	2301      	movs	r3, #1
 800ba28:	4628      	mov	r0, r5
 800ba2a:	47b0      	blx	r6
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	1c50      	adds	r0, r2, #1
 800ba30:	d1c9      	bne.n	800b9c6 <__sflush_r+0x32>
 800ba32:	682b      	ldr	r3, [r5, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d0c6      	beq.n	800b9c6 <__sflush_r+0x32>
 800ba38:	2b1d      	cmp	r3, #29
 800ba3a:	d001      	beq.n	800ba40 <__sflush_r+0xac>
 800ba3c:	2b16      	cmp	r3, #22
 800ba3e:	d11e      	bne.n	800ba7e <__sflush_r+0xea>
 800ba40:	602f      	str	r7, [r5, #0]
 800ba42:	2000      	movs	r0, #0
 800ba44:	e022      	b.n	800ba8c <__sflush_r+0xf8>
 800ba46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba4a:	b21b      	sxth	r3, r3
 800ba4c:	e01b      	b.n	800ba86 <__sflush_r+0xf2>
 800ba4e:	690f      	ldr	r7, [r1, #16]
 800ba50:	2f00      	cmp	r7, #0
 800ba52:	d0f6      	beq.n	800ba42 <__sflush_r+0xae>
 800ba54:	0793      	lsls	r3, r2, #30
 800ba56:	680e      	ldr	r6, [r1, #0]
 800ba58:	bf08      	it	eq
 800ba5a:	694b      	ldreq	r3, [r1, #20]
 800ba5c:	600f      	str	r7, [r1, #0]
 800ba5e:	bf18      	it	ne
 800ba60:	2300      	movne	r3, #0
 800ba62:	eba6 0807 	sub.w	r8, r6, r7
 800ba66:	608b      	str	r3, [r1, #8]
 800ba68:	f1b8 0f00 	cmp.w	r8, #0
 800ba6c:	dde9      	ble.n	800ba42 <__sflush_r+0xae>
 800ba6e:	6a21      	ldr	r1, [r4, #32]
 800ba70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba72:	4643      	mov	r3, r8
 800ba74:	463a      	mov	r2, r7
 800ba76:	4628      	mov	r0, r5
 800ba78:	47b0      	blx	r6
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	dc08      	bgt.n	800ba90 <__sflush_r+0xfc>
 800ba7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba90:	4407      	add	r7, r0
 800ba92:	eba8 0800 	sub.w	r8, r8, r0
 800ba96:	e7e7      	b.n	800ba68 <__sflush_r+0xd4>
 800ba98:	dfbffffe 	.word	0xdfbffffe

0800ba9c <_fflush_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	690b      	ldr	r3, [r1, #16]
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	b913      	cbnz	r3, 800baac <_fflush_r+0x10>
 800baa6:	2500      	movs	r5, #0
 800baa8:	4628      	mov	r0, r5
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	b118      	cbz	r0, 800bab6 <_fflush_r+0x1a>
 800baae:	6a03      	ldr	r3, [r0, #32]
 800bab0:	b90b      	cbnz	r3, 800bab6 <_fflush_r+0x1a>
 800bab2:	f7fe fa2d 	bl	8009f10 <__sinit>
 800bab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0f3      	beq.n	800baa6 <_fflush_r+0xa>
 800babe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bac0:	07d0      	lsls	r0, r2, #31
 800bac2:	d404      	bmi.n	800bace <_fflush_r+0x32>
 800bac4:	0599      	lsls	r1, r3, #22
 800bac6:	d402      	bmi.n	800bace <_fflush_r+0x32>
 800bac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baca:	f7fe fb38 	bl	800a13e <__retarget_lock_acquire_recursive>
 800bace:	4628      	mov	r0, r5
 800bad0:	4621      	mov	r1, r4
 800bad2:	f7ff ff5f 	bl	800b994 <__sflush_r>
 800bad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bad8:	07da      	lsls	r2, r3, #31
 800bada:	4605      	mov	r5, r0
 800badc:	d4e4      	bmi.n	800baa8 <_fflush_r+0xc>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	059b      	lsls	r3, r3, #22
 800bae2:	d4e1      	bmi.n	800baa8 <_fflush_r+0xc>
 800bae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bae6:	f7fe fb2b 	bl	800a140 <__retarget_lock_release_recursive>
 800baea:	e7dd      	b.n	800baa8 <_fflush_r+0xc>

0800baec <memmove>:
 800baec:	4288      	cmp	r0, r1
 800baee:	b510      	push	{r4, lr}
 800baf0:	eb01 0402 	add.w	r4, r1, r2
 800baf4:	d902      	bls.n	800bafc <memmove+0x10>
 800baf6:	4284      	cmp	r4, r0
 800baf8:	4623      	mov	r3, r4
 800bafa:	d807      	bhi.n	800bb0c <memmove+0x20>
 800bafc:	1e43      	subs	r3, r0, #1
 800bafe:	42a1      	cmp	r1, r4
 800bb00:	d008      	beq.n	800bb14 <memmove+0x28>
 800bb02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb0a:	e7f8      	b.n	800bafe <memmove+0x12>
 800bb0c:	4402      	add	r2, r0
 800bb0e:	4601      	mov	r1, r0
 800bb10:	428a      	cmp	r2, r1
 800bb12:	d100      	bne.n	800bb16 <memmove+0x2a>
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb1e:	e7f7      	b.n	800bb10 <memmove+0x24>

0800bb20 <_sbrk_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d06      	ldr	r5, [pc, #24]	@ (800bb3c <_sbrk_r+0x1c>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	4604      	mov	r4, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	602b      	str	r3, [r5, #0]
 800bb2c:	f7f8 fdde 	bl	80046ec <_sbrk>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_sbrk_r+0x1a>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_sbrk_r+0x1a>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	20000b00 	.word	0x20000b00

0800bb40 <memcpy>:
 800bb40:	440a      	add	r2, r1
 800bb42:	4291      	cmp	r1, r2
 800bb44:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb48:	d100      	bne.n	800bb4c <memcpy+0xc>
 800bb4a:	4770      	bx	lr
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb56:	4291      	cmp	r1, r2
 800bb58:	d1f9      	bne.n	800bb4e <memcpy+0xe>
 800bb5a:	bd10      	pop	{r4, pc}

0800bb5c <__assert_func>:
 800bb5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb5e:	4614      	mov	r4, r2
 800bb60:	461a      	mov	r2, r3
 800bb62:	4b09      	ldr	r3, [pc, #36]	@ (800bb88 <__assert_func+0x2c>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4605      	mov	r5, r0
 800bb68:	68d8      	ldr	r0, [r3, #12]
 800bb6a:	b954      	cbnz	r4, 800bb82 <__assert_func+0x26>
 800bb6c:	4b07      	ldr	r3, [pc, #28]	@ (800bb8c <__assert_func+0x30>)
 800bb6e:	461c      	mov	r4, r3
 800bb70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb74:	9100      	str	r1, [sp, #0]
 800bb76:	462b      	mov	r3, r5
 800bb78:	4905      	ldr	r1, [pc, #20]	@ (800bb90 <__assert_func+0x34>)
 800bb7a:	f000 f86f 	bl	800bc5c <fiprintf>
 800bb7e:	f000 f87f 	bl	800bc80 <abort>
 800bb82:	4b04      	ldr	r3, [pc, #16]	@ (800bb94 <__assert_func+0x38>)
 800bb84:	e7f4      	b.n	800bb70 <__assert_func+0x14>
 800bb86:	bf00      	nop
 800bb88:	20000058 	.word	0x20000058
 800bb8c:	0800de06 	.word	0x0800de06
 800bb90:	0800ddd8 	.word	0x0800ddd8
 800bb94:	0800ddcb 	.word	0x0800ddcb

0800bb98 <_calloc_r>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	fba1 5402 	umull	r5, r4, r1, r2
 800bb9e:	b93c      	cbnz	r4, 800bbb0 <_calloc_r+0x18>
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7ff f991 	bl	800aec8 <_malloc_r>
 800bba6:	4606      	mov	r6, r0
 800bba8:	b928      	cbnz	r0, 800bbb6 <_calloc_r+0x1e>
 800bbaa:	2600      	movs	r6, #0
 800bbac:	4630      	mov	r0, r6
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	220c      	movs	r2, #12
 800bbb2:	6002      	str	r2, [r0, #0]
 800bbb4:	e7f9      	b.n	800bbaa <_calloc_r+0x12>
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	4621      	mov	r1, r4
 800bbba:	f7fe fa42 	bl	800a042 <memset>
 800bbbe:	e7f5      	b.n	800bbac <_calloc_r+0x14>

0800bbc0 <__ascii_mbtowc>:
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	b901      	cbnz	r1, 800bbc6 <__ascii_mbtowc+0x6>
 800bbc4:	a901      	add	r1, sp, #4
 800bbc6:	b142      	cbz	r2, 800bbda <__ascii_mbtowc+0x1a>
 800bbc8:	b14b      	cbz	r3, 800bbde <__ascii_mbtowc+0x1e>
 800bbca:	7813      	ldrb	r3, [r2, #0]
 800bbcc:	600b      	str	r3, [r1, #0]
 800bbce:	7812      	ldrb	r2, [r2, #0]
 800bbd0:	1e10      	subs	r0, r2, #0
 800bbd2:	bf18      	it	ne
 800bbd4:	2001      	movne	r0, #1
 800bbd6:	b002      	add	sp, #8
 800bbd8:	4770      	bx	lr
 800bbda:	4610      	mov	r0, r2
 800bbdc:	e7fb      	b.n	800bbd6 <__ascii_mbtowc+0x16>
 800bbde:	f06f 0001 	mvn.w	r0, #1
 800bbe2:	e7f8      	b.n	800bbd6 <__ascii_mbtowc+0x16>

0800bbe4 <_realloc_r>:
 800bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4615      	mov	r5, r2
 800bbec:	460c      	mov	r4, r1
 800bbee:	b921      	cbnz	r1, 800bbfa <_realloc_r+0x16>
 800bbf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	f7ff b967 	b.w	800aec8 <_malloc_r>
 800bbfa:	b92a      	cbnz	r2, 800bc08 <_realloc_r+0x24>
 800bbfc:	f7ff f8f0 	bl	800ade0 <_free_r>
 800bc00:	2400      	movs	r4, #0
 800bc02:	4620      	mov	r0, r4
 800bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc08:	f000 f841 	bl	800bc8e <_malloc_usable_size_r>
 800bc0c:	4285      	cmp	r5, r0
 800bc0e:	4606      	mov	r6, r0
 800bc10:	d802      	bhi.n	800bc18 <_realloc_r+0x34>
 800bc12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc16:	d8f4      	bhi.n	800bc02 <_realloc_r+0x1e>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4640      	mov	r0, r8
 800bc1c:	f7ff f954 	bl	800aec8 <_malloc_r>
 800bc20:	4607      	mov	r7, r0
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0ec      	beq.n	800bc00 <_realloc_r+0x1c>
 800bc26:	42b5      	cmp	r5, r6
 800bc28:	462a      	mov	r2, r5
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	bf28      	it	cs
 800bc2e:	4632      	movcs	r2, r6
 800bc30:	f7ff ff86 	bl	800bb40 <memcpy>
 800bc34:	4621      	mov	r1, r4
 800bc36:	4640      	mov	r0, r8
 800bc38:	f7ff f8d2 	bl	800ade0 <_free_r>
 800bc3c:	463c      	mov	r4, r7
 800bc3e:	e7e0      	b.n	800bc02 <_realloc_r+0x1e>

0800bc40 <__ascii_wctomb>:
 800bc40:	4603      	mov	r3, r0
 800bc42:	4608      	mov	r0, r1
 800bc44:	b141      	cbz	r1, 800bc58 <__ascii_wctomb+0x18>
 800bc46:	2aff      	cmp	r2, #255	@ 0xff
 800bc48:	d904      	bls.n	800bc54 <__ascii_wctomb+0x14>
 800bc4a:	228a      	movs	r2, #138	@ 0x8a
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc52:	4770      	bx	lr
 800bc54:	700a      	strb	r2, [r1, #0]
 800bc56:	2001      	movs	r0, #1
 800bc58:	4770      	bx	lr
	...

0800bc5c <fiprintf>:
 800bc5c:	b40e      	push	{r1, r2, r3}
 800bc5e:	b503      	push	{r0, r1, lr}
 800bc60:	4601      	mov	r1, r0
 800bc62:	ab03      	add	r3, sp, #12
 800bc64:	4805      	ldr	r0, [pc, #20]	@ (800bc7c <fiprintf+0x20>)
 800bc66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc6a:	6800      	ldr	r0, [r0, #0]
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	f000 f83f 	bl	800bcf0 <_vfiprintf_r>
 800bc72:	b002      	add	sp, #8
 800bc74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc78:	b003      	add	sp, #12
 800bc7a:	4770      	bx	lr
 800bc7c:	20000058 	.word	0x20000058

0800bc80 <abort>:
 800bc80:	b508      	push	{r3, lr}
 800bc82:	2006      	movs	r0, #6
 800bc84:	f000 fa08 	bl	800c098 <raise>
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f7f8 fcd3 	bl	8004634 <_exit>

0800bc8e <_malloc_usable_size_r>:
 800bc8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc92:	1f18      	subs	r0, r3, #4
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	bfbc      	itt	lt
 800bc98:	580b      	ldrlt	r3, [r1, r0]
 800bc9a:	18c0      	addlt	r0, r0, r3
 800bc9c:	4770      	bx	lr

0800bc9e <__sfputc_r>:
 800bc9e:	6893      	ldr	r3, [r2, #8]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	b410      	push	{r4}
 800bca6:	6093      	str	r3, [r2, #8]
 800bca8:	da08      	bge.n	800bcbc <__sfputc_r+0x1e>
 800bcaa:	6994      	ldr	r4, [r2, #24]
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	db01      	blt.n	800bcb4 <__sfputc_r+0x16>
 800bcb0:	290a      	cmp	r1, #10
 800bcb2:	d103      	bne.n	800bcbc <__sfputc_r+0x1e>
 800bcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcb8:	f000 b932 	b.w	800bf20 <__swbuf_r>
 800bcbc:	6813      	ldr	r3, [r2, #0]
 800bcbe:	1c58      	adds	r0, r3, #1
 800bcc0:	6010      	str	r0, [r2, #0]
 800bcc2:	7019      	strb	r1, [r3, #0]
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <__sfputs_r>:
 800bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcce:	4606      	mov	r6, r0
 800bcd0:	460f      	mov	r7, r1
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	18d5      	adds	r5, r2, r3
 800bcd6:	42ac      	cmp	r4, r5
 800bcd8:	d101      	bne.n	800bcde <__sfputs_r+0x12>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e007      	b.n	800bcee <__sfputs_r+0x22>
 800bcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce2:	463a      	mov	r2, r7
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7ff ffda 	bl	800bc9e <__sfputc_r>
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	d1f3      	bne.n	800bcd6 <__sfputs_r+0xa>
 800bcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcf0 <_vfiprintf_r>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	460d      	mov	r5, r1
 800bcf6:	b09d      	sub	sp, #116	@ 0x74
 800bcf8:	4614      	mov	r4, r2
 800bcfa:	4698      	mov	r8, r3
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	b118      	cbz	r0, 800bd08 <_vfiprintf_r+0x18>
 800bd00:	6a03      	ldr	r3, [r0, #32]
 800bd02:	b90b      	cbnz	r3, 800bd08 <_vfiprintf_r+0x18>
 800bd04:	f7fe f904 	bl	8009f10 <__sinit>
 800bd08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd0a:	07d9      	lsls	r1, r3, #31
 800bd0c:	d405      	bmi.n	800bd1a <_vfiprintf_r+0x2a>
 800bd0e:	89ab      	ldrh	r3, [r5, #12]
 800bd10:	059a      	lsls	r2, r3, #22
 800bd12:	d402      	bmi.n	800bd1a <_vfiprintf_r+0x2a>
 800bd14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd16:	f7fe fa12 	bl	800a13e <__retarget_lock_acquire_recursive>
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	071b      	lsls	r3, r3, #28
 800bd1e:	d501      	bpl.n	800bd24 <_vfiprintf_r+0x34>
 800bd20:	692b      	ldr	r3, [r5, #16]
 800bd22:	b99b      	cbnz	r3, 800bd4c <_vfiprintf_r+0x5c>
 800bd24:	4629      	mov	r1, r5
 800bd26:	4630      	mov	r0, r6
 800bd28:	f000 f938 	bl	800bf9c <__swsetup_r>
 800bd2c:	b170      	cbz	r0, 800bd4c <_vfiprintf_r+0x5c>
 800bd2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd30:	07dc      	lsls	r4, r3, #31
 800bd32:	d504      	bpl.n	800bd3e <_vfiprintf_r+0x4e>
 800bd34:	f04f 30ff 	mov.w	r0, #4294967295
 800bd38:	b01d      	add	sp, #116	@ 0x74
 800bd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3e:	89ab      	ldrh	r3, [r5, #12]
 800bd40:	0598      	lsls	r0, r3, #22
 800bd42:	d4f7      	bmi.n	800bd34 <_vfiprintf_r+0x44>
 800bd44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd46:	f7fe f9fb 	bl	800a140 <__retarget_lock_release_recursive>
 800bd4a:	e7f3      	b.n	800bd34 <_vfiprintf_r+0x44>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd50:	2320      	movs	r3, #32
 800bd52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd56:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd5a:	2330      	movs	r3, #48	@ 0x30
 800bd5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf0c <_vfiprintf_r+0x21c>
 800bd60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd64:	f04f 0901 	mov.w	r9, #1
 800bd68:	4623      	mov	r3, r4
 800bd6a:	469a      	mov	sl, r3
 800bd6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd70:	b10a      	cbz	r2, 800bd76 <_vfiprintf_r+0x86>
 800bd72:	2a25      	cmp	r2, #37	@ 0x25
 800bd74:	d1f9      	bne.n	800bd6a <_vfiprintf_r+0x7a>
 800bd76:	ebba 0b04 	subs.w	fp, sl, r4
 800bd7a:	d00b      	beq.n	800bd94 <_vfiprintf_r+0xa4>
 800bd7c:	465b      	mov	r3, fp
 800bd7e:	4622      	mov	r2, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7ff ffa2 	bl	800bccc <__sfputs_r>
 800bd88:	3001      	adds	r0, #1
 800bd8a:	f000 80a7 	beq.w	800bedc <_vfiprintf_r+0x1ec>
 800bd8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd90:	445a      	add	r2, fp
 800bd92:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd94:	f89a 3000 	ldrb.w	r3, [sl]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 809f 	beq.w	800bedc <_vfiprintf_r+0x1ec>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f04f 32ff 	mov.w	r2, #4294967295
 800bda4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda8:	f10a 0a01 	add.w	sl, sl, #1
 800bdac:	9304      	str	r3, [sp, #16]
 800bdae:	9307      	str	r3, [sp, #28]
 800bdb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdb6:	4654      	mov	r4, sl
 800bdb8:	2205      	movs	r2, #5
 800bdba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdbe:	4853      	ldr	r0, [pc, #332]	@ (800bf0c <_vfiprintf_r+0x21c>)
 800bdc0:	f7f4 fa0e 	bl	80001e0 <memchr>
 800bdc4:	9a04      	ldr	r2, [sp, #16]
 800bdc6:	b9d8      	cbnz	r0, 800be00 <_vfiprintf_r+0x110>
 800bdc8:	06d1      	lsls	r1, r2, #27
 800bdca:	bf44      	itt	mi
 800bdcc:	2320      	movmi	r3, #32
 800bdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdd2:	0713      	lsls	r3, r2, #28
 800bdd4:	bf44      	itt	mi
 800bdd6:	232b      	movmi	r3, #43	@ 0x2b
 800bdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bddc:	f89a 3000 	ldrb.w	r3, [sl]
 800bde0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bde2:	d015      	beq.n	800be10 <_vfiprintf_r+0x120>
 800bde4:	9a07      	ldr	r2, [sp, #28]
 800bde6:	4654      	mov	r4, sl
 800bde8:	2000      	movs	r0, #0
 800bdea:	f04f 0c0a 	mov.w	ip, #10
 800bdee:	4621      	mov	r1, r4
 800bdf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdf4:	3b30      	subs	r3, #48	@ 0x30
 800bdf6:	2b09      	cmp	r3, #9
 800bdf8:	d94b      	bls.n	800be92 <_vfiprintf_r+0x1a2>
 800bdfa:	b1b0      	cbz	r0, 800be2a <_vfiprintf_r+0x13a>
 800bdfc:	9207      	str	r2, [sp, #28]
 800bdfe:	e014      	b.n	800be2a <_vfiprintf_r+0x13a>
 800be00:	eba0 0308 	sub.w	r3, r0, r8
 800be04:	fa09 f303 	lsl.w	r3, r9, r3
 800be08:	4313      	orrs	r3, r2
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	46a2      	mov	sl, r4
 800be0e:	e7d2      	b.n	800bdb6 <_vfiprintf_r+0xc6>
 800be10:	9b03      	ldr	r3, [sp, #12]
 800be12:	1d19      	adds	r1, r3, #4
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	9103      	str	r1, [sp, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	bfbb      	ittet	lt
 800be1c:	425b      	neglt	r3, r3
 800be1e:	f042 0202 	orrlt.w	r2, r2, #2
 800be22:	9307      	strge	r3, [sp, #28]
 800be24:	9307      	strlt	r3, [sp, #28]
 800be26:	bfb8      	it	lt
 800be28:	9204      	strlt	r2, [sp, #16]
 800be2a:	7823      	ldrb	r3, [r4, #0]
 800be2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800be2e:	d10a      	bne.n	800be46 <_vfiprintf_r+0x156>
 800be30:	7863      	ldrb	r3, [r4, #1]
 800be32:	2b2a      	cmp	r3, #42	@ 0x2a
 800be34:	d132      	bne.n	800be9c <_vfiprintf_r+0x1ac>
 800be36:	9b03      	ldr	r3, [sp, #12]
 800be38:	1d1a      	adds	r2, r3, #4
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	9203      	str	r2, [sp, #12]
 800be3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be42:	3402      	adds	r4, #2
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf1c <_vfiprintf_r+0x22c>
 800be4a:	7821      	ldrb	r1, [r4, #0]
 800be4c:	2203      	movs	r2, #3
 800be4e:	4650      	mov	r0, sl
 800be50:	f7f4 f9c6 	bl	80001e0 <memchr>
 800be54:	b138      	cbz	r0, 800be66 <_vfiprintf_r+0x176>
 800be56:	9b04      	ldr	r3, [sp, #16]
 800be58:	eba0 000a 	sub.w	r0, r0, sl
 800be5c:	2240      	movs	r2, #64	@ 0x40
 800be5e:	4082      	lsls	r2, r0
 800be60:	4313      	orrs	r3, r2
 800be62:	3401      	adds	r4, #1
 800be64:	9304      	str	r3, [sp, #16]
 800be66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6a:	4829      	ldr	r0, [pc, #164]	@ (800bf10 <_vfiprintf_r+0x220>)
 800be6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be70:	2206      	movs	r2, #6
 800be72:	f7f4 f9b5 	bl	80001e0 <memchr>
 800be76:	2800      	cmp	r0, #0
 800be78:	d03f      	beq.n	800befa <_vfiprintf_r+0x20a>
 800be7a:	4b26      	ldr	r3, [pc, #152]	@ (800bf14 <_vfiprintf_r+0x224>)
 800be7c:	bb1b      	cbnz	r3, 800bec6 <_vfiprintf_r+0x1d6>
 800be7e:	9b03      	ldr	r3, [sp, #12]
 800be80:	3307      	adds	r3, #7
 800be82:	f023 0307 	bic.w	r3, r3, #7
 800be86:	3308      	adds	r3, #8
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be8c:	443b      	add	r3, r7
 800be8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be90:	e76a      	b.n	800bd68 <_vfiprintf_r+0x78>
 800be92:	fb0c 3202 	mla	r2, ip, r2, r3
 800be96:	460c      	mov	r4, r1
 800be98:	2001      	movs	r0, #1
 800be9a:	e7a8      	b.n	800bdee <_vfiprintf_r+0xfe>
 800be9c:	2300      	movs	r3, #0
 800be9e:	3401      	adds	r4, #1
 800bea0:	9305      	str	r3, [sp, #20]
 800bea2:	4619      	mov	r1, r3
 800bea4:	f04f 0c0a 	mov.w	ip, #10
 800bea8:	4620      	mov	r0, r4
 800beaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beae:	3a30      	subs	r2, #48	@ 0x30
 800beb0:	2a09      	cmp	r2, #9
 800beb2:	d903      	bls.n	800bebc <_vfiprintf_r+0x1cc>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d0c6      	beq.n	800be46 <_vfiprintf_r+0x156>
 800beb8:	9105      	str	r1, [sp, #20]
 800beba:	e7c4      	b.n	800be46 <_vfiprintf_r+0x156>
 800bebc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bec0:	4604      	mov	r4, r0
 800bec2:	2301      	movs	r3, #1
 800bec4:	e7f0      	b.n	800bea8 <_vfiprintf_r+0x1b8>
 800bec6:	ab03      	add	r3, sp, #12
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	462a      	mov	r2, r5
 800becc:	4b12      	ldr	r3, [pc, #72]	@ (800bf18 <_vfiprintf_r+0x228>)
 800bece:	a904      	add	r1, sp, #16
 800bed0:	4630      	mov	r0, r6
 800bed2:	f7fd fbd9 	bl	8009688 <_printf_float>
 800bed6:	4607      	mov	r7, r0
 800bed8:	1c78      	adds	r0, r7, #1
 800beda:	d1d6      	bne.n	800be8a <_vfiprintf_r+0x19a>
 800bedc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bede:	07d9      	lsls	r1, r3, #31
 800bee0:	d405      	bmi.n	800beee <_vfiprintf_r+0x1fe>
 800bee2:	89ab      	ldrh	r3, [r5, #12]
 800bee4:	059a      	lsls	r2, r3, #22
 800bee6:	d402      	bmi.n	800beee <_vfiprintf_r+0x1fe>
 800bee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beea:	f7fe f929 	bl	800a140 <__retarget_lock_release_recursive>
 800beee:	89ab      	ldrh	r3, [r5, #12]
 800bef0:	065b      	lsls	r3, r3, #25
 800bef2:	f53f af1f 	bmi.w	800bd34 <_vfiprintf_r+0x44>
 800bef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bef8:	e71e      	b.n	800bd38 <_vfiprintf_r+0x48>
 800befa:	ab03      	add	r3, sp, #12
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	462a      	mov	r2, r5
 800bf00:	4b05      	ldr	r3, [pc, #20]	@ (800bf18 <_vfiprintf_r+0x228>)
 800bf02:	a904      	add	r1, sp, #16
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7fd fe57 	bl	8009bb8 <_printf_i>
 800bf0a:	e7e4      	b.n	800bed6 <_vfiprintf_r+0x1e6>
 800bf0c:	0800ddb0 	.word	0x0800ddb0
 800bf10:	0800ddba 	.word	0x0800ddba
 800bf14:	08009689 	.word	0x08009689
 800bf18:	0800bccd 	.word	0x0800bccd
 800bf1c:	0800ddb6 	.word	0x0800ddb6

0800bf20 <__swbuf_r>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	460e      	mov	r6, r1
 800bf24:	4614      	mov	r4, r2
 800bf26:	4605      	mov	r5, r0
 800bf28:	b118      	cbz	r0, 800bf32 <__swbuf_r+0x12>
 800bf2a:	6a03      	ldr	r3, [r0, #32]
 800bf2c:	b90b      	cbnz	r3, 800bf32 <__swbuf_r+0x12>
 800bf2e:	f7fd ffef 	bl	8009f10 <__sinit>
 800bf32:	69a3      	ldr	r3, [r4, #24]
 800bf34:	60a3      	str	r3, [r4, #8]
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	071a      	lsls	r2, r3, #28
 800bf3a:	d501      	bpl.n	800bf40 <__swbuf_r+0x20>
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	b943      	cbnz	r3, 800bf52 <__swbuf_r+0x32>
 800bf40:	4621      	mov	r1, r4
 800bf42:	4628      	mov	r0, r5
 800bf44:	f000 f82a 	bl	800bf9c <__swsetup_r>
 800bf48:	b118      	cbz	r0, 800bf52 <__swbuf_r+0x32>
 800bf4a:	f04f 37ff 	mov.w	r7, #4294967295
 800bf4e:	4638      	mov	r0, r7
 800bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	6922      	ldr	r2, [r4, #16]
 800bf56:	1a98      	subs	r0, r3, r2
 800bf58:	6963      	ldr	r3, [r4, #20]
 800bf5a:	b2f6      	uxtb	r6, r6
 800bf5c:	4283      	cmp	r3, r0
 800bf5e:	4637      	mov	r7, r6
 800bf60:	dc05      	bgt.n	800bf6e <__swbuf_r+0x4e>
 800bf62:	4621      	mov	r1, r4
 800bf64:	4628      	mov	r0, r5
 800bf66:	f7ff fd99 	bl	800ba9c <_fflush_r>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d1ed      	bne.n	800bf4a <__swbuf_r+0x2a>
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	60a3      	str	r3, [r4, #8]
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	1c5a      	adds	r2, r3, #1
 800bf78:	6022      	str	r2, [r4, #0]
 800bf7a:	701e      	strb	r6, [r3, #0]
 800bf7c:	6962      	ldr	r2, [r4, #20]
 800bf7e:	1c43      	adds	r3, r0, #1
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d004      	beq.n	800bf8e <__swbuf_r+0x6e>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	07db      	lsls	r3, r3, #31
 800bf88:	d5e1      	bpl.n	800bf4e <__swbuf_r+0x2e>
 800bf8a:	2e0a      	cmp	r6, #10
 800bf8c:	d1df      	bne.n	800bf4e <__swbuf_r+0x2e>
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7ff fd83 	bl	800ba9c <_fflush_r>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d0d9      	beq.n	800bf4e <__swbuf_r+0x2e>
 800bf9a:	e7d6      	b.n	800bf4a <__swbuf_r+0x2a>

0800bf9c <__swsetup_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	4b29      	ldr	r3, [pc, #164]	@ (800c044 <__swsetup_r+0xa8>)
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	b118      	cbz	r0, 800bfb0 <__swsetup_r+0x14>
 800bfa8:	6a03      	ldr	r3, [r0, #32]
 800bfaa:	b90b      	cbnz	r3, 800bfb0 <__swsetup_r+0x14>
 800bfac:	f7fd ffb0 	bl	8009f10 <__sinit>
 800bfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb4:	0719      	lsls	r1, r3, #28
 800bfb6:	d422      	bmi.n	800bffe <__swsetup_r+0x62>
 800bfb8:	06da      	lsls	r2, r3, #27
 800bfba:	d407      	bmi.n	800bfcc <__swsetup_r+0x30>
 800bfbc:	2209      	movs	r2, #9
 800bfbe:	602a      	str	r2, [r5, #0]
 800bfc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfca:	e033      	b.n	800c034 <__swsetup_r+0x98>
 800bfcc:	0758      	lsls	r0, r3, #29
 800bfce:	d512      	bpl.n	800bff6 <__swsetup_r+0x5a>
 800bfd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfd2:	b141      	cbz	r1, 800bfe6 <__swsetup_r+0x4a>
 800bfd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfd8:	4299      	cmp	r1, r3
 800bfda:	d002      	beq.n	800bfe2 <__swsetup_r+0x46>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7fe feff 	bl	800ade0 <_free_r>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bfec:	81a3      	strh	r3, [r4, #12]
 800bfee:	2300      	movs	r3, #0
 800bff0:	6063      	str	r3, [r4, #4]
 800bff2:	6923      	ldr	r3, [r4, #16]
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	f043 0308 	orr.w	r3, r3, #8
 800bffc:	81a3      	strh	r3, [r4, #12]
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	b94b      	cbnz	r3, 800c016 <__swsetup_r+0x7a>
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c00c:	d003      	beq.n	800c016 <__swsetup_r+0x7a>
 800c00e:	4621      	mov	r1, r4
 800c010:	4628      	mov	r0, r5
 800c012:	f000 f883 	bl	800c11c <__smakebuf_r>
 800c016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01a:	f013 0201 	ands.w	r2, r3, #1
 800c01e:	d00a      	beq.n	800c036 <__swsetup_r+0x9a>
 800c020:	2200      	movs	r2, #0
 800c022:	60a2      	str	r2, [r4, #8]
 800c024:	6962      	ldr	r2, [r4, #20]
 800c026:	4252      	negs	r2, r2
 800c028:	61a2      	str	r2, [r4, #24]
 800c02a:	6922      	ldr	r2, [r4, #16]
 800c02c:	b942      	cbnz	r2, 800c040 <__swsetup_r+0xa4>
 800c02e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c032:	d1c5      	bne.n	800bfc0 <__swsetup_r+0x24>
 800c034:	bd38      	pop	{r3, r4, r5, pc}
 800c036:	0799      	lsls	r1, r3, #30
 800c038:	bf58      	it	pl
 800c03a:	6962      	ldrpl	r2, [r4, #20]
 800c03c:	60a2      	str	r2, [r4, #8]
 800c03e:	e7f4      	b.n	800c02a <__swsetup_r+0x8e>
 800c040:	2000      	movs	r0, #0
 800c042:	e7f7      	b.n	800c034 <__swsetup_r+0x98>
 800c044:	20000058 	.word	0x20000058

0800c048 <_raise_r>:
 800c048:	291f      	cmp	r1, #31
 800c04a:	b538      	push	{r3, r4, r5, lr}
 800c04c:	4605      	mov	r5, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	d904      	bls.n	800c05c <_raise_r+0x14>
 800c052:	2316      	movs	r3, #22
 800c054:	6003      	str	r3, [r0, #0]
 800c056:	f04f 30ff 	mov.w	r0, #4294967295
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c05e:	b112      	cbz	r2, 800c066 <_raise_r+0x1e>
 800c060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c064:	b94b      	cbnz	r3, 800c07a <_raise_r+0x32>
 800c066:	4628      	mov	r0, r5
 800c068:	f000 f830 	bl	800c0cc <_getpid_r>
 800c06c:	4622      	mov	r2, r4
 800c06e:	4601      	mov	r1, r0
 800c070:	4628      	mov	r0, r5
 800c072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c076:	f000 b817 	b.w	800c0a8 <_kill_r>
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d00a      	beq.n	800c094 <_raise_r+0x4c>
 800c07e:	1c59      	adds	r1, r3, #1
 800c080:	d103      	bne.n	800c08a <_raise_r+0x42>
 800c082:	2316      	movs	r3, #22
 800c084:	6003      	str	r3, [r0, #0]
 800c086:	2001      	movs	r0, #1
 800c088:	e7e7      	b.n	800c05a <_raise_r+0x12>
 800c08a:	2100      	movs	r1, #0
 800c08c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c090:	4620      	mov	r0, r4
 800c092:	4798      	blx	r3
 800c094:	2000      	movs	r0, #0
 800c096:	e7e0      	b.n	800c05a <_raise_r+0x12>

0800c098 <raise>:
 800c098:	4b02      	ldr	r3, [pc, #8]	@ (800c0a4 <raise+0xc>)
 800c09a:	4601      	mov	r1, r0
 800c09c:	6818      	ldr	r0, [r3, #0]
 800c09e:	f7ff bfd3 	b.w	800c048 <_raise_r>
 800c0a2:	bf00      	nop
 800c0a4:	20000058 	.word	0x20000058

0800c0a8 <_kill_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	@ (800c0c8 <_kill_r+0x20>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	f7f8 faad 	bl	8004614 <_kill>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d102      	bne.n	800c0c4 <_kill_r+0x1c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b103      	cbz	r3, 800c0c4 <_kill_r+0x1c>
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	20000b00 	.word	0x20000b00

0800c0cc <_getpid_r>:
 800c0cc:	f7f8 ba9a 	b.w	8004604 <_getpid>

0800c0d0 <__swhatbuf_r>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d8:	2900      	cmp	r1, #0
 800c0da:	b096      	sub	sp, #88	@ 0x58
 800c0dc:	4615      	mov	r5, r2
 800c0de:	461e      	mov	r6, r3
 800c0e0:	da0d      	bge.n	800c0fe <__swhatbuf_r+0x2e>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0e8:	f04f 0100 	mov.w	r1, #0
 800c0ec:	bf14      	ite	ne
 800c0ee:	2340      	movne	r3, #64	@ 0x40
 800c0f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	6031      	str	r1, [r6, #0]
 800c0f8:	602b      	str	r3, [r5, #0]
 800c0fa:	b016      	add	sp, #88	@ 0x58
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
 800c0fe:	466a      	mov	r2, sp
 800c100:	f000 f848 	bl	800c194 <_fstat_r>
 800c104:	2800      	cmp	r0, #0
 800c106:	dbec      	blt.n	800c0e2 <__swhatbuf_r+0x12>
 800c108:	9901      	ldr	r1, [sp, #4]
 800c10a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c10e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c112:	4259      	negs	r1, r3
 800c114:	4159      	adcs	r1, r3
 800c116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c11a:	e7eb      	b.n	800c0f4 <__swhatbuf_r+0x24>

0800c11c <__smakebuf_r>:
 800c11c:	898b      	ldrh	r3, [r1, #12]
 800c11e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c120:	079d      	lsls	r5, r3, #30
 800c122:	4606      	mov	r6, r0
 800c124:	460c      	mov	r4, r1
 800c126:	d507      	bpl.n	800c138 <__smakebuf_r+0x1c>
 800c128:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c12c:	6023      	str	r3, [r4, #0]
 800c12e:	6123      	str	r3, [r4, #16]
 800c130:	2301      	movs	r3, #1
 800c132:	6163      	str	r3, [r4, #20]
 800c134:	b003      	add	sp, #12
 800c136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c138:	ab01      	add	r3, sp, #4
 800c13a:	466a      	mov	r2, sp
 800c13c:	f7ff ffc8 	bl	800c0d0 <__swhatbuf_r>
 800c140:	9f00      	ldr	r7, [sp, #0]
 800c142:	4605      	mov	r5, r0
 800c144:	4639      	mov	r1, r7
 800c146:	4630      	mov	r0, r6
 800c148:	f7fe febe 	bl	800aec8 <_malloc_r>
 800c14c:	b948      	cbnz	r0, 800c162 <__smakebuf_r+0x46>
 800c14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c152:	059a      	lsls	r2, r3, #22
 800c154:	d4ee      	bmi.n	800c134 <__smakebuf_r+0x18>
 800c156:	f023 0303 	bic.w	r3, r3, #3
 800c15a:	f043 0302 	orr.w	r3, r3, #2
 800c15e:	81a3      	strh	r3, [r4, #12]
 800c160:	e7e2      	b.n	800c128 <__smakebuf_r+0xc>
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	6020      	str	r0, [r4, #0]
 800c166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c172:	b15b      	cbz	r3, 800c18c <__smakebuf_r+0x70>
 800c174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 f81d 	bl	800c1b8 <_isatty_r>
 800c17e:	b128      	cbz	r0, 800c18c <__smakebuf_r+0x70>
 800c180:	89a3      	ldrh	r3, [r4, #12]
 800c182:	f023 0303 	bic.w	r3, r3, #3
 800c186:	f043 0301 	orr.w	r3, r3, #1
 800c18a:	81a3      	strh	r3, [r4, #12]
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	431d      	orrs	r5, r3
 800c190:	81a5      	strh	r5, [r4, #12]
 800c192:	e7cf      	b.n	800c134 <__smakebuf_r+0x18>

0800c194 <_fstat_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d07      	ldr	r5, [pc, #28]	@ (800c1b4 <_fstat_r+0x20>)
 800c198:	2300      	movs	r3, #0
 800c19a:	4604      	mov	r4, r0
 800c19c:	4608      	mov	r0, r1
 800c19e:	4611      	mov	r1, r2
 800c1a0:	602b      	str	r3, [r5, #0]
 800c1a2:	f7f8 fa7b 	bl	800469c <_fstat>
 800c1a6:	1c43      	adds	r3, r0, #1
 800c1a8:	d102      	bne.n	800c1b0 <_fstat_r+0x1c>
 800c1aa:	682b      	ldr	r3, [r5, #0]
 800c1ac:	b103      	cbz	r3, 800c1b0 <_fstat_r+0x1c>
 800c1ae:	6023      	str	r3, [r4, #0]
 800c1b0:	bd38      	pop	{r3, r4, r5, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000b00 	.word	0x20000b00

0800c1b8 <_isatty_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4d06      	ldr	r5, [pc, #24]	@ (800c1d4 <_isatty_r+0x1c>)
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	602b      	str	r3, [r5, #0]
 800c1c4:	f7f8 fa7a 	bl	80046bc <_isatty>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d102      	bne.n	800c1d2 <_isatty_r+0x1a>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	b103      	cbz	r3, 800c1d2 <_isatty_r+0x1a>
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	20000b00 	.word	0x20000b00

0800c1d8 <asin>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	ed2d 8b02 	vpush	{d8}
 800c1de:	ec55 4b10 	vmov	r4, r5, d0
 800c1e2:	f000 f8a1 	bl	800c328 <__ieee754_asin>
 800c1e6:	4622      	mov	r2, r4
 800c1e8:	462b      	mov	r3, r5
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c1f2:	eef0 8a60 	vmov.f32	s17, s1
 800c1f6:	f7f4 fca1 	bl	8000b3c <__aeabi_dcmpun>
 800c1fa:	b9a8      	cbnz	r0, 800c228 <asin+0x50>
 800c1fc:	ec45 4b10 	vmov	d0, r4, r5
 800c200:	f000 f820 	bl	800c244 <fabs>
 800c204:	4b0c      	ldr	r3, [pc, #48]	@ (800c238 <asin+0x60>)
 800c206:	ec51 0b10 	vmov	r0, r1, d0
 800c20a:	2200      	movs	r2, #0
 800c20c:	f7f4 fc8c 	bl	8000b28 <__aeabi_dcmpgt>
 800c210:	b150      	cbz	r0, 800c228 <asin+0x50>
 800c212:	f7fd ff69 	bl	800a0e8 <__errno>
 800c216:	ecbd 8b02 	vpop	{d8}
 800c21a:	2321      	movs	r3, #33	@ 0x21
 800c21c:	6003      	str	r3, [r0, #0]
 800c21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c222:	4806      	ldr	r0, [pc, #24]	@ (800c23c <asin+0x64>)
 800c224:	f000 b86c 	b.w	800c300 <nan>
 800c228:	eeb0 0a48 	vmov.f32	s0, s16
 800c22c:	eef0 0a68 	vmov.f32	s1, s17
 800c230:	ecbd 8b02 	vpop	{d8}
 800c234:	bd38      	pop	{r3, r4, r5, pc}
 800c236:	bf00      	nop
 800c238:	3ff00000 	.word	0x3ff00000
 800c23c:	0800de06 	.word	0x0800de06

0800c240 <atan2>:
 800c240:	f000 ba76 	b.w	800c730 <__ieee754_atan2>

0800c244 <fabs>:
 800c244:	ec51 0b10 	vmov	r0, r1, d0
 800c248:	4602      	mov	r2, r0
 800c24a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c24e:	ec43 2b10 	vmov	d0, r2, r3
 800c252:	4770      	bx	lr

0800c254 <asinf>:
 800c254:	b508      	push	{r3, lr}
 800c256:	ed2d 8b02 	vpush	{d8}
 800c25a:	eeb0 8a40 	vmov.f32	s16, s0
 800c25e:	f000 fcc7 	bl	800cbf0 <__ieee754_asinf>
 800c262:	eeb4 8a48 	vcmp.f32	s16, s16
 800c266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26a:	eef0 8a40 	vmov.f32	s17, s0
 800c26e:	d615      	bvs.n	800c29c <asinf+0x48>
 800c270:	eeb0 0a48 	vmov.f32	s0, s16
 800c274:	f000 f83a 	bl	800c2ec <fabsf>
 800c278:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c27c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c284:	dd0a      	ble.n	800c29c <asinf+0x48>
 800c286:	f7fd ff2f 	bl	800a0e8 <__errno>
 800c28a:	ecbd 8b02 	vpop	{d8}
 800c28e:	2321      	movs	r3, #33	@ 0x21
 800c290:	6003      	str	r3, [r0, #0]
 800c292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c296:	4804      	ldr	r0, [pc, #16]	@ (800c2a8 <asinf+0x54>)
 800c298:	f000 b83a 	b.w	800c310 <nanf>
 800c29c:	eeb0 0a68 	vmov.f32	s0, s17
 800c2a0:	ecbd 8b02 	vpop	{d8}
 800c2a4:	bd08      	pop	{r3, pc}
 800c2a6:	bf00      	nop
 800c2a8:	0800de06 	.word	0x0800de06

0800c2ac <atan2f>:
 800c2ac:	f000 bd86 	b.w	800cdbc <__ieee754_atan2f>

0800c2b0 <sqrtf>:
 800c2b0:	b508      	push	{r3, lr}
 800c2b2:	ed2d 8b02 	vpush	{d8}
 800c2b6:	eeb0 8a40 	vmov.f32	s16, s0
 800c2ba:	f000 f82f 	bl	800c31c <__ieee754_sqrtf>
 800c2be:	eeb4 8a48 	vcmp.f32	s16, s16
 800c2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c6:	d60c      	bvs.n	800c2e2 <sqrtf+0x32>
 800c2c8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c2e8 <sqrtf+0x38>
 800c2cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d4:	d505      	bpl.n	800c2e2 <sqrtf+0x32>
 800c2d6:	f7fd ff07 	bl	800a0e8 <__errno>
 800c2da:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c2de:	2321      	movs	r3, #33	@ 0x21
 800c2e0:	6003      	str	r3, [r0, #0]
 800c2e2:	ecbd 8b02 	vpop	{d8}
 800c2e6:	bd08      	pop	{r3, pc}
 800c2e8:	00000000 	.word	0x00000000

0800c2ec <fabsf>:
 800c2ec:	ee10 3a10 	vmov	r3, s0
 800c2f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c2f4:	ee00 3a10 	vmov	s0, r3
 800c2f8:	4770      	bx	lr
 800c2fa:	0000      	movs	r0, r0
 800c2fc:	0000      	movs	r0, r0
	...

0800c300 <nan>:
 800c300:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c308 <nan+0x8>
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	00000000 	.word	0x00000000
 800c30c:	7ff80000 	.word	0x7ff80000

0800c310 <nanf>:
 800c310:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c318 <nanf+0x8>
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop
 800c318:	7fc00000 	.word	0x7fc00000

0800c31c <__ieee754_sqrtf>:
 800c31c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c320:	4770      	bx	lr
 800c322:	0000      	movs	r0, r0
 800c324:	0000      	movs	r0, r0
	...

0800c328 <__ieee754_asin>:
 800c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32c:	ec55 4b10 	vmov	r4, r5, d0
 800c330:	4bc7      	ldr	r3, [pc, #796]	@ (800c650 <__ieee754_asin+0x328>)
 800c332:	b087      	sub	sp, #28
 800c334:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c338:	429e      	cmp	r6, r3
 800c33a:	9501      	str	r5, [sp, #4]
 800c33c:	d92d      	bls.n	800c39a <__ieee754_asin+0x72>
 800c33e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800c342:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800c346:	4326      	orrs	r6, r4
 800c348:	d116      	bne.n	800c378 <__ieee754_asin+0x50>
 800c34a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800c5e8 <__ieee754_asin+0x2c0>)
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	4620      	mov	r0, r4
 800c352:	4629      	mov	r1, r5
 800c354:	f7f4 f958 	bl	8000608 <__aeabi_dmul>
 800c358:	a3a5      	add	r3, pc, #660	@ (adr r3, 800c5f0 <__ieee754_asin+0x2c8>)
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	4606      	mov	r6, r0
 800c360:	460f      	mov	r7, r1
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f4 f94f 	bl	8000608 <__aeabi_dmul>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	4630      	mov	r0, r6
 800c370:	4639      	mov	r1, r7
 800c372:	f7f3 ff93 	bl	800029c <__adddf3>
 800c376:	e009      	b.n	800c38c <__ieee754_asin+0x64>
 800c378:	4622      	mov	r2, r4
 800c37a:	462b      	mov	r3, r5
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f3 ff8a 	bl	8000298 <__aeabi_dsub>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	f7f4 fa68 	bl	800085c <__aeabi_ddiv>
 800c38c:	4604      	mov	r4, r0
 800c38e:	460d      	mov	r5, r1
 800c390:	ec45 4b10 	vmov	d0, r4, r5
 800c394:	b007      	add	sp, #28
 800c396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39a:	4bae      	ldr	r3, [pc, #696]	@ (800c654 <__ieee754_asin+0x32c>)
 800c39c:	429e      	cmp	r6, r3
 800c39e:	d810      	bhi.n	800c3c2 <__ieee754_asin+0x9a>
 800c3a0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800c3a4:	f080 80ad 	bcs.w	800c502 <__ieee754_asin+0x1da>
 800c3a8:	a393      	add	r3, pc, #588	@ (adr r3, 800c5f8 <__ieee754_asin+0x2d0>)
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	f7f3 ff73 	bl	800029c <__adddf3>
 800c3b6:	4ba8      	ldr	r3, [pc, #672]	@ (800c658 <__ieee754_asin+0x330>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	f7f4 fbb5 	bl	8000b28 <__aeabi_dcmpgt>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d1e6      	bne.n	800c390 <__ieee754_asin+0x68>
 800c3c2:	ec45 4b10 	vmov	d0, r4, r5
 800c3c6:	f7ff ff3d 	bl	800c244 <fabs>
 800c3ca:	49a3      	ldr	r1, [pc, #652]	@ (800c658 <__ieee754_asin+0x330>)
 800c3cc:	ec53 2b10 	vmov	r2, r3, d0
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	f7f3 ff61 	bl	8000298 <__aeabi_dsub>
 800c3d6:	4ba1      	ldr	r3, [pc, #644]	@ (800c65c <__ieee754_asin+0x334>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f7f4 f915 	bl	8000608 <__aeabi_dmul>
 800c3de:	a388      	add	r3, pc, #544	@ (adr r3, 800c600 <__ieee754_asin+0x2d8>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	460d      	mov	r5, r1
 800c3e8:	f7f4 f90e 	bl	8000608 <__aeabi_dmul>
 800c3ec:	a386      	add	r3, pc, #536	@ (adr r3, 800c608 <__ieee754_asin+0x2e0>)
 800c3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f2:	f7f3 ff53 	bl	800029c <__adddf3>
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	462b      	mov	r3, r5
 800c3fa:	f7f4 f905 	bl	8000608 <__aeabi_dmul>
 800c3fe:	a384      	add	r3, pc, #528	@ (adr r3, 800c610 <__ieee754_asin+0x2e8>)
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f7f3 ff48 	bl	8000298 <__aeabi_dsub>
 800c408:	4622      	mov	r2, r4
 800c40a:	462b      	mov	r3, r5
 800c40c:	f7f4 f8fc 	bl	8000608 <__aeabi_dmul>
 800c410:	a381      	add	r3, pc, #516	@ (adr r3, 800c618 <__ieee754_asin+0x2f0>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	f7f3 ff41 	bl	800029c <__adddf3>
 800c41a:	4622      	mov	r2, r4
 800c41c:	462b      	mov	r3, r5
 800c41e:	f7f4 f8f3 	bl	8000608 <__aeabi_dmul>
 800c422:	a37f      	add	r3, pc, #508	@ (adr r3, 800c620 <__ieee754_asin+0x2f8>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f7f3 ff36 	bl	8000298 <__aeabi_dsub>
 800c42c:	4622      	mov	r2, r4
 800c42e:	462b      	mov	r3, r5
 800c430:	f7f4 f8ea 	bl	8000608 <__aeabi_dmul>
 800c434:	a37c      	add	r3, pc, #496	@ (adr r3, 800c628 <__ieee754_asin+0x300>)
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f7f3 ff2f 	bl	800029c <__adddf3>
 800c43e:	4622      	mov	r2, r4
 800c440:	462b      	mov	r3, r5
 800c442:	f7f4 f8e1 	bl	8000608 <__aeabi_dmul>
 800c446:	a37a      	add	r3, pc, #488	@ (adr r3, 800c630 <__ieee754_asin+0x308>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c450:	4620      	mov	r0, r4
 800c452:	4629      	mov	r1, r5
 800c454:	f7f4 f8d8 	bl	8000608 <__aeabi_dmul>
 800c458:	a377      	add	r3, pc, #476	@ (adr r3, 800c638 <__ieee754_asin+0x310>)
 800c45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45e:	f7f3 ff1b 	bl	8000298 <__aeabi_dsub>
 800c462:	4622      	mov	r2, r4
 800c464:	462b      	mov	r3, r5
 800c466:	f7f4 f8cf 	bl	8000608 <__aeabi_dmul>
 800c46a:	a375      	add	r3, pc, #468	@ (adr r3, 800c640 <__ieee754_asin+0x318>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f7f3 ff14 	bl	800029c <__adddf3>
 800c474:	4622      	mov	r2, r4
 800c476:	462b      	mov	r3, r5
 800c478:	f7f4 f8c6 	bl	8000608 <__aeabi_dmul>
 800c47c:	a372      	add	r3, pc, #456	@ (adr r3, 800c648 <__ieee754_asin+0x320>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f3 ff09 	bl	8000298 <__aeabi_dsub>
 800c486:	4622      	mov	r2, r4
 800c488:	462b      	mov	r3, r5
 800c48a:	f7f4 f8bd 	bl	8000608 <__aeabi_dmul>
 800c48e:	4b72      	ldr	r3, [pc, #456]	@ (800c658 <__ieee754_asin+0x330>)
 800c490:	2200      	movs	r2, #0
 800c492:	f7f3 ff03 	bl	800029c <__adddf3>
 800c496:	ec45 4b10 	vmov	d0, r4, r5
 800c49a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c49e:	f000 fe01 	bl	800d0a4 <__ieee754_sqrt>
 800c4a2:	4b6f      	ldr	r3, [pc, #444]	@ (800c660 <__ieee754_asin+0x338>)
 800c4a4:	429e      	cmp	r6, r3
 800c4a6:	ec5b ab10 	vmov	sl, fp, d0
 800c4aa:	f240 80db 	bls.w	800c664 <__ieee754_asin+0x33c>
 800c4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4b6:	f7f4 f9d1 	bl	800085c <__aeabi_ddiv>
 800c4ba:	4652      	mov	r2, sl
 800c4bc:	465b      	mov	r3, fp
 800c4be:	f7f4 f8a3 	bl	8000608 <__aeabi_dmul>
 800c4c2:	4652      	mov	r2, sl
 800c4c4:	465b      	mov	r3, fp
 800c4c6:	f7f3 fee9 	bl	800029c <__adddf3>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	f7f3 fee5 	bl	800029c <__adddf3>
 800c4d2:	a347      	add	r3, pc, #284	@ (adr r3, 800c5f0 <__ieee754_asin+0x2c8>)
 800c4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d8:	f7f3 fede 	bl	8000298 <__aeabi_dsub>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	460b      	mov	r3, r1
 800c4e0:	a141      	add	r1, pc, #260	@ (adr r1, 800c5e8 <__ieee754_asin+0x2c0>)
 800c4e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4e6:	f7f3 fed7 	bl	8000298 <__aeabi_dsub>
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bfdc      	itt	le
 800c4f0:	4602      	movle	r2, r0
 800c4f2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	460d      	mov	r5, r1
 800c4fa:	bfdc      	itt	le
 800c4fc:	4614      	movle	r4, r2
 800c4fe:	461d      	movle	r5, r3
 800c500:	e746      	b.n	800c390 <__ieee754_asin+0x68>
 800c502:	4622      	mov	r2, r4
 800c504:	462b      	mov	r3, r5
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 f87d 	bl	8000608 <__aeabi_dmul>
 800c50e:	a33c      	add	r3, pc, #240	@ (adr r3, 800c600 <__ieee754_asin+0x2d8>)
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	4606      	mov	r6, r0
 800c516:	460f      	mov	r7, r1
 800c518:	f7f4 f876 	bl	8000608 <__aeabi_dmul>
 800c51c:	a33a      	add	r3, pc, #232	@ (adr r3, 800c608 <__ieee754_asin+0x2e0>)
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	f7f3 febb 	bl	800029c <__adddf3>
 800c526:	4632      	mov	r2, r6
 800c528:	463b      	mov	r3, r7
 800c52a:	f7f4 f86d 	bl	8000608 <__aeabi_dmul>
 800c52e:	a338      	add	r3, pc, #224	@ (adr r3, 800c610 <__ieee754_asin+0x2e8>)
 800c530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c534:	f7f3 feb0 	bl	8000298 <__aeabi_dsub>
 800c538:	4632      	mov	r2, r6
 800c53a:	463b      	mov	r3, r7
 800c53c:	f7f4 f864 	bl	8000608 <__aeabi_dmul>
 800c540:	a335      	add	r3, pc, #212	@ (adr r3, 800c618 <__ieee754_asin+0x2f0>)
 800c542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c546:	f7f3 fea9 	bl	800029c <__adddf3>
 800c54a:	4632      	mov	r2, r6
 800c54c:	463b      	mov	r3, r7
 800c54e:	f7f4 f85b 	bl	8000608 <__aeabi_dmul>
 800c552:	a333      	add	r3, pc, #204	@ (adr r3, 800c620 <__ieee754_asin+0x2f8>)
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	f7f3 fe9e 	bl	8000298 <__aeabi_dsub>
 800c55c:	4632      	mov	r2, r6
 800c55e:	463b      	mov	r3, r7
 800c560:	f7f4 f852 	bl	8000608 <__aeabi_dmul>
 800c564:	a330      	add	r3, pc, #192	@ (adr r3, 800c628 <__ieee754_asin+0x300>)
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	f7f3 fe97 	bl	800029c <__adddf3>
 800c56e:	4632      	mov	r2, r6
 800c570:	463b      	mov	r3, r7
 800c572:	f7f4 f849 	bl	8000608 <__aeabi_dmul>
 800c576:	a32e      	add	r3, pc, #184	@ (adr r3, 800c630 <__ieee754_asin+0x308>)
 800c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57c:	4680      	mov	r8, r0
 800c57e:	4689      	mov	r9, r1
 800c580:	4630      	mov	r0, r6
 800c582:	4639      	mov	r1, r7
 800c584:	f7f4 f840 	bl	8000608 <__aeabi_dmul>
 800c588:	a32b      	add	r3, pc, #172	@ (adr r3, 800c638 <__ieee754_asin+0x310>)
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f7f3 fe83 	bl	8000298 <__aeabi_dsub>
 800c592:	4632      	mov	r2, r6
 800c594:	463b      	mov	r3, r7
 800c596:	f7f4 f837 	bl	8000608 <__aeabi_dmul>
 800c59a:	a329      	add	r3, pc, #164	@ (adr r3, 800c640 <__ieee754_asin+0x318>)
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	f7f3 fe7c 	bl	800029c <__adddf3>
 800c5a4:	4632      	mov	r2, r6
 800c5a6:	463b      	mov	r3, r7
 800c5a8:	f7f4 f82e 	bl	8000608 <__aeabi_dmul>
 800c5ac:	a326      	add	r3, pc, #152	@ (adr r3, 800c648 <__ieee754_asin+0x320>)
 800c5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b2:	f7f3 fe71 	bl	8000298 <__aeabi_dsub>
 800c5b6:	4632      	mov	r2, r6
 800c5b8:	463b      	mov	r3, r7
 800c5ba:	f7f4 f825 	bl	8000608 <__aeabi_dmul>
 800c5be:	4b26      	ldr	r3, [pc, #152]	@ (800c658 <__ieee754_asin+0x330>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f7f3 fe6b 	bl	800029c <__adddf3>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	4649      	mov	r1, r9
 800c5ce:	f7f4 f945 	bl	800085c <__aeabi_ddiv>
 800c5d2:	4622      	mov	r2, r4
 800c5d4:	462b      	mov	r3, r5
 800c5d6:	f7f4 f817 	bl	8000608 <__aeabi_dmul>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	460b      	mov	r3, r1
 800c5de:	4620      	mov	r0, r4
 800c5e0:	4629      	mov	r1, r5
 800c5e2:	e6c6      	b.n	800c372 <__ieee754_asin+0x4a>
 800c5e4:	f3af 8000 	nop.w
 800c5e8:	54442d18 	.word	0x54442d18
 800c5ec:	3ff921fb 	.word	0x3ff921fb
 800c5f0:	33145c07 	.word	0x33145c07
 800c5f4:	3c91a626 	.word	0x3c91a626
 800c5f8:	8800759c 	.word	0x8800759c
 800c5fc:	7e37e43c 	.word	0x7e37e43c
 800c600:	0dfdf709 	.word	0x0dfdf709
 800c604:	3f023de1 	.word	0x3f023de1
 800c608:	7501b288 	.word	0x7501b288
 800c60c:	3f49efe0 	.word	0x3f49efe0
 800c610:	b5688f3b 	.word	0xb5688f3b
 800c614:	3fa48228 	.word	0x3fa48228
 800c618:	0e884455 	.word	0x0e884455
 800c61c:	3fc9c155 	.word	0x3fc9c155
 800c620:	03eb6f7d 	.word	0x03eb6f7d
 800c624:	3fd4d612 	.word	0x3fd4d612
 800c628:	55555555 	.word	0x55555555
 800c62c:	3fc55555 	.word	0x3fc55555
 800c630:	b12e9282 	.word	0xb12e9282
 800c634:	3fb3b8c5 	.word	0x3fb3b8c5
 800c638:	1b8d0159 	.word	0x1b8d0159
 800c63c:	3fe6066c 	.word	0x3fe6066c
 800c640:	9c598ac8 	.word	0x9c598ac8
 800c644:	40002ae5 	.word	0x40002ae5
 800c648:	1c8a2d4b 	.word	0x1c8a2d4b
 800c64c:	40033a27 	.word	0x40033a27
 800c650:	3fefffff 	.word	0x3fefffff
 800c654:	3fdfffff 	.word	0x3fdfffff
 800c658:	3ff00000 	.word	0x3ff00000
 800c65c:	3fe00000 	.word	0x3fe00000
 800c660:	3fef3332 	.word	0x3fef3332
 800c664:	4652      	mov	r2, sl
 800c666:	465b      	mov	r3, fp
 800c668:	4650      	mov	r0, sl
 800c66a:	4659      	mov	r1, fp
 800c66c:	f7f3 fe16 	bl	800029c <__adddf3>
 800c670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c674:	4606      	mov	r6, r0
 800c676:	460f      	mov	r7, r1
 800c678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c67c:	f7f4 f8ee 	bl	800085c <__aeabi_ddiv>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	4630      	mov	r0, r6
 800c686:	4639      	mov	r1, r7
 800c688:	f7f3 ffbe 	bl	8000608 <__aeabi_dmul>
 800c68c:	f04f 0800 	mov.w	r8, #0
 800c690:	4606      	mov	r6, r0
 800c692:	460f      	mov	r7, r1
 800c694:	4642      	mov	r2, r8
 800c696:	465b      	mov	r3, fp
 800c698:	4640      	mov	r0, r8
 800c69a:	4659      	mov	r1, fp
 800c69c:	f7f3 ffb4 	bl	8000608 <__aeabi_dmul>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4629      	mov	r1, r5
 800c6a8:	f7f3 fdf6 	bl	8000298 <__aeabi_dsub>
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	465b      	mov	r3, fp
 800c6b4:	4650      	mov	r0, sl
 800c6b6:	4659      	mov	r1, fp
 800c6b8:	f7f3 fdf0 	bl	800029c <__adddf3>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	f7f4 f8ca 	bl	800085c <__aeabi_ddiv>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	f7f3 fde6 	bl	800029c <__adddf3>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	a112      	add	r1, pc, #72	@ (adr r1, 800c720 <__ieee754_asin+0x3f8>)
 800c6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6da:	f7f3 fddd 	bl	8000298 <__aeabi_dsub>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	4639      	mov	r1, r7
 800c6e6:	f7f3 fdd7 	bl	8000298 <__aeabi_dsub>
 800c6ea:	4642      	mov	r2, r8
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	460d      	mov	r5, r1
 800c6f0:	465b      	mov	r3, fp
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	4659      	mov	r1, fp
 800c6f6:	f7f3 fdd1 	bl	800029c <__adddf3>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	a10a      	add	r1, pc, #40	@ (adr r1, 800c728 <__ieee754_asin+0x400>)
 800c700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c704:	f7f3 fdc8 	bl	8000298 <__aeabi_dsub>
 800c708:	4602      	mov	r2, r0
 800c70a:	460b      	mov	r3, r1
 800c70c:	4620      	mov	r0, r4
 800c70e:	4629      	mov	r1, r5
 800c710:	f7f3 fdc2 	bl	8000298 <__aeabi_dsub>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	a103      	add	r1, pc, #12	@ (adr r1, 800c728 <__ieee754_asin+0x400>)
 800c71a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c71e:	e6e2      	b.n	800c4e6 <__ieee754_asin+0x1be>
 800c720:	33145c07 	.word	0x33145c07
 800c724:	3c91a626 	.word	0x3c91a626
 800c728:	54442d18 	.word	0x54442d18
 800c72c:	3fe921fb 	.word	0x3fe921fb

0800c730 <__ieee754_atan2>:
 800c730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c734:	ec57 6b11 	vmov	r6, r7, d1
 800c738:	4273      	negs	r3, r6
 800c73a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c8b8 <__ieee754_atan2+0x188>
 800c73e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c742:	4333      	orrs	r3, r6
 800c744:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c748:	4543      	cmp	r3, r8
 800c74a:	ec51 0b10 	vmov	r0, r1, d0
 800c74e:	4635      	mov	r5, r6
 800c750:	d809      	bhi.n	800c766 <__ieee754_atan2+0x36>
 800c752:	4244      	negs	r4, r0
 800c754:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c758:	4304      	orrs	r4, r0
 800c75a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c75e:	4544      	cmp	r4, r8
 800c760:	468e      	mov	lr, r1
 800c762:	4681      	mov	r9, r0
 800c764:	d907      	bls.n	800c776 <__ieee754_atan2+0x46>
 800c766:	4632      	mov	r2, r6
 800c768:	463b      	mov	r3, r7
 800c76a:	f7f3 fd97 	bl	800029c <__adddf3>
 800c76e:	ec41 0b10 	vmov	d0, r0, r1
 800c772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c776:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c77a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c77e:	4334      	orrs	r4, r6
 800c780:	d103      	bne.n	800c78a <__ieee754_atan2+0x5a>
 800c782:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c786:	f000 b89b 	b.w	800c8c0 <atan>
 800c78a:	17bc      	asrs	r4, r7, #30
 800c78c:	f004 0402 	and.w	r4, r4, #2
 800c790:	ea53 0909 	orrs.w	r9, r3, r9
 800c794:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c798:	d107      	bne.n	800c7aa <__ieee754_atan2+0x7a>
 800c79a:	2c02      	cmp	r4, #2
 800c79c:	d05f      	beq.n	800c85e <__ieee754_atan2+0x12e>
 800c79e:	2c03      	cmp	r4, #3
 800c7a0:	d1e5      	bne.n	800c76e <__ieee754_atan2+0x3e>
 800c7a2:	a141      	add	r1, pc, #260	@ (adr r1, 800c8a8 <__ieee754_atan2+0x178>)
 800c7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7a8:	e7e1      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c7aa:	4315      	orrs	r5, r2
 800c7ac:	d106      	bne.n	800c7bc <__ieee754_atan2+0x8c>
 800c7ae:	f1be 0f00 	cmp.w	lr, #0
 800c7b2:	da5f      	bge.n	800c874 <__ieee754_atan2+0x144>
 800c7b4:	a13e      	add	r1, pc, #248	@ (adr r1, 800c8b0 <__ieee754_atan2+0x180>)
 800c7b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ba:	e7d8      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c7bc:	4542      	cmp	r2, r8
 800c7be:	d10f      	bne.n	800c7e0 <__ieee754_atan2+0xb0>
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c7c6:	d107      	bne.n	800c7d8 <__ieee754_atan2+0xa8>
 800c7c8:	2c02      	cmp	r4, #2
 800c7ca:	d84c      	bhi.n	800c866 <__ieee754_atan2+0x136>
 800c7cc:	4b34      	ldr	r3, [pc, #208]	@ (800c8a0 <__ieee754_atan2+0x170>)
 800c7ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7d6:	e7ca      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c7d8:	2c02      	cmp	r4, #2
 800c7da:	d848      	bhi.n	800c86e <__ieee754_atan2+0x13e>
 800c7dc:	4b31      	ldr	r3, [pc, #196]	@ (800c8a4 <__ieee754_atan2+0x174>)
 800c7de:	e7f6      	b.n	800c7ce <__ieee754_atan2+0x9e>
 800c7e0:	4543      	cmp	r3, r8
 800c7e2:	d0e4      	beq.n	800c7ae <__ieee754_atan2+0x7e>
 800c7e4:	1a9b      	subs	r3, r3, r2
 800c7e6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c7ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c7ee:	da1e      	bge.n	800c82e <__ieee754_atan2+0xfe>
 800c7f0:	2f00      	cmp	r7, #0
 800c7f2:	da01      	bge.n	800c7f8 <__ieee754_atan2+0xc8>
 800c7f4:	323c      	adds	r2, #60	@ 0x3c
 800c7f6:	db1e      	blt.n	800c836 <__ieee754_atan2+0x106>
 800c7f8:	4632      	mov	r2, r6
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	f7f4 f82e 	bl	800085c <__aeabi_ddiv>
 800c800:	ec41 0b10 	vmov	d0, r0, r1
 800c804:	f7ff fd1e 	bl	800c244 <fabs>
 800c808:	f000 f85a 	bl	800c8c0 <atan>
 800c80c:	ec51 0b10 	vmov	r0, r1, d0
 800c810:	2c01      	cmp	r4, #1
 800c812:	d013      	beq.n	800c83c <__ieee754_atan2+0x10c>
 800c814:	2c02      	cmp	r4, #2
 800c816:	d015      	beq.n	800c844 <__ieee754_atan2+0x114>
 800c818:	2c00      	cmp	r4, #0
 800c81a:	d0a8      	beq.n	800c76e <__ieee754_atan2+0x3e>
 800c81c:	a318      	add	r3, pc, #96	@ (adr r3, 800c880 <__ieee754_atan2+0x150>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	f7f3 fd39 	bl	8000298 <__aeabi_dsub>
 800c826:	a318      	add	r3, pc, #96	@ (adr r3, 800c888 <__ieee754_atan2+0x158>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	e014      	b.n	800c858 <__ieee754_atan2+0x128>
 800c82e:	a118      	add	r1, pc, #96	@ (adr r1, 800c890 <__ieee754_atan2+0x160>)
 800c830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c834:	e7ec      	b.n	800c810 <__ieee754_atan2+0xe0>
 800c836:	2000      	movs	r0, #0
 800c838:	2100      	movs	r1, #0
 800c83a:	e7e9      	b.n	800c810 <__ieee754_atan2+0xe0>
 800c83c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c840:	4619      	mov	r1, r3
 800c842:	e794      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c844:	a30e      	add	r3, pc, #56	@ (adr r3, 800c880 <__ieee754_atan2+0x150>)
 800c846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84a:	f7f3 fd25 	bl	8000298 <__aeabi_dsub>
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	a10d      	add	r1, pc, #52	@ (adr r1, 800c888 <__ieee754_atan2+0x158>)
 800c854:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c858:	f7f3 fd1e 	bl	8000298 <__aeabi_dsub>
 800c85c:	e787      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c85e:	a10a      	add	r1, pc, #40	@ (adr r1, 800c888 <__ieee754_atan2+0x158>)
 800c860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c864:	e783      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c866:	a10c      	add	r1, pc, #48	@ (adr r1, 800c898 <__ieee754_atan2+0x168>)
 800c868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c86c:	e77f      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c86e:	2000      	movs	r0, #0
 800c870:	2100      	movs	r1, #0
 800c872:	e77c      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c874:	a106      	add	r1, pc, #24	@ (adr r1, 800c890 <__ieee754_atan2+0x160>)
 800c876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c87a:	e778      	b.n	800c76e <__ieee754_atan2+0x3e>
 800c87c:	f3af 8000 	nop.w
 800c880:	33145c07 	.word	0x33145c07
 800c884:	3ca1a626 	.word	0x3ca1a626
 800c888:	54442d18 	.word	0x54442d18
 800c88c:	400921fb 	.word	0x400921fb
 800c890:	54442d18 	.word	0x54442d18
 800c894:	3ff921fb 	.word	0x3ff921fb
 800c898:	54442d18 	.word	0x54442d18
 800c89c:	3fe921fb 	.word	0x3fe921fb
 800c8a0:	0800df20 	.word	0x0800df20
 800c8a4:	0800df08 	.word	0x0800df08
 800c8a8:	54442d18 	.word	0x54442d18
 800c8ac:	c00921fb 	.word	0xc00921fb
 800c8b0:	54442d18 	.word	0x54442d18
 800c8b4:	bff921fb 	.word	0xbff921fb
 800c8b8:	7ff00000 	.word	0x7ff00000
 800c8bc:	00000000 	.word	0x00000000

0800c8c0 <atan>:
 800c8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	ec55 4b10 	vmov	r4, r5, d0
 800c8c8:	4bbf      	ldr	r3, [pc, #764]	@ (800cbc8 <atan+0x308>)
 800c8ca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c8ce:	429e      	cmp	r6, r3
 800c8d0:	46ab      	mov	fp, r5
 800c8d2:	d918      	bls.n	800c906 <atan+0x46>
 800c8d4:	4bbd      	ldr	r3, [pc, #756]	@ (800cbcc <atan+0x30c>)
 800c8d6:	429e      	cmp	r6, r3
 800c8d8:	d801      	bhi.n	800c8de <atan+0x1e>
 800c8da:	d109      	bne.n	800c8f0 <atan+0x30>
 800c8dc:	b144      	cbz	r4, 800c8f0 <atan+0x30>
 800c8de:	4622      	mov	r2, r4
 800c8e0:	462b      	mov	r3, r5
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	f7f3 fcd9 	bl	800029c <__adddf3>
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	e006      	b.n	800c8fe <atan+0x3e>
 800c8f0:	f1bb 0f00 	cmp.w	fp, #0
 800c8f4:	f340 812b 	ble.w	800cb4e <atan+0x28e>
 800c8f8:	a597      	add	r5, pc, #604	@ (adr r5, 800cb58 <atan+0x298>)
 800c8fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c8fe:	ec45 4b10 	vmov	d0, r4, r5
 800c902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c906:	4bb2      	ldr	r3, [pc, #712]	@ (800cbd0 <atan+0x310>)
 800c908:	429e      	cmp	r6, r3
 800c90a:	d813      	bhi.n	800c934 <atan+0x74>
 800c90c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c910:	429e      	cmp	r6, r3
 800c912:	d80c      	bhi.n	800c92e <atan+0x6e>
 800c914:	a392      	add	r3, pc, #584	@ (adr r3, 800cb60 <atan+0x2a0>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	4620      	mov	r0, r4
 800c91c:	4629      	mov	r1, r5
 800c91e:	f7f3 fcbd 	bl	800029c <__adddf3>
 800c922:	4bac      	ldr	r3, [pc, #688]	@ (800cbd4 <atan+0x314>)
 800c924:	2200      	movs	r2, #0
 800c926:	f7f4 f8ff 	bl	8000b28 <__aeabi_dcmpgt>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d1e7      	bne.n	800c8fe <atan+0x3e>
 800c92e:	f04f 3aff 	mov.w	sl, #4294967295
 800c932:	e029      	b.n	800c988 <atan+0xc8>
 800c934:	f7ff fc86 	bl	800c244 <fabs>
 800c938:	4ba7      	ldr	r3, [pc, #668]	@ (800cbd8 <atan+0x318>)
 800c93a:	429e      	cmp	r6, r3
 800c93c:	ec55 4b10 	vmov	r4, r5, d0
 800c940:	f200 80bc 	bhi.w	800cabc <atan+0x1fc>
 800c944:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c948:	429e      	cmp	r6, r3
 800c94a:	f200 809e 	bhi.w	800ca8a <atan+0x1ca>
 800c94e:	4622      	mov	r2, r4
 800c950:	462b      	mov	r3, r5
 800c952:	4620      	mov	r0, r4
 800c954:	4629      	mov	r1, r5
 800c956:	f7f3 fca1 	bl	800029c <__adddf3>
 800c95a:	4b9e      	ldr	r3, [pc, #632]	@ (800cbd4 <atan+0x314>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	f7f3 fc9b 	bl	8000298 <__aeabi_dsub>
 800c962:	2200      	movs	r2, #0
 800c964:	4606      	mov	r6, r0
 800c966:	460f      	mov	r7, r1
 800c968:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c96c:	4620      	mov	r0, r4
 800c96e:	4629      	mov	r1, r5
 800c970:	f7f3 fc94 	bl	800029c <__adddf3>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f3 ff6e 	bl	800085c <__aeabi_ddiv>
 800c980:	f04f 0a00 	mov.w	sl, #0
 800c984:	4604      	mov	r4, r0
 800c986:	460d      	mov	r5, r1
 800c988:	4622      	mov	r2, r4
 800c98a:	462b      	mov	r3, r5
 800c98c:	4620      	mov	r0, r4
 800c98e:	4629      	mov	r1, r5
 800c990:	f7f3 fe3a 	bl	8000608 <__aeabi_dmul>
 800c994:	4602      	mov	r2, r0
 800c996:	460b      	mov	r3, r1
 800c998:	4680      	mov	r8, r0
 800c99a:	4689      	mov	r9, r1
 800c99c:	f7f3 fe34 	bl	8000608 <__aeabi_dmul>
 800c9a0:	a371      	add	r3, pc, #452	@ (adr r3, 800cb68 <atan+0x2a8>)
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	f7f3 fe2d 	bl	8000608 <__aeabi_dmul>
 800c9ae:	a370      	add	r3, pc, #448	@ (adr r3, 800cb70 <atan+0x2b0>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 fc72 	bl	800029c <__adddf3>
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	f7f3 fe24 	bl	8000608 <__aeabi_dmul>
 800c9c0:	a36d      	add	r3, pc, #436	@ (adr r3, 800cb78 <atan+0x2b8>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc69 	bl	800029c <__adddf3>
 800c9ca:	4632      	mov	r2, r6
 800c9cc:	463b      	mov	r3, r7
 800c9ce:	f7f3 fe1b 	bl	8000608 <__aeabi_dmul>
 800c9d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800cb80 <atan+0x2c0>)
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f7f3 fc60 	bl	800029c <__adddf3>
 800c9dc:	4632      	mov	r2, r6
 800c9de:	463b      	mov	r3, r7
 800c9e0:	f7f3 fe12 	bl	8000608 <__aeabi_dmul>
 800c9e4:	a368      	add	r3, pc, #416	@ (adr r3, 800cb88 <atan+0x2c8>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fc57 	bl	800029c <__adddf3>
 800c9ee:	4632      	mov	r2, r6
 800c9f0:	463b      	mov	r3, r7
 800c9f2:	f7f3 fe09 	bl	8000608 <__aeabi_dmul>
 800c9f6:	a366      	add	r3, pc, #408	@ (adr r3, 800cb90 <atan+0x2d0>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	f7f3 fc4e 	bl	800029c <__adddf3>
 800ca00:	4642      	mov	r2, r8
 800ca02:	464b      	mov	r3, r9
 800ca04:	f7f3 fe00 	bl	8000608 <__aeabi_dmul>
 800ca08:	a363      	add	r3, pc, #396	@ (adr r3, 800cb98 <atan+0x2d8>)
 800ca0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca0e:	4680      	mov	r8, r0
 800ca10:	4689      	mov	r9, r1
 800ca12:	4630      	mov	r0, r6
 800ca14:	4639      	mov	r1, r7
 800ca16:	f7f3 fdf7 	bl	8000608 <__aeabi_dmul>
 800ca1a:	a361      	add	r3, pc, #388	@ (adr r3, 800cba0 <atan+0x2e0>)
 800ca1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca20:	f7f3 fc3a 	bl	8000298 <__aeabi_dsub>
 800ca24:	4632      	mov	r2, r6
 800ca26:	463b      	mov	r3, r7
 800ca28:	f7f3 fdee 	bl	8000608 <__aeabi_dmul>
 800ca2c:	a35e      	add	r3, pc, #376	@ (adr r3, 800cba8 <atan+0x2e8>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	f7f3 fc31 	bl	8000298 <__aeabi_dsub>
 800ca36:	4632      	mov	r2, r6
 800ca38:	463b      	mov	r3, r7
 800ca3a:	f7f3 fde5 	bl	8000608 <__aeabi_dmul>
 800ca3e:	a35c      	add	r3, pc, #368	@ (adr r3, 800cbb0 <atan+0x2f0>)
 800ca40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca44:	f7f3 fc28 	bl	8000298 <__aeabi_dsub>
 800ca48:	4632      	mov	r2, r6
 800ca4a:	463b      	mov	r3, r7
 800ca4c:	f7f3 fddc 	bl	8000608 <__aeabi_dmul>
 800ca50:	a359      	add	r3, pc, #356	@ (adr r3, 800cbb8 <atan+0x2f8>)
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	f7f3 fc1f 	bl	8000298 <__aeabi_dsub>
 800ca5a:	4632      	mov	r2, r6
 800ca5c:	463b      	mov	r3, r7
 800ca5e:	f7f3 fdd3 	bl	8000608 <__aeabi_dmul>
 800ca62:	4602      	mov	r2, r0
 800ca64:	460b      	mov	r3, r1
 800ca66:	4640      	mov	r0, r8
 800ca68:	4649      	mov	r1, r9
 800ca6a:	f7f3 fc17 	bl	800029c <__adddf3>
 800ca6e:	4622      	mov	r2, r4
 800ca70:	462b      	mov	r3, r5
 800ca72:	f7f3 fdc9 	bl	8000608 <__aeabi_dmul>
 800ca76:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	d148      	bne.n	800cb12 <atan+0x252>
 800ca80:	4620      	mov	r0, r4
 800ca82:	4629      	mov	r1, r5
 800ca84:	f7f3 fc08 	bl	8000298 <__aeabi_dsub>
 800ca88:	e72f      	b.n	800c8ea <atan+0x2a>
 800ca8a:	4b52      	ldr	r3, [pc, #328]	@ (800cbd4 <atan+0x314>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 fc01 	bl	8000298 <__aeabi_dsub>
 800ca96:	4b4f      	ldr	r3, [pc, #316]	@ (800cbd4 <atan+0x314>)
 800ca98:	4606      	mov	r6, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	4620      	mov	r0, r4
 800caa0:	4629      	mov	r1, r5
 800caa2:	f7f3 fbfb 	bl	800029c <__adddf3>
 800caa6:	4602      	mov	r2, r0
 800caa8:	460b      	mov	r3, r1
 800caaa:	4630      	mov	r0, r6
 800caac:	4639      	mov	r1, r7
 800caae:	f7f3 fed5 	bl	800085c <__aeabi_ddiv>
 800cab2:	f04f 0a01 	mov.w	sl, #1
 800cab6:	4604      	mov	r4, r0
 800cab8:	460d      	mov	r5, r1
 800caba:	e765      	b.n	800c988 <atan+0xc8>
 800cabc:	4b47      	ldr	r3, [pc, #284]	@ (800cbdc <atan+0x31c>)
 800cabe:	429e      	cmp	r6, r3
 800cac0:	d21c      	bcs.n	800cafc <atan+0x23c>
 800cac2:	4b47      	ldr	r3, [pc, #284]	@ (800cbe0 <atan+0x320>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	4620      	mov	r0, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	f7f3 fbe5 	bl	8000298 <__aeabi_dsub>
 800cace:	4b44      	ldr	r3, [pc, #272]	@ (800cbe0 <atan+0x320>)
 800cad0:	4606      	mov	r6, r0
 800cad2:	460f      	mov	r7, r1
 800cad4:	2200      	movs	r2, #0
 800cad6:	4620      	mov	r0, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	f7f3 fd95 	bl	8000608 <__aeabi_dmul>
 800cade:	4b3d      	ldr	r3, [pc, #244]	@ (800cbd4 <atan+0x314>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	f7f3 fbdb 	bl	800029c <__adddf3>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	4630      	mov	r0, r6
 800caec:	4639      	mov	r1, r7
 800caee:	f7f3 feb5 	bl	800085c <__aeabi_ddiv>
 800caf2:	f04f 0a02 	mov.w	sl, #2
 800caf6:	4604      	mov	r4, r0
 800caf8:	460d      	mov	r5, r1
 800cafa:	e745      	b.n	800c988 <atan+0xc8>
 800cafc:	4622      	mov	r2, r4
 800cafe:	462b      	mov	r3, r5
 800cb00:	4938      	ldr	r1, [pc, #224]	@ (800cbe4 <atan+0x324>)
 800cb02:	2000      	movs	r0, #0
 800cb04:	f7f3 feaa 	bl	800085c <__aeabi_ddiv>
 800cb08:	f04f 0a03 	mov.w	sl, #3
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	460d      	mov	r5, r1
 800cb10:	e73a      	b.n	800c988 <atan+0xc8>
 800cb12:	4b35      	ldr	r3, [pc, #212]	@ (800cbe8 <atan+0x328>)
 800cb14:	4e35      	ldr	r6, [pc, #212]	@ (800cbec <atan+0x32c>)
 800cb16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	f7f3 fbbb 	bl	8000298 <__aeabi_dsub>
 800cb22:	4622      	mov	r2, r4
 800cb24:	462b      	mov	r3, r5
 800cb26:	f7f3 fbb7 	bl	8000298 <__aeabi_dsub>
 800cb2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb36:	f7f3 fbaf 	bl	8000298 <__aeabi_dsub>
 800cb3a:	f1bb 0f00 	cmp.w	fp, #0
 800cb3e:	4604      	mov	r4, r0
 800cb40:	460d      	mov	r5, r1
 800cb42:	f6bf aedc 	bge.w	800c8fe <atan+0x3e>
 800cb46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb4a:	461d      	mov	r5, r3
 800cb4c:	e6d7      	b.n	800c8fe <atan+0x3e>
 800cb4e:	a51c      	add	r5, pc, #112	@ (adr r5, 800cbc0 <atan+0x300>)
 800cb50:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb54:	e6d3      	b.n	800c8fe <atan+0x3e>
 800cb56:	bf00      	nop
 800cb58:	54442d18 	.word	0x54442d18
 800cb5c:	3ff921fb 	.word	0x3ff921fb
 800cb60:	8800759c 	.word	0x8800759c
 800cb64:	7e37e43c 	.word	0x7e37e43c
 800cb68:	e322da11 	.word	0xe322da11
 800cb6c:	3f90ad3a 	.word	0x3f90ad3a
 800cb70:	24760deb 	.word	0x24760deb
 800cb74:	3fa97b4b 	.word	0x3fa97b4b
 800cb78:	a0d03d51 	.word	0xa0d03d51
 800cb7c:	3fb10d66 	.word	0x3fb10d66
 800cb80:	c54c206e 	.word	0xc54c206e
 800cb84:	3fb745cd 	.word	0x3fb745cd
 800cb88:	920083ff 	.word	0x920083ff
 800cb8c:	3fc24924 	.word	0x3fc24924
 800cb90:	5555550d 	.word	0x5555550d
 800cb94:	3fd55555 	.word	0x3fd55555
 800cb98:	2c6a6c2f 	.word	0x2c6a6c2f
 800cb9c:	bfa2b444 	.word	0xbfa2b444
 800cba0:	52defd9a 	.word	0x52defd9a
 800cba4:	3fadde2d 	.word	0x3fadde2d
 800cba8:	af749a6d 	.word	0xaf749a6d
 800cbac:	3fb3b0f2 	.word	0x3fb3b0f2
 800cbb0:	fe231671 	.word	0xfe231671
 800cbb4:	3fbc71c6 	.word	0x3fbc71c6
 800cbb8:	9998ebc4 	.word	0x9998ebc4
 800cbbc:	3fc99999 	.word	0x3fc99999
 800cbc0:	54442d18 	.word	0x54442d18
 800cbc4:	bff921fb 	.word	0xbff921fb
 800cbc8:	440fffff 	.word	0x440fffff
 800cbcc:	7ff00000 	.word	0x7ff00000
 800cbd0:	3fdbffff 	.word	0x3fdbffff
 800cbd4:	3ff00000 	.word	0x3ff00000
 800cbd8:	3ff2ffff 	.word	0x3ff2ffff
 800cbdc:	40038000 	.word	0x40038000
 800cbe0:	3ff80000 	.word	0x3ff80000
 800cbe4:	bff00000 	.word	0xbff00000
 800cbe8:	0800df38 	.word	0x0800df38
 800cbec:	0800df58 	.word	0x0800df58

0800cbf0 <__ieee754_asinf>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	ee10 5a10 	vmov	r5, s0
 800cbf6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cbfa:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800cbfe:	ed2d 8b04 	vpush	{d8-d9}
 800cc02:	d10c      	bne.n	800cc1e <__ieee754_asinf+0x2e>
 800cc04:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800cd7c <__ieee754_asinf+0x18c>
 800cc08:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800cd80 <__ieee754_asinf+0x190>
 800cc0c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cc10:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cc14:	eeb0 0a67 	vmov.f32	s0, s15
 800cc18:	ecbd 8b04 	vpop	{d8-d9}
 800cc1c:	bd38      	pop	{r3, r4, r5, pc}
 800cc1e:	d904      	bls.n	800cc2a <__ieee754_asinf+0x3a>
 800cc20:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cc24:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cc28:	e7f6      	b.n	800cc18 <__ieee754_asinf+0x28>
 800cc2a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800cc2e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800cc32:	d20b      	bcs.n	800cc4c <__ieee754_asinf+0x5c>
 800cc34:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800cc38:	d252      	bcs.n	800cce0 <__ieee754_asinf+0xf0>
 800cc3a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800cd84 <__ieee754_asinf+0x194>
 800cc3e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cc42:	eef4 7ae8 	vcmpe.f32	s15, s17
 800cc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4a:	dce5      	bgt.n	800cc18 <__ieee754_asinf+0x28>
 800cc4c:	f7ff fb4e 	bl	800c2ec <fabsf>
 800cc50:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800cc54:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cc58:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cc5c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800cd88 <__ieee754_asinf+0x198>
 800cc60:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800cd8c <__ieee754_asinf+0x19c>
 800cc64:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800cd90 <__ieee754_asinf+0x1a0>
 800cc68:	eea8 7a27 	vfma.f32	s14, s16, s15
 800cc6c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800cd94 <__ieee754_asinf+0x1a4>
 800cc70:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cc74:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800cd98 <__ieee754_asinf+0x1a8>
 800cc78:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cc7c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800cd9c <__ieee754_asinf+0x1ac>
 800cc80:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cc84:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800cda0 <__ieee754_asinf+0x1b0>
 800cc88:	eea7 9a88 	vfma.f32	s18, s15, s16
 800cc8c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800cda4 <__ieee754_asinf+0x1b4>
 800cc90:	eee8 7a07 	vfma.f32	s15, s16, s14
 800cc94:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800cda8 <__ieee754_asinf+0x1b8>
 800cc98:	eea7 7a88 	vfma.f32	s14, s15, s16
 800cc9c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800cdac <__ieee754_asinf+0x1bc>
 800cca0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cca4:	eeb0 0a48 	vmov.f32	s0, s16
 800cca8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800ccac:	f7ff fb36 	bl	800c31c <__ieee754_sqrtf>
 800ccb0:	4b3f      	ldr	r3, [pc, #252]	@ (800cdb0 <__ieee754_asinf+0x1c0>)
 800ccb2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ccb6:	429c      	cmp	r4, r3
 800ccb8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ccbc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ccc0:	d93d      	bls.n	800cd3e <__ieee754_asinf+0x14e>
 800ccc2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ccc6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800cdb4 <__ieee754_asinf+0x1c4>
 800ccca:	eee0 7a26 	vfma.f32	s15, s0, s13
 800ccce:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800cd80 <__ieee754_asinf+0x190>
 800ccd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ccd6:	2d00      	cmp	r5, #0
 800ccd8:	bfd8      	it	le
 800ccda:	eeb1 0a40 	vnegle.f32	s0, s0
 800ccde:	e79b      	b.n	800cc18 <__ieee754_asinf+0x28>
 800cce0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800cce4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800cd8c <__ieee754_asinf+0x19c>
 800cce8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800cd88 <__ieee754_asinf+0x198>
 800ccec:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800cda0 <__ieee754_asinf+0x1b0>
 800ccf0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ccf4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800cd94 <__ieee754_asinf+0x1a4>
 800ccf8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ccfc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800cd98 <__ieee754_asinf+0x1a8>
 800cd00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd04:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800cd9c <__ieee754_asinf+0x1ac>
 800cd08:	eee7 6a27 	vfma.f32	s13, s14, s15
 800cd0c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800cd90 <__ieee754_asinf+0x1a0>
 800cd10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cd14:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800cda4 <__ieee754_asinf+0x1b4>
 800cd18:	eee7 6a86 	vfma.f32	s13, s15, s12
 800cd1c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800cda8 <__ieee754_asinf+0x1b8>
 800cd20:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800cd24:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800cdac <__ieee754_asinf+0x1bc>
 800cd28:	eee6 6a27 	vfma.f32	s13, s12, s15
 800cd2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd30:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800cd34:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800cd38:	eea0 0a27 	vfma.f32	s0, s0, s15
 800cd3c:	e76c      	b.n	800cc18 <__ieee754_asinf+0x28>
 800cd3e:	ee10 3a10 	vmov	r3, s0
 800cd42:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cd46:	f023 030f 	bic.w	r3, r3, #15
 800cd4a:	ee07 3a10 	vmov	s14, r3
 800cd4e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800cd52:	ee70 5a00 	vadd.f32	s11, s0, s0
 800cd56:	ee30 0a07 	vadd.f32	s0, s0, s14
 800cd5a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cd7c <__ieee754_asinf+0x18c>
 800cd5e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800cd62:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800cdb8 <__ieee754_asinf+0x1c8>
 800cd66:	eee5 7a66 	vfms.f32	s15, s10, s13
 800cd6a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800cd6e:	eeb0 6a40 	vmov.f32	s12, s0
 800cd72:	eea7 6a66 	vfms.f32	s12, s14, s13
 800cd76:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cd7a:	e7aa      	b.n	800ccd2 <__ieee754_asinf+0xe2>
 800cd7c:	b33bbd2e 	.word	0xb33bbd2e
 800cd80:	3fc90fdb 	.word	0x3fc90fdb
 800cd84:	7149f2ca 	.word	0x7149f2ca
 800cd88:	3a4f7f04 	.word	0x3a4f7f04
 800cd8c:	3811ef08 	.word	0x3811ef08
 800cd90:	3e2aaaab 	.word	0x3e2aaaab
 800cd94:	bd241146 	.word	0xbd241146
 800cd98:	3e4e0aa8 	.word	0x3e4e0aa8
 800cd9c:	bea6b090 	.word	0xbea6b090
 800cda0:	3d9dc62e 	.word	0x3d9dc62e
 800cda4:	bf303361 	.word	0xbf303361
 800cda8:	4001572d 	.word	0x4001572d
 800cdac:	c019d139 	.word	0xc019d139
 800cdb0:	3f799999 	.word	0x3f799999
 800cdb4:	333bbd2e 	.word	0x333bbd2e
 800cdb8:	3f490fdb 	.word	0x3f490fdb

0800cdbc <__ieee754_atan2f>:
 800cdbc:	ee10 2a90 	vmov	r2, s1
 800cdc0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800cdc4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cdc8:	b510      	push	{r4, lr}
 800cdca:	eef0 7a40 	vmov.f32	s15, s0
 800cdce:	d806      	bhi.n	800cdde <__ieee754_atan2f+0x22>
 800cdd0:	ee10 0a10 	vmov	r0, s0
 800cdd4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cdd8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cddc:	d904      	bls.n	800cde8 <__ieee754_atan2f+0x2c>
 800cdde:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cde2:	eeb0 0a67 	vmov.f32	s0, s15
 800cde6:	bd10      	pop	{r4, pc}
 800cde8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800cdec:	d103      	bne.n	800cdf6 <__ieee754_atan2f+0x3a>
 800cdee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdf2:	f000 b883 	b.w	800cefc <atanf>
 800cdf6:	1794      	asrs	r4, r2, #30
 800cdf8:	f004 0402 	and.w	r4, r4, #2
 800cdfc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ce00:	b943      	cbnz	r3, 800ce14 <__ieee754_atan2f+0x58>
 800ce02:	2c02      	cmp	r4, #2
 800ce04:	d05e      	beq.n	800cec4 <__ieee754_atan2f+0x108>
 800ce06:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ced8 <__ieee754_atan2f+0x11c>
 800ce0a:	2c03      	cmp	r4, #3
 800ce0c:	bf08      	it	eq
 800ce0e:	eef0 7a47 	vmoveq.f32	s15, s14
 800ce12:	e7e6      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800ce14:	b941      	cbnz	r1, 800ce28 <__ieee754_atan2f+0x6c>
 800ce16:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800cedc <__ieee754_atan2f+0x120>
 800ce1a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800cee0 <__ieee754_atan2f+0x124>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	bfb8      	it	lt
 800ce22:	eef0 7a47 	vmovlt.f32	s15, s14
 800ce26:	e7dc      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800ce28:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ce2c:	d110      	bne.n	800ce50 <__ieee754_atan2f+0x94>
 800ce2e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ce32:	f104 34ff 	add.w	r4, r4, #4294967295
 800ce36:	d107      	bne.n	800ce48 <__ieee754_atan2f+0x8c>
 800ce38:	2c02      	cmp	r4, #2
 800ce3a:	d846      	bhi.n	800ceca <__ieee754_atan2f+0x10e>
 800ce3c:	4b29      	ldr	r3, [pc, #164]	@ (800cee4 <__ieee754_atan2f+0x128>)
 800ce3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ce42:	edd3 7a00 	vldr	s15, [r3]
 800ce46:	e7cc      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800ce48:	2c02      	cmp	r4, #2
 800ce4a:	d841      	bhi.n	800ced0 <__ieee754_atan2f+0x114>
 800ce4c:	4b26      	ldr	r3, [pc, #152]	@ (800cee8 <__ieee754_atan2f+0x12c>)
 800ce4e:	e7f6      	b.n	800ce3e <__ieee754_atan2f+0x82>
 800ce50:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ce54:	d0df      	beq.n	800ce16 <__ieee754_atan2f+0x5a>
 800ce56:	1a5b      	subs	r3, r3, r1
 800ce58:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800ce5c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800ce60:	da1a      	bge.n	800ce98 <__ieee754_atan2f+0xdc>
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	da01      	bge.n	800ce6a <__ieee754_atan2f+0xae>
 800ce66:	313c      	adds	r1, #60	@ 0x3c
 800ce68:	db19      	blt.n	800ce9e <__ieee754_atan2f+0xe2>
 800ce6a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800ce6e:	f7ff fa3d 	bl	800c2ec <fabsf>
 800ce72:	f000 f843 	bl	800cefc <atanf>
 800ce76:	eef0 7a40 	vmov.f32	s15, s0
 800ce7a:	2c01      	cmp	r4, #1
 800ce7c:	d012      	beq.n	800cea4 <__ieee754_atan2f+0xe8>
 800ce7e:	2c02      	cmp	r4, #2
 800ce80:	d017      	beq.n	800ceb2 <__ieee754_atan2f+0xf6>
 800ce82:	2c00      	cmp	r4, #0
 800ce84:	d0ad      	beq.n	800cde2 <__ieee754_atan2f+0x26>
 800ce86:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800ceec <__ieee754_atan2f+0x130>
 800ce8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce8e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800cef0 <__ieee754_atan2f+0x134>
 800ce92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce96:	e7a4      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800ce98:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800cedc <__ieee754_atan2f+0x120>
 800ce9c:	e7ed      	b.n	800ce7a <__ieee754_atan2f+0xbe>
 800ce9e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cef4 <__ieee754_atan2f+0x138>
 800cea2:	e7ea      	b.n	800ce7a <__ieee754_atan2f+0xbe>
 800cea4:	ee17 3a90 	vmov	r3, s15
 800cea8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ceac:	ee07 3a90 	vmov	s15, r3
 800ceb0:	e797      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800ceb2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800ceec <__ieee754_atan2f+0x130>
 800ceb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ceba:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800cef0 <__ieee754_atan2f+0x134>
 800cebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cec2:	e78e      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800cec4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800cef0 <__ieee754_atan2f+0x134>
 800cec8:	e78b      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800ceca:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800cef8 <__ieee754_atan2f+0x13c>
 800cece:	e788      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800ced0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cef4 <__ieee754_atan2f+0x138>
 800ced4:	e785      	b.n	800cde2 <__ieee754_atan2f+0x26>
 800ced6:	bf00      	nop
 800ced8:	c0490fdb 	.word	0xc0490fdb
 800cedc:	3fc90fdb 	.word	0x3fc90fdb
 800cee0:	bfc90fdb 	.word	0xbfc90fdb
 800cee4:	0800df84 	.word	0x0800df84
 800cee8:	0800df78 	.word	0x0800df78
 800ceec:	33bbbd2e 	.word	0x33bbbd2e
 800cef0:	40490fdb 	.word	0x40490fdb
 800cef4:	00000000 	.word	0x00000000
 800cef8:	3f490fdb 	.word	0x3f490fdb

0800cefc <atanf>:
 800cefc:	b538      	push	{r3, r4, r5, lr}
 800cefe:	ee10 5a10 	vmov	r5, s0
 800cf02:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cf06:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800cf0a:	eef0 7a40 	vmov.f32	s15, s0
 800cf0e:	d310      	bcc.n	800cf32 <atanf+0x36>
 800cf10:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800cf14:	d904      	bls.n	800cf20 <atanf+0x24>
 800cf16:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cf1a:	eeb0 0a67 	vmov.f32	s0, s15
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d058 <atanf+0x15c>
 800cf24:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d05c <atanf+0x160>
 800cf28:	2d00      	cmp	r5, #0
 800cf2a:	bfc8      	it	gt
 800cf2c:	eef0 7a47 	vmovgt.f32	s15, s14
 800cf30:	e7f3      	b.n	800cf1a <atanf+0x1e>
 800cf32:	4b4b      	ldr	r3, [pc, #300]	@ (800d060 <atanf+0x164>)
 800cf34:	429c      	cmp	r4, r3
 800cf36:	d810      	bhi.n	800cf5a <atanf+0x5e>
 800cf38:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800cf3c:	d20a      	bcs.n	800cf54 <atanf+0x58>
 800cf3e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d064 <atanf+0x168>
 800cf42:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cf46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf4a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cf4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf52:	dce2      	bgt.n	800cf1a <atanf+0x1e>
 800cf54:	f04f 33ff 	mov.w	r3, #4294967295
 800cf58:	e013      	b.n	800cf82 <atanf+0x86>
 800cf5a:	f7ff f9c7 	bl	800c2ec <fabsf>
 800cf5e:	4b42      	ldr	r3, [pc, #264]	@ (800d068 <atanf+0x16c>)
 800cf60:	429c      	cmp	r4, r3
 800cf62:	d84f      	bhi.n	800d004 <atanf+0x108>
 800cf64:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800cf68:	429c      	cmp	r4, r3
 800cf6a:	d841      	bhi.n	800cff0 <atanf+0xf4>
 800cf6c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cf70:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cf74:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cf78:	2300      	movs	r3, #0
 800cf7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800cf88:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d06c <atanf+0x170>
 800cf8c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d070 <atanf+0x174>
 800cf90:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d074 <atanf+0x178>
 800cf94:	ee66 6a06 	vmul.f32	s13, s12, s12
 800cf98:	eee6 5a87 	vfma.f32	s11, s13, s14
 800cf9c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d078 <atanf+0x17c>
 800cfa0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cfa4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d07c <atanf+0x180>
 800cfa8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cfac:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d080 <atanf+0x184>
 800cfb0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cfb4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d084 <atanf+0x188>
 800cfb8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800cfbc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d088 <atanf+0x18c>
 800cfc0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800cfc4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d08c <atanf+0x190>
 800cfc8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cfcc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d090 <atanf+0x194>
 800cfd0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800cfd4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d094 <atanf+0x198>
 800cfd8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800cfdc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cfe0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800cfe4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cfe8:	d121      	bne.n	800d02e <atanf+0x132>
 800cfea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cfee:	e794      	b.n	800cf1a <atanf+0x1e>
 800cff0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cff4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cff8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cffc:	2301      	movs	r3, #1
 800cffe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d002:	e7be      	b.n	800cf82 <atanf+0x86>
 800d004:	4b24      	ldr	r3, [pc, #144]	@ (800d098 <atanf+0x19c>)
 800d006:	429c      	cmp	r4, r3
 800d008:	d80b      	bhi.n	800d022 <atanf+0x126>
 800d00a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d00e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d012:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d016:	2302      	movs	r3, #2
 800d018:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d01c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d020:	e7af      	b.n	800cf82 <atanf+0x86>
 800d022:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d026:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d02a:	2303      	movs	r3, #3
 800d02c:	e7a9      	b.n	800cf82 <atanf+0x86>
 800d02e:	4a1b      	ldr	r2, [pc, #108]	@ (800d09c <atanf+0x1a0>)
 800d030:	491b      	ldr	r1, [pc, #108]	@ (800d0a0 <atanf+0x1a4>)
 800d032:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d036:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d03a:	edd3 6a00 	vldr	s13, [r3]
 800d03e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d042:	2d00      	cmp	r5, #0
 800d044:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d048:	edd2 7a00 	vldr	s15, [r2]
 800d04c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d050:	bfb8      	it	lt
 800d052:	eef1 7a67 	vneglt.f32	s15, s15
 800d056:	e760      	b.n	800cf1a <atanf+0x1e>
 800d058:	bfc90fdb 	.word	0xbfc90fdb
 800d05c:	3fc90fdb 	.word	0x3fc90fdb
 800d060:	3edfffff 	.word	0x3edfffff
 800d064:	7149f2ca 	.word	0x7149f2ca
 800d068:	3f97ffff 	.word	0x3f97ffff
 800d06c:	3c8569d7 	.word	0x3c8569d7
 800d070:	3d4bda59 	.word	0x3d4bda59
 800d074:	bd6ef16b 	.word	0xbd6ef16b
 800d078:	3d886b35 	.word	0x3d886b35
 800d07c:	3dba2e6e 	.word	0x3dba2e6e
 800d080:	3e124925 	.word	0x3e124925
 800d084:	3eaaaaab 	.word	0x3eaaaaab
 800d088:	bd15a221 	.word	0xbd15a221
 800d08c:	bd9d8795 	.word	0xbd9d8795
 800d090:	bde38e38 	.word	0xbde38e38
 800d094:	be4ccccd 	.word	0xbe4ccccd
 800d098:	401bffff 	.word	0x401bffff
 800d09c:	0800dfa0 	.word	0x0800dfa0
 800d0a0:	0800df90 	.word	0x0800df90

0800d0a4 <__ieee754_sqrt>:
 800d0a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a8:	4a68      	ldr	r2, [pc, #416]	@ (800d24c <__ieee754_sqrt+0x1a8>)
 800d0aa:	ec55 4b10 	vmov	r4, r5, d0
 800d0ae:	43aa      	bics	r2, r5
 800d0b0:	462b      	mov	r3, r5
 800d0b2:	4621      	mov	r1, r4
 800d0b4:	d110      	bne.n	800d0d8 <__ieee754_sqrt+0x34>
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	f7f3 faa4 	bl	8000608 <__aeabi_dmul>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	4629      	mov	r1, r5
 800d0c8:	f7f3 f8e8 	bl	800029c <__adddf3>
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	460d      	mov	r5, r1
 800d0d0:	ec45 4b10 	vmov	d0, r4, r5
 800d0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d8:	2d00      	cmp	r5, #0
 800d0da:	dc0e      	bgt.n	800d0fa <__ieee754_sqrt+0x56>
 800d0dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d0e0:	4322      	orrs	r2, r4
 800d0e2:	d0f5      	beq.n	800d0d0 <__ieee754_sqrt+0x2c>
 800d0e4:	b19d      	cbz	r5, 800d10e <__ieee754_sqrt+0x6a>
 800d0e6:	4622      	mov	r2, r4
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	f7f3 f8d4 	bl	8000298 <__aeabi_dsub>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	f7f3 fbb2 	bl	800085c <__aeabi_ddiv>
 800d0f8:	e7e8      	b.n	800d0cc <__ieee754_sqrt+0x28>
 800d0fa:	152a      	asrs	r2, r5, #20
 800d0fc:	d115      	bne.n	800d12a <__ieee754_sqrt+0x86>
 800d0fe:	2000      	movs	r0, #0
 800d100:	e009      	b.n	800d116 <__ieee754_sqrt+0x72>
 800d102:	0acb      	lsrs	r3, r1, #11
 800d104:	3a15      	subs	r2, #21
 800d106:	0549      	lsls	r1, r1, #21
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d0fa      	beq.n	800d102 <__ieee754_sqrt+0x5e>
 800d10c:	e7f7      	b.n	800d0fe <__ieee754_sqrt+0x5a>
 800d10e:	462a      	mov	r2, r5
 800d110:	e7fa      	b.n	800d108 <__ieee754_sqrt+0x64>
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	3001      	adds	r0, #1
 800d116:	02dc      	lsls	r4, r3, #11
 800d118:	d5fb      	bpl.n	800d112 <__ieee754_sqrt+0x6e>
 800d11a:	1e44      	subs	r4, r0, #1
 800d11c:	1b12      	subs	r2, r2, r4
 800d11e:	f1c0 0420 	rsb	r4, r0, #32
 800d122:	fa21 f404 	lsr.w	r4, r1, r4
 800d126:	4323      	orrs	r3, r4
 800d128:	4081      	lsls	r1, r0
 800d12a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d12e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d136:	07d2      	lsls	r2, r2, #31
 800d138:	bf5c      	itt	pl
 800d13a:	005b      	lslpl	r3, r3, #1
 800d13c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d140:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d144:	bf58      	it	pl
 800d146:	0049      	lslpl	r1, r1, #1
 800d148:	2600      	movs	r6, #0
 800d14a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d14e:	106d      	asrs	r5, r5, #1
 800d150:	0049      	lsls	r1, r1, #1
 800d152:	2016      	movs	r0, #22
 800d154:	4632      	mov	r2, r6
 800d156:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d15a:	1917      	adds	r7, r2, r4
 800d15c:	429f      	cmp	r7, r3
 800d15e:	bfde      	ittt	le
 800d160:	193a      	addle	r2, r7, r4
 800d162:	1bdb      	suble	r3, r3, r7
 800d164:	1936      	addle	r6, r6, r4
 800d166:	0fcf      	lsrs	r7, r1, #31
 800d168:	3801      	subs	r0, #1
 800d16a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d16e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d172:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d176:	d1f0      	bne.n	800d15a <__ieee754_sqrt+0xb6>
 800d178:	4604      	mov	r4, r0
 800d17a:	2720      	movs	r7, #32
 800d17c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d180:	429a      	cmp	r2, r3
 800d182:	eb00 0e0c 	add.w	lr, r0, ip
 800d186:	db02      	blt.n	800d18e <__ieee754_sqrt+0xea>
 800d188:	d113      	bne.n	800d1b2 <__ieee754_sqrt+0x10e>
 800d18a:	458e      	cmp	lr, r1
 800d18c:	d811      	bhi.n	800d1b2 <__ieee754_sqrt+0x10e>
 800d18e:	f1be 0f00 	cmp.w	lr, #0
 800d192:	eb0e 000c 	add.w	r0, lr, ip
 800d196:	da42      	bge.n	800d21e <__ieee754_sqrt+0x17a>
 800d198:	2800      	cmp	r0, #0
 800d19a:	db40      	blt.n	800d21e <__ieee754_sqrt+0x17a>
 800d19c:	f102 0801 	add.w	r8, r2, #1
 800d1a0:	1a9b      	subs	r3, r3, r2
 800d1a2:	458e      	cmp	lr, r1
 800d1a4:	bf88      	it	hi
 800d1a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d1aa:	eba1 010e 	sub.w	r1, r1, lr
 800d1ae:	4464      	add	r4, ip
 800d1b0:	4642      	mov	r2, r8
 800d1b2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d1b6:	3f01      	subs	r7, #1
 800d1b8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d1bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d1c0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d1c4:	d1dc      	bne.n	800d180 <__ieee754_sqrt+0xdc>
 800d1c6:	4319      	orrs	r1, r3
 800d1c8:	d01b      	beq.n	800d202 <__ieee754_sqrt+0x15e>
 800d1ca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d250 <__ieee754_sqrt+0x1ac>
 800d1ce:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d254 <__ieee754_sqrt+0x1b0>
 800d1d2:	e9da 0100 	ldrd	r0, r1, [sl]
 800d1d6:	e9db 2300 	ldrd	r2, r3, [fp]
 800d1da:	f7f3 f85d 	bl	8000298 <__aeabi_dsub>
 800d1de:	e9da 8900 	ldrd	r8, r9, [sl]
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4640      	mov	r0, r8
 800d1e8:	4649      	mov	r1, r9
 800d1ea:	f7f3 fc89 	bl	8000b00 <__aeabi_dcmple>
 800d1ee:	b140      	cbz	r0, 800d202 <__ieee754_sqrt+0x15e>
 800d1f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d1f4:	e9da 0100 	ldrd	r0, r1, [sl]
 800d1f8:	e9db 2300 	ldrd	r2, r3, [fp]
 800d1fc:	d111      	bne.n	800d222 <__ieee754_sqrt+0x17e>
 800d1fe:	3601      	adds	r6, #1
 800d200:	463c      	mov	r4, r7
 800d202:	1072      	asrs	r2, r6, #1
 800d204:	0863      	lsrs	r3, r4, #1
 800d206:	07f1      	lsls	r1, r6, #31
 800d208:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d20c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d210:	bf48      	it	mi
 800d212:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d216:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d21a:	4618      	mov	r0, r3
 800d21c:	e756      	b.n	800d0cc <__ieee754_sqrt+0x28>
 800d21e:	4690      	mov	r8, r2
 800d220:	e7be      	b.n	800d1a0 <__ieee754_sqrt+0xfc>
 800d222:	f7f3 f83b 	bl	800029c <__adddf3>
 800d226:	e9da 8900 	ldrd	r8, r9, [sl]
 800d22a:	4602      	mov	r2, r0
 800d22c:	460b      	mov	r3, r1
 800d22e:	4640      	mov	r0, r8
 800d230:	4649      	mov	r1, r9
 800d232:	f7f3 fc5b 	bl	8000aec <__aeabi_dcmplt>
 800d236:	b120      	cbz	r0, 800d242 <__ieee754_sqrt+0x19e>
 800d238:	1ca0      	adds	r0, r4, #2
 800d23a:	bf08      	it	eq
 800d23c:	3601      	addeq	r6, #1
 800d23e:	3402      	adds	r4, #2
 800d240:	e7df      	b.n	800d202 <__ieee754_sqrt+0x15e>
 800d242:	1c63      	adds	r3, r4, #1
 800d244:	f023 0401 	bic.w	r4, r3, #1
 800d248:	e7db      	b.n	800d202 <__ieee754_sqrt+0x15e>
 800d24a:	bf00      	nop
 800d24c:	7ff00000 	.word	0x7ff00000
 800d250:	20000220 	.word	0x20000220
 800d254:	20000218 	.word	0x20000218

0800d258 <_init>:
 800d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25a:	bf00      	nop
 800d25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25e:	bc08      	pop	{r3}
 800d260:	469e      	mov	lr, r3
 800d262:	4770      	bx	lr

0800d264 <_fini>:
 800d264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d266:	bf00      	nop
 800d268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d26a:	bc08      	pop	{r3}
 800d26c:	469e      	mov	lr, r3
 800d26e:	4770      	bx	lr
