
Two-Wheeled Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001720  0800be28  0800be28  0000ce28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d548  0800d548  0000f1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d548  0800d548  0000e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d550  0800d550  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d550  0800d550  0000e550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d554  0800d554  0000e554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800d558  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  200001e4  0800d73c  0000f1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  0800d73c  0000fa64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016346  00000000  00000000  0000f214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031de  00000000  00000000  0002555a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00028738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018c80  00000000  00000000  00029ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001917b  00000000  00000000  00042828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00094e43  00000000  00000000  0005b9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f07e6  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001000  00000000  00000000  000f0829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000696c  00000000  00000000  000f182c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f8198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800be0c 	.word	0x0800be0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800be0c 	.word	0x0800be0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d013      	beq.n	8000f88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00b      	beq.n	8000f88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f70:	e000      	b.n	8000f74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0f9      	beq.n	8000f72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <send_imu_data>:
void send_at_command(const char *command) {
    HAL_UART_Transmit(&huart6, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
}

void send_imu_data(void)
{
 8000f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f9c:	b0a8      	sub	sp, #160	@ 0xa0
 8000f9e:	af0a      	add	r7, sp, #40	@ 0x28
    char buffer[100];
    sprintf(buffer, "ax: %.2f, ay: %.2f, az: %.2f, roll: %.2f, pitch: %.2f, yaw: %.2f\r\n",
            imu_data.ax, imu_data.ay, imu_data.az,
 8000fa0:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <send_imu_data+0xa8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
    sprintf(buffer, "ax: %.2f, ay: %.2f, az: %.2f, roll: %.2f, pitch: %.2f, yaw: %.2f\r\n",
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fad7 	bl	8000558 <__aeabi_f2d>
 8000faa:	e9c7 0102 	strd	r0, r1, [r7, #8]
            imu_data.ax, imu_data.ay, imu_data.az,
 8000fae:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <send_imu_data+0xa8>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
    sprintf(buffer, "ax: %.2f, ay: %.2f, az: %.2f, roll: %.2f, pitch: %.2f, yaw: %.2f\r\n",
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fad0 	bl	8000558 <__aeabi_f2d>
 8000fb8:	4604      	mov	r4, r0
 8000fba:	460d      	mov	r5, r1
            imu_data.ax, imu_data.ay, imu_data.az,
 8000fbc:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <send_imu_data+0xa8>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
    sprintf(buffer, "ax: %.2f, ay: %.2f, az: %.2f, roll: %.2f, pitch: %.2f, yaw: %.2f\r\n",
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fac9 	bl	8000558 <__aeabi_f2d>
 8000fc6:	4680      	mov	r8, r0
 8000fc8:	4689      	mov	r9, r1
            imu_data.rol, imu_data.pit, imu_data.yaw);
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <send_imu_data+0xa8>)
 8000fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    sprintf(buffer, "ax: %.2f, ay: %.2f, az: %.2f, roll: %.2f, pitch: %.2f, yaw: %.2f\r\n",
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fac2 	bl	8000558 <__aeabi_f2d>
 8000fd4:	4682      	mov	sl, r0
 8000fd6:	468b      	mov	fp, r1
            imu_data.rol, imu_data.pit, imu_data.yaw);
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <send_imu_data+0xa8>)
 8000fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    sprintf(buffer, "ax: %.2f, ay: %.2f, az: %.2f, roll: %.2f, pitch: %.2f, yaw: %.2f\r\n",
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fabb 	bl	8000558 <__aeabi_f2d>
 8000fe2:	e9c7 0100 	strd	r0, r1, [r7]
            imu_data.rol, imu_data.pit, imu_data.yaw);
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <send_imu_data+0xa8>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    sprintf(buffer, "ax: %.2f, ay: %.2f, az: %.2f, roll: %.2f, pitch: %.2f, yaw: %.2f\r\n",
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fab4 	bl	8000558 <__aeabi_f2d>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	f107 0014 	add.w	r0, r7, #20
 8000ff8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000ffc:	ed97 7b00 	vldr	d7, [r7]
 8001000:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001004:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001008:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800100c:	e9cd 4500 	strd	r4, r5, [sp]
 8001010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001014:	490b      	ldr	r1, [pc, #44]	@ (8001044 <send_imu_data+0xac>)
 8001016:	f008 fb31 	bl	800967c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800101a:	f107 0314 	add.w	r3, r7, #20
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f92e 	bl	8000280 <strlen>
 8001024:	4603      	mov	r3, r0
 8001026:	b29a      	uxth	r2, r3
 8001028:	f107 0114 	add.w	r1, r7, #20
 800102c:	f04f 33ff 	mov.w	r3, #4294967295
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <send_imu_data+0xb0>)
 8001032:	f006 fe03 	bl	8007c3c <HAL_UART_Transmit>
}
 8001036:	bf00      	nop
 8001038:	3778      	adds	r7, #120	@ 0x78
 800103a:	46bd      	mov	sp, r7
 800103c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001040:	2000049c 	.word	0x2000049c
 8001044:	0800be28 	.word	0x0800be28
 8001048:	20000420 	.word	0x20000420

0800104c <init_mpu_and_imu>:

void init_mpu_and_imu()
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
    // 初始化 mpu_data_t 结构体
    mpu_data.ax = 0;
 8001050:	4b33      	ldr	r3, [pc, #204]	@ (8001120 <init_mpu_and_imu+0xd4>)
 8001052:	2200      	movs	r2, #0
 8001054:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = 0;
 8001056:	4b32      	ldr	r3, [pc, #200]	@ (8001120 <init_mpu_and_imu+0xd4>)
 8001058:	2200      	movs	r2, #0
 800105a:	805a      	strh	r2, [r3, #2]
    mpu_data.az = 0;
 800105c:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <init_mpu_and_imu+0xd4>)
 800105e:	2200      	movs	r2, #0
 8001060:	809a      	strh	r2, [r3, #4]

    mpu_data.mx = 0;
 8001062:	4b2f      	ldr	r3, [pc, #188]	@ (8001120 <init_mpu_and_imu+0xd4>)
 8001064:	2200      	movs	r2, #0
 8001066:	80da      	strh	r2, [r3, #6]
    mpu_data.my = 0;
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <init_mpu_and_imu+0xd4>)
 800106a:	2200      	movs	r2, #0
 800106c:	811a      	strh	r2, [r3, #8]
    mpu_data.mz = 0;
 800106e:	4b2c      	ldr	r3, [pc, #176]	@ (8001120 <init_mpu_and_imu+0xd4>)
 8001070:	2200      	movs	r2, #0
 8001072:	815a      	strh	r2, [r3, #10]

    mpu_data.temp = 0;
 8001074:	4b2a      	ldr	r3, [pc, #168]	@ (8001120 <init_mpu_and_imu+0xd4>)
 8001076:	2200      	movs	r2, #0
 8001078:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = 0;
 800107a:	4b29      	ldr	r3, [pc, #164]	@ (8001120 <init_mpu_and_imu+0xd4>)
 800107c:	2200      	movs	r2, #0
 800107e:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = 0;
 8001080:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <init_mpu_and_imu+0xd4>)
 8001082:	2200      	movs	r2, #0
 8001084:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = 0;
 8001086:	4b26      	ldr	r3, [pc, #152]	@ (8001120 <init_mpu_and_imu+0xd4>)
 8001088:	2200      	movs	r2, #0
 800108a:	825a      	strh	r2, [r3, #18]

    // 初始化 imu_t 结构体
    imu_data.ax = 0.0f;
 800108c:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <init_mpu_and_imu+0xd8>)
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
    imu_data.ay = 0.0f;
 8001094:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <init_mpu_and_imu+0xd8>)
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
    imu_data.az = 0.0f;
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <init_mpu_and_imu+0xd8>)
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]

    imu_data.temp = 0.0f;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]

    imu_data.gx = 0.0f;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
    imu_data.gy = 0.0f;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
    imu_data.gz = 0.0f;
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]

    imu_data.vx = 0.0f;
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
    imu_data.vy = 0.0f;
 80010cc:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    imu_data.vz = 0.0f;
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24

    imu_data.q0 = 1.0f; // 初始化四元数为单位四元数
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
    imu_data.q1 = 0.0f;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu_data.q2 = 0.0f;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	631a      	str	r2, [r3, #48]	@ 0x30
    imu_data.q3 = 0.0f;
 80010f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	635a      	str	r2, [r3, #52]	@ 0x34

    imu_data.rol = 0.0f;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <init_mpu_and_imu+0xd8>)
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	639a      	str	r2, [r3, #56]	@ 0x38
    imu_data.pit = 0.0f;
 8001104:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <init_mpu_and_imu+0xd8>)
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu_data.yaw = 0.0f;
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <init_mpu_and_imu+0xd8>)
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000047c 	.word	0x2000047c
 8001124:	2000049c 	.word	0x2000049c

08001128 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1) { // PB1, the up button
 8001132:	88fb      	ldrh	r3, [r7, #6]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d102      	bne.n	800113e <HAL_GPIO_EXTI_Callback+0x16>
		init_mpu_and_imu();
 8001138:	f7ff ff88 	bl	800104c <init_mpu_and_imu>
	}
	else if (GPIO_Pin == GPIO_PIN_10) { // PA10, 触发电机启动
		Motor_Forward(50); // 电机以50%的速度向前转动
	}
}
 800113c:	e006      	b.n	800114c <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == GPIO_PIN_10) { // PA10, 触发电机启动
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001144:	d102      	bne.n	800114c <HAL_GPIO_EXTI_Callback+0x24>
		Motor_Forward(50); // 电机以50%的速度向前转动
 8001146:	2032      	movs	r0, #50	@ 0x32
 8001148:	f002 fa3e 	bl	80035c8 <Motor_Forward>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <HAL_UART_RxCpltCallback+0x30>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d109      	bne.n	800117a <HAL_UART_RxCpltCallback+0x26>
        Motor_BluetoothCommand(bluetooth_rx_data);
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_UART_RxCpltCallback+0x34>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fdb8 	bl	8002ce0 <Motor_BluetoothCommand>
        HAL_UART_Receive_IT(&huart6, &bluetooth_rx_data, 1);
 8001170:	2201      	movs	r2, #1
 8001172:	4905      	ldr	r1, [pc, #20]	@ (8001188 <HAL_UART_RxCpltCallback+0x34>)
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <HAL_UART_RxCpltCallback+0x38>)
 8001176:	f006 fdec 	bl	8007d52 <HAL_UART_Receive_IT>
    }
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40011400 	.word	0x40011400
 8001188:	200004e0 	.word	0x200004e0
 800118c:	20000420 	.word	0x20000420

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f003 f957 	bl	8004448 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 f8d5 	bl	8001348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f000 fb57 	bl	8001850 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011a2:	f000 f999 	bl	80014d8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80011a6:	f000 f9cd 	bl	8001544 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 80011aa:	f000 fb27 	bl	80017fc <MX_USART6_UART_Init>
  MX_I2C1_Init();
 80011ae:	f000 f937 	bl	8001420 <MX_I2C1_Init>
  MX_TIM2_Init();
 80011b2:	f000 fa17 	bl	80015e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011b6:	f000 fa69 	bl	800168c <MX_TIM3_Init>
  MX_TIM4_Init();
 80011ba:	f000 fabb 	bl	8001734 <MX_TIM4_Init>
  MX_I2C3_Init();
 80011be:	f000 f95d 	bl	800147c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init(&hi2c3);
 80011c2:	4852      	ldr	r0, [pc, #328]	@ (800130c <main+0x17c>)
 80011c4:	f002 faf4 	bl	80037b0 <ssd1306_Init>
  // 清屏
  ssd1306_Fill(Black);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f002 fc11 	bl	80039f0 <ssd1306_Fill>

  mpu6500_init();
 80011ce:	f000 fbe7 	bl	80019a0 <mpu6500_init>
  init_mpu_and_imu();
 80011d2:	f7ff ff3b 	bl	800104c <init_mpu_and_imu>
  HAL_TIM_Base_Start_IT(&htim1);
 80011d6:	484e      	ldr	r0, [pc, #312]	@ (8001310 <main+0x180>)
 80011d8:	f005 fc4e 	bl	8006a78 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2180      	movs	r1, #128	@ 0x80
 80011e0:	484c      	ldr	r0, [pc, #304]	@ (8001314 <main+0x184>)
 80011e2:	f003 fcef 	bl	8004bc4 <HAL_GPIO_WritePin>
  Motor_Init();
 80011e6:	f001 ffab 	bl	8003140 <Motor_Init>
  char at_command[] = "AT+NAME=MSDG48\r\n";
  send_at_command("AT\n");
  send_at_command(at_command);*/

  uint8_t dummy;
  HAL_UART_Receive_IT(&huart6, &dummy, 1);
 80011ea:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	4849      	ldr	r0, [pc, #292]	@ (8001318 <main+0x188>)
 80011f4:	f006 fdad 	bl	8007d52 <HAL_UART_Receive_IT>

  uint32_t last_send_time = HAL_GetTick();
 80011f8:	f003 f98c 	bl	8004514 <HAL_GetTick>
 80011fc:	64f8      	str	r0, [r7, #76]	@ 0x4c
  uint32_t last_refresh_time = HAL_GetTick();
 80011fe:	f003 f989 	bl	8004514 <HAL_GetTick>
 8001202:	64b8      	str	r0, [r7, #72]	@ 0x48

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(timer_flag)
 8001204:	4b45      	ldr	r3, [pc, #276]	@ (800131c <main+0x18c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <main+0x92>
	{
	  mpu6500_read_reg(59, mpu_buffer, sizeof(mpu_buffer));
 800120e:	220e      	movs	r2, #14
 8001210:	4943      	ldr	r1, [pc, #268]	@ (8001320 <main+0x190>)
 8001212:	203b      	movs	r0, #59	@ 0x3b
 8001214:	f000 fcfe 	bl	8001c14 <mpu6500_read_reg>
	  read_data();
 8001218:	f000 fd2a 	bl	8001c70 <read_data>

	  timer_flag = 0;
 800121c:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <main+0x18c>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
	}
	uint32_t current_time = HAL_GetTick();
 8001222:	f003 f977 	bl	8004514 <HAL_GetTick>
 8001226:	6478      	str	r0, [r7, #68]	@ 0x44

	static uint32_t last_update = 0;
	if (HAL_GetTick() - last_update > 100) {
 8001228:	f003 f974 	bl	8004514 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	4b3d      	ldr	r3, [pc, #244]	@ (8001324 <main+0x194>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	@ 0x64
 8001236:	d906      	bls.n	8001246 <main+0xb6>
	   Encoder_Update();
 8001238:	f001 ffde 	bl	80031f8 <Encoder_Update>
	   last_update = HAL_GetTick();
 800123c:	f003 f96a 	bl	8004514 <HAL_GetTick>
 8001240:	4603      	mov	r3, r0
 8001242:	4a38      	ldr	r2, [pc, #224]	@ (8001324 <main+0x194>)
 8001244:	6013      	str	r3, [r2, #0]
	}

	if (current_time - last_send_time >= send_interval && send_flag)
 8001246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	4a36      	ldr	r2, [pc, #216]	@ (8001328 <main+0x198>)
 800124e:	8812      	ldrh	r2, [r2, #0]
 8001250:	4293      	cmp	r3, r2
 8001252:	d308      	bcc.n	8001266 <main+0xd6>
 8001254:	4b35      	ldr	r3, [pc, #212]	@ (800132c <main+0x19c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <main+0xd6>
	{
		send_imu_data();
 800125e:	f7ff fe9b 	bl	8000f98 <send_imu_data>
		last_send_time = current_time;
 8001262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001264:	64fb      	str	r3, [r7, #76]	@ 0x4c
	}

	if (current_time - last_refresh_time >= refresh_interval)
 8001266:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4a30      	ldr	r2, [pc, #192]	@ (8001330 <main+0x1a0>)
 800126e:	8812      	ldrh	r2, [r2, #0]
 8001270:	4293      	cmp	r3, r2
 8001272:	d3c7      	bcc.n	8001204 <main+0x74>
	{
		ssd1306_Fill(Black);
 8001274:	2000      	movs	r0, #0
 8001276:	f002 fbbb 	bl	80039f0 <ssd1306_Fill>
		char display_str1[20];
		char display_str2[20];
		char display_str3[20];

		//Generate strings on screen
		sprintf(display_str1, "Roll: %.1f", imu_data.rol);
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <main+0x1a4>)
 800127c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800128c:	492a      	ldr	r1, [pc, #168]	@ (8001338 <main+0x1a8>)
 800128e:	f008 f9f5 	bl	800967c <siprintf>
		sprintf(display_str2, "Pitch: %.1f", imu_data.pit);
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <main+0x1a4>)
 8001294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f95e 	bl	8000558 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	f107 0018 	add.w	r0, r7, #24
 80012a4:	4925      	ldr	r1, [pc, #148]	@ (800133c <main+0x1ac>)
 80012a6:	f008 f9e9 	bl	800967c <siprintf>
		sprintf(display_str3, "Yaw: %.1f", imu_data.yaw);
 80012aa:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <main+0x1a4>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f952 	bl	8000558 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	1d38      	adds	r0, r7, #4
 80012ba:	4921      	ldr	r1, [pc, #132]	@ (8001340 <main+0x1b0>)
 80012bc:	f008 f9de 	bl	800967c <siprintf>

		ssd1306_SetCursor(0, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2000      	movs	r0, #0
 80012c4:	f002 fcf0 	bl	8003ca8 <ssd1306_SetCursor>
		ssd1306_WriteString(display_str1, Font_7x10, White);
 80012c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001344 <main+0x1b4>)
 80012ca:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80012ce:	2301      	movs	r3, #1
 80012d0:	ca06      	ldmia	r2, {r1, r2}
 80012d2:	f002 fcc3 	bl	8003c5c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 12);
 80012d6:	210c      	movs	r1, #12
 80012d8:	2000      	movs	r0, #0
 80012da:	f002 fce5 	bl	8003ca8 <ssd1306_SetCursor>
		ssd1306_WriteString(display_str2, Font_7x10, White);
 80012de:	4a19      	ldr	r2, [pc, #100]	@ (8001344 <main+0x1b4>)
 80012e0:	f107 0018 	add.w	r0, r7, #24
 80012e4:	2301      	movs	r3, #1
 80012e6:	ca06      	ldmia	r2, {r1, r2}
 80012e8:	f002 fcb8 	bl	8003c5c <ssd1306_WriteString>

		ssd1306_SetCursor(0, 24);
 80012ec:	2118      	movs	r1, #24
 80012ee:	2000      	movs	r0, #0
 80012f0:	f002 fcda 	bl	8003ca8 <ssd1306_SetCursor>
		ssd1306_WriteString(display_str3, Font_7x10, White);
 80012f4:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <main+0x1b4>)
 80012f6:	1d38      	adds	r0, r7, #4
 80012f8:	2301      	movs	r3, #1
 80012fa:	ca06      	ldmia	r2, {r1, r2}
 80012fc:	f002 fcae 	bl	8003c5c <ssd1306_WriteString>

		ssd1306_UpdateScreen(&hi2c3);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <main+0x17c>)
 8001302:	f002 fb99 	bl	8003a38 <ssd1306_UpdateScreen>

		last_refresh_time = current_time;
 8001306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001308:	64bb      	str	r3, [r7, #72]	@ 0x48
  {
 800130a:	e77b      	b.n	8001204 <main+0x74>
 800130c:	20000254 	.word	0x20000254
 8001310:	20000300 	.word	0x20000300
 8001314:	40020800 	.word	0x40020800
 8001318:	20000420 	.word	0x20000420
 800131c:	20000468 	.word	0x20000468
 8001320:	2000046c 	.word	0x2000046c
 8001324:	200004e4 	.word	0x200004e4
 8001328:	2000000a 	.word	0x2000000a
 800132c:	2000000c 	.word	0x2000000c
 8001330:	20000008 	.word	0x20000008
 8001334:	2000049c 	.word	0x2000049c
 8001338:	0800be6c 	.word	0x0800be6c
 800133c:	0800be78 	.word	0x0800be78
 8001340:	0800be84 	.word	0x0800be84
 8001344:	20000000 	.word	0x20000000

08001348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b094      	sub	sp, #80	@ 0x50
 800134c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	2230      	movs	r2, #48	@ 0x30
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f008 f9f3 	bl	8009742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <SystemClock_Config+0xd0>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <SystemClock_Config+0xd0>)
 8001376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137a:	6413      	str	r3, [r2, #64]	@ 0x40
 800137c:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <SystemClock_Config+0xd0>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001388:	2300      	movs	r3, #0
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <SystemClock_Config+0xd4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001394:	4a21      	ldr	r2, [pc, #132]	@ (800141c <SystemClock_Config+0xd4>)
 8001396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <SystemClock_Config+0xd4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b0:	2310      	movs	r3, #16
 80013b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b4:	2302      	movs	r3, #2
 80013b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b8:	2300      	movs	r3, #0
 80013ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013bc:	2310      	movs	r3, #16
 80013be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013c6:	2304      	movs	r3, #4
 80013c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 f8d6 	bl	8005584 <HAL_RCC_OscConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013de:	f000 ff11 	bl	8002204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e2:	230f      	movs	r3, #15
 80013e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e6:	2302      	movs	r3, #2
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 fb38 	bl	8005a74 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800140a:	f000 fefb 	bl	8002204 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	@ 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001426:	4a13      	ldr	r2, [pc, #76]	@ (8001474 <MX_I2C1_Init+0x54>)
 8001428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_I2C1_Init+0x50>)
 800142c:	4a12      	ldr	r2, [pc, #72]	@ (8001478 <MX_I2C1_Init+0x58>)
 800142e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001436:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_I2C1_Init+0x50>)
 800143e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001444:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_I2C1_Init+0x50>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001450:	4b07      	ldr	r3, [pc, #28]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_I2C1_Init+0x50>)
 800145e:	f003 fbe3 	bl	8004c28 <HAL_I2C_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001468:	f000 fecc 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000200 	.word	0x20000200
 8001474:	40005400 	.word	0x40005400
 8001478:	000186a0 	.word	0x000186a0

0800147c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_I2C3_Init+0x50>)
 8001482:	4a13      	ldr	r2, [pc, #76]	@ (80014d0 <MX_I2C3_Init+0x54>)
 8001484:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_I2C3_Init+0x50>)
 8001488:	4a12      	ldr	r2, [pc, #72]	@ (80014d4 <MX_I2C3_Init+0x58>)
 800148a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_I2C3_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <MX_I2C3_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <MX_I2C3_Init+0x50>)
 800149a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800149e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <MX_I2C3_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <MX_I2C3_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <MX_I2C3_Init+0x50>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <MX_I2C3_Init+0x50>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014b8:	4804      	ldr	r0, [pc, #16]	@ (80014cc <MX_I2C3_Init+0x50>)
 80014ba:	f003 fbb5 	bl	8004c28 <HAL_I2C_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014c4:	f000 fe9e 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000254 	.word	0x20000254
 80014d0:	40005c00 	.word	0x40005c00
 80014d4:	000186a0 	.word	0x000186a0

080014d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <MX_SPI1_Init+0x64>)
 80014de:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <MX_SPI1_Init+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <MX_SPI1_Init+0x64>)
 80014e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ea:	4b14      	ldr	r3, [pc, #80]	@ (800153c <MX_SPI1_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f0:	4b12      	ldr	r3, [pc, #72]	@ (800153c <MX_SPI1_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <MX_SPI1_Init+0x64>)
 80014f8:	2202      	movs	r2, #2
 80014fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <MX_SPI1_Init+0x64>)
 80014fe:	2201      	movs	r2, #1
 8001500:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <MX_SPI1_Init+0x64>)
 8001504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001508:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <MX_SPI1_Init+0x64>)
 800150c:	2230      	movs	r2, #48	@ 0x30
 800150e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <MX_SPI1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <MX_SPI1_Init+0x64>)
 8001524:	220a      	movs	r2, #10
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	@ (800153c <MX_SPI1_Init+0x64>)
 800152a:	f004 fc83 	bl	8005e34 <HAL_SPI_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001534:	f000 fe66 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200002a8 	.word	0x200002a8
 8001540:	40013000 	.word	0x40013000

08001544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001560:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <MX_TIM1_Init+0x98>)
 8001562:	4a1f      	ldr	r2, [pc, #124]	@ (80015e0 <MX_TIM1_Init+0x9c>)
 8001564:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <MX_TIM1_Init+0x98>)
 8001568:	2253      	movs	r2, #83	@ 0x53
 800156a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <MX_TIM1_Init+0x98>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <MX_TIM1_Init+0x98>)
 8001574:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001578:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <MX_TIM1_Init+0x98>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <MX_TIM1_Init+0x98>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <MX_TIM1_Init+0x98>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800158c:	4813      	ldr	r0, [pc, #76]	@ (80015dc <MX_TIM1_Init+0x98>)
 800158e:	f005 fa23 	bl	80069d8 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001598:	f000 fe34 	bl	8002204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <MX_TIM1_Init+0x98>)
 80015aa:	f005 fead 	bl	8007308 <HAL_TIM_ConfigClockSource>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015b4:	f000 fe26 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c0:	463b      	mov	r3, r7
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_TIM1_Init+0x98>)
 80015c6:	f006 fa67 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015d0:	f000 fe18 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000300 	.word	0x20000300
 80015e0:	40010000 	.word	0x40010000

080015e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	@ 0x30
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	2224      	movs	r2, #36	@ 0x24
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f008 f8a5 	bl	8009742 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001600:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <MX_TIM2_Init+0xa4>)
 8001602:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001608:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <MX_TIM2_Init+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <MX_TIM2_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001614:	4b1c      	ldr	r3, [pc, #112]	@ (8001688 <MX_TIM2_Init+0xa4>)
 8001616:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800161a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <MX_TIM2_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <MX_TIM2_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001628:	2303      	movs	r3, #3
 800162a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001630:	2301      	movs	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001640:	2301      	movs	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	@ (8001688 <MX_TIM2_Init+0xa4>)
 8001654:	f005 fb72 	bl	8006d3c <HAL_TIM_Encoder_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800165e:	f000 fdd1 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	@ (8001688 <MX_TIM2_Init+0xa4>)
 8001670:	f006 fa12 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800167a:	f000 fdc3 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3730      	adds	r7, #48	@ 0x30
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000348 	.word	0x20000348

0800168c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	@ 0x30
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	2224      	movs	r2, #36	@ 0x24
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f008 f851 	bl	8009742 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a8:	4b20      	ldr	r3, [pc, #128]	@ (800172c <MX_TIM3_Init+0xa0>)
 80016aa:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <MX_TIM3_Init+0xa4>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ae:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <MX_TIM3_Init+0xa0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	@ (800172c <MX_TIM3_Init+0xa0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <MX_TIM3_Init+0xa0>)
 80016bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <MX_TIM3_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c8:	4b18      	ldr	r3, [pc, #96]	@ (800172c <MX_TIM3_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016ce:	2303      	movs	r3, #3
 80016d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016d6:	2301      	movs	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016e6:	2301      	movs	r3, #1
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <MX_TIM3_Init+0xa0>)
 80016fa:	f005 fb1f 	bl	8006d3c <HAL_TIM_Encoder_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 fd7e 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <MX_TIM3_Init+0xa0>)
 8001716:	f006 f9bf 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001720:	f000 fd70 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	3730      	adds	r7, #48	@ 0x30
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000390 	.word	0x20000390
 8001730:	40000400 	.word	0x40000400

08001734 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001756:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 8001758:	4a27      	ldr	r2, [pc, #156]	@ (80017f8 <MX_TIM4_Init+0xc4>)
 800175a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800175c:	4b25      	ldr	r3, [pc, #148]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001768:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 800176a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800176e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b20      	ldr	r3, [pc, #128]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800177c:	481d      	ldr	r0, [pc, #116]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 800177e:	f005 f9dd 	bl	8006b3c <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001788:	f000 fd3c 	bl	8002204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4619      	mov	r1, r3
 800179a:	4816      	ldr	r0, [pc, #88]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 800179c:	f006 f97c 	bl	8007a98 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017a6:	f000 fd2d 	bl	8002204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017aa:	2360      	movs	r3, #96	@ 0x60
 80017ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2208      	movs	r2, #8
 80017be:	4619      	mov	r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 80017c2:	f005 fcdf 	bl	8007184 <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80017cc:	f000 fd1a 	bl	8002204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	220c      	movs	r2, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	4807      	ldr	r0, [pc, #28]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 80017d8:	f005 fcd4 	bl	8007184 <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017e2:	f000 fd0f 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017e6:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <MX_TIM4_Init+0xc0>)
 80017e8:	f002 fc6c 	bl	80040c4 <HAL_TIM_MspPostInit>

}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	@ 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200003d8 	.word	0x200003d8
 80017f8:	40000800 	.word	0x40000800

080017fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <MX_USART6_UART_Init+0x50>)
 8001804:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 8001808:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800180c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001820:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 8001822:	220c      	movs	r2, #12
 8001824:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001826:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800182c:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001832:	4805      	ldr	r0, [pc, #20]	@ (8001848 <MX_USART6_UART_Init+0x4c>)
 8001834:	f006 f9b2 	bl	8007b9c <HAL_UART_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800183e:	f000 fce1 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000420 	.word	0x20000420
 800184c:	40011400 	.word	0x40011400

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b49      	ldr	r3, [pc, #292]	@ (8001990 <MX_GPIO_Init+0x140>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4a48      	ldr	r2, [pc, #288]	@ (8001990 <MX_GPIO_Init+0x140>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	6313      	str	r3, [r2, #48]	@ 0x30
 8001876:	4b46      	ldr	r3, [pc, #280]	@ (8001990 <MX_GPIO_Init+0x140>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b42      	ldr	r3, [pc, #264]	@ (8001990 <MX_GPIO_Init+0x140>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a41      	ldr	r2, [pc, #260]	@ (8001990 <MX_GPIO_Init+0x140>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <MX_GPIO_Init+0x140>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <MX_GPIO_Init+0x140>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001990 <MX_GPIO_Init+0x140>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b38      	ldr	r3, [pc, #224]	@ (8001990 <MX_GPIO_Init+0x140>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2110      	movs	r1, #16
 80018be:	4835      	ldr	r0, [pc, #212]	@ (8001994 <MX_GPIO_Init+0x144>)
 80018c0:	f003 f980 	bl	8004bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BIN2_Pin|BIN1_Pin|AIN1_Pin|AIN2_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80018ca:	4833      	ldr	r0, [pc, #204]	@ (8001998 <MX_GPIO_Init+0x148>)
 80018cc:	f003 f97a 	bl	8004bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	2180      	movs	r1, #128	@ 0x80
 80018d4:	4831      	ldr	r0, [pc, #196]	@ (800199c <MX_GPIO_Init+0x14c>)
 80018d6:	f003 f975 	bl	8004bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80018da:	2310      	movs	r3, #16
 80018dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	4619      	mov	r1, r3
 80018f0:	4828      	ldr	r0, [pc, #160]	@ (8001994 <MX_GPIO_Init+0x144>)
 80018f2:	f002 ffe3 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018f6:	2302      	movs	r3, #2
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4619      	mov	r1, r3
 800190a:	4823      	ldr	r0, [pc, #140]	@ (8001998 <MX_GPIO_Init+0x148>)
 800190c:	f002 ffd6 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN2_Pin BIN1_Pin AIN1_Pin AIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin|BIN1_Pin|AIN1_Pin|AIN2_Pin;
 8001910:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4619      	mov	r1, r3
 8001928:	481b      	ldr	r0, [pc, #108]	@ (8001998 <MX_GPIO_Init+0x148>)
 800192a:	f002 ffc7 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4619      	mov	r1, r3
 8001944:	4815      	ldr	r0, [pc, #84]	@ (800199c <MX_GPIO_Init+0x14c>)
 8001946:	f002 ffb9 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800194a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800194e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001950:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	@ (8001994 <MX_GPIO_Init+0x144>)
 8001962:	f002 ffab 	bl	80048bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	2007      	movs	r0, #7
 800196c:	f002 fedd 	bl	800472a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001970:	2007      	movs	r0, #7
 8001972:	f002 fef6 	bl	8004762 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2028      	movs	r0, #40	@ 0x28
 800197c:	f002 fed5 	bl	800472a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001980:	2028      	movs	r0, #40	@ 0x28
 8001982:	f002 feee 	bl	8004762 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800

080019a0 <mpu6500_init>:

/* USER CODE BEGIN 4 */
void mpu6500_init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80019a4:	2064      	movs	r0, #100	@ 0x64
 80019a6:	f002 fdc1 	bl	800452c <HAL_Delay>
	mpu6500_write_reg(26, 0x04); // Low-pass filtering at 41Hz
 80019aa:	2104      	movs	r1, #4
 80019ac:	201a      	movs	r0, #26
 80019ae:	f000 f90b 	bl	8001bc8 <mpu6500_write_reg>
	mpu6500_write_reg(28, 0x00); // Set accelerometer range
 80019b2:	2100      	movs	r1, #0
 80019b4:	201c      	movs	r0, #28
 80019b6:	f000 f907 	bl	8001bc8 <mpu6500_write_reg>
	mpu6500_write_reg(29, 0x02); // Enable Low-pass filter
 80019ba:	2102      	movs	r1, #2
 80019bc:	201d      	movs	r0, #29
 80019be:	f000 f903 	bl	8001bc8 <mpu6500_write_reg>
	/*
	mpu_set_gyro_fsr(3);
	mpu_set_accel_fsr(2);
	*/
	imu_data.q0 = 1.0f; // Initialize quaternions
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <mpu6500_init+0x4c>)
 80019c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019c8:	629a      	str	r2, [r3, #40]	@ 0x28
	imu_data.q1 = 0.0f;
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <mpu6500_init+0x4c>)
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu_data.q2 = 0.0f;
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <mpu6500_init+0x4c>)
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	631a      	str	r2, [r3, #48]	@ 0x30
	imu_data.q3 = 0.0f;
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <mpu6500_init+0x4c>)
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	635a      	str	r2, [r3, #52]	@ 0x34

	mpu6500_offset_call();
 80019e2:	f000 f805 	bl	80019f0 <mpu6500_offset_call>
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000049c 	.word	0x2000049c

080019f0 <mpu6500_offset_call>:

// Getting the offset data of MPU6500
void mpu6500_offset_call(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	mpu_data.ax_offset = 0;
 80019f6:	4b71      	ldr	r3, [pc, #452]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset = 0;
 80019fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset = 0;
 8001a02:	4b6e      	ldr	r3, [pc, #440]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset = 0;
 8001a08:	4b6c      	ldr	r3, [pc, #432]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset = 0;
 8001a0e:	4b6b      	ldr	r3, [pc, #428]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset = 0;
 8001a14:	4b69      	ldr	r3, [pc, #420]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	83da      	strh	r2, [r3, #30]
	int i;
	for (i=0; i<300;i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	e07c      	b.n	8001b1a <mpu6500_offset_call+0x12a>
	{
		mpu6500_read_reg(59, mpu_buffer, sizeof(mpu_buffer));
 8001a20:	220e      	movs	r2, #14
 8001a22:	4967      	ldr	r1, [pc, #412]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001a24:	203b      	movs	r0, #59	@ 0x3b
 8001a26:	f000 f8f5 	bl	8001c14 <mpu6500_read_reg>

		mpu_data.ax_offset += mpu_buffer[0] << 8 | mpu_buffer[1];
 8001a2a:	4b64      	ldr	r3, [pc, #400]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a2c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	4b63      	ldr	r3, [pc, #396]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	b219      	sxth	r1, r3
 8001a3a:	4b61      	ldr	r3, [pc, #388]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	430b      	orrs	r3, r1
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a4e:	829a      	strh	r2, [r3, #20]
		mpu_data.ay_offset += mpu_buffer[2] << 8 | mpu_buffer[3];
 8001a50:	4b5a      	ldr	r3, [pc, #360]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a52:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b59      	ldr	r3, [pc, #356]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b219      	sxth	r1, r3
 8001a60:	4b57      	ldr	r3, [pc, #348]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001a62:	78db      	ldrb	r3, [r3, #3]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	430b      	orrs	r3, r1
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	4b52      	ldr	r3, [pc, #328]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a74:	82da      	strh	r2, [r3, #22]
		mpu_data.az_offset += mpu_buffer[4] << 8 | mpu_buffer[5];
 8001a76:	4b51      	ldr	r3, [pc, #324]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a78:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b50      	ldr	r3, [pc, #320]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001a80:	791b      	ldrb	r3, [r3, #4]
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	b219      	sxth	r1, r3
 8001a86:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001a88:	795b      	ldrb	r3, [r3, #5]
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	4b48      	ldr	r3, [pc, #288]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a9a:	831a      	strh	r2, [r3, #24]

		mpu_data.gx_offset += mpu_buffer[8]  << 8 | mpu_buffer[9];
 8001a9c:	4b47      	ldr	r3, [pc, #284]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001a9e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b46      	ldr	r3, [pc, #280]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001aa6:	7a1b      	ldrb	r3, [r3, #8]
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b219      	sxth	r1, r3
 8001aac:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001aae:	7a5b      	ldrb	r3, [r3, #9]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	4b3f      	ldr	r3, [pc, #252]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001ac0:	835a      	strh	r2, [r3, #26]
		mpu_data.gy_offset += mpu_buffer[10] << 8 | mpu_buffer[11];
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001ac4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001acc:	7a9b      	ldrb	r3, [r3, #10]
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	b219      	sxth	r1, r3
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001ad4:	7adb      	ldrb	r3, [r3, #11]
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b35      	ldr	r3, [pc, #212]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001ae6:	839a      	strh	r2, [r3, #28]
		mpu_data.gz_offset += mpu_buffer[12] << 8 | mpu_buffer[13];
 8001ae8:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001aea:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b33      	ldr	r3, [pc, #204]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001af2:	7b1b      	ldrb	r3, [r3, #12]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b219      	sxth	r1, r3
 8001af8:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <mpu6500_offset_call+0x1d0>)
 8001afa:	7b5b      	ldrb	r3, [r3, #13]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	430b      	orrs	r3, r1
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b0c:	83da      	strh	r2, [r3, #30]

		HAL_Delay(5);
 8001b0e:	2005      	movs	r0, #5
 8001b10:	f002 fd0c 	bl	800452c <HAL_Delay>
	for (i=0; i<300;i++)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3301      	adds	r3, #1
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001b20:	f6ff af7e 	blt.w	8001a20 <mpu6500_offset_call+0x30>
	}
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 8001b24:	4b25      	ldr	r3, [pc, #148]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b2a:	4a26      	ldr	r2, [pc, #152]	@ (8001bc4 <mpu6500_offset_call+0x1d4>)
 8001b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b30:	1152      	asrs	r2, r2, #5
 8001b32:	17db      	asrs	r3, r3, #31
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b3a:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 300;
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001b42:	4a20      	ldr	r2, [pc, #128]	@ (8001bc4 <mpu6500_offset_call+0x1d4>)
 8001b44:	fb82 1203 	smull	r1, r2, r2, r3
 8001b48:	1152      	asrs	r2, r2, #5
 8001b4a:	17db      	asrs	r3, r3, #31
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b52:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset=mpu_data.az_offset / 300;
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b56:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc4 <mpu6500_offset_call+0x1d4>)
 8001b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b60:	1152      	asrs	r2, r2, #5
 8001b62:	17db      	asrs	r3, r3, #31
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b6a:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b6e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001b72:	4a14      	ldr	r2, [pc, #80]	@ (8001bc4 <mpu6500_offset_call+0x1d4>)
 8001b74:	fb82 1203 	smull	r1, r2, r2, r3
 8001b78:	1152      	asrs	r2, r2, #5
 8001b7a:	17db      	asrs	r3, r3, #31
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b82:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset=mpu_data.gx_offset / 300;
 8001b84:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b86:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc4 <mpu6500_offset_call+0x1d4>)
 8001b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b90:	1152      	asrs	r2, r2, #5
 8001b92:	17db      	asrs	r3, r3, #31
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b9a:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001b9e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001ba2:	4a08      	ldr	r2, [pc, #32]	@ (8001bc4 <mpu6500_offset_call+0x1d4>)
 8001ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba8:	1152      	asrs	r2, r2, #5
 8001baa:	17db      	asrs	r3, r3, #31
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	4b02      	ldr	r3, [pc, #8]	@ (8001bbc <mpu6500_offset_call+0x1cc>)
 8001bb2:	83da      	strh	r2, [r3, #30]
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	2000047c 	.word	0x2000047c
 8001bc0:	2000046c 	.word	0x2000046c
 8001bc4:	1b4e81b5 	.word	0x1b4e81b5

08001bc8 <mpu6500_write_reg>:

void mpu6500_write_reg(uint8_t reg, uint8_t data)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	71fb      	strb	r3, [r7, #7]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2110      	movs	r1, #16
 8001bdc:	480b      	ldr	r0, [pc, #44]	@ (8001c0c <mpu6500_write_reg+0x44>)
 8001bde:	f002 fff1 	bl	8004bc4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001be2:	1df9      	adds	r1, r7, #7
 8001be4:	2364      	movs	r3, #100	@ 0x64
 8001be6:	2201      	movs	r2, #1
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <mpu6500_write_reg+0x48>)
 8001bea:	f004 f9ac 	bl	8005f46 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001bee:	1db9      	adds	r1, r7, #6
 8001bf0:	2364      	movs	r3, #100	@ 0x64
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4806      	ldr	r0, [pc, #24]	@ (8001c10 <mpu6500_write_reg+0x48>)
 8001bf6:	f004 f9a6 	bl	8005f46 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	2110      	movs	r1, #16
 8001bfe:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <mpu6500_write_reg+0x44>)
 8001c00:	f002 ffe0 	bl	8004bc4 <HAL_GPIO_WritePin>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	200002a8 	.word	0x200002a8

08001c14 <mpu6500_read_reg>:
void mpu6500_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
 8001c20:	4613      	mov	r3, r2
 8001c22:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2110      	movs	r1, #16
 8001c32:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <mpu6500_read_reg+0x54>)
 8001c34:	f002 ffc6 	bl	8004bc4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001c38:	f107 010f 	add.w	r1, r7, #15
 8001c3c:	2364      	movs	r3, #100	@ 0x64
 8001c3e:	2201      	movs	r2, #1
 8001c40:	480a      	ldr	r0, [pc, #40]	@ (8001c6c <mpu6500_read_reg+0x58>)
 8001c42:	f004 f980 	bl	8005f46 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8001c46:	79bb      	ldrb	r3, [r7, #6]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	2364      	movs	r3, #100	@ 0x64
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	4807      	ldr	r0, [pc, #28]	@ (8001c6c <mpu6500_read_reg+0x58>)
 8001c50:	f004 fabd 	bl	80061ce <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2110      	movs	r1, #16
 8001c58:	4803      	ldr	r0, [pc, #12]	@ (8001c68 <mpu6500_read_reg+0x54>)
 8001c5a:	f002 ffb3 	bl	8004bc4 <HAL_GPIO_WritePin>
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	200002a8 	.word	0x200002a8

08001c70 <read_data>:

void read_data()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b090      	sub	sp, #64	@ 0x40
 8001c74:	af00      	add	r7, sp, #0
	 // Split data
	mpu_data.ax   = (mpu_buffer[0] << 8 | mpu_buffer[1]);
 8001c76:	4bc6      	ldr	r3, [pc, #792]	@ (8001f90 <read_data+0x320>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	4bc4      	ldr	r3, [pc, #784]	@ (8001f90 <read_data+0x320>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	4bc2      	ldr	r3, [pc, #776]	@ (8001f94 <read_data+0x324>)
 8001c8a:	801a      	strh	r2, [r3, #0]
	mpu_data.ay   = (mpu_buffer[2] << 8 | mpu_buffer[3]);
 8001c8c:	4bc0      	ldr	r3, [pc, #768]	@ (8001f90 <read_data+0x320>)
 8001c8e:	789b      	ldrb	r3, [r3, #2]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	4bbe      	ldr	r3, [pc, #760]	@ (8001f90 <read_data+0x320>)
 8001c96:	78db      	ldrb	r3, [r3, #3]
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	4bbd      	ldr	r3, [pc, #756]	@ (8001f94 <read_data+0x324>)
 8001ca0:	805a      	strh	r2, [r3, #2]
	mpu_data.az   = (mpu_buffer[4] << 8 | mpu_buffer[5]);
 8001ca2:	4bbb      	ldr	r3, [pc, #748]	@ (8001f90 <read_data+0x320>)
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	4bb9      	ldr	r3, [pc, #740]	@ (8001f90 <read_data+0x320>)
 8001cac:	795b      	ldrb	r3, [r3, #5]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	4bb7      	ldr	r3, [pc, #732]	@ (8001f94 <read_data+0x324>)
 8001cb6:	809a      	strh	r2, [r3, #4]
	mpu_data.temp = (mpu_buffer[6] << 8 | mpu_buffer[7]);
 8001cb8:	4bb5      	ldr	r3, [pc, #724]	@ (8001f90 <read_data+0x320>)
 8001cba:	799b      	ldrb	r3, [r3, #6]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	4bb3      	ldr	r3, [pc, #716]	@ (8001f90 <read_data+0x320>)
 8001cc2:	79db      	ldrb	r3, [r3, #7]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	4bb2      	ldr	r3, [pc, #712]	@ (8001f94 <read_data+0x324>)
 8001ccc:	819a      	strh	r2, [r3, #12]

	mpu_data.gx = ((mpu_buffer[8]  << 8 | mpu_buffer[9])  - mpu_data.gx_offset);
 8001cce:	4bb0      	ldr	r3, [pc, #704]	@ (8001f90 <read_data+0x320>)
 8001cd0:	7a1b      	ldrb	r3, [r3, #8]
 8001cd2:	021b      	lsls	r3, r3, #8
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	4bae      	ldr	r3, [pc, #696]	@ (8001f90 <read_data+0x320>)
 8001cd8:	7a5b      	ldrb	r3, [r3, #9]
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4bac      	ldr	r3, [pc, #688]	@ (8001f94 <read_data+0x324>)
 8001ce4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	4ba8      	ldr	r3, [pc, #672]	@ (8001f94 <read_data+0x324>)
 8001cf2:	81da      	strh	r2, [r3, #14]
	mpu_data.gy = ((mpu_buffer[10] << 8 | mpu_buffer[11]) - mpu_data.gy_offset);
 8001cf4:	4ba6      	ldr	r3, [pc, #664]	@ (8001f90 <read_data+0x320>)
 8001cf6:	7a9b      	ldrb	r3, [r3, #10]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	4ba4      	ldr	r3, [pc, #656]	@ (8001f90 <read_data+0x320>)
 8001cfe:	7adb      	ldrb	r3, [r3, #11]
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4ba2      	ldr	r3, [pc, #648]	@ (8001f94 <read_data+0x324>)
 8001d0a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b21a      	sxth	r2, r3
 8001d16:	4b9f      	ldr	r3, [pc, #636]	@ (8001f94 <read_data+0x324>)
 8001d18:	821a      	strh	r2, [r3, #16]
	mpu_data.gz = ((mpu_buffer[12] << 8 | mpu_buffer[13]) - mpu_data.gz_offset);
 8001d1a:	4b9d      	ldr	r3, [pc, #628]	@ (8001f90 <read_data+0x320>)
 8001d1c:	7b1b      	ldrb	r3, [r3, #12]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	4b9b      	ldr	r3, [pc, #620]	@ (8001f90 <read_data+0x320>)
 8001d24:	7b5b      	ldrb	r3, [r3, #13]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b99      	ldr	r3, [pc, #612]	@ (8001f94 <read_data+0x324>)
 8001d30:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	4b95      	ldr	r3, [pc, #596]	@ (8001f94 <read_data+0x324>)
 8001d3e:	825a      	strh	r2, [r3, #18]

	// Conversion to physical quantities
	imu_data.ax = mpu_data.ax / 16384.0f; // ±2g
 8001d40:	4b94      	ldr	r3, [pc, #592]	@ (8001f94 <read_data+0x324>)
 8001d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d4e:	eddf 6a92 	vldr	s13, [pc, #584]	@ 8001f98 <read_data+0x328>
 8001d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d56:	4b91      	ldr	r3, [pc, #580]	@ (8001f9c <read_data+0x32c>)
 8001d58:	edc3 7a00 	vstr	s15, [r3]
	imu_data.ay = mpu_data.ay / 16384.0f;
 8001d5c:	4b8d      	ldr	r3, [pc, #564]	@ (8001f94 <read_data+0x324>)
 8001d5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6a:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 8001f98 <read_data+0x328>
 8001d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d72:	4b8a      	ldr	r3, [pc, #552]	@ (8001f9c <read_data+0x32c>)
 8001d74:	edc3 7a01 	vstr	s15, [r3, #4]
	imu_data.az = mpu_data.az / 16384.0f;
 8001d78:	4b86      	ldr	r3, [pc, #536]	@ (8001f94 <read_data+0x324>)
 8001d7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d86:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8001f98 <read_data+0x328>
 8001d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d8e:	4b83      	ldr	r3, [pc, #524]	@ (8001f9c <read_data+0x32c>)
 8001d90:	edc3 7a02 	vstr	s15, [r3, #8]
	imu_data.temp = (mpu_data.temp / 333.87f) + 21.0f;
 8001d94:	4b7f      	ldr	r3, [pc, #508]	@ (8001f94 <read_data+0x324>)
 8001d96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8001fa0 <read_data+0x330>
 8001da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001daa:	eeb3 7a05 	vmov.f32	s14, #53	@ 0x41a80000  21.0
 8001dae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001db2:	4b7a      	ldr	r3, [pc, #488]	@ (8001f9c <read_data+0x32c>)
 8001db4:	edc3 7a03 	vstr	s15, [r3, #12]
	imu_data.gx = mpu_data.gx / 131.0f; // ±250dps
 8001db8:	4b76      	ldr	r3, [pc, #472]	@ (8001f94 <read_data+0x324>)
 8001dba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc6:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8001fa4 <read_data+0x334>
 8001dca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dce:	4b73      	ldr	r3, [pc, #460]	@ (8001f9c <read_data+0x32c>)
 8001dd0:	edc3 7a04 	vstr	s15, [r3, #16]
	imu_data.gy = mpu_data.gy / 131.0f;
 8001dd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f94 <read_data+0x324>)
 8001dd6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001fa4 <read_data+0x334>
 8001de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dea:	4b6c      	ldr	r3, [pc, #432]	@ (8001f9c <read_data+0x32c>)
 8001dec:	edc3 7a05 	vstr	s15, [r3, #20]
	imu_data.gz = mpu_data.gz / 131.0f;
 8001df0:	4b68      	ldr	r3, [pc, #416]	@ (8001f94 <read_data+0x324>)
 8001df2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dfe:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8001fa4 <read_data+0x334>
 8001e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e06:	4b65      	ldr	r3, [pc, #404]	@ (8001f9c <read_data+0x32c>)
 8001e08:	edc3 7a06 	vstr	s15, [r3, #24]

	// Quaternion Updates
	const float dt = 0.001f;    // Sampling Interval
 8001e0c:	4b66      	ldr	r3, [pc, #408]	@ (8001fa8 <read_data+0x338>)
 8001e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	const float deg2rad = 0.0174532925f; // degree to radian coefficient
 8001e10:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <read_data+0x33c>)
 8001e12:	63bb      	str	r3, [r7, #56]	@ 0x38

	// Converts angular velocity in rad/s
	float gx_rad = imu_data.gx * deg2rad;
 8001e14:	4b61      	ldr	r3, [pc, #388]	@ (8001f9c <read_data+0x32c>)
 8001e16:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e1a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e22:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float gy_rad = imu_data.gy * deg2rad;
 8001e26:	4b5d      	ldr	r3, [pc, #372]	@ (8001f9c <read_data+0x32c>)
 8001e28:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e2c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e34:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float gz_rad = imu_data.gz * deg2rad;
 8001e38:	4b58      	ldr	r3, [pc, #352]	@ (8001f9c <read_data+0x32c>)
 8001e3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e3e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e46:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Get the current quaternion
	float q0 = imu_data.q0;
 8001e4a:	4b54      	ldr	r3, [pc, #336]	@ (8001f9c <read_data+0x32c>)
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	float q1 = imu_data.q1;
 8001e50:	4b52      	ldr	r3, [pc, #328]	@ (8001f9c <read_data+0x32c>)
 8001e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
	float q2 = imu_data.q2;
 8001e56:	4b51      	ldr	r3, [pc, #324]	@ (8001f9c <read_data+0x32c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	623b      	str	r3, [r7, #32]
	float q3 = imu_data.q3;
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f9c <read_data+0x32c>)
 8001e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e60:	61fb      	str	r3, [r7, #28]

	float dq0 = 0.5f * (-q1*gx_rad - q2*gy_rad - q3*gz_rad) * dt;
 8001e62:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e66:	eeb1 7a67 	vneg.f32	s14, s15
 8001e6a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e72:	edd7 6a08 	vldr	s13, [r7, #32]
 8001e76:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e86:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea2:	edc7 7a06 	vstr	s15, [r7, #24]
	float dq1 = 0.5f * ( q0*gx_rad + q2*gz_rad - q3*gy_rad) * dt;
 8001ea6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001eaa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb2:	edd7 6a08 	vldr	s13, [r7, #32]
 8001eb6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ec6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eda:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee2:	edc7 7a05 	vstr	s15, [r7, #20]
	float dq2 = 0.5f * ( q0*gy_rad - q1*gz_rad + q3*gx_rad) * dt;
 8001ee6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001eea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001ef6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f06:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	edc7 7a04 	vstr	s15, [r7, #16]
	float dq3 = 0.5f * ( q0*gz_rad + q1*gy_rad - q2*gx_rad) * dt;
 8001f26:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f2a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f32:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001f36:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f42:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f46:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	edc7 7a03 	vstr	s15, [r7, #12]

	q0 += dq0;
 8001f66:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f72:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	q1 += dq1;
 8001f76:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	q2 += dq2;
 8001f86:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f8e:	e00f      	b.n	8001fb0 <read_data+0x340>
 8001f90:	2000046c 	.word	0x2000046c
 8001f94:	2000047c 	.word	0x2000047c
 8001f98:	46800000 	.word	0x46800000
 8001f9c:	2000049c 	.word	0x2000049c
 8001fa0:	43a6ef5c 	.word	0x43a6ef5c
 8001fa4:	43030000 	.word	0x43030000
 8001fa8:	3a83126f 	.word	0x3a83126f
 8001fac:	3c8efa35 	.word	0x3c8efa35
 8001fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb4:	edc7 7a08 	vstr	s15, [r7, #32]
	q3 += dq3;
 8001fb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc4:	edc7 7a07 	vstr	s15, [r7, #28]

	// Nnormalize quaternions
	float norm = sqrtf(q0*q0 + q1*q1 + q2*q2 + q3*q3);
 8001fc8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001fcc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fd0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fdc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fe0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff8:	f001 fb84 	bl	8003704 <sqrtf>
 8001ffc:	ed87 0a02 	vstr	s0, [r7, #8]
	norm = (norm == 0.0f) ? 1.0f : norm; // Prevent division by zero
 8002000:	edd7 7a02 	vldr	s15, [r7, #8]
 8002004:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200c:	d001      	beq.n	8002012 <read_data+0x3a2>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	e001      	b.n	8002016 <read_data+0x3a6>
 8002012:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002016:	60bb      	str	r3, [r7, #8]
	q0 /= norm;
 8002018:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800201c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002024:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	q1 /= norm;
 8002028:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800202c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002034:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	q2 /= norm;
 8002038:	edd7 6a08 	vldr	s13, [r7, #32]
 800203c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002044:	edc7 7a08 	vstr	s15, [r7, #32]
	q3 /= norm;
 8002048:	edd7 6a07 	vldr	s13, [r7, #28]
 800204c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002054:	edc7 7a07 	vstr	s15, [r7, #28]

	imu_data.q0 = q0;
 8002058:	4a4f      	ldr	r2, [pc, #316]	@ (8002198 <read_data+0x528>)
 800205a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205c:	6293      	str	r3, [r2, #40]	@ 0x28
	imu_data.q1 = q1;
 800205e:	4a4e      	ldr	r2, [pc, #312]	@ (8002198 <read_data+0x528>)
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	62d3      	str	r3, [r2, #44]	@ 0x2c
	imu_data.q2 = q2;
 8002064:	4a4c      	ldr	r2, [pc, #304]	@ (8002198 <read_data+0x528>)
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
	imu_data.q3 = q3;
 800206a:	4a4b      	ldr	r2, [pc, #300]	@ (8002198 <read_data+0x528>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	6353      	str	r3, [r2, #52]	@ 0x34

	// Conversion to Euler angles (ZYX order)
	// Roll (X-axis)
	imu_data.rol = atan2f(2.0f*(q0*q1 + q2*q3), 1.0f - 2.0f*(q1*q1 + q2*q2));
 8002070:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002074:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002080:	edd7 7a07 	vldr	s15, [r7, #28]
 8002084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002090:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002094:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002098:	edd7 7a08 	vldr	s15, [r7, #32]
 800209c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b0:	eef0 0a67 	vmov.f32	s1, s15
 80020b4:	eeb0 0a66 	vmov.f32	s0, s13
 80020b8:	f009 fc3a 	bl	800b930 <atan2f>
 80020bc:	eef0 7a40 	vmov.f32	s15, s0
 80020c0:	4b35      	ldr	r3, [pc, #212]	@ (8002198 <read_data+0x528>)
 80020c2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	// Pitch (Y-axis)
	imu_data.pit = asinf(2.0f*(q0*q2 - q3*q1));
 80020c6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80020ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80020ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80020d6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80020da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	f009 fbf5 	bl	800b8d8 <asinf>
 80020ee:	eef0 7a40 	vmov.f32	s15, s0
 80020f2:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <read_data+0x528>)
 80020f4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	// Yaw (Z-axis)
	imu_data.yaw = atan2f(2.0f*(q0*q3 + q1*q2), 1.0f - 2.0f*(q2*q2 + q3*q3));
 80020f8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80020fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002104:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002108:	edd7 7a08 	vldr	s15, [r7, #32]
 800210c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002118:	edd7 7a08 	vldr	s15, [r7, #32]
 800211c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002120:	edd7 7a07 	vldr	s15, [r7, #28]
 8002124:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002130:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002138:	eef0 0a67 	vmov.f32	s1, s15
 800213c:	eeb0 0a66 	vmov.f32	s0, s13
 8002140:	f009 fbf6 	bl	800b930 <atan2f>
 8002144:	eef0 7a40 	vmov.f32	s15, s0
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <read_data+0x528>)
 800214a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Radian to degree
	const float rad2deg = 57.2957795f;
 800214e:	4b13      	ldr	r3, [pc, #76]	@ (800219c <read_data+0x52c>)
 8002150:	607b      	str	r3, [r7, #4]
	imu_data.rol *= rad2deg;
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <read_data+0x528>)
 8002154:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002158:	edd7 7a01 	vldr	s15, [r7, #4]
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <read_data+0x528>)
 8002162:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	imu_data.pit *= rad2deg;
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <read_data+0x528>)
 8002168:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800216c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <read_data+0x528>)
 8002176:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	imu_data.yaw *= rad2deg;
 800217a:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <read_data+0x528>)
 800217c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002180:	edd7 7a01 	vldr	s15, [r7, #4]
 8002184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <read_data+0x528>)
 800218a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 800218e:	bf00      	nop
 8002190:	3740      	adds	r7, #64	@ 0x40
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000049c 	.word	0x2000049c
 800219c:	42652ee1 	.word	0x42652ee1

080021a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a06      	ldr	r2, [pc, #24]	@ (80021c4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d102      	bne.n	80021b6 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
	}
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000300 	.word	0x20000300
 80021c8:	20000468 	.word	0x20000468

080021cc <_write>:
int _write(int file, char *ptr, int len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e009      	b.n	80021f2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	60ba      	str	r2, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe feae 	bl	8000f48 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbf1      	blt.n	80021de <_write+0x12>
	}
	return len;
 80021fa:	687b      	ldr	r3, [r7, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <Error_Handler+0x8>

08002210 <Motor_Debug_PWMTest>:
  * @brief  测试PWM输出功能
  * @param  None
  * @retval None
  */
void Motor_Debug_PWMTest(void)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b0c6      	sub	sp, #280	@ 0x118
 8002214:	af04      	add	r7, sp, #16
    char buffer[200];
    
    // 发送测试开始信息
    HAL_UART_Transmit(&huart6, (uint8_t*)"=== PWM Output Test ===\r\n", 26, HAL_MAX_DELAY);
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	221a      	movs	r2, #26
 800221c:	498e      	ldr	r1, [pc, #568]	@ (8002458 <Motor_Debug_PWMTest+0x248>)
 800221e:	488f      	ldr	r0, [pc, #572]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 8002220:	f005 fd0c 	bl	8007c3c <HAL_UART_Transmit>
    
    // 检查TIM4配置信息
    sprintf(buffer, "TIM4 Config:\r\n");
 8002224:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002228:	498d      	ldr	r1, [pc, #564]	@ (8002460 <Motor_Debug_PWMTest+0x250>)
 800222a:	4618      	mov	r0, r3
 800222c:	f007 fa26 	bl	800967c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f823 	bl	8000280 <strlen>
 800223a:	4603      	mov	r3, r0
 800223c:	b29a      	uxth	r2, r3
 800223e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	4885      	ldr	r0, [pc, #532]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 8002248:	f005 fcf8 	bl	8007c3c <HAL_UART_Transmit>
    
    sprintf(buffer, "  Prescaler: %lu\r\n", htim4.Init.Prescaler);
 800224c:	4b85      	ldr	r3, [pc, #532]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002254:	4984      	ldr	r1, [pc, #528]	@ (8002468 <Motor_Debug_PWMTest+0x258>)
 8002256:	4618      	mov	r0, r3
 8002258:	f007 fa10 	bl	800967c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800225c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f80d 	bl	8000280 <strlen>
 8002266:	4603      	mov	r3, r0
 8002268:	b29a      	uxth	r2, r3
 800226a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
 8002272:	487a      	ldr	r0, [pc, #488]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 8002274:	f005 fce2 	bl	8007c3c <HAL_UART_Transmit>
    
    sprintf(buffer, "  Period: %lu\r\n", htim4.Init.Period);
 8002278:	4b7a      	ldr	r3, [pc, #488]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002280:	497a      	ldr	r1, [pc, #488]	@ (800246c <Motor_Debug_PWMTest+0x25c>)
 8002282:	4618      	mov	r0, r3
 8002284:	f007 f9fa 	bl	800967c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002288:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800228c:	4618      	mov	r0, r3
 800228e:	f7fd fff7 	bl	8000280 <strlen>
 8002292:	4603      	mov	r3, r0
 8002294:	b29a      	uxth	r2, r3
 8002296:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
 800229e:	486f      	ldr	r0, [pc, #444]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 80022a0:	f005 fccc 	bl	8007c3c <HAL_UART_Transmit>
    
    sprintf(buffer, "  Clock Division: %lu\r\n", htim4.Init.ClockDivision);
 80022a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ac:	4970      	ldr	r1, [pc, #448]	@ (8002470 <Motor_Debug_PWMTest+0x260>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	f007 f9e4 	bl	800967c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80022b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fd ffe1 	bl	8000280 <strlen>
 80022be:	4603      	mov	r3, r0
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	4864      	ldr	r0, [pc, #400]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 80022cc:	f005 fcb6 	bl	8007c3c <HAL_UART_Transmit>
    
    // 计算PWM频率
    // APB1TimFreq = 84MHz (从.ioc文件得知)
    uint32_t timer_freq = 84000000; // 84MHz
 80022d0:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <Motor_Debug_PWMTest+0x264>)
 80022d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    uint32_t pwm_freq = timer_freq / ((htim4.Init.Prescaler + 1) * (htim4.Init.Period + 1));
 80022d6:	4b63      	ldr	r3, [pc, #396]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a61      	ldr	r2, [pc, #388]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 80022de:	68d2      	ldr	r2, [r2, #12]
 80022e0:	3201      	adds	r2, #1
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    sprintf(buffer, "  Calculated PWM Freq: %lu Hz\r\n", pwm_freq);
 80022f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022f6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80022fa:	495f      	ldr	r1, [pc, #380]	@ (8002478 <Motor_Debug_PWMTest+0x268>)
 80022fc:	4618      	mov	r0, r3
 80022fe:	f007 f9bd 	bl	800967c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002302:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ffba 	bl	8000280 <strlen>
 800230c:	4603      	mov	r3, r0
 800230e:	b29a      	uxth	r2, r3
 8002310:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	4850      	ldr	r0, [pc, #320]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 800231a:	f005 fc8f 	bl	8007c3c <HAL_UART_Transmit>
    
    // 测试不同的PWM值
    HAL_UART_Transmit(&huart6, (uint8_t*)"Testing PWM values:\r\n", 21, HAL_MAX_DELAY);
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	2215      	movs	r2, #21
 8002324:	4955      	ldr	r1, [pc, #340]	@ (800247c <Motor_Debug_PWMTest+0x26c>)
 8002326:	484d      	ldr	r0, [pc, #308]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 8002328:	f005 fc88 	bl	8007c3c <HAL_UART_Transmit>
    
    uint32_t test_values[] = {0, 100, 500, 1000, 2000, 3000, 5000, 7000, 9000, 9999};
 800232c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002334:	4a52      	ldr	r2, [pc, #328]	@ (8002480 <Motor_Debug_PWMTest+0x270>)
 8002336:	461c      	mov	r4, r3
 8002338:	4615      	mov	r5, r2
 800233a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800233e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002342:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002346:	e884 0003 	stmia.w	r4, {r0, r1}
    uint8_t num_tests = sizeof(test_values) / sizeof(test_values[0]);
 800234a:	230a      	movs	r3, #10
 800234c:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
    
    for (uint8_t i = 0; i < num_tests; i++) {
 8002350:	2300      	movs	r3, #0
 8002352:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8002356:	e061      	b.n	800241c <Motor_Debug_PWMTest+0x20c>
        uint32_t pwm_value = test_values[i];
 8002358:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800235c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002368:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        
        // 设置PWM值
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_value);  // Left motor
 800236c:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002374:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_value);  // Right motor
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        // 计算占空比
        float duty_cycle = (float)pwm_value / 9999.0 * 100.0;
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800238c:	ee17 0a90 	vmov	r0, s15
 8002390:	f7fe f8e2 	bl	8000558 <__aeabi_f2d>
 8002394:	a32e      	add	r3, pc, #184	@ (adr r3, 8002450 <Motor_Debug_PWMTest+0x240>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	f7fe fa5f 	bl	800085c <__aeabi_ddiv>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	4b36      	ldr	r3, [pc, #216]	@ (8002484 <Motor_Debug_PWMTest+0x274>)
 80023ac:	f7fe f92c 	bl	8000608 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f7fe fbfe 	bl	8000bb8 <__aeabi_d2f>
 80023bc:	4603      	mov	r3, r0
 80023be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        
        sprintf(buffer, "  PWM: %5lu, Duty: %5.1f%%, Speed: %3d%%\r\n", 
 80023c2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 80023c6:	f7fe f8c7 	bl	8000558 <__aeabi_f2d>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 80023d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d6:	ee17 1a90 	vmov	r1, s15
 80023da:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80023de:	9102      	str	r1, [sp, #8]
 80023e0:	e9cd 2300 	strd	r2, r3, [sp]
 80023e4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80023e8:	4927      	ldr	r1, [pc, #156]	@ (8002488 <Motor_Debug_PWMTest+0x278>)
 80023ea:	f007 f947 	bl	800967c <siprintf>
                pwm_value, duty_cycle, (int)(duty_cycle));
        HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80023ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fd ff44 	bl	8000280 <strlen>
 80023f8:	4603      	mov	r3, r0
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
 8002404:	4815      	ldr	r0, [pc, #84]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 8002406:	f005 fc19 	bl	8007c3c <HAL_UART_Transmit>
        
        HAL_Delay(2000);  // 持续2秒让用户观察
 800240a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800240e:	f002 f88d 	bl	800452c <HAL_Delay>
    for (uint8_t i = 0; i < num_tests; i++) {
 8002412:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8002416:	3301      	adds	r3, #1
 8002418:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 800241c:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8002420:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8002424:	429a      	cmp	r2, r3
 8002426:	d397      	bcc.n	8002358 <Motor_Debug_PWMTest+0x148>
    }
    
    // 停止PWM
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8002430:	4b0c      	ldr	r3, [pc, #48]	@ (8002464 <Motor_Debug_PWMTest+0x254>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"PWM Test completed!\r\n", 21, HAL_MAX_DELAY);
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	2215      	movs	r2, #21
 800243e:	4913      	ldr	r1, [pc, #76]	@ (800248c <Motor_Debug_PWMTest+0x27c>)
 8002440:	4806      	ldr	r0, [pc, #24]	@ (800245c <Motor_Debug_PWMTest+0x24c>)
 8002442:	f005 fbfb 	bl	8007c3c <HAL_UART_Transmit>
}
 8002446:	bf00      	nop
 8002448:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800244c:	46bd      	mov	sp, r7
 800244e:	bdb0      	pop	{r4, r5, r7, pc}
 8002450:	00000000 	.word	0x00000000
 8002454:	40c38780 	.word	0x40c38780
 8002458:	0800be90 	.word	0x0800be90
 800245c:	20000420 	.word	0x20000420
 8002460:	0800beac 	.word	0x0800beac
 8002464:	200003d8 	.word	0x200003d8
 8002468:	0800bebc 	.word	0x0800bebc
 800246c:	0800bed0 	.word	0x0800bed0
 8002470:	0800bee0 	.word	0x0800bee0
 8002474:	0501bd00 	.word	0x0501bd00
 8002478:	0800bef8 	.word	0x0800bef8
 800247c:	0800bf18 	.word	0x0800bf18
 8002480:	0800bf74 	.word	0x0800bf74
 8002484:	40590000 	.word	0x40590000
 8002488:	0800bf30 	.word	0x0800bf30
 800248c:	0800bf5c 	.word	0x0800bf5c

08002490 <Motor_Debug_DirectionTest>:
  * @brief  测试电机方向控制
  * @param  None
  * @retval None
  */
void Motor_Debug_DirectionTest(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b09a      	sub	sp, #104	@ 0x68
 8002494:	af00      	add	r7, sp, #0
    char buffer[100];
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"=== Direction Pin Test ===\r\n", 29, HAL_MAX_DELAY);
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	221d      	movs	r2, #29
 800249c:	4951      	ldr	r1, [pc, #324]	@ (80025e4 <Motor_Debug_DirectionTest+0x154>)
 800249e:	4852      	ldr	r0, [pc, #328]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 80024a0:	f005 fbcc 	bl	8007c3c <HAL_UART_Transmit>
    
    // 测试左电机方向引脚
    HAL_UART_Transmit(&huart6, (uint8_t*)"Left Motor Direction Test:\r\n", 28, HAL_MAX_DELAY);
 80024a4:	f04f 33ff 	mov.w	r3, #4294967295
 80024a8:	221c      	movs	r2, #28
 80024aa:	4950      	ldr	r1, [pc, #320]	@ (80025ec <Motor_Debug_DirectionTest+0x15c>)
 80024ac:	484e      	ldr	r0, [pc, #312]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 80024ae:	f005 fbc5 	bl	8007c3c <HAL_UART_Transmit>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"  Forward: AIN1=1, AIN2=0\r\n", 27, HAL_MAX_DELAY);
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	221b      	movs	r2, #27
 80024b8:	494d      	ldr	r1, [pc, #308]	@ (80025f0 <Motor_Debug_DirectionTest+0x160>)
 80024ba:	484b      	ldr	r0, [pc, #300]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 80024bc:	f005 fbbe 	bl	8007c3c <HAL_UART_Transmit>
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024c6:	484b      	ldr	r0, [pc, #300]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 80024c8:	f002 fb7c 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024d2:	4848      	ldr	r0, [pc, #288]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 80024d4:	f002 fb76 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80024d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024dc:	f002 f826 	bl	800452c <HAL_Delay>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"  Backward: AIN1=0, AIN2=1\r\n", 28, HAL_MAX_DELAY);
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	221c      	movs	r2, #28
 80024e6:	4944      	ldr	r1, [pc, #272]	@ (80025f8 <Motor_Debug_DirectionTest+0x168>)
 80024e8:	483f      	ldr	r0, [pc, #252]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 80024ea:	f005 fba7 	bl	8007c3c <HAL_UART_Transmit>
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024f4:	483f      	ldr	r0, [pc, #252]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 80024f6:	f002 fb65 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
 80024fa:	2201      	movs	r2, #1
 80024fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002500:	483c      	ldr	r0, [pc, #240]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 8002502:	f002 fb5f 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8002506:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800250a:	f002 f80f 	bl	800452c <HAL_Delay>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"  Stop: AIN1=0, AIN2=0\r\n", 24, HAL_MAX_DELAY);
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	2218      	movs	r2, #24
 8002514:	4939      	ldr	r1, [pc, #228]	@ (80025fc <Motor_Debug_DirectionTest+0x16c>)
 8002516:	4834      	ldr	r0, [pc, #208]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 8002518:	f005 fb90 	bl	8007c3c <HAL_UART_Transmit>
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002522:	4834      	ldr	r0, [pc, #208]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 8002524:	f002 fb4e 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800252e:	4831      	ldr	r0, [pc, #196]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 8002530:	f002 fb48 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8002534:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002538:	f001 fff8 	bl	800452c <HAL_Delay>
    
    // 测试右电机方向引脚
    HAL_UART_Transmit(&huart6, (uint8_t*)"Right Motor Direction Test:\r\n", 29, HAL_MAX_DELAY);
 800253c:	f04f 33ff 	mov.w	r3, #4294967295
 8002540:	221d      	movs	r2, #29
 8002542:	492f      	ldr	r1, [pc, #188]	@ (8002600 <Motor_Debug_DirectionTest+0x170>)
 8002544:	4828      	ldr	r0, [pc, #160]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 8002546:	f005 fb79 	bl	8007c3c <HAL_UART_Transmit>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"  Forward: BIN1=0, BIN2=1\r\n", 27, HAL_MAX_DELAY);
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	221b      	movs	r2, #27
 8002550:	492c      	ldr	r1, [pc, #176]	@ (8002604 <Motor_Debug_DirectionTest+0x174>)
 8002552:	4825      	ldr	r0, [pc, #148]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 8002554:	f005 fb72 	bl	8007c3c <HAL_UART_Transmit>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800255e:	4825      	ldr	r0, [pc, #148]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 8002560:	f002 fb30 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 8002564:	2201      	movs	r2, #1
 8002566:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800256a:	4822      	ldr	r0, [pc, #136]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 800256c:	f002 fb2a 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8002570:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002574:	f001 ffda 	bl	800452c <HAL_Delay>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"  Backward: BIN1=1, BIN2=0\r\n", 28, HAL_MAX_DELAY);
 8002578:	f04f 33ff 	mov.w	r3, #4294967295
 800257c:	221c      	movs	r2, #28
 800257e:	4922      	ldr	r1, [pc, #136]	@ (8002608 <Motor_Debug_DirectionTest+0x178>)
 8002580:	4819      	ldr	r0, [pc, #100]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 8002582:	f005 fb5b 	bl	8007c3c <HAL_UART_Transmit>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800258c:	4819      	ldr	r0, [pc, #100]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 800258e:	f002 fb19 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002598:	4816      	ldr	r0, [pc, #88]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 800259a:	f002 fb13 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800259e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025a2:	f001 ffc3 	bl	800452c <HAL_Delay>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"  Stop: BIN1=0, BIN2=0\r\n", 24, HAL_MAX_DELAY);
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	2218      	movs	r2, #24
 80025ac:	4917      	ldr	r1, [pc, #92]	@ (800260c <Motor_Debug_DirectionTest+0x17c>)
 80025ae:	480e      	ldr	r0, [pc, #56]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 80025b0:	f005 fb44 	bl	8007c3c <HAL_UART_Transmit>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025ba:	480e      	ldr	r0, [pc, #56]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 80025bc:	f002 fb02 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025c6:	480b      	ldr	r0, [pc, #44]	@ (80025f4 <Motor_Debug_DirectionTest+0x164>)
 80025c8:	f002 fafc 	bl	8004bc4 <HAL_GPIO_WritePin>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"Direction Test completed!\r\n", 27, HAL_MAX_DELAY);
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	221b      	movs	r2, #27
 80025d2:	490f      	ldr	r1, [pc, #60]	@ (8002610 <Motor_Debug_DirectionTest+0x180>)
 80025d4:	4804      	ldr	r0, [pc, #16]	@ (80025e8 <Motor_Debug_DirectionTest+0x158>)
 80025d6:	f005 fb31 	bl	8007c3c <HAL_UART_Transmit>
}
 80025da:	bf00      	nop
 80025dc:	3768      	adds	r7, #104	@ 0x68
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0800bf9c 	.word	0x0800bf9c
 80025e8:	20000420 	.word	0x20000420
 80025ec:	0800bfbc 	.word	0x0800bfbc
 80025f0:	0800bfdc 	.word	0x0800bfdc
 80025f4:	40020400 	.word	0x40020400
 80025f8:	0800bff8 	.word	0x0800bff8
 80025fc:	0800c018 	.word	0x0800c018
 8002600:	0800c034 	.word	0x0800c034
 8002604:	0800c054 	.word	0x0800c054
 8002608:	0800c070 	.word	0x0800c070
 800260c:	0800c090 	.word	0x0800c090
 8002610:	0800c0ac 	.word	0x0800c0ac

08002614 <Motor_Debug_SpeedFunctionTest>:
  * @brief  测试速度控制函数
  * @param  None
  * @retval None
  */
void Motor_Debug_SpeedFunctionTest(void)
{
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b0ae      	sub	sp, #184	@ 0xb8
 8002618:	af00      	add	r7, sp, #0
    char buffer[150];
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"=== Speed Function Test ===\r\n", 30, HAL_MAX_DELAY);
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
 800261e:	221e      	movs	r2, #30
 8002620:	4939      	ldr	r1, [pc, #228]	@ (8002708 <Motor_Debug_SpeedFunctionTest+0xf4>)
 8002622:	483a      	ldr	r0, [pc, #232]	@ (800270c <Motor_Debug_SpeedFunctionTest+0xf8>)
 8002624:	f005 fb0a 	bl	8007c3c <HAL_UART_Transmit>
    
    // 测试不同速度值
    int16_t test_speeds[] = {0, 1, 5, 10, 20, 30, 50, 70, 90, 100};
 8002628:	4b39      	ldr	r3, [pc, #228]	@ (8002710 <Motor_Debug_SpeedFunctionTest+0xfc>)
 800262a:	463c      	mov	r4, r7
 800262c:	461d      	mov	r5, r3
 800262e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002632:	682b      	ldr	r3, [r5, #0]
 8002634:	6023      	str	r3, [r4, #0]
    uint8_t num_speeds = sizeof(test_speeds) / sizeof(test_speeds[0]);
 8002636:	230a      	movs	r3, #10
 8002638:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    
    for (uint8_t i = 0; i < num_speeds; i++) {
 800263c:	2300      	movs	r3, #0
 800263e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8002642:	e04d      	b.n	80026e0 <Motor_Debug_SpeedFunctionTest+0xcc>
        int16_t speed = test_speeds[i];
 8002644:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	33b8      	adds	r3, #184	@ 0xb8
 800264c:	443b      	add	r3, r7
 800264e:	f833 3cb8 	ldrh.w	r3, [r3, #-184]
 8002652:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        
        sprintf(buffer, "Testing speed: %d%%\r\n", speed);
 8002656:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	@ 0xb4
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	492d      	ldr	r1, [pc, #180]	@ (8002714 <Motor_Debug_SpeedFunctionTest+0x100>)
 8002660:	4618      	mov	r0, r3
 8002662:	f007 f80b 	bl	800967c <siprintf>
        HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd fe08 	bl	8000280 <strlen>
 8002670:	4603      	mov	r3, r0
 8002672:	b29a      	uxth	r2, r3
 8002674:	f107 0114 	add.w	r1, r7, #20
 8002678:	f04f 33ff 	mov.w	r3, #4294967295
 800267c:	4823      	ldr	r0, [pc, #140]	@ (800270c <Motor_Debug_SpeedFunctionTest+0xf8>)
 800267e:	f005 fadd 	bl	8007c3c <HAL_UART_Transmit>
        
        // 使用电机控制函数
        Motor_Forward(speed);
 8002682:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	@ 0xb4
 8002686:	4618      	mov	r0, r3
 8002688:	f000 ff9e 	bl	80035c8 <Motor_Forward>
        
        // 读取实际PWM值
        uint32_t left_pwm = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_3);
 800268c:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <Motor_Debug_SpeedFunctionTest+0x104>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        uint32_t right_pwm = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <Motor_Debug_SpeedFunctionTest+0x104>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        
        sprintf(buffer, "  Left PWM: %5lu, Right PWM: %5lu\r\n", left_pwm, right_pwm);
 80026a0:	f107 0014 	add.w	r0, r7, #20
 80026a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026ac:	491b      	ldr	r1, [pc, #108]	@ (800271c <Motor_Debug_SpeedFunctionTest+0x108>)
 80026ae:	f006 ffe5 	bl	800967c <siprintf>
        HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80026b2:	f107 0314 	add.w	r3, r7, #20
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd fde2 	bl	8000280 <strlen>
 80026bc:	4603      	mov	r3, r0
 80026be:	b29a      	uxth	r2, r3
 80026c0:	f107 0114 	add.w	r1, r7, #20
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
 80026c8:	4810      	ldr	r0, [pc, #64]	@ (800270c <Motor_Debug_SpeedFunctionTest+0xf8>)
 80026ca:	f005 fab7 	bl	8007c3c <HAL_UART_Transmit>
        
        HAL_Delay(1500);
 80026ce:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80026d2:	f001 ff2b 	bl	800452c <HAL_Delay>
    for (uint8_t i = 0; i < num_speeds; i++) {
 80026d6:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80026da:	3301      	adds	r3, #1
 80026dc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 80026e0:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80026e4:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3ab      	bcc.n	8002644 <Motor_Debug_SpeedFunctionTest+0x30>
    }
    
    Motor_Stop();
 80026ec:	f000 ff64 	bl	80035b8 <Motor_Stop>
    HAL_UART_Transmit(&huart6, (uint8_t*)"Speed Function Test completed!\r\n", 32, HAL_MAX_DELAY);
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295
 80026f4:	2220      	movs	r2, #32
 80026f6:	490a      	ldr	r1, [pc, #40]	@ (8002720 <Motor_Debug_SpeedFunctionTest+0x10c>)
 80026f8:	4804      	ldr	r0, [pc, #16]	@ (800270c <Motor_Debug_SpeedFunctionTest+0xf8>)
 80026fa:	f005 fa9f 	bl	8007c3c <HAL_UART_Transmit>
}
 80026fe:	bf00      	nop
 8002700:	37b8      	adds	r7, #184	@ 0xb8
 8002702:	46bd      	mov	sp, r7
 8002704:	bdb0      	pop	{r4, r5, r7, pc}
 8002706:	bf00      	nop
 8002708:	0800c0c8 	.word	0x0800c0c8
 800270c:	20000420 	.word	0x20000420
 8002710:	0800c148 	.word	0x0800c148
 8002714:	0800c0e8 	.word	0x0800c0e8
 8002718:	200003d8 	.word	0x200003d8
 800271c:	0800c100 	.word	0x0800c100
 8002720:	0800c124 	.word	0x0800c124

08002724 <Motor_Debug_DiagnoseProblem>:
  * @brief  诊断电机控制问题
  * @param  None
  * @retval None
  */
void Motor_Debug_DiagnoseProblem(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0b2      	sub	sp, #200	@ 0xc8
 8002728:	af00      	add	r7, sp, #0
    char buffer[200];
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"=== Motor Control Diagnosis ===\r\n", 34, HAL_MAX_DELAY);
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	2222      	movs	r2, #34	@ 0x22
 8002730:	4964      	ldr	r1, [pc, #400]	@ (80028c4 <Motor_Debug_DiagnoseProblem+0x1a0>)
 8002732:	4865      	ldr	r0, [pc, #404]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 8002734:	f005 fa82 	bl	8007c3c <HAL_UART_Transmit>
    
    // 1. 检查PWM配置
    HAL_UART_Transmit(&huart6, (uint8_t*)"1. Checking PWM Configuration...\r\n", 35, HAL_MAX_DELAY);
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
 800273c:	2223      	movs	r2, #35	@ 0x23
 800273e:	4963      	ldr	r1, [pc, #396]	@ (80028cc <Motor_Debug_DiagnoseProblem+0x1a8>)
 8002740:	4861      	ldr	r0, [pc, #388]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 8002742:	f005 fa7b 	bl	8007c3c <HAL_UART_Transmit>
    
    if (htim4.Init.Prescaler == 0 && htim4.Init.Period == 9999) {
 8002746:	4b62      	ldr	r3, [pc, #392]	@ (80028d0 <Motor_Debug_DiagnoseProblem+0x1ac>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <Motor_Debug_DiagnoseProblem+0x46>
 800274e:	4b60      	ldr	r3, [pc, #384]	@ (80028d0 <Motor_Debug_DiagnoseProblem+0x1ac>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002756:	4293      	cmp	r3, r2
 8002758:	d107      	bne.n	800276a <Motor_Debug_DiagnoseProblem+0x46>
        HAL_UART_Transmit(&huart6, (uint8_t*)"   PWM Config: OK\r\n", 19, HAL_MAX_DELAY);
 800275a:	f04f 33ff 	mov.w	r3, #4294967295
 800275e:	2213      	movs	r2, #19
 8002760:	495c      	ldr	r1, [pc, #368]	@ (80028d4 <Motor_Debug_DiagnoseProblem+0x1b0>)
 8002762:	4859      	ldr	r0, [pc, #356]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 8002764:	f005 fa6a 	bl	8007c3c <HAL_UART_Transmit>
 8002768:	e01a      	b.n	80027a0 <Motor_Debug_DiagnoseProblem+0x7c>
    } else {
        HAL_UART_Transmit(&huart6, (uint8_t*)"   PWM Config: ISSUE DETECTED\r\n", 31, HAL_MAX_DELAY);
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	221f      	movs	r2, #31
 8002770:	4959      	ldr	r1, [pc, #356]	@ (80028d8 <Motor_Debug_DiagnoseProblem+0x1b4>)
 8002772:	4855      	ldr	r0, [pc, #340]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 8002774:	f005 fa62 	bl	8007c3c <HAL_UART_Transmit>
        sprintf(buffer, "   Expected: Prescaler=0, Period=9999\r\n   Actual: Prescaler=%lu, Period=%lu\r\n", 
 8002778:	4b55      	ldr	r3, [pc, #340]	@ (80028d0 <Motor_Debug_DiagnoseProblem+0x1ac>)
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4b54      	ldr	r3, [pc, #336]	@ (80028d0 <Motor_Debug_DiagnoseProblem+0x1ac>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4638      	mov	r0, r7
 8002782:	4956      	ldr	r1, [pc, #344]	@ (80028dc <Motor_Debug_DiagnoseProblem+0x1b8>)
 8002784:	f006 ff7a 	bl	800967c <siprintf>
                htim4.Init.Prescaler, htim4.Init.Period);
        HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002788:	463b      	mov	r3, r7
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fd78 	bl	8000280 <strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	b29a      	uxth	r2, r3
 8002794:	4639      	mov	r1, r7
 8002796:	f04f 33ff 	mov.w	r3, #4294967295
 800279a:	484b      	ldr	r0, [pc, #300]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 800279c:	f005 fa4e 	bl	8007c3c <HAL_UART_Transmit>
    }
    
    // 2. 检查PWM启动状态
    HAL_UART_Transmit(&huart6, (uint8_t*)"2. Checking PWM Start Status...\r\n", 34, HAL_MAX_DELAY);
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295
 80027a4:	2222      	movs	r2, #34	@ 0x22
 80027a6:	494e      	ldr	r1, [pc, #312]	@ (80028e0 <Motor_Debug_DiagnoseProblem+0x1bc>)
 80027a8:	4847      	ldr	r0, [pc, #284]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 80027aa:	f005 fa47 	bl	8007c3c <HAL_UART_Transmit>
    
    // 这里可以通过检查TIM4的寄存器来确认PWM是否启动
    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4) || __HAL_TIM_GET_COUNTER(&htim4) > 0) {
 80027ae:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <Motor_Debug_DiagnoseProblem+0x1ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d004      	beq.n	80027c6 <Motor_Debug_DiagnoseProblem+0xa2>
 80027bc:	4b44      	ldr	r3, [pc, #272]	@ (80028d0 <Motor_Debug_DiagnoseProblem+0x1ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <Motor_Debug_DiagnoseProblem+0xb2>
        HAL_UART_Transmit(&huart6, (uint8_t*)"   PWM Timer: RUNNING\r\n", 23, HAL_MAX_DELAY);
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	2217      	movs	r2, #23
 80027cc:	4945      	ldr	r1, [pc, #276]	@ (80028e4 <Motor_Debug_DiagnoseProblem+0x1c0>)
 80027ce:	483e      	ldr	r0, [pc, #248]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 80027d0:	f005 fa34 	bl	8007c3c <HAL_UART_Transmit>
 80027d4:	e006      	b.n	80027e4 <Motor_Debug_DiagnoseProblem+0xc0>
    } else {
        HAL_UART_Transmit(&huart6, (uint8_t*)"   PWM Timer: NOT RUNNING - ISSUE!\r\n", 37, HAL_MAX_DELAY);
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295
 80027da:	2225      	movs	r2, #37	@ 0x25
 80027dc:	4942      	ldr	r1, [pc, #264]	@ (80028e8 <Motor_Debug_DiagnoseProblem+0x1c4>)
 80027de:	483a      	ldr	r0, [pc, #232]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 80027e0:	f005 fa2c 	bl	8007c3c <HAL_UART_Transmit>
    }
    
    // 3. 测试最小PWM值
    HAL_UART_Transmit(&huart6, (uint8_t*)"3. Testing minimum PWM threshold...\r\n", 38, HAL_MAX_DELAY);
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295
 80027e8:	2226      	movs	r2, #38	@ 0x26
 80027ea:	4940      	ldr	r1, [pc, #256]	@ (80028ec <Motor_Debug_DiagnoseProblem+0x1c8>)
 80027ec:	4836      	ldr	r0, [pc, #216]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 80027ee:	f005 fa25 	bl	8007c3c <HAL_UART_Transmit>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"   Setting very low PWM (50)...\r\n", 33, HAL_MAX_DELAY);
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	2221      	movs	r2, #33	@ 0x21
 80027f8:	493d      	ldr	r1, [pc, #244]	@ (80028f0 <Motor_Debug_DiagnoseProblem+0x1cc>)
 80027fa:	4833      	ldr	r0, [pc, #204]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 80027fc:	f005 fa1e 	bl	8007c3c <HAL_UART_Transmit>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 50);
 8002800:	4b33      	ldr	r3, [pc, #204]	@ (80028d0 <Motor_Debug_DiagnoseProblem+0x1ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2232      	movs	r2, #50	@ 0x32
 8002806:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 50);
 8002808:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <Motor_Debug_DiagnoseProblem+0x1ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2232      	movs	r2, #50	@ 0x32
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    // 设置正转方向
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);
 8002810:	2201      	movs	r2, #1
 8002812:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002816:	4837      	ldr	r0, [pc, #220]	@ (80028f4 <Motor_Debug_DiagnoseProblem+0x1d0>)
 8002818:	f002 f9d4 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 800281c:	2200      	movs	r2, #0
 800281e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002822:	4834      	ldr	r0, [pc, #208]	@ (80028f4 <Motor_Debug_DiagnoseProblem+0x1d0>)
 8002824:	f002 f9ce 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800282e:	4831      	ldr	r0, [pc, #196]	@ (80028f4 <Motor_Debug_DiagnoseProblem+0x1d0>)
 8002830:	f002 f9c8 	bl	8004bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800283a:	482e      	ldr	r0, [pc, #184]	@ (80028f4 <Motor_Debug_DiagnoseProblem+0x1d0>)
 800283c:	f002 f9c2 	bl	8004bc4 <HAL_GPIO_WritePin>
    
    HAL_Delay(3000);  // 让用户观察电机是否转动
 8002840:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002844:	f001 fe72 	bl	800452c <HAL_Delay>
    
    Motor_Stop();
 8002848:	f000 feb6 	bl	80035b8 <Motor_Stop>
    HAL_UART_Transmit(&huart6, (uint8_t*)"   Low PWM test completed\r\n", 27, HAL_MAX_DELAY);
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
 8002850:	221b      	movs	r2, #27
 8002852:	4929      	ldr	r1, [pc, #164]	@ (80028f8 <Motor_Debug_DiagnoseProblem+0x1d4>)
 8002854:	481c      	ldr	r0, [pc, #112]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 8002856:	f005 f9f1 	bl	8007c3c <HAL_UART_Transmit>
    
    // 4. 给出诊断建议
    HAL_UART_Transmit(&huart6, (uint8_t*)"4. Diagnosis Summary:\r\n", 23, HAL_MAX_DELAY);
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	2217      	movs	r2, #23
 8002860:	4926      	ldr	r1, [pc, #152]	@ (80028fc <Motor_Debug_DiagnoseProblem+0x1d8>)
 8002862:	4819      	ldr	r0, [pc, #100]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 8002864:	f005 f9ea 	bl	8007c3c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"   Common causes of constant speed:\r\n", 37, HAL_MAX_DELAY);
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
 800286c:	2225      	movs	r2, #37	@ 0x25
 800286e:	4924      	ldr	r1, [pc, #144]	@ (8002900 <Motor_Debug_DiagnoseProblem+0x1dc>)
 8002870:	4815      	ldr	r0, [pc, #84]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 8002872:	f005 f9e3 	bl	8007c3c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"   a) Motor driver board dead zone\r\n", 36, HAL_MAX_DELAY);
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	2224      	movs	r2, #36	@ 0x24
 800287c:	4921      	ldr	r1, [pc, #132]	@ (8002904 <Motor_Debug_DiagnoseProblem+0x1e0>)
 800287e:	4812      	ldr	r0, [pc, #72]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 8002880:	f005 f9dc 	bl	8007c3c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"   b) Power supply voltage issues\r\n", 35, HAL_MAX_DELAY);
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	2223      	movs	r2, #35	@ 0x23
 800288a:	491f      	ldr	r1, [pc, #124]	@ (8002908 <Motor_Debug_DiagnoseProblem+0x1e4>)
 800288c:	480e      	ldr	r0, [pc, #56]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 800288e:	f005 f9d5 	bl	8007c3c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"   c) Motor mechanical issues\r\n", 31, HAL_MAX_DELAY);
 8002892:	f04f 33ff 	mov.w	r3, #4294967295
 8002896:	221f      	movs	r2, #31
 8002898:	491c      	ldr	r1, [pc, #112]	@ (800290c <Motor_Debug_DiagnoseProblem+0x1e8>)
 800289a:	480b      	ldr	r0, [pc, #44]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 800289c:	f005 f9ce 	bl	8007c3c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"   d) PWM not reaching motor driver\r\n", 37, HAL_MAX_DELAY);
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	2225      	movs	r2, #37	@ 0x25
 80028a6:	491a      	ldr	r1, [pc, #104]	@ (8002910 <Motor_Debug_DiagnoseProblem+0x1ec>)
 80028a8:	4807      	ldr	r0, [pc, #28]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 80028aa:	f005 f9c7 	bl	8007c3c <HAL_UART_Transmit>
    
    HAL_UART_Transmit(&huart6, (uint8_t*)"Diagnosis completed!\r\n", 22, HAL_MAX_DELAY);
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	2216      	movs	r2, #22
 80028b4:	4917      	ldr	r1, [pc, #92]	@ (8002914 <Motor_Debug_DiagnoseProblem+0x1f0>)
 80028b6:	4804      	ldr	r0, [pc, #16]	@ (80028c8 <Motor_Debug_DiagnoseProblem+0x1a4>)
 80028b8:	f005 f9c0 	bl	8007c3c <HAL_UART_Transmit>
}
 80028bc:	bf00      	nop
 80028be:	37c8      	adds	r7, #200	@ 0xc8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	0800c15c 	.word	0x0800c15c
 80028c8:	20000420 	.word	0x20000420
 80028cc:	0800c180 	.word	0x0800c180
 80028d0:	200003d8 	.word	0x200003d8
 80028d4:	0800c1a4 	.word	0x0800c1a4
 80028d8:	0800c1b8 	.word	0x0800c1b8
 80028dc:	0800c1d8 	.word	0x0800c1d8
 80028e0:	0800c228 	.word	0x0800c228
 80028e4:	0800c24c 	.word	0x0800c24c
 80028e8:	0800c264 	.word	0x0800c264
 80028ec:	0800c28c 	.word	0x0800c28c
 80028f0:	0800c2b4 	.word	0x0800c2b4
 80028f4:	40020400 	.word	0x40020400
 80028f8:	0800c2d8 	.word	0x0800c2d8
 80028fc:	0800c2f4 	.word	0x0800c2f4
 8002900:	0800c30c 	.word	0x0800c30c
 8002904:	0800c334 	.word	0x0800c334
 8002908:	0800c35c 	.word	0x0800c35c
 800290c:	0800c380 	.word	0x0800c380
 8002910:	0800c3a0 	.word	0x0800c3a0
 8002914:	0800c3c8 	.word	0x0800c3c8

08002918 <Motor_Debug_ShowPWMValue>:
  * @brief  实时显示PWM值
  * @param  speed 输入速度值
  * @retval None
  */
void Motor_Debug_ShowPWMValue(int16_t speed)
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b0a1      	sub	sp, #132	@ 0x84
 800291c:	af02      	add	r7, sp, #8
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
    char buffer[100];
    
    // 计算PWM值
    int16_t abs_speed = (speed < 0) ? -speed : speed;
 8002922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002926:	2b00      	cmp	r3, #0
 8002928:	bfb8      	it	lt
 800292a:	425b      	neglt	r3, r3
 800292c:	b29b      	uxth	r3, r3
 800292e:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    abs_speed = (abs_speed > 100) ? 100 : abs_speed;
 8002932:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 8002936:	2b64      	cmp	r3, #100	@ 0x64
 8002938:	bfa8      	it	ge
 800293a:	2364      	movge	r3, #100	@ 0x64
 800293c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    
    uint32_t pwm_value = (uint32_t)((abs_speed * 9999) / 100);
 8002940:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 8002944:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002948:	fb02 f303 	mul.w	r3, r2, r3
 800294c:	4a24      	ldr	r2, [pc, #144]	@ (80029e0 <Motor_Debug_ShowPWMValue+0xc8>)
 800294e:	fb82 1203 	smull	r1, r2, r2, r3
 8002952:	1152      	asrs	r2, r2, #5
 8002954:	17db      	asrs	r3, r3, #31
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	677b      	str	r3, [r7, #116]	@ 0x74
    if (pwm_value > 0 && pwm_value < 10) {
 800295a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800295c:	2b00      	cmp	r3, #0
 800295e:	d004      	beq.n	800296a <Motor_Debug_ShowPWMValue+0x52>
 8002960:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002962:	2b09      	cmp	r3, #9
 8002964:	d801      	bhi.n	800296a <Motor_Debug_ShowPWMValue+0x52>
        pwm_value = 10;  // 最小PWM值
 8002966:	230a      	movs	r3, #10
 8002968:	677b      	str	r3, [r7, #116]	@ 0x74
    }
    
    sprintf(buffer, "Speed: %3d%% -> PWM: %4lu (%.1f%%)\r\n", 
 800296a:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
            speed, pwm_value, (float)pwm_value/9999.0*100.0);
 800296e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002978:	ee17 0a90 	vmov	r0, s15
 800297c:	f7fd fdec 	bl	8000558 <__aeabi_f2d>
 8002980:	a315      	add	r3, pc, #84	@ (adr r3, 80029d8 <Motor_Debug_ShowPWMValue+0xc0>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd ff69 	bl	800085c <__aeabi_ddiv>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
    sprintf(buffer, "Speed: %3d%% -> PWM: %4lu (%.1f%%)\r\n", 
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <Motor_Debug_ShowPWMValue+0xcc>)
 8002998:	f7fd fe36 	bl	8000608 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	f107 000c 	add.w	r0, r7, #12
 80029a4:	e9cd 2300 	strd	r2, r3, [sp]
 80029a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029aa:	4622      	mov	r2, r4
 80029ac:	490e      	ldr	r1, [pc, #56]	@ (80029e8 <Motor_Debug_ShowPWMValue+0xd0>)
 80029ae:	f006 fe65 	bl	800967c <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fc62 	bl	8000280 <strlen>
 80029bc:	4603      	mov	r3, r0
 80029be:	b29a      	uxth	r2, r3
 80029c0:	f107 010c 	add.w	r1, r7, #12
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	4808      	ldr	r0, [pc, #32]	@ (80029ec <Motor_Debug_ShowPWMValue+0xd4>)
 80029ca:	f005 f937 	bl	8007c3c <HAL_UART_Transmit>
 80029ce:	bf00      	nop
 80029d0:	377c      	adds	r7, #124	@ 0x7c
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
 80029d6:	bf00      	nop
 80029d8:	00000000 	.word	0x00000000
 80029dc:	40c38780 	.word	0x40c38780
 80029e0:	51eb851f 	.word	0x51eb851f
 80029e4:	40590000 	.word	0x40590000
 80029e8:	0800c3e0 	.word	0x0800c3e0
 80029ec:	20000420 	.word	0x20000420

080029f0 <Bluetooth_SendMessage>:
  * @brief  通过蓝牙发送消息
  * @param  message: 要发送的消息
  * @retval None
  */
static void Bluetooth_SendMessage(const char* message)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7fd fc41 	bl	8000280 <strlen>
 80029fe:	4603      	mov	r3, r0
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4803      	ldr	r0, [pc, #12]	@ (8002a18 <Bluetooth_SendMessage+0x28>)
 8002a0a:	f005 f917 	bl	8007c3c <HAL_UART_Transmit>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000420 	.word	0x20000420

08002a1c <Motor_BluetoothDirectionTest>:
  * @brief  蓝牙电机方向测试
  * @param  None
  * @retval None
  */
void Motor_BluetoothDirectionTest(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
    Bluetooth_SendMessage("Starting direction test...\r\n");
 8002a20:	4823      	ldr	r0, [pc, #140]	@ (8002ab0 <Motor_BluetoothDirectionTest+0x94>)
 8002a22:	f7ff ffe5 	bl	80029f0 <Bluetooth_SendMessage>
    
    // 1. Forward test
    Bluetooth_SendMessage("Forward test (3 sec)\r\n");
 8002a26:	4823      	ldr	r0, [pc, #140]	@ (8002ab4 <Motor_BluetoothDirectionTest+0x98>)
 8002a28:	f7ff ffe2 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_Forward(30);
 8002a2c:	201e      	movs	r0, #30
 8002a2e:	f000 fdcb 	bl	80035c8 <Motor_Forward>
    HAL_Delay(3000);
 8002a32:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a36:	f001 fd79 	bl	800452c <HAL_Delay>
    Motor_Stop();
 8002a3a:	f000 fdbd 	bl	80035b8 <Motor_Stop>
    HAL_Delay(1000);
 8002a3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a42:	f001 fd73 	bl	800452c <HAL_Delay>
    
    // 2. Backward test
    Bluetooth_SendMessage("Backward test (3 sec)\r\n");
 8002a46:	481c      	ldr	r0, [pc, #112]	@ (8002ab8 <Motor_BluetoothDirectionTest+0x9c>)
 8002a48:	f7ff ffd2 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_Backward(30);
 8002a4c:	201e      	movs	r0, #30
 8002a4e:	f000 fdd9 	bl	8003604 <Motor_Backward>
    HAL_Delay(3000);
 8002a52:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002a56:	f001 fd69 	bl	800452c <HAL_Delay>
    Motor_Stop();
 8002a5a:	f000 fdad 	bl	80035b8 <Motor_Stop>
    HAL_Delay(1000);
 8002a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a62:	f001 fd63 	bl	800452c <HAL_Delay>
    
    // 3. Left turn test
    Bluetooth_SendMessage("Left turn test (2 sec)\r\n");
 8002a66:	4815      	ldr	r0, [pc, #84]	@ (8002abc <Motor_BluetoothDirectionTest+0xa0>)
 8002a68:	f7ff ffc2 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_TurnLeft(30);
 8002a6c:	201e      	movs	r0, #30
 8002a6e:	f000 fdeb 	bl	8003648 <Motor_TurnLeft>
    HAL_Delay(2000);
 8002a72:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a76:	f001 fd59 	bl	800452c <HAL_Delay>
    Motor_Stop();
 8002a7a:	f000 fd9d 	bl	80035b8 <Motor_Stop>
    HAL_Delay(1000);
 8002a7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a82:	f001 fd53 	bl	800452c <HAL_Delay>
    
    // 4. Right turn test
    Bluetooth_SendMessage("Right turn test (2 sec)\r\n");
 8002a86:	480e      	ldr	r0, [pc, #56]	@ (8002ac0 <Motor_BluetoothDirectionTest+0xa4>)
 8002a88:	f7ff ffb2 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_TurnRight(30);
 8002a8c:	201e      	movs	r0, #30
 8002a8e:	f000 fdfb 	bl	8003688 <Motor_TurnRight>
    HAL_Delay(2000);
 8002a92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002a96:	f001 fd49 	bl	800452c <HAL_Delay>
    Motor_Stop();
 8002a9a:	f000 fd8d 	bl	80035b8 <Motor_Stop>
    HAL_Delay(1000);
 8002a9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002aa2:	f001 fd43 	bl	800452c <HAL_Delay>
    
    Bluetooth_SendMessage("Direction test completed!\r\n");
 8002aa6:	4807      	ldr	r0, [pc, #28]	@ (8002ac4 <Motor_BluetoothDirectionTest+0xa8>)
 8002aa8:	f7ff ffa2 	bl	80029f0 <Bluetooth_SendMessage>
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	0800c408 	.word	0x0800c408
 8002ab4:	0800c428 	.word	0x0800c428
 8002ab8:	0800c440 	.word	0x0800c440
 8002abc:	0800c458 	.word	0x0800c458
 8002ac0:	0800c474 	.word	0x0800c474
 8002ac4:	0800c490 	.word	0x0800c490

08002ac8 <Motor_BluetoothIndividualTest>:
  * @brief  蓝牙单电机测试
  * @param  None
  * @retval None
  */
void Motor_BluetoothIndividualTest(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
    Bluetooth_SendMessage("Starting individual motor test...\r\n");
 8002acc:	482e      	ldr	r0, [pc, #184]	@ (8002b88 <Motor_BluetoothIndividualTest+0xc0>)
 8002ace:	f7ff ff8f 	bl	80029f0 <Bluetooth_SendMessage>
    
    // Left motor forward
    Bluetooth_SendMessage("Left motor forward\r\n");
 8002ad2:	482e      	ldr	r0, [pc, #184]	@ (8002b8c <Motor_BluetoothIndividualTest+0xc4>)
 8002ad4:	f7ff ff8c 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_SetSpeed(MOTOR_LEFT, 40);
 8002ad8:	2128      	movs	r1, #40	@ 0x28
 8002ada:	2000      	movs	r0, #0
 8002adc:	f000 fd00 	bl	80034e0 <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_RIGHT, 0);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 fcfc 	bl	80034e0 <Motor_SetSpeed>
    HAL_Delay(2000);
 8002ae8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002aec:	f001 fd1e 	bl	800452c <HAL_Delay>
    Motor_Stop();
 8002af0:	f000 fd62 	bl	80035b8 <Motor_Stop>
    HAL_Delay(1000);
 8002af4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002af8:	f001 fd18 	bl	800452c <HAL_Delay>
    
    // Left motor backward
    Bluetooth_SendMessage("Left motor backward\r\n");
 8002afc:	4824      	ldr	r0, [pc, #144]	@ (8002b90 <Motor_BluetoothIndividualTest+0xc8>)
 8002afe:	f7ff ff77 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_SetSpeed(MOTOR_LEFT, -40);
 8002b02:	f06f 0127 	mvn.w	r1, #39	@ 0x27
 8002b06:	2000      	movs	r0, #0
 8002b08:	f000 fcea 	bl	80034e0 <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_RIGHT, 0);
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f000 fce6 	bl	80034e0 <Motor_SetSpeed>
    HAL_Delay(2000);
 8002b14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b18:	f001 fd08 	bl	800452c <HAL_Delay>
    Motor_Stop();
 8002b1c:	f000 fd4c 	bl	80035b8 <Motor_Stop>
    HAL_Delay(1000);
 8002b20:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b24:	f001 fd02 	bl	800452c <HAL_Delay>
    
    // Right motor forward
    Bluetooth_SendMessage("Right motor forward\r\n");
 8002b28:	481a      	ldr	r0, [pc, #104]	@ (8002b94 <Motor_BluetoothIndividualTest+0xcc>)
 8002b2a:	f7ff ff61 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_SetSpeed(MOTOR_LEFT, 0);
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2000      	movs	r0, #0
 8002b32:	f000 fcd5 	bl	80034e0 <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_RIGHT, 40);
 8002b36:	2128      	movs	r1, #40	@ 0x28
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f000 fcd1 	bl	80034e0 <Motor_SetSpeed>
    HAL_Delay(2000);
 8002b3e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b42:	f001 fcf3 	bl	800452c <HAL_Delay>
    Motor_Stop();
 8002b46:	f000 fd37 	bl	80035b8 <Motor_Stop>
    HAL_Delay(1000);
 8002b4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b4e:	f001 fced 	bl	800452c <HAL_Delay>
    
    // Right motor backward
    Bluetooth_SendMessage("Right motor backward\r\n");
 8002b52:	4811      	ldr	r0, [pc, #68]	@ (8002b98 <Motor_BluetoothIndividualTest+0xd0>)
 8002b54:	f7ff ff4c 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_SetSpeed(MOTOR_LEFT, 0);
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f000 fcc0 	bl	80034e0 <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_RIGHT, -40);
 8002b60:	f06f 0127 	mvn.w	r1, #39	@ 0x27
 8002b64:	2001      	movs	r0, #1
 8002b66:	f000 fcbb 	bl	80034e0 <Motor_SetSpeed>
    HAL_Delay(2000);
 8002b6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b6e:	f001 fcdd 	bl	800452c <HAL_Delay>
    Motor_Stop();
 8002b72:	f000 fd21 	bl	80035b8 <Motor_Stop>
    HAL_Delay(1000);
 8002b76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b7a:	f001 fcd7 	bl	800452c <HAL_Delay>
    
    Bluetooth_SendMessage("Individual motor test completed!\r\n");
 8002b7e:	4807      	ldr	r0, [pc, #28]	@ (8002b9c <Motor_BluetoothIndividualTest+0xd4>)
 8002b80:	f7ff ff36 	bl	80029f0 <Bluetooth_SendMessage>
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	0800c4ac 	.word	0x0800c4ac
 8002b8c:	0800c4d0 	.word	0x0800c4d0
 8002b90:	0800c4e8 	.word	0x0800c4e8
 8002b94:	0800c500 	.word	0x0800c500
 8002b98:	0800c518 	.word	0x0800c518
 8002b9c:	0800c530 	.word	0x0800c530

08002ba0 <Encoder_BluetoothTest>:
  * @brief  蓝牙编码器测试
  * @param  None
  * @retval None
  */
void Encoder_BluetoothTest(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b09e      	sub	sp, #120	@ 0x78
 8002ba4:	af00      	add	r7, sp, #0
    char buffer[100];
    
    Bluetooth_SendMessage("Starting encoder test...\r\n");
 8002ba6:	482e      	ldr	r0, [pc, #184]	@ (8002c60 <Encoder_BluetoothTest+0xc0>)
 8002ba8:	f7ff ff22 	bl	80029f0 <Bluetooth_SendMessage>
    
    // Reset encoders
    Encoder_Reset();
 8002bac:	f000 faf4 	bl	8003198 <Encoder_Reset>
    Bluetooth_SendMessage("Encoders reset\r\n");
 8002bb0:	482c      	ldr	r0, [pc, #176]	@ (8002c64 <Encoder_BluetoothTest+0xc4>)
 8002bb2:	f7ff ff1d 	bl	80029f0 <Bluetooth_SendMessage>
    
    // Forward test
    Bluetooth_SendMessage("Moving forward 5 sec, monitoring encoders...\r\n");
 8002bb6:	482c      	ldr	r0, [pc, #176]	@ (8002c68 <Encoder_BluetoothTest+0xc8>)
 8002bb8:	f7ff ff1a 	bl	80029f0 <Bluetooth_SendMessage>
    Motor_Forward(40);
 8002bbc:	2028      	movs	r0, #40	@ 0x28
 8002bbe:	f000 fd03 	bl	80035c8 <Motor_Forward>
    
    for (int i = 0; i < 10; i++) {  // Output every 0.5 sec
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bc6:	e018      	b.n	8002bfa <Encoder_BluetoothTest+0x5a>
        Encoder_Update();
 8002bc8:	f000 fb16 	bl	80031f8 <Encoder_Update>
        int32_t left_count = Encoder_GetLeftCount();
 8002bcc:	f000 fba8 	bl	8003320 <Encoder_GetLeftCount>
 8002bd0:	66b8      	str	r0, [r7, #104]	@ 0x68
        int32_t right_count = Encoder_GetRightCount();
 8002bd2:	f000 fbb1 	bl	8003338 <Encoder_GetRightCount>
 8002bd6:	6678      	str	r0, [r7, #100]	@ 0x64
        
        sprintf(buffer, "Encoders: L=%ld, R=%ld\r\n", left_count, right_count);
 8002bd8:	4638      	mov	r0, r7
 8002bda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bdc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002bde:	4923      	ldr	r1, [pc, #140]	@ (8002c6c <Encoder_BluetoothTest+0xcc>)
 8002be0:	f006 fd4c 	bl	800967c <siprintf>
        Bluetooth_SendMessage(buffer);
 8002be4:	463b      	mov	r3, r7
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff02 	bl	80029f0 <Bluetooth_SendMessage>
        HAL_Delay(500);
 8002bec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bf0:	f001 fc9c 	bl	800452c <HAL_Delay>
    for (int i = 0; i < 10; i++) {  // Output every 0.5 sec
 8002bf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	dde3      	ble.n	8002bc8 <Encoder_BluetoothTest+0x28>
    }
    
    Motor_Stop();
 8002c00:	f000 fcda 	bl	80035b8 <Motor_Stop>
    
    // Final results
    Encoder_Update();
 8002c04:	f000 faf8 	bl	80031f8 <Encoder_Update>
    int32_t final_left = Encoder_GetLeftCount();
 8002c08:	f000 fb8a 	bl	8003320 <Encoder_GetLeftCount>
 8002c0c:	6738      	str	r0, [r7, #112]	@ 0x70
    int32_t final_right = Encoder_GetRightCount();
 8002c0e:	f000 fb93 	bl	8003338 <Encoder_GetRightCount>
 8002c12:	66f8      	str	r0, [r7, #108]	@ 0x6c
    
    sprintf(buffer, "Final counts: L=%ld, R=%ld\r\n", final_left, final_right);
 8002c14:	4638      	mov	r0, r7
 8002c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c18:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002c1a:	4915      	ldr	r1, [pc, #84]	@ (8002c70 <Encoder_BluetoothTest+0xd0>)
 8002c1c:	f006 fd2e 	bl	800967c <siprintf>
    Bluetooth_SendMessage(buffer);
 8002c20:	463b      	mov	r3, r7
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fee4 	bl	80029f0 <Bluetooth_SendMessage>
    
    if (final_left > 0 && final_right > 0) {
 8002c28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	dd06      	ble.n	8002c3c <Encoder_BluetoothTest+0x9c>
 8002c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	dd03      	ble.n	8002c3c <Encoder_BluetoothTest+0x9c>
        Bluetooth_SendMessage("Encoder direction correct\r\n");
 8002c34:	480f      	ldr	r0, [pc, #60]	@ (8002c74 <Encoder_BluetoothTest+0xd4>)
 8002c36:	f7ff fedb 	bl	80029f0 <Bluetooth_SendMessage>
 8002c3a:	e00d      	b.n	8002c58 <Encoder_BluetoothTest+0xb8>
    } else if (final_left < 0 && final_right < 0) {
 8002c3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	da06      	bge.n	8002c50 <Encoder_BluetoothTest+0xb0>
 8002c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	da03      	bge.n	8002c50 <Encoder_BluetoothTest+0xb0>
        Bluetooth_SendMessage("Encoder direction reversed\r\n");
 8002c48:	480b      	ldr	r0, [pc, #44]	@ (8002c78 <Encoder_BluetoothTest+0xd8>)
 8002c4a:	f7ff fed1 	bl	80029f0 <Bluetooth_SendMessage>
 8002c4e:	e003      	b.n	8002c58 <Encoder_BluetoothTest+0xb8>
    } else {
        Bluetooth_SendMessage("Encoder count abnormal\r\n");
 8002c50:	480a      	ldr	r0, [pc, #40]	@ (8002c7c <Encoder_BluetoothTest+0xdc>)
 8002c52:	f7ff fecd 	bl	80029f0 <Bluetooth_SendMessage>
    }
}
 8002c56:	bf00      	nop
 8002c58:	bf00      	nop
 8002c5a:	3778      	adds	r7, #120	@ 0x78
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	0800c554 	.word	0x0800c554
 8002c64:	0800c570 	.word	0x0800c570
 8002c68:	0800c584 	.word	0x0800c584
 8002c6c:	0800c5b4 	.word	0x0800c5b4
 8002c70:	0800c5d0 	.word	0x0800c5d0
 8002c74:	0800c5f0 	.word	0x0800c5f0
 8002c78:	0800c60c 	.word	0x0800c60c
 8002c7c:	0800c62c 	.word	0x0800c62c

08002c80 <Encoder_BluetoothMonitor>:
  * @brief  蓝牙实时编码器监控
  * @param  None
  * @retval None
  */
void Encoder_BluetoothMonitor(void)
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	b0b5      	sub	sp, #212	@ 0xd4
 8002c84:	af06      	add	r7, sp, #24
    char buffer[150];
    
    Encoder_Update();
 8002c86:	f000 fab7 	bl	80031f8 <Encoder_Update>
    EncoderData_t data = Encoder_GetData();
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fb30 	bl	80032f4 <Encoder_GetData>
    
    sprintf(buffer, "L:%ld(%.1fRPM) R:%ld(%.1fRPM)\r\n", 
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	607b      	str	r3, [r7, #4]
            data.left_encoder, data.left_speed_rpm,
 8002c98:	69bb      	ldr	r3, [r7, #24]
    sprintf(buffer, "L:%ld(%.1fRPM) R:%ld(%.1fRPM)\r\n", 
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc5c 	bl	8000558 <__aeabi_f2d>
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	460d      	mov	r5, r1
 8002ca4:	68fe      	ldr	r6, [r7, #12]
            data.right_encoder, data.right_speed_rpm);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
    sprintf(buffer, "L:%ld(%.1fRPM) R:%ld(%.1fRPM)\r\n", 
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fc55 	bl	8000558 <__aeabi_f2d>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	f107 0020 	add.w	r0, r7, #32
 8002cb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002cba:	9602      	str	r6, [sp, #8]
 8002cbc:	e9cd 4500 	strd	r4, r5, [sp]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4906      	ldr	r1, [pc, #24]	@ (8002cdc <Encoder_BluetoothMonitor+0x5c>)
 8002cc4:	f006 fcda 	bl	800967c <siprintf>
    Bluetooth_SendMessage(buffer);
 8002cc8:	f107 0320 	add.w	r3, r7, #32
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fe8f 	bl	80029f0 <Bluetooth_SendMessage>
}
 8002cd2:	bf00      	nop
 8002cd4:	37bc      	adds	r7, #188	@ 0xbc
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	0800c648 	.word	0x0800c648

08002ce0 <Motor_BluetoothCommand>:
  * @brief  蓝牙电机测试命令处理
  * @param  cmd: 接收到的蓝牙命令
  * @retval None
  */
void Motor_BluetoothCommand(uint8_t cmd)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b09c      	sub	sp, #112	@ 0x70
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
    char buffer[100];
    
    switch (cmd) {
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	3b20      	subs	r3, #32
 8002cee:	2b5a      	cmp	r3, #90	@ 0x5a
 8002cf0:	f200 81da 	bhi.w	80030a8 <Motor_BluetoothCommand+0x3c8>
 8002cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cfc <Motor_BluetoothCommand+0x1c>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002ed9 	.word	0x08002ed9
 8002d00:	080030a9 	.word	0x080030a9
 8002d04:	080030a9 	.word	0x080030a9
 8002d08:	080030a9 	.word	0x080030a9
 8002d0c:	080030a9 	.word	0x080030a9
 8002d10:	080030a9 	.word	0x080030a9
 8002d14:	080030a9 	.word	0x080030a9
 8002d18:	080030a9 	.word	0x080030a9
 8002d1c:	080030a9 	.word	0x080030a9
 8002d20:	080030a9 	.word	0x080030a9
 8002d24:	080030a9 	.word	0x080030a9
 8002d28:	080030a9 	.word	0x080030a9
 8002d2c:	080030a9 	.word	0x080030a9
 8002d30:	080030a9 	.word	0x080030a9
 8002d34:	080030a9 	.word	0x080030a9
 8002d38:	080030a9 	.word	0x080030a9
 8002d3c:	080030a9 	.word	0x080030a9
 8002d40:	08002ef1 	.word	0x08002ef1
 8002d44:	08002f15 	.word	0x08002f15
 8002d48:	08002f39 	.word	0x08002f39
 8002d4c:	08002f5d 	.word	0x08002f5d
 8002d50:	08002f81 	.word	0x08002f81
 8002d54:	08002fa5 	.word	0x08002fa5
 8002d58:	08002fc9 	.word	0x08002fc9
 8002d5c:	08002fed 	.word	0x08002fed
 8002d60:	08003011 	.word	0x08003011
 8002d64:	080030a9 	.word	0x080030a9
 8002d68:	080030a9 	.word	0x080030a9
 8002d6c:	080030a9 	.word	0x080030a9
 8002d70:	080030a9 	.word	0x080030a9
 8002d74:	080030a9 	.word	0x080030a9
 8002d78:	08003047 	.word	0x08003047
 8002d7c:	080030a9 	.word	0x080030a9
 8002d80:	08002ebd 	.word	0x08002ebd
 8002d84:	08002ee5 	.word	0x08002ee5
 8002d88:	08002e75 	.word	0x08002e75
 8002d8c:	08002ecb 	.word	0x08002ecb
 8002d90:	08003041 	.word	0x08003041
 8002d94:	08002e87 	.word	0x08002e87
 8002d98:	08002e81 	.word	0x08002e81
 8002d9c:	08003047 	.word	0x08003047
 8002da0:	08002e6f 	.word	0x08002e6f
 8002da4:	080030a9 	.word	0x080030a9
 8002da8:	080030a9 	.word	0x080030a9
 8002dac:	080030a9 	.word	0x080030a9
 8002db0:	080030a9 	.word	0x080030a9
 8002db4:	080030a9 	.word	0x080030a9
 8002db8:	080030a9 	.word	0x080030a9
 8002dbc:	08002e7b 	.word	0x08002e7b
 8002dc0:	080030a9 	.word	0x080030a9
 8002dc4:	08003035 	.word	0x08003035
 8002dc8:	08002ea7 	.word	0x08002ea7
 8002dcc:	08002e69 	.word	0x08002e69
 8002dd0:	080030a9 	.word	0x080030a9
 8002dd4:	080030a9 	.word	0x080030a9
 8002dd8:	08002e93 	.word	0x08002e93
 8002ddc:	080030a9 	.word	0x080030a9
 8002de0:	080030a9 	.word	0x080030a9
 8002de4:	08002e8d 	.word	0x08002e8d
 8002de8:	080030a9 	.word	0x080030a9
 8002dec:	080030a9 	.word	0x080030a9
 8002df0:	080030a9 	.word	0x080030a9
 8002df4:	080030a9 	.word	0x080030a9
 8002df8:	080030a9 	.word	0x080030a9
 8002dfc:	080030a9 	.word	0x080030a9
 8002e00:	08002ebd 	.word	0x08002ebd
 8002e04:	08002ee5 	.word	0x08002ee5
 8002e08:	08002e75 	.word	0x08002e75
 8002e0c:	08002ecb 	.word	0x08002ecb
 8002e10:	08003041 	.word	0x08003041
 8002e14:	08002e87 	.word	0x08002e87
 8002e18:	08002e81 	.word	0x08002e81
 8002e1c:	08003047 	.word	0x08003047
 8002e20:	08002e6f 	.word	0x08002e6f
 8002e24:	080030a9 	.word	0x080030a9
 8002e28:	080030a9 	.word	0x080030a9
 8002e2c:	080030a9 	.word	0x080030a9
 8002e30:	080030a9 	.word	0x080030a9
 8002e34:	080030a9 	.word	0x080030a9
 8002e38:	080030a9 	.word	0x080030a9
 8002e3c:	08002e7b 	.word	0x08002e7b
 8002e40:	080030a9 	.word	0x080030a9
 8002e44:	08003035 	.word	0x08003035
 8002e48:	08002ea7 	.word	0x08002ea7
 8002e4c:	08002e69 	.word	0x08002e69
 8002e50:	080030a9 	.word	0x080030a9
 8002e54:	080030a9 	.word	0x080030a9
 8002e58:	08002e93 	.word	0x08002e93
 8002e5c:	080030a9 	.word	0x080030a9
 8002e60:	080030a9 	.word	0x080030a9
 8002e64:	08002e8d 	.word	0x08002e8d
        // Test commands
        case 't':  // Complete direction test
        case 'T':
            Motor_BluetoothDirectionTest();
 8002e68:	f7ff fdd8 	bl	8002a1c <Motor_BluetoothDirectionTest>
            break;
 8002e6c:	e122      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 'i':  // Individual test
        case 'I':
            Motor_BluetoothIndividualTest();
 8002e6e:	f7ff fe2b 	bl	8002ac8 <Motor_BluetoothIndividualTest>
            break;
 8002e72:	e11f      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 'c':  // Encoder test
        case 'C':
            Encoder_BluetoothTest();
 8002e74:	f7ff fe94 	bl	8002ba0 <Encoder_BluetoothTest>
            break;
 8002e78:	e11c      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        // Debug commands (NEW)
        case 'p':  // PWM test
        case 'P':
            Motor_Debug_PWMTest();
 8002e7a:	f7ff f9c9 	bl	8002210 <Motor_Debug_PWMTest>
            break;
 8002e7e:	e119      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 'g':  // Direction GPIO test
        case 'G':
            Motor_Debug_DirectionTest();
 8002e80:	f7ff fb06 	bl	8002490 <Motor_Debug_DirectionTest>
            break;
 8002e84:	e116      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 'f':  // Speed Function test
        case 'F':
            Motor_Debug_SpeedFunctionTest();
 8002e86:	f7ff fbc5 	bl	8002614 <Motor_Debug_SpeedFunctionTest>
            break;
 8002e8a:	e113      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 'z':  // Diagnosis
        case 'Z':
            Motor_Debug_DiagnoseProblem();
 8002e8c:	f7ff fc4a 	bl	8002724 <Motor_Debug_DiagnoseProblem>
            break;
 8002e90:	e110      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        // Basic control
        case 'w':  // Forward
        case 'W':
            Motor_Forward(50);
 8002e92:	2032      	movs	r0, #50	@ 0x32
 8002e94:	f000 fb98 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(50);
 8002e98:	2032      	movs	r0, #50	@ 0x32
 8002e9a:	f7ff fd3d 	bl	8002918 <Motor_Debug_ShowPWMValue>
            Bluetooth_SendMessage("Moving forward (50%)\r\n");
 8002e9e:	4887      	ldr	r0, [pc, #540]	@ (80030bc <Motor_BluetoothCommand+0x3dc>)
 8002ea0:	f7ff fda6 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002ea4:	e106      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 's':  // Backward
        case 'S':
            Motor_Backward(50);
 8002ea6:	2032      	movs	r0, #50	@ 0x32
 8002ea8:	f000 fbac 	bl	8003604 <Motor_Backward>
            Motor_Debug_ShowPWMValue(-50);
 8002eac:	f06f 0031 	mvn.w	r0, #49	@ 0x31
 8002eb0:	f7ff fd32 	bl	8002918 <Motor_Debug_ShowPWMValue>
            Bluetooth_SendMessage("Moving backward (50%)\r\n");
 8002eb4:	4882      	ldr	r0, [pc, #520]	@ (80030c0 <Motor_BluetoothCommand+0x3e0>)
 8002eb6:	f7ff fd9b 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002eba:	e0fb      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 'a':  // Turn left
        case 'A':
            Motor_TurnLeft(50);
 8002ebc:	2032      	movs	r0, #50	@ 0x32
 8002ebe:	f000 fbc3 	bl	8003648 <Motor_TurnLeft>
            Bluetooth_SendMessage("Turning left (50%)\r\n");
 8002ec2:	4880      	ldr	r0, [pc, #512]	@ (80030c4 <Motor_BluetoothCommand+0x3e4>)
 8002ec4:	f7ff fd94 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002ec8:	e0f4      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 'd':  // Turn right
        case 'D':
            Motor_TurnRight(50);
 8002eca:	2032      	movs	r0, #50	@ 0x32
 8002ecc:	f000 fbdc 	bl	8003688 <Motor_TurnRight>
            Bluetooth_SendMessage("Turning right (50%)\r\n");
 8002ed0:	487d      	ldr	r0, [pc, #500]	@ (80030c8 <Motor_BluetoothCommand+0x3e8>)
 8002ed2:	f7ff fd8d 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002ed6:	e0ed      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case ' ':  // Stop
            Motor_Stop();
 8002ed8:	f000 fb6e 	bl	80035b8 <Motor_Stop>
            Bluetooth_SendMessage("Stopped\r\n");
 8002edc:	487b      	ldr	r0, [pc, #492]	@ (80030cc <Motor_BluetoothCommand+0x3ec>)
 8002ede:	f7ff fd87 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002ee2:	e0e7      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case 'b':  // Brake
        case 'B':
            Motor_Brake();
 8002ee4:	f000 fbf0 	bl	80036c8 <Motor_Brake>
            Bluetooth_SendMessage("Braking\r\n");
 8002ee8:	4879      	ldr	r0, [pc, #484]	@ (80030d0 <Motor_BluetoothCommand+0x3f0>)
 8002eea:	f7ff fd81 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002eee:	e0e1      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        // Enhanced speed control with debug info
        case '1':  // Ultra low speed (1%)
            Motor_Forward(1);
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f000 fb69 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(1);
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f7ff fd0e 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "Ultra low speed forward (1%%)\r\n");
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	4974      	ldr	r1, [pc, #464]	@ (80030d4 <Motor_BluetoothCommand+0x3f4>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f006 fbba 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fd6f 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002f12:	e0cf      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case '2':  // Very low speed (5%)
            Motor_Forward(5);
 8002f14:	2005      	movs	r0, #5
 8002f16:	f000 fb57 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(5);
 8002f1a:	2005      	movs	r0, #5
 8002f1c:	f7ff fcfc 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "Very low speed forward (5%%)\r\n");
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	496c      	ldr	r1, [pc, #432]	@ (80030d8 <Motor_BluetoothCommand+0x3f8>)
 8002f26:	4618      	mov	r0, r3
 8002f28:	f006 fba8 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fd5d 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002f36:	e0bd      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case '3':  // Low speed (7%)
            Motor_Forward(7);
 8002f38:	2007      	movs	r0, #7
 8002f3a:	f000 fb45 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(7);
 8002f3e:	2007      	movs	r0, #7
 8002f40:	f7ff fcea 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "Low speed forward (7%%)\r\n");
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	4964      	ldr	r1, [pc, #400]	@ (80030dc <Motor_BluetoothCommand+0x3fc>)
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f006 fb96 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fd4b 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002f5a:	e0ab      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case '4':  // Medium-low speed (10%)
            Motor_Forward(10);
 8002f5c:	200a      	movs	r0, #10
 8002f5e:	f000 fb33 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(10);
 8002f62:	200a      	movs	r0, #10
 8002f64:	f7ff fcd8 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "Medium-low speed forward (10%%)\r\n");
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	495c      	ldr	r1, [pc, #368]	@ (80030e0 <Motor_BluetoothCommand+0x400>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f006 fb84 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8002f74:	f107 030c 	add.w	r3, r7, #12
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fd39 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002f7e:	e099      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case '5':  // Medium speed (50%)
            Motor_Forward(50);
 8002f80:	2032      	movs	r0, #50	@ 0x32
 8002f82:	f000 fb21 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(50);
 8002f86:	2032      	movs	r0, #50	@ 0x32
 8002f88:	f7ff fcc6 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "Medium speed forward (50%%)\r\n");
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	4954      	ldr	r1, [pc, #336]	@ (80030e4 <Motor_BluetoothCommand+0x404>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f006 fb72 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fd27 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002fa2:	e087      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case '6':  // Medium-high speed (65%)
            Motor_Forward(65);
 8002fa4:	2041      	movs	r0, #65	@ 0x41
 8002fa6:	f000 fb0f 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(65);
 8002faa:	2041      	movs	r0, #65	@ 0x41
 8002fac:	f7ff fcb4 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "Medium-high speed forward (65%%)\r\n");
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	494c      	ldr	r1, [pc, #304]	@ (80030e8 <Motor_BluetoothCommand+0x408>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f006 fb60 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fd15 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002fc6:	e075      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case '7':  // High speed (80%)
            Motor_Forward(80);
 8002fc8:	2050      	movs	r0, #80	@ 0x50
 8002fca:	f000 fafd 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(80);
 8002fce:	2050      	movs	r0, #80	@ 0x50
 8002fd0:	f7ff fca2 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "High speed forward (80%%)\r\n");
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	4944      	ldr	r1, [pc, #272]	@ (80030ec <Motor_BluetoothCommand+0x40c>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f006 fb4e 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fd03 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8002fea:	e063      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case '8':  // Very high speed (90%)
            Motor_Forward(90);
 8002fec:	205a      	movs	r0, #90	@ 0x5a
 8002fee:	f000 faeb 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(90);
 8002ff2:	205a      	movs	r0, #90	@ 0x5a
 8002ff4:	f7ff fc90 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "Very high speed forward (90%%)\r\n");
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	493c      	ldr	r1, [pc, #240]	@ (80030f0 <Motor_BluetoothCommand+0x410>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f006 fb3c 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fcf1 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 800300e:	e051      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        case '9':  // Maximum speed (100%)
            Motor_Forward(100);
 8003010:	2064      	movs	r0, #100	@ 0x64
 8003012:	f000 fad9 	bl	80035c8 <Motor_Forward>
            Motor_Debug_ShowPWMValue(100);
 8003016:	2064      	movs	r0, #100	@ 0x64
 8003018:	f7ff fc7e 	bl	8002918 <Motor_Debug_ShowPWMValue>
            sprintf(buffer, "Maximum speed forward (100%%)\r\n");
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	4934      	ldr	r1, [pc, #208]	@ (80030f4 <Motor_BluetoothCommand+0x414>)
 8003022:	4618      	mov	r0, r3
 8003024:	f006 fb2a 	bl	800967c <siprintf>
            Bluetooth_SendMessage(buffer);
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fcdf 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 8003032:	e03f      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        // Reset encoders
        case 'r':
        case 'R':
            Encoder_Reset();
 8003034:	f000 f8b0 	bl	8003198 <Encoder_Reset>
            Bluetooth_SendMessage("Encoders reset\r\n");
 8003038:	482f      	ldr	r0, [pc, #188]	@ (80030f8 <Motor_BluetoothCommand+0x418>)
 800303a:	f7ff fcd9 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 800303e:	e039      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        // Encoder monitor
        case 'e':
        case 'E':
            Encoder_BluetoothMonitor();
 8003040:	f7ff fe1e 	bl	8002c80 <Encoder_BluetoothMonitor>
            break;
 8003044:	e036      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        // Help
        case 'h':  // Help
        case 'H':
        case '?':
            Bluetooth_SendMessage("\r\n=== Bluetooth Motor Control ===\r\n");
 8003046:	482d      	ldr	r0, [pc, #180]	@ (80030fc <Motor_BluetoothCommand+0x41c>)
 8003048:	f7ff fcd2 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("Tests: t-Direction i-Individual c-Encoder\r\n");
 800304c:	482c      	ldr	r0, [pc, #176]	@ (8003100 <Motor_BluetoothCommand+0x420>)
 800304e:	f7ff fccf 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("Debug: p-PWM Test g-GPIO Test f-Function Test z-Diagnose\r\n");
 8003052:	482c      	ldr	r0, [pc, #176]	@ (8003104 <Motor_BluetoothCommand+0x424>)
 8003054:	f7ff fccc 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("Move:  w-Forward s-Back a-Left d-Right\r\n");
 8003058:	482b      	ldr	r0, [pc, #172]	@ (8003108 <Motor_BluetoothCommand+0x428>)
 800305a:	f7ff fcc9 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("Other: Space-Stop b-Brake r-Reset e-Encoder\r\n");
 800305e:	482b      	ldr	r0, [pc, #172]	@ (800310c <Motor_BluetoothCommand+0x42c>)
 8003060:	f7ff fcc6 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("Speed Control (with PWM info):\r\n");
 8003064:	482a      	ldr	r0, [pc, #168]	@ (8003110 <Motor_BluetoothCommand+0x430>)
 8003066:	f7ff fcc3 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("1 - Ultra low (1%)\r\n");
 800306a:	482a      	ldr	r0, [pc, #168]	@ (8003114 <Motor_BluetoothCommand+0x434>)
 800306c:	f7ff fcc0 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("2 - Very low (5%)\r\n");
 8003070:	4829      	ldr	r0, [pc, #164]	@ (8003118 <Motor_BluetoothCommand+0x438>)
 8003072:	f7ff fcbd 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("3 - Low (7%)\r\n");
 8003076:	4829      	ldr	r0, [pc, #164]	@ (800311c <Motor_BluetoothCommand+0x43c>)
 8003078:	f7ff fcba 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("4 - Medium-low (10%)\r\n");
 800307c:	4828      	ldr	r0, [pc, #160]	@ (8003120 <Motor_BluetoothCommand+0x440>)
 800307e:	f7ff fcb7 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("5 - Medium (50%)\r\n");
 8003082:	4828      	ldr	r0, [pc, #160]	@ (8003124 <Motor_BluetoothCommand+0x444>)
 8003084:	f7ff fcb4 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("6 - Medium-high (65%)\r\n");
 8003088:	4827      	ldr	r0, [pc, #156]	@ (8003128 <Motor_BluetoothCommand+0x448>)
 800308a:	f7ff fcb1 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("7 - High (80%)\r\n");
 800308e:	4827      	ldr	r0, [pc, #156]	@ (800312c <Motor_BluetoothCommand+0x44c>)
 8003090:	f7ff fcae 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("8 - Very high (90%)\r\n");
 8003094:	4826      	ldr	r0, [pc, #152]	@ (8003130 <Motor_BluetoothCommand+0x450>)
 8003096:	f7ff fcab 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("9 - Maximum (100%)\r\n");
 800309a:	4826      	ldr	r0, [pc, #152]	@ (8003134 <Motor_BluetoothCommand+0x454>)
 800309c:	f7ff fca8 	bl	80029f0 <Bluetooth_SendMessage>
            Bluetooth_SendMessage("==========================\r\n");
 80030a0:	4825      	ldr	r0, [pc, #148]	@ (8003138 <Motor_BluetoothCommand+0x458>)
 80030a2:	f7ff fca5 	bl	80029f0 <Bluetooth_SendMessage>
            break;
 80030a6:	e005      	b.n	80030b4 <Motor_BluetoothCommand+0x3d4>
            
        default:
            Bluetooth_SendMessage("Unknown command, send h for help\r\n");
 80030a8:	4824      	ldr	r0, [pc, #144]	@ (800313c <Motor_BluetoothCommand+0x45c>)
 80030aa:	f7ff fca1 	bl	80029f0 <Bluetooth_SendMessage>
            Motor_Stop();  // Safety stop
 80030ae:	f000 fa83 	bl	80035b8 <Motor_Stop>
            break;
 80030b2:	bf00      	nop
    }
} 
 80030b4:	bf00      	nop
 80030b6:	3770      	adds	r7, #112	@ 0x70
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	0800c668 	.word	0x0800c668
 80030c0:	0800c680 	.word	0x0800c680
 80030c4:	0800c698 	.word	0x0800c698
 80030c8:	0800c6b0 	.word	0x0800c6b0
 80030cc:	0800c6c8 	.word	0x0800c6c8
 80030d0:	0800c6d4 	.word	0x0800c6d4
 80030d4:	0800c6e0 	.word	0x0800c6e0
 80030d8:	0800c700 	.word	0x0800c700
 80030dc:	0800c720 	.word	0x0800c720
 80030e0:	0800c73c 	.word	0x0800c73c
 80030e4:	0800c760 	.word	0x0800c760
 80030e8:	0800c780 	.word	0x0800c780
 80030ec:	0800c7a4 	.word	0x0800c7a4
 80030f0:	0800c7c0 	.word	0x0800c7c0
 80030f4:	0800c7e4 	.word	0x0800c7e4
 80030f8:	0800c570 	.word	0x0800c570
 80030fc:	0800c804 	.word	0x0800c804
 8003100:	0800c828 	.word	0x0800c828
 8003104:	0800c854 	.word	0x0800c854
 8003108:	0800c890 	.word	0x0800c890
 800310c:	0800c8bc 	.word	0x0800c8bc
 8003110:	0800c8ec 	.word	0x0800c8ec
 8003114:	0800c910 	.word	0x0800c910
 8003118:	0800c928 	.word	0x0800c928
 800311c:	0800c93c 	.word	0x0800c93c
 8003120:	0800c94c 	.word	0x0800c94c
 8003124:	0800c964 	.word	0x0800c964
 8003128:	0800c978 	.word	0x0800c978
 800312c:	0800c990 	.word	0x0800c990
 8003130:	0800c9a4 	.word	0x0800c9a4
 8003134:	0800c9bc 	.word	0x0800c9bc
 8003138:	0800c9d4 	.word	0x0800c9d4
 800313c:	0800c9f4 	.word	0x0800c9f4

08003140 <Motor_Init>:
  * @brief  Initialize motor driver
  * @param  None
  * @retval None
  */
void Motor_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
    // Start PWM generation on TIM4 channels
    HAL_TIM_PWM_Start(&htim4, MOTOR_LEFT_PWM_CHANNEL);
 8003144:	2108      	movs	r1, #8
 8003146:	4809      	ldr	r0, [pc, #36]	@ (800316c <Motor_Init+0x2c>)
 8003148:	f003 fd48 	bl	8006bdc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, MOTOR_RIGHT_PWM_CHANNEL);
 800314c:	210c      	movs	r1, #12
 800314e:	4807      	ldr	r0, [pc, #28]	@ (800316c <Motor_Init+0x2c>)
 8003150:	f003 fd44 	bl	8006bdc <HAL_TIM_PWM_Start>
    
    // Initialize motors to stop state
    Motor_Stop();
 8003154:	f000 fa30 	bl	80035b8 <Motor_Stop>
    
    // Initialize current speeds
    current_speeds.left_speed = 0;
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <Motor_Init+0x30>)
 800315a:	2200      	movs	r2, #0
 800315c:	801a      	strh	r2, [r3, #0]
    current_speeds.right_speed = 0;
 800315e:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <Motor_Init+0x30>)
 8003160:	2200      	movs	r2, #0
 8003162:	805a      	strh	r2, [r3, #2]
    
    // Initialize encoder functionality
    Encoder_Init();
 8003164:	f000 f806 	bl	8003174 <Encoder_Init>
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200003d8 	.word	0x200003d8
 8003170:	200004e8 	.word	0x200004e8

08003174 <Encoder_Init>:
  * @brief  Initialize encoder functionality
  * @param  None
  * @retval None
  */
void Encoder_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
    // Start encoder timers
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);  // Left encoder (TIM2)
 8003178:	213c      	movs	r1, #60	@ 0x3c
 800317a:	4805      	ldr	r0, [pc, #20]	@ (8003190 <Encoder_Init+0x1c>)
 800317c:	f003 fe84 	bl	8006e88 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);  // Right encoder (TIM3)
 8003180:	213c      	movs	r1, #60	@ 0x3c
 8003182:	4804      	ldr	r0, [pc, #16]	@ (8003194 <Encoder_Init+0x20>)
 8003184:	f003 fe80 	bl	8006e88 <HAL_TIM_Encoder_Start>
    
    // Reset encoder data
    Encoder_Reset();
 8003188:	f000 f806 	bl	8003198 <Encoder_Reset>
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000348 	.word	0x20000348
 8003194:	20000390 	.word	0x20000390

08003198 <Encoder_Reset>:
  * @brief  Reset encoder data
  * @param  None
  * @retval None
  */
void Encoder_Reset(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 32768);  // Set to middle value to handle negative counts
 800319c:	4b12      	ldr	r3, [pc, #72]	@ (80031e8 <Encoder_Reset+0x50>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80031a4:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim3, 32768);
 80031a6:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <Encoder_Reset+0x54>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24
    
    encoder_data.left_encoder = 0;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <Encoder_Reset+0x58>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    encoder_data.right_encoder = 0;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <Encoder_Reset+0x58>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	605a      	str	r2, [r3, #4]
    encoder_data.left_encoder_prev = 0;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <Encoder_Reset+0x58>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
    encoder_data.right_encoder_prev = 0;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <Encoder_Reset+0x58>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	60da      	str	r2, [r3, #12]
    encoder_data.left_speed_rpm = 0.0f;
 80031c8:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <Encoder_Reset+0x58>)
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
    encoder_data.right_speed_rpm = 0.0f;
 80031d0:	4b07      	ldr	r3, [pc, #28]	@ (80031f0 <Encoder_Reset+0x58>)
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	615a      	str	r2, [r3, #20]
    
    last_encoder_update_time = HAL_GetTick();
 80031d8:	f001 f99c 	bl	8004514 <HAL_GetTick>
 80031dc:	4603      	mov	r3, r0
 80031de:	4a05      	ldr	r2, [pc, #20]	@ (80031f4 <Encoder_Reset+0x5c>)
 80031e0:	6013      	str	r3, [r2, #0]
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000348 	.word	0x20000348
 80031ec:	20000390 	.word	0x20000390
 80031f0:	200004ec 	.word	0x200004ec
 80031f4:	20000504 	.word	0x20000504

080031f8 <Encoder_Update>:
  * @brief  Update encoder readings and calculate speeds
  * @param  None
  * @retval None
  */
void Encoder_Update(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80031fe:	f001 f989 	bl	8004514 <HAL_GetTick>
 8003202:	6178      	str	r0, [r7, #20]
    
    // Update encoder counts
    int32_t left_raw = (int32_t)__HAL_TIM_GET_COUNTER(&htim2) - 32768;
 8003204:	4b34      	ldr	r3, [pc, #208]	@ (80032d8 <Encoder_Update+0xe0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800320e:	613b      	str	r3, [r7, #16]
    int32_t right_raw = (int32_t)__HAL_TIM_GET_COUNTER(&htim3) - 32768;
 8003210:	4b32      	ldr	r3, [pc, #200]	@ (80032dc <Encoder_Update+0xe4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800321a:	60fb      	str	r3, [r7, #12]
    
    encoder_data.left_encoder = left_raw;
 800321c:	4a30      	ldr	r2, [pc, #192]	@ (80032e0 <Encoder_Update+0xe8>)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	6013      	str	r3, [r2, #0]
    encoder_data.right_encoder = right_raw;
 8003222:	4a2f      	ldr	r2, [pc, #188]	@ (80032e0 <Encoder_Update+0xe8>)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6053      	str	r3, [r2, #4]
    
    // Calculate speed if enough time has passed
    if (current_time - last_encoder_update_time >= SPEED_CALC_PERIOD_MS) {
 8003228:	4b2e      	ldr	r3, [pc, #184]	@ (80032e4 <Encoder_Update+0xec>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b63      	cmp	r3, #99	@ 0x63
 8003232:	d94c      	bls.n	80032ce <Encoder_Update+0xd6>
        float time_diff = (current_time - last_encoder_update_time) / 1000.0f; // Convert to seconds
 8003234:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <Encoder_Update+0xec>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003244:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80032e8 <Encoder_Update+0xf0>
 8003248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800324c:	edc7 7a02 	vstr	s15, [r7, #8]
        
        // Calculate speed in RPM
        int32_t left_diff = encoder_data.left_encoder - encoder_data.left_encoder_prev;
 8003250:	4b23      	ldr	r3, [pc, #140]	@ (80032e0 <Encoder_Update+0xe8>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b22      	ldr	r3, [pc, #136]	@ (80032e0 <Encoder_Update+0xe8>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	607b      	str	r3, [r7, #4]
        int32_t right_diff = encoder_data.right_encoder - encoder_data.right_encoder_prev;
 800325c:	4b20      	ldr	r3, [pc, #128]	@ (80032e0 <Encoder_Update+0xe8>)
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4b1f      	ldr	r3, [pc, #124]	@ (80032e0 <Encoder_Update+0xe8>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	603b      	str	r3, [r7, #0]
        
        encoder_data.left_speed_rpm = (left_diff / (float)ENCODER_CPR) * (60.0f / time_diff);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003272:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80032ec <Encoder_Update+0xf4>
 8003276:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800327a:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 80032f0 <Encoder_Update+0xf8>
 800327e:	edd7 6a02 	vldr	s13, [r7, #8]
 8003282:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <Encoder_Update+0xe8>)
 800328c:	edc3 7a04 	vstr	s15, [r3, #16]
        encoder_data.right_speed_rpm = (right_diff / (float)ENCODER_CPR) * (60.0f / time_diff);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800329a:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80032ec <Encoder_Update+0xf4>
 800329e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032a2:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80032f0 <Encoder_Update+0xf8>
 80032a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80032aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80032ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b2:	4b0b      	ldr	r3, [pc, #44]	@ (80032e0 <Encoder_Update+0xe8>)
 80032b4:	edc3 7a05 	vstr	s15, [r3, #20]
        
        // Update previous values
        encoder_data.left_encoder_prev = encoder_data.left_encoder;
 80032b8:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <Encoder_Update+0xe8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a08      	ldr	r2, [pc, #32]	@ (80032e0 <Encoder_Update+0xe8>)
 80032be:	6093      	str	r3, [r2, #8]
        encoder_data.right_encoder_prev = encoder_data.right_encoder;
 80032c0:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <Encoder_Update+0xe8>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a06      	ldr	r2, [pc, #24]	@ (80032e0 <Encoder_Update+0xe8>)
 80032c6:	60d3      	str	r3, [r2, #12]
        last_encoder_update_time = current_time;
 80032c8:	4a06      	ldr	r2, [pc, #24]	@ (80032e4 <Encoder_Update+0xec>)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6013      	str	r3, [r2, #0]
    }
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000348 	.word	0x20000348
 80032dc:	20000390 	.word	0x20000390
 80032e0:	200004ec 	.word	0x200004ec
 80032e4:	20000504 	.word	0x20000504
 80032e8:	447a0000 	.word	0x447a0000
 80032ec:	44800000 	.word	0x44800000
 80032f0:	42700000 	.word	0x42700000

080032f4 <Encoder_GetData>:
  * @brief  Get encoder data
  * @param  None
  * @retval Encoder data structure
  */
EncoderData_t Encoder_GetData(void)
{
 80032f4:	b4b0      	push	{r4, r5, r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    return encoder_data;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a07      	ldr	r2, [pc, #28]	@ (800331c <Encoder_GetData+0x28>)
 8003300:	461c      	mov	r4, r3
 8003302:	4615      	mov	r5, r2
 8003304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003308:	e895 0003 	ldmia.w	r5, {r0, r1}
 800330c:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bcb0      	pop	{r4, r5, r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	200004ec 	.word	0x200004ec

08003320 <Encoder_GetLeftCount>:
  * @brief  Get left encoder count
  * @param  None
  * @retval Left encoder count
  */
int32_t Encoder_GetLeftCount(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
    return encoder_data.left_encoder;
 8003324:	4b03      	ldr	r3, [pc, #12]	@ (8003334 <Encoder_GetLeftCount+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	200004ec 	.word	0x200004ec

08003338 <Encoder_GetRightCount>:
  * @brief  Get right encoder count
  * @param  None
  * @retval Right encoder count
  */
int32_t Encoder_GetRightCount(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
    return encoder_data.right_encoder;
 800333c:	4b03      	ldr	r3, [pc, #12]	@ (800334c <Encoder_GetRightCount+0x14>)
 800333e:	685b      	ldr	r3, [r3, #4]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	200004ec 	.word	0x200004ec

08003350 <Motor_SpeedToPWM>:
  * @brief  Convert speed percentage to PWM value with exponential mapping
  * @param  speed: Speed percentage (-100 to 100)
  * @retval PWM value (0 to PWM_MAX_VALUE)
  */
static uint32_t Motor_SpeedToPWM(int16_t speed)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	80fb      	strh	r3, [r7, #6]
    // Get absolute value for PWM calculation
    int16_t abs_speed = (speed < 0) ? -speed : speed;
 800335a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800335e:	2b00      	cmp	r3, #0
 8003360:	bfb8      	it	lt
 8003362:	425b      	neglt	r3, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	817b      	strh	r3, [r7, #10]
    
    // Clamp speed to valid range
    abs_speed = CLAMP(abs_speed, 0, MOTOR_MAX_SPEED);
 8003368:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db06      	blt.n	800337e <Motor_SpeedToPWM+0x2e>
 8003370:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003374:	2b64      	cmp	r3, #100	@ 0x64
 8003376:	bfa8      	it	ge
 8003378:	2364      	movge	r3, #100	@ 0x64
 800337a:	b21b      	sxth	r3, r3
 800337c:	e000      	b.n	8003380 <Motor_SpeedToPWM+0x30>
 800337e:	2300      	movs	r3, #0
 8003380:	817b      	strh	r3, [r7, #10]
    
    // Convert percentage (0-100) to PWM value (0-PWM_MAX_VALUE)
    uint32_t pwm_value = (uint32_t)((abs_speed * PWM_MAX_VALUE) / 100);
 8003382:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003386:	f242 720f 	movw	r2, #9999	@ 0x270f
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	4a0b      	ldr	r2, [pc, #44]	@ (80033bc <Motor_SpeedToPWM+0x6c>)
 8003390:	fb82 1203 	smull	r1, r2, r2, r3
 8003394:	1152      	asrs	r2, r2, #5
 8003396:	17db      	asrs	r3, r3, #31
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	60fb      	str	r3, [r7, #12]
    
    // Apply minimum PWM threshold for motor startup
    if (pwm_value > 0 && pwm_value < PWM_MIN_VALUE) {
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <Motor_SpeedToPWM+0x5c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	d801      	bhi.n	80033ac <Motor_SpeedToPWM+0x5c>
        pwm_value = PWM_MIN_VALUE;
 80033a8:	230a      	movs	r3, #10
 80033aa:	60fb      	str	r3, [r7, #12]
    }
    
    return pwm_value;
 80033ac:	68fb      	ldr	r3, [r7, #12]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	51eb851f 	.word	0x51eb851f

080033c0 <Motor_SetDirection>:
  * @param  motor: Motor selector (MOTOR_LEFT or MOTOR_RIGHT)
  * @param  direction: Motor direction
  * @retval None
  */
static void Motor_SetDirection(MotorSelector_t motor, MotorDirection_t direction)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	460a      	mov	r2, r1
 80033ca:	71fb      	strb	r3, [r7, #7]
 80033cc:	4613      	mov	r3, r2
 80033ce:	71bb      	strb	r3, [r7, #6]
    if (motor == MOTOR_LEFT) {
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d13d      	bne.n	8003452 <Motor_SetDirection+0x92>
        // Left motor control (AIN1=PB14, AIN2=PB15)
        switch (direction) {
 80033d6:	79bb      	ldrb	r3, [r7, #6]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d020      	beq.n	800341e <Motor_SetDirection+0x5e>
 80033dc:	2b03      	cmp	r3, #3
 80033de:	dc2b      	bgt.n	8003438 <Motor_SetDirection+0x78>
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d002      	beq.n	80033ea <Motor_SetDirection+0x2a>
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d00d      	beq.n	8003404 <Motor_SetDirection+0x44>
 80033e8:	e026      	b.n	8003438 <Motor_SetDirection+0x78>
            case MOTOR_FORWARD:
                HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);   // AIN1 = 1
 80033ea:	2201      	movs	r2, #1
 80033ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80033f0:	483a      	ldr	r0, [pc, #232]	@ (80034dc <Motor_SetDirection+0x11c>)
 80033f2:	f001 fbe7 	bl	8004bc4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET); // AIN2 = 0
 80033f6:	2200      	movs	r2, #0
 80033f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033fc:	4837      	ldr	r0, [pc, #220]	@ (80034dc <Motor_SetDirection+0x11c>)
 80033fe:	f001 fbe1 	bl	8004bc4 <HAL_GPIO_WritePin>
                break;
 8003402:	e067      	b.n	80034d4 <Motor_SetDirection+0x114>
            case MOTOR_BACKWARD:
                HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET); // AIN1 = 0
 8003404:	2200      	movs	r2, #0
 8003406:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800340a:	4834      	ldr	r0, [pc, #208]	@ (80034dc <Motor_SetDirection+0x11c>)
 800340c:	f001 fbda 	bl	8004bc4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);   // AIN2 = 1
 8003410:	2201      	movs	r2, #1
 8003412:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003416:	4831      	ldr	r0, [pc, #196]	@ (80034dc <Motor_SetDirection+0x11c>)
 8003418:	f001 fbd4 	bl	8004bc4 <HAL_GPIO_WritePin>
                break;
 800341c:	e05a      	b.n	80034d4 <Motor_SetDirection+0x114>
            case MOTOR_BRAKE:
                HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);   // AIN1 = 1
 800341e:	2201      	movs	r2, #1
 8003420:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003424:	482d      	ldr	r0, [pc, #180]	@ (80034dc <Motor_SetDirection+0x11c>)
 8003426:	f001 fbcd 	bl	8004bc4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);   // AIN2 = 1
 800342a:	2201      	movs	r2, #1
 800342c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003430:	482a      	ldr	r0, [pc, #168]	@ (80034dc <Motor_SetDirection+0x11c>)
 8003432:	f001 fbc7 	bl	8004bc4 <HAL_GPIO_WritePin>
                break;
 8003436:	e04d      	b.n	80034d4 <Motor_SetDirection+0x114>
            case MOTOR_STOP:
            default:
                HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET); // AIN1 = 0
 8003438:	2200      	movs	r2, #0
 800343a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800343e:	4827      	ldr	r0, [pc, #156]	@ (80034dc <Motor_SetDirection+0x11c>)
 8003440:	f001 fbc0 	bl	8004bc4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET); // AIN2 = 0
 8003444:	2200      	movs	r2, #0
 8003446:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800344a:	4824      	ldr	r0, [pc, #144]	@ (80034dc <Motor_SetDirection+0x11c>)
 800344c:	f001 fbba 	bl	8004bc4 <HAL_GPIO_WritePin>
                break;
 8003450:	e040      	b.n	80034d4 <Motor_SetDirection+0x114>
        }
    } else if (motor == MOTOR_RIGHT) {
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d13d      	bne.n	80034d4 <Motor_SetDirection+0x114>
        // Right motor control (BIN1=PB13, BIN2=PB12)
        switch (direction) {
 8003458:	79bb      	ldrb	r3, [r7, #6]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d020      	beq.n	80034a0 <Motor_SetDirection+0xe0>
 800345e:	2b03      	cmp	r3, #3
 8003460:	dc2b      	bgt.n	80034ba <Motor_SetDirection+0xfa>
 8003462:	2b01      	cmp	r3, #1
 8003464:	d002      	beq.n	800346c <Motor_SetDirection+0xac>
 8003466:	2b02      	cmp	r3, #2
 8003468:	d00d      	beq.n	8003486 <Motor_SetDirection+0xc6>
 800346a:	e026      	b.n	80034ba <Motor_SetDirection+0xfa>
            case MOTOR_FORWARD:
                HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET); // BIN1 = 0
 800346c:	2200      	movs	r2, #0
 800346e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003472:	481a      	ldr	r0, [pc, #104]	@ (80034dc <Motor_SetDirection+0x11c>)
 8003474:	f001 fba6 	bl	8004bc4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);   // BIN2 = 1
 8003478:	2201      	movs	r2, #1
 800347a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800347e:	4817      	ldr	r0, [pc, #92]	@ (80034dc <Motor_SetDirection+0x11c>)
 8003480:	f001 fba0 	bl	8004bc4 <HAL_GPIO_WritePin>
                break;
 8003484:	e026      	b.n	80034d4 <Motor_SetDirection+0x114>
            case MOTOR_BACKWARD:
                HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);   // BIN1 = 1
 8003486:	2201      	movs	r2, #1
 8003488:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800348c:	4813      	ldr	r0, [pc, #76]	@ (80034dc <Motor_SetDirection+0x11c>)
 800348e:	f001 fb99 	bl	8004bc4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET); // BIN2 = 0
 8003492:	2200      	movs	r2, #0
 8003494:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003498:	4810      	ldr	r0, [pc, #64]	@ (80034dc <Motor_SetDirection+0x11c>)
 800349a:	f001 fb93 	bl	8004bc4 <HAL_GPIO_WritePin>
                break;
 800349e:	e019      	b.n	80034d4 <Motor_SetDirection+0x114>
            case MOTOR_BRAKE:
                HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);   // BIN1 = 1
 80034a0:	2201      	movs	r2, #1
 80034a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034a6:	480d      	ldr	r0, [pc, #52]	@ (80034dc <Motor_SetDirection+0x11c>)
 80034a8:	f001 fb8c 	bl	8004bc4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);   // BIN2 = 1
 80034ac:	2201      	movs	r2, #1
 80034ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034b2:	480a      	ldr	r0, [pc, #40]	@ (80034dc <Motor_SetDirection+0x11c>)
 80034b4:	f001 fb86 	bl	8004bc4 <HAL_GPIO_WritePin>
                break;
 80034b8:	e00c      	b.n	80034d4 <Motor_SetDirection+0x114>
            case MOTOR_STOP:
            default:
                HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET); // BIN1 = 0
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034c0:	4806      	ldr	r0, [pc, #24]	@ (80034dc <Motor_SetDirection+0x11c>)
 80034c2:	f001 fb7f 	bl	8004bc4 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET); // BIN2 = 0
 80034c6:	2200      	movs	r2, #0
 80034c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034cc:	4803      	ldr	r0, [pc, #12]	@ (80034dc <Motor_SetDirection+0x11c>)
 80034ce:	f001 fb79 	bl	8004bc4 <HAL_GPIO_WritePin>
                break;
 80034d2:	bf00      	nop
        }
    }
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40020400 	.word	0x40020400

080034e0 <Motor_SetSpeed>:
  * @param  motor: Motor selector (MOTOR_LEFT or MOTOR_RIGHT)
  * @param  speed: Speed percentage (-100 to 100, negative for backward)
  * @retval None
  */
void Motor_SetSpeed(MotorSelector_t motor, int16_t speed)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	460a      	mov	r2, r1
 80034ea:	71fb      	strb	r3, [r7, #7]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80bb      	strh	r3, [r7, #4]
    // Clamp speed to valid range
    speed = CLAMP(speed, MOTOR_MIN_SPEED, MOTOR_MAX_SPEED);
 80034f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034f4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80034f8:	db06      	blt.n	8003508 <Motor_SetSpeed+0x28>
 80034fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034fe:	2b64      	cmp	r3, #100	@ 0x64
 8003500:	bfa8      	it	ge
 8003502:	2364      	movge	r3, #100	@ 0x64
 8003504:	b21b      	sxth	r3, r3
 8003506:	e001      	b.n	800350c <Motor_SetSpeed+0x2c>
 8003508:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800350c:	80bb      	strh	r3, [r7, #4]
    
    // Update current speeds
    if (motor == MOTOR_LEFT) {
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <Motor_SetSpeed+0x3c>
        current_speeds.left_speed = speed;
 8003514:	4a1a      	ldr	r2, [pc, #104]	@ (8003580 <Motor_SetSpeed+0xa0>)
 8003516:	88bb      	ldrh	r3, [r7, #4]
 8003518:	8013      	strh	r3, [r2, #0]
 800351a:	e002      	b.n	8003522 <Motor_SetSpeed+0x42>
    } else {
        current_speeds.right_speed = speed;
 800351c:	4a18      	ldr	r2, [pc, #96]	@ (8003580 <Motor_SetSpeed+0xa0>)
 800351e:	88bb      	ldrh	r3, [r7, #4]
 8003520:	8053      	strh	r3, [r2, #2]
    }
    
    // Determine direction and PWM value
    MotorDirection_t direction;
    uint32_t pwm_value = Motor_SpeedToPWM(speed);
 8003522:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff12 	bl	8003350 <Motor_SpeedToPWM>
 800352c:	60b8      	str	r0, [r7, #8]
    
    if (speed > 0) {
 800352e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	dd02      	ble.n	800353c <Motor_SetSpeed+0x5c>
        direction = MOTOR_FORWARD;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	e00a      	b.n	8003552 <Motor_SetSpeed+0x72>
    } else if (speed < 0) {
 800353c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	da02      	bge.n	800354a <Motor_SetSpeed+0x6a>
        direction = MOTOR_BACKWARD;
 8003544:	2302      	movs	r3, #2
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e003      	b.n	8003552 <Motor_SetSpeed+0x72>
    } else {
        direction = MOTOR_STOP;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
        pwm_value = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
    }
    
    // Set direction pins
    Motor_SetDirection(motor, direction);
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	4611      	mov	r1, r2
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff31 	bl	80033c0 <Motor_SetDirection>
    
    // Set PWM duty cycle
    if (motor == MOTOR_LEFT) {
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <Motor_SetSpeed+0x8e>
        __HAL_TIM_SET_COMPARE(&htim4, MOTOR_LEFT_PWM_CHANNEL, pwm_value);
 8003564:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <Motor_SetSpeed+0xa4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else {
        __HAL_TIM_SET_COMPARE(&htim4, MOTOR_RIGHT_PWM_CHANNEL, pwm_value);
    }
}
 800356c:	e003      	b.n	8003576 <Motor_SetSpeed+0x96>
        __HAL_TIM_SET_COMPARE(&htim4, MOTOR_RIGHT_PWM_CHANNEL, pwm_value);
 800356e:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <Motor_SetSpeed+0xa4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200004e8 	.word	0x200004e8
 8003584:	200003d8 	.word	0x200003d8

08003588 <Motor_SetSpeeds>:
  * @param  left_speed: Left motor speed (-100 to 100)
  * @param  right_speed: Right motor speed (-100 to 100)
  * @retval None
  */
void Motor_SetSpeeds(int16_t left_speed, int16_t right_speed)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	460a      	mov	r2, r1
 8003592:	80fb      	strh	r3, [r7, #6]
 8003594:	4613      	mov	r3, r2
 8003596:	80bb      	strh	r3, [r7, #4]
    Motor_SetSpeed(MOTOR_LEFT, left_speed);
 8003598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359c:	4619      	mov	r1, r3
 800359e:	2000      	movs	r0, #0
 80035a0:	f7ff ff9e 	bl	80034e0 <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_RIGHT, right_speed);
 80035a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80035a8:	4619      	mov	r1, r3
 80035aa:	2001      	movs	r0, #1
 80035ac:	f7ff ff98 	bl	80034e0 <Motor_SetSpeed>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <Motor_Stop>:
  * @brief  Stop both motors
  * @param  None
  * @retval None
  */
void Motor_Stop(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
    Motor_SetSpeeds(0, 0);
 80035bc:	2100      	movs	r1, #0
 80035be:	2000      	movs	r0, #0
 80035c0:	f7ff ffe2 	bl	8003588 <Motor_SetSpeeds>
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <Motor_Forward>:
  * @brief  Move both motors forward
  * @param  speed: Forward speed (0 to 100)
  * @retval None
  */
void Motor_Forward(int16_t speed)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
    speed = CLAMP(speed, 0, MOTOR_MAX_SPEED);
 80035d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db06      	blt.n	80035e8 <Motor_Forward+0x20>
 80035da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	bfa8      	it	ge
 80035e2:	2364      	movge	r3, #100	@ 0x64
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	e000      	b.n	80035ea <Motor_Forward+0x22>
 80035e8:	2300      	movs	r3, #0
 80035ea:	80fb      	strh	r3, [r7, #6]
    Motor_SetSpeeds(speed, speed);
 80035ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80035f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff ffc6 	bl	8003588 <Motor_SetSpeeds>
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <Motor_Backward>:
  * @brief  Move both motors backward
  * @param  speed: Backward speed (0 to 100)
  * @retval None
  */
void Motor_Backward(int16_t speed)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
    speed = CLAMP(speed, 0, MOTOR_MAX_SPEED);
 800360e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db06      	blt.n	8003624 <Motor_Backward+0x20>
 8003616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361a:	2b64      	cmp	r3, #100	@ 0x64
 800361c:	bfa8      	it	ge
 800361e:	2364      	movge	r3, #100	@ 0x64
 8003620:	b21b      	sxth	r3, r3
 8003622:	e000      	b.n	8003626 <Motor_Backward+0x22>
 8003624:	2300      	movs	r3, #0
 8003626:	80fb      	strh	r3, [r7, #6]
    Motor_SetSpeeds(-speed, -speed);
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	425b      	negs	r3, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	b21b      	sxth	r3, r3
 8003630:	88fa      	ldrh	r2, [r7, #6]
 8003632:	4252      	negs	r2, r2
 8003634:	b292      	uxth	r2, r2
 8003636:	b212      	sxth	r2, r2
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ffa4 	bl	8003588 <Motor_SetSpeeds>
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <Motor_TurnLeft>:
  * @brief  Turn left (right motor forward, left motor backward)
  * @param  speed: Turn speed (0 to 100)
  * @retval None
  */
void Motor_TurnLeft(int16_t speed)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
    speed = CLAMP(speed, 0, MOTOR_MAX_SPEED);
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db06      	blt.n	8003668 <Motor_TurnLeft+0x20>
 800365a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365e:	2b64      	cmp	r3, #100	@ 0x64
 8003660:	bfa8      	it	ge
 8003662:	2364      	movge	r3, #100	@ 0x64
 8003664:	b21b      	sxth	r3, r3
 8003666:	e000      	b.n	800366a <Motor_TurnLeft+0x22>
 8003668:	2300      	movs	r3, #0
 800366a:	80fb      	strh	r3, [r7, #6]
    Motor_SetSpeeds(-speed, speed);
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	425b      	negs	r3, r3
 8003670:	b29b      	uxth	r3, r3
 8003672:	b21b      	sxth	r3, r3
 8003674:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff ff84 	bl	8003588 <Motor_SetSpeeds>
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <Motor_TurnRight>:
  * @brief  Turn right (left motor forward, right motor backward)
  * @param  speed: Turn speed (0 to 100)
  * @retval None
  */
void Motor_TurnRight(int16_t speed)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
    speed = CLAMP(speed, 0, MOTOR_MAX_SPEED);
 8003692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003696:	2b00      	cmp	r3, #0
 8003698:	db06      	blt.n	80036a8 <Motor_TurnRight+0x20>
 800369a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800369e:	2b64      	cmp	r3, #100	@ 0x64
 80036a0:	bfa8      	it	ge
 80036a2:	2364      	movge	r3, #100	@ 0x64
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	e000      	b.n	80036aa <Motor_TurnRight+0x22>
 80036a8:	2300      	movs	r3, #0
 80036aa:	80fb      	strh	r3, [r7, #6]
    Motor_SetSpeeds(speed, -speed);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	425b      	negs	r3, r3
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b21a      	sxth	r2, r3
 80036b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff ff64 	bl	8003588 <Motor_SetSpeeds>
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <Motor_Brake>:
  * @brief  Brake both motors
  * @param  None
  * @retval None
  */
void Motor_Brake(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
    // Set PWM to 0 first
    __HAL_TIM_SET_COMPARE(&htim4, MOTOR_LEFT_PWM_CHANNEL, 0);
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <Motor_Brake+0x34>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, MOTOR_RIGHT_PWM_CHANNEL, 0);
 80036d4:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <Motor_Brake+0x34>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2200      	movs	r2, #0
 80036da:	641a      	str	r2, [r3, #64]	@ 0x40
    
    // Set direction to brake
    Motor_SetDirection(MOTOR_LEFT, MOTOR_BRAKE);
 80036dc:	2103      	movs	r1, #3
 80036de:	2000      	movs	r0, #0
 80036e0:	f7ff fe6e 	bl	80033c0 <Motor_SetDirection>
    Motor_SetDirection(MOTOR_RIGHT, MOTOR_BRAKE);
 80036e4:	2103      	movs	r1, #3
 80036e6:	2001      	movs	r0, #1
 80036e8:	f7ff fe6a 	bl	80033c0 <Motor_SetDirection>
    
    // Update current speeds
    current_speeds.left_speed = 0;
 80036ec:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <Motor_Brake+0x38>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	801a      	strh	r2, [r3, #0]
    current_speeds.right_speed = 0;
 80036f2:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <Motor_Brake+0x38>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	805a      	strh	r2, [r3, #2]
}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	200003d8 	.word	0x200003d8
 8003700:	200004e8 	.word	0x200004e8

08003704 <sqrtf>:
    sprintf(buffer, "PWM Resolution: %lu steps\r\n", PWM_MAX_VALUE + 1);
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

// Math functions (需要包含math.h或提供简单实现)
float sqrtf(float x) {
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x < 0) return 0;
 800370e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003712:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	d502      	bpl.n	8003722 <sqrtf+0x1e>
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e025      	b.n	800376e <sqrtf+0x6a>
    if (x == 0) return 0;
 8003722:	edd7 7a01 	vldr	s15, [r7, #4]
 8003726:	eef5 7a40 	vcmp.f32	s15, #0.0
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	d102      	bne.n	8003736 <sqrtf+0x32>
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	e01b      	b.n	800376e <sqrtf+0x6a>
    
    // 简单的牛顿法实现
    float result = x;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < 10; i++) {
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	e012      	b.n	8003766 <sqrtf+0x62>
        result = 0.5f * (result + x / result);
 8003740:	edd7 6a01 	vldr	s13, [r7, #4]
 8003744:	edd7 7a03 	vldr	s15, [r7, #12]
 8003748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003754:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800375c:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < 10; i++) {
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3301      	adds	r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b09      	cmp	r3, #9
 800376a:	dde9      	ble.n	8003740 <sqrtf+0x3c>
    }
    return result;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eeb0 0a67 	vmov.f32	s0, s15
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af04      	add	r7, sp, #16
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800378c:	230a      	movs	r3, #10
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	2301      	movs	r3, #1
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	1cfb      	adds	r3, r7, #3
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2301      	movs	r3, #1
 800379a:	2200      	movs	r2, #0
 800379c:	2178      	movs	r1, #120	@ 0x78
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f001 fb86 	bl	8004eb0 <HAL_I2C_Mem_Write>
 80037a4:	4603      	mov	r3, r0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80037b8:	2064      	movs	r0, #100	@ 0x64
 80037ba:	f000 feb7 	bl	800452c <HAL_Delay>
    int status = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80037c2:	21ae      	movs	r1, #174	@ 0xae
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ffdb 	bl	8003780 <ssd1306_WriteCommand>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80037d4:	2120      	movs	r1, #32
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffd2 	bl	8003780 <ssd1306_WriteCommand>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80037e6:	2110      	movs	r1, #16
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ffc9 	bl	8003780 <ssd1306_WriteCommand>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 80037f8:	21b0      	movs	r1, #176	@ 0xb0
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ffc0 	bl	8003780 <ssd1306_WriteCommand>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 800380a:	21c8      	movs	r1, #200	@ 0xc8
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ffb7 	bl	8003780 <ssd1306_WriteCommand>
 8003812:	4603      	mov	r3, r0
 8003814:	461a      	mov	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 800381c:	2100      	movs	r1, #0
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffae 	bl	8003780 <ssd1306_WriteCommand>
 8003824:	4603      	mov	r3, r0
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 800382e:	2110      	movs	r1, #16
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ffa5 	bl	8003780 <ssd1306_WriteCommand>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4413      	add	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8003840:	2140      	movs	r1, #64	@ 0x40
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff9c 	bl	8003780 <ssd1306_WriteCommand>
 8003848:	4603      	mov	r3, r0
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 8003852:	2181      	movs	r1, #129	@ 0x81
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff93 	bl	8003780 <ssd1306_WriteCommand>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 8003864:	21ff      	movs	r1, #255	@ 0xff
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff8a 	bl	8003780 <ssd1306_WriteCommand>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 8003876:	21a1      	movs	r1, #161	@ 0xa1
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff81 	bl	8003780 <ssd1306_WriteCommand>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 8003888:	21a6      	movs	r1, #166	@ 0xa6
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ff78 	bl	8003780 <ssd1306_WriteCommand>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 800389a:	21a8      	movs	r1, #168	@ 0xa8
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff6f 	bl	8003780 <ssd1306_WriteCommand>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80038ac:	213f      	movs	r1, #63	@ 0x3f
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff66 	bl	8003780 <ssd1306_WriteCommand>
 80038b4:	4603      	mov	r3, r0
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80038be:	21a4      	movs	r1, #164	@ 0xa4
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff5d 	bl	8003780 <ssd1306_WriteCommand>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80038d0:	21d3      	movs	r1, #211	@ 0xd3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff54 	bl	8003780 <ssd1306_WriteCommand>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80038e2:	2100      	movs	r1, #0
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff4b 	bl	8003780 <ssd1306_WriteCommand>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4413      	add	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 80038f4:	21d5      	movs	r1, #213	@ 0xd5
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ff42 	bl	8003780 <ssd1306_WriteCommand>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 8003906:	21f0      	movs	r1, #240	@ 0xf0
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff39 	bl	8003780 <ssd1306_WriteCommand>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8003918:	21d9      	movs	r1, #217	@ 0xd9
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff30 	bl	8003780 <ssd1306_WriteCommand>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 800392a:	2122      	movs	r1, #34	@ 0x22
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff27 	bl	8003780 <ssd1306_WriteCommand>
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 800393c:	21da      	movs	r1, #218	@ 0xda
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ff1e 	bl	8003780 <ssd1306_WriteCommand>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 800394e:	2112      	movs	r1, #18
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff ff15 	bl	8003780 <ssd1306_WriteCommand>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8003960:	21db      	movs	r1, #219	@ 0xdb
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ff0c 	bl	8003780 <ssd1306_WriteCommand>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 8003972:	2120      	movs	r1, #32
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff03 	bl	8003780 <ssd1306_WriteCommand>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4413      	add	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 8003984:	218d      	movs	r1, #141	@ 0x8d
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fefa 	bl	8003780 <ssd1306_WriteCommand>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 8003996:	2114      	movs	r1, #20
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff fef1 	bl	8003780 <ssd1306_WriteCommand>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4413      	add	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 80039a8:	21af      	movs	r1, #175	@ 0xaf
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fee8 	bl	8003780 <ssd1306_WriteCommand>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <ssd1306_Init+0x214>
        return 1;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e00f      	b.n	80039e4 <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80039c4:	2000      	movs	r0, #0
 80039c6:	f000 f813 	bl	80039f0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f834 	bl	8003a38 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80039d0:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <ssd1306_Init+0x23c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <ssd1306_Init+0x23c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80039dc:	4b03      	ldr	r3, [pc, #12]	@ (80039ec <ssd1306_Init+0x23c>)
 80039de:	2201      	movs	r2, #1
 80039e0:	715a      	strb	r2, [r3, #5]

    return 0;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000908 	.word	0x20000908

080039f0 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e00d      	b.n	8003a1c <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <ssd1306_Fill+0x1a>
 8003a06:	2100      	movs	r1, #0
 8003a08:	e000      	b.n	8003a0c <ssd1306_Fill+0x1c>
 8003a0a:	21ff      	movs	r1, #255	@ 0xff
 8003a0c:	4a09      	ldr	r2, [pc, #36]	@ (8003a34 <ssd1306_Fill+0x44>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	460a      	mov	r2, r1
 8003a14:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a22:	d3ed      	bcc.n	8003a00 <ssd1306_Fill+0x10>
    }
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000508 	.word	0x20000508

08003a38 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af04      	add	r7, sp, #16
 8003a3e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e020      	b.n	8003a88 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	3b50      	subs	r3, #80	@ 0x50
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7ff fe96 	bl	8003780 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8003a54:	2100      	movs	r1, #0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fe92 	bl	8003780 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8003a5c:	2110      	movs	r1, #16
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fe8e 	bl	8003780 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	01db      	lsls	r3, r3, #7
 8003a68:	4a0b      	ldr	r2, [pc, #44]	@ (8003a98 <ssd1306_UpdateScreen+0x60>)
 8003a6a:	4413      	add	r3, r2
 8003a6c:	2264      	movs	r2, #100	@ 0x64
 8003a6e:	9202      	str	r2, [sp, #8]
 8003a70:	2280      	movs	r2, #128	@ 0x80
 8003a72:	9201      	str	r2, [sp, #4]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2301      	movs	r3, #1
 8003a78:	2240      	movs	r2, #64	@ 0x40
 8003a7a:	2178      	movs	r1, #120	@ 0x78
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f001 fa17 	bl	8004eb0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	3301      	adds	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b07      	cmp	r3, #7
 8003a8c:	d9db      	bls.n	8003a46 <ssd1306_UpdateScreen+0xe>
    }
}
 8003a8e:	bf00      	nop
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000508 	.word	0x20000508

08003a9c <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	71bb      	strb	r3, [r7, #6]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db48      	blt.n	8003b48 <ssd1306_DrawPixel+0xac>
 8003ab6:	79bb      	ldrb	r3, [r7, #6]
 8003ab8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003aba:	d845      	bhi.n	8003b48 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8003abc:	4b25      	ldr	r3, [pc, #148]	@ (8003b54 <ssd1306_DrawPixel+0xb8>)
 8003abe:	791b      	ldrb	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8003ac4:	797b      	ldrb	r3, [r7, #5]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8003ad2:	797b      	ldrb	r3, [r7, #5]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d11a      	bne.n	8003b0e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003ad8:	79fa      	ldrb	r2, [r7, #7]
 8003ada:	79bb      	ldrb	r3, [r7, #6]
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	b2d8      	uxtb	r0, r3
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	01db      	lsls	r3, r3, #7
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b58 <ssd1306_DrawPixel+0xbc>)
 8003ae8:	5cd3      	ldrb	r3, [r2, r3]
 8003aea:	b25a      	sxtb	r2, r3
 8003aec:	79bb      	ldrb	r3, [r7, #6]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	2101      	movs	r1, #1
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	4313      	orrs	r3, r2
 8003afc:	b259      	sxtb	r1, r3
 8003afe:	79fa      	ldrb	r2, [r7, #7]
 8003b00:	4603      	mov	r3, r0
 8003b02:	01db      	lsls	r3, r3, #7
 8003b04:	4413      	add	r3, r2
 8003b06:	b2c9      	uxtb	r1, r1
 8003b08:	4a13      	ldr	r2, [pc, #76]	@ (8003b58 <ssd1306_DrawPixel+0xbc>)
 8003b0a:	54d1      	strb	r1, [r2, r3]
 8003b0c:	e01d      	b.n	8003b4a <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003b0e:	79fa      	ldrb	r2, [r7, #7]
 8003b10:	79bb      	ldrb	r3, [r7, #6]
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	b2d8      	uxtb	r0, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	01db      	lsls	r3, r3, #7
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003b58 <ssd1306_DrawPixel+0xbc>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	b25a      	sxtb	r2, r3
 8003b22:	79bb      	ldrb	r3, [r7, #6]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	2101      	movs	r1, #1
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	b25b      	sxtb	r3, r3
 8003b34:	4013      	ands	r3, r2
 8003b36:	b259      	sxtb	r1, r3
 8003b38:	79fa      	ldrb	r2, [r7, #7]
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	01db      	lsls	r3, r3, #7
 8003b3e:	4413      	add	r3, r2
 8003b40:	b2c9      	uxtb	r1, r1
 8003b42:	4a05      	ldr	r2, [pc, #20]	@ (8003b58 <ssd1306_DrawPixel+0xbc>)
 8003b44:	54d1      	strb	r1, [r2, r3]
 8003b46:	e000      	b.n	8003b4a <ssd1306_DrawPixel+0xae>
        return;
 8003b48:	bf00      	nop
    }
}
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	20000908 	.word	0x20000908
 8003b58:	20000508 	.word	0x20000508

08003b5c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b089      	sub	sp, #36	@ 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4604      	mov	r4, r0
 8003b64:	1d38      	adds	r0, r7, #4
 8003b66:	e880 0006 	stmia.w	r0, {r1, r2}
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4623      	mov	r3, r4
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	4613      	mov	r3, r2
 8003b72:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003b74:	4b38      	ldr	r3, [pc, #224]	@ (8003c58 <ssd1306_WriteChar+0xfc>)
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	793b      	ldrb	r3, [r7, #4]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b80:	dc06      	bgt.n	8003b90 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8003b82:	4b35      	ldr	r3, [pc, #212]	@ (8003c58 <ssd1306_WriteChar+0xfc>)
 8003b84:	885b      	ldrh	r3, [r3, #2]
 8003b86:	461a      	mov	r2, r3
 8003b88:	797b      	ldrb	r3, [r7, #5]
 8003b8a:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003b8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b8e:	dd01      	ble.n	8003b94 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e05c      	b.n	8003c4e <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	e04c      	b.n	8003c34 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	3b20      	subs	r3, #32
 8003ba0:	7979      	ldrb	r1, [r7, #5]
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	440b      	add	r3, r1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e034      	b.n	8003c24 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003bca:	4b23      	ldr	r3, [pc, #140]	@ (8003c58 <ssd1306_WriteChar+0xfc>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	b2d8      	uxtb	r0, r3
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c58 <ssd1306_WriteChar+0xfc>)
 8003bda:	885b      	ldrh	r3, [r3, #2]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	7bba      	ldrb	r2, [r7, #14]
 8003be8:	4619      	mov	r1, r3
 8003bea:	f7ff ff57 	bl	8003a9c <ssd1306_DrawPixel>
 8003bee:	e016      	b.n	8003c1e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	@ (8003c58 <ssd1306_WriteChar+0xfc>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	b2d8      	uxtb	r0, r3
 8003bfe:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <ssd1306_WriteChar+0xfc>)
 8003c00:	885b      	ldrh	r3, [r3, #2]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	b2d9      	uxtb	r1, r3
 8003c0c:	7bbb      	ldrb	r3, [r7, #14]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bf0c      	ite	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	2300      	movne	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f7ff ff3f 	bl	8003a9c <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3301      	adds	r3, #1
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	793b      	ldrb	r3, [r7, #4]
 8003c26:	461a      	mov	r2, r3
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d3c5      	bcc.n	8003bba <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	797b      	ldrb	r3, [r7, #5]
 8003c36:	461a      	mov	r2, r3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d3ad      	bcc.n	8003b9a <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <ssd1306_WriteChar+0xfc>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	793a      	ldrb	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <ssd1306_WriteChar+0xfc>)
 8003c4a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3724      	adds	r7, #36	@ 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000908 	.word	0x20000908

08003c5c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	1d38      	adds	r0, r7, #4
 8003c66:	e880 0006 	stmia.w	r0, {r1, r2}
 8003c6a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8003c6c:	e012      	b.n	8003c94 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	7818      	ldrb	r0, [r3, #0]
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	1d3a      	adds	r2, r7, #4
 8003c76:	ca06      	ldmia	r2, {r1, r2}
 8003c78:	f7ff ff70 	bl	8003b5c <ssd1306_WriteChar>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d002      	beq.n	8003c8e <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	e008      	b.n	8003ca0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
    while (*str)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e8      	bne.n	8003c6e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	71fb      	strb	r3, [r7, #7]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <ssd1306_SetCursor+0x2c>)
 8003cbe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003cc0:	79bb      	ldrb	r3, [r7, #6]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	4b03      	ldr	r3, [pc, #12]	@ (8003cd4 <ssd1306_SetCursor+0x2c>)
 8003cc6:	805a      	strh	r2, [r3, #2]
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	20000908 	.word	0x20000908

08003cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <HAL_MspInit+0x4c>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8003d24 <HAL_MspInit+0x4c>)
 8003ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cee:	4b0d      	ldr	r3, [pc, #52]	@ (8003d24 <HAL_MspInit+0x4c>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_MspInit+0x4c>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d02:	4a08      	ldr	r2, [pc, #32]	@ (8003d24 <HAL_MspInit+0x4c>)
 8003d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_MspInit+0x4c>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800

08003d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08c      	sub	sp, #48	@ 0x30
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a42      	ldr	r2, [pc, #264]	@ (8003e50 <HAL_I2C_MspInit+0x128>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d12c      	bne.n	8003da4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	4b41      	ldr	r3, [pc, #260]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d52:	4a40      	ldr	r2, [pc, #256]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d66:	23c0      	movs	r3, #192	@ 0xc0
 8003d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d6a:	2312      	movs	r3, #18
 8003d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d72:	2303      	movs	r3, #3
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d76:	2304      	movs	r3, #4
 8003d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	f107 031c 	add.w	r3, r7, #28
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4835      	ldr	r0, [pc, #212]	@ (8003e58 <HAL_I2C_MspInit+0x130>)
 8003d82:	f000 fd9b 	bl	80048bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	4b32      	ldr	r3, [pc, #200]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	4a31      	ldr	r2, [pc, #196]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003d90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d96:	4b2f      	ldr	r3, [pc, #188]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003da2:	e050      	b.n	8003e46 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2c      	ldr	r2, [pc, #176]	@ (8003e5c <HAL_I2C_MspInit+0x134>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d14b      	bne.n	8003e46 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	4b28      	ldr	r3, [pc, #160]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db6:	4a27      	ldr	r2, [pc, #156]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003db8:	f043 0304 	orr.w	r3, r3, #4
 8003dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dbe:	4b25      	ldr	r3, [pc, #148]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	4b21      	ldr	r3, [pc, #132]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	4a20      	ldr	r2, [pc, #128]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dda:	4b1e      	ldr	r3, [pc, #120]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dec:	2312      	movs	r3, #18
 8003dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df4:	2303      	movs	r3, #3
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003df8:	2304      	movs	r3, #4
 8003dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	4619      	mov	r1, r3
 8003e02:	4817      	ldr	r0, [pc, #92]	@ (8003e60 <HAL_I2C_MspInit+0x138>)
 8003e04:	f000 fd5a 	bl	80048bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e0e:	2312      	movs	r3, #18
 8003e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e16:	2303      	movs	r3, #3
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e1e:	f107 031c 	add.w	r3, r7, #28
 8003e22:	4619      	mov	r1, r3
 8003e24:	480f      	ldr	r0, [pc, #60]	@ (8003e64 <HAL_I2C_MspInit+0x13c>)
 8003e26:	f000 fd49 	bl	80048bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	4a08      	ldr	r2, [pc, #32]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003e34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_I2C_MspInit+0x12c>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
}
 8003e46:	bf00      	nop
 8003e48:	3730      	adds	r7, #48	@ 0x30
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40005400 	.word	0x40005400
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40005c00 	.word	0x40005c00
 8003e60:	40020800 	.word	0x40020800
 8003e64:	40020000 	.word	0x40020000

08003e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	@ 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e70:	f107 0314 	add.w	r3, r7, #20
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a19      	ldr	r2, [pc, #100]	@ (8003eec <HAL_SPI_MspInit+0x84>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d12b      	bne.n	8003ee2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <HAL_SPI_MspInit+0x88>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <HAL_SPI_MspInit+0x88>)
 8003e94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_SPI_MspInit+0x88>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <HAL_SPI_MspInit+0x88>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	4a10      	ldr	r2, [pc, #64]	@ (8003ef0 <HAL_SPI_MspInit+0x88>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef0 <HAL_SPI_MspInit+0x88>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003ec2:	23e0      	movs	r3, #224	@ 0xe0
 8003ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ed2:	2305      	movs	r3, #5
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed6:	f107 0314 	add.w	r3, r7, #20
 8003eda:	4619      	mov	r1, r3
 8003edc:	4805      	ldr	r0, [pc, #20]	@ (8003ef4 <HAL_SPI_MspInit+0x8c>)
 8003ede:	f000 fced 	bl	80048bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003ee2:	bf00      	nop
 8003ee4:	3728      	adds	r7, #40	@ 0x28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40013000 	.word	0x40013000
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40020000 	.word	0x40020000

08003ef8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a0e      	ldr	r2, [pc, #56]	@ (8003f40 <HAL_TIM_Base_MspInit+0x48>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d115      	bne.n	8003f36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <HAL_TIM_Base_MspInit+0x4c>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f12:	4a0c      	ldr	r2, [pc, #48]	@ (8003f44 <HAL_TIM_Base_MspInit+0x4c>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f44 <HAL_TIM_Base_MspInit+0x4c>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	2100      	movs	r1, #0
 8003f2a:	2019      	movs	r0, #25
 8003f2c:	f000 fbfd 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003f30:	2019      	movs	r0, #25
 8003f32:	f000 fc16 	bl	8004762 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 031c 	add.w	r3, r7, #28
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f68:	d12c      	bne.n	8003fc4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	4a3e      	ldr	r2, [pc, #248]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f74:	f043 0301 	orr.w	r3, r3, #1
 8003f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	4b38      	ldr	r3, [pc, #224]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	4a37      	ldr	r2, [pc, #220]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f96:	4b35      	ldr	r3, [pc, #212]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A1_Pin|Encoder_A2_Pin;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb6:	f107 031c 	add.w	r3, r7, #28
 8003fba:	4619      	mov	r1, r3
 8003fbc:	482c      	ldr	r0, [pc, #176]	@ (8004070 <HAL_TIM_Encoder_MspInit+0x128>)
 8003fbe:	f000 fc7d 	bl	80048bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003fc2:	e04e      	b.n	8004062 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8004074 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d149      	bne.n	8004062 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	4b26      	ldr	r3, [pc, #152]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	4a25      	ldr	r2, [pc, #148]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fde:	4b23      	ldr	r3, [pc, #140]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	4b1f      	ldr	r3, [pc, #124]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	4b18      	ldr	r3, [pc, #96]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	4a17      	ldr	r2, [pc, #92]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	6313      	str	r3, [r2, #48]	@ 0x30
 8004016:	4b15      	ldr	r3, [pc, #84]	@ (800406c <HAL_TIM_Encoder_MspInit+0x124>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_B1_Pin;
 8004022:	2340      	movs	r3, #64	@ 0x40
 8004024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	2300      	movs	r3, #0
 8004030:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004032:	2302      	movs	r3, #2
 8004034:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_B1_GPIO_Port, &GPIO_InitStruct);
 8004036:	f107 031c 	add.w	r3, r7, #28
 800403a:	4619      	mov	r1, r3
 800403c:	480e      	ldr	r0, [pc, #56]	@ (8004078 <HAL_TIM_Encoder_MspInit+0x130>)
 800403e:	f000 fc3d 	bl	80048bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_B2_Pin;
 8004042:	2320      	movs	r3, #32
 8004044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404e:	2300      	movs	r3, #0
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004052:	2302      	movs	r3, #2
 8004054:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_B2_GPIO_Port, &GPIO_InitStruct);
 8004056:	f107 031c 	add.w	r3, r7, #28
 800405a:	4619      	mov	r1, r3
 800405c:	4807      	ldr	r0, [pc, #28]	@ (800407c <HAL_TIM_Encoder_MspInit+0x134>)
 800405e:	f000 fc2d 	bl	80048bc <HAL_GPIO_Init>
}
 8004062:	bf00      	nop
 8004064:	3730      	adds	r7, #48	@ 0x30
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	40020000 	.word	0x40020000
 8004074:	40000400 	.word	0x40000400
 8004078:	40020800 	.word	0x40020800
 800407c:	40020400 	.word	0x40020400

08004080 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0b      	ldr	r2, [pc, #44]	@ (80040bc <HAL_TIM_PWM_MspInit+0x3c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10d      	bne.n	80040ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <HAL_TIM_PWM_MspInit+0x40>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	4a09      	ldr	r2, [pc, #36]	@ (80040c0 <HAL_TIM_PWM_MspInit+0x40>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a2:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <HAL_TIM_PWM_MspInit+0x40>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40000800 	.word	0x40000800
 80040c0:	40023800 	.word	0x40023800

080040c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040cc:	f107 030c 	add.w	r3, r7, #12
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a12      	ldr	r2, [pc, #72]	@ (800412c <HAL_TIM_MspPostInit+0x68>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d11e      	bne.n	8004124 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <HAL_TIM_MspPostInit+0x6c>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	4a10      	ldr	r2, [pc, #64]	@ (8004130 <HAL_TIM_MspPostInit+0x6c>)
 80040f0:	f043 0302 	orr.w	r3, r3, #2
 80040f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004130 <HAL_TIM_MspPostInit+0x6c>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8004102:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004108:	2302      	movs	r3, #2
 800410a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004114:	2302      	movs	r3, #2
 8004116:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	4619      	mov	r1, r3
 800411e:	4805      	ldr	r0, [pc, #20]	@ (8004134 <HAL_TIM_MspPostInit+0x70>)
 8004120:	f000 fbcc 	bl	80048bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004124:	bf00      	nop
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	40000800 	.word	0x40000800
 8004130:	40023800 	.word	0x40023800
 8004134:	40020400 	.word	0x40020400

08004138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004140:	f107 0314 	add.w	r3, r7, #20
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1d      	ldr	r2, [pc, #116]	@ (80041cc <HAL_UART_MspInit+0x94>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d134      	bne.n	80041c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	4b1c      	ldr	r3, [pc, #112]	@ (80041d0 <HAL_UART_MspInit+0x98>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	4a1b      	ldr	r2, [pc, #108]	@ (80041d0 <HAL_UART_MspInit+0x98>)
 8004164:	f043 0320 	orr.w	r3, r3, #32
 8004168:	6453      	str	r3, [r2, #68]	@ 0x44
 800416a:	4b19      	ldr	r3, [pc, #100]	@ (80041d0 <HAL_UART_MspInit+0x98>)
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <HAL_UART_MspInit+0x98>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	4a14      	ldr	r2, [pc, #80]	@ (80041d0 <HAL_UART_MspInit+0x98>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6313      	str	r3, [r2, #48]	@ 0x30
 8004186:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <HAL_UART_MspInit+0x98>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004192:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004198:	2302      	movs	r3, #2
 800419a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a0:	2303      	movs	r3, #3
 80041a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80041a4:	2308      	movs	r3, #8
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4619      	mov	r1, r3
 80041ae:	4809      	ldr	r0, [pc, #36]	@ (80041d4 <HAL_UART_MspInit+0x9c>)
 80041b0:	f000 fb84 	bl	80048bc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80041b4:	2200      	movs	r2, #0
 80041b6:	2100      	movs	r1, #0
 80041b8:	2047      	movs	r0, #71	@ 0x47
 80041ba:	f000 fab6 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80041be:	2047      	movs	r0, #71	@ 0x47
 80041c0:	f000 facf 	bl	8004762 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	@ 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40011400 	.word	0x40011400
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40020000 	.word	0x40020000

080041d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041dc:	bf00      	nop
 80041de:	e7fd      	b.n	80041dc <NMI_Handler+0x4>

080041e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041e4:	bf00      	nop
 80041e6:	e7fd      	b.n	80041e4 <HardFault_Handler+0x4>

080041e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <MemManage_Handler+0x4>

080041f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <BusFault_Handler+0x4>

080041f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <UsageFault_Handler+0x4>

08004200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800422e:	f000 f95d 	bl	80044ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}

08004236 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800423a:	2002      	movs	r0, #2
 800423c:	f000 fcdc 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}

08004244 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004248:	4802      	ldr	r0, [pc, #8]	@ (8004254 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800424a:	f002 feab 	bl	8006fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000300 	.word	0x20000300

08004258 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800425c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004260:	f000 fcca 	bl	8004bf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}

08004268 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800426c:	4802      	ldr	r0, [pc, #8]	@ (8004278 <USART6_IRQHandler+0x10>)
 800426e:	f003 fd95 	bl	8007d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000420 	.word	0x20000420

0800427c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return 1;
 8004280:	2301      	movs	r3, #1
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <_kill>:

int _kill(int pid, int sig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004296:	f005 faa7 	bl	80097e8 <__errno>
 800429a:	4603      	mov	r3, r0
 800429c:	2216      	movs	r2, #22
 800429e:	601a      	str	r2, [r3, #0]
  return -1;
 80042a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <_exit>:

void _exit (int status)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042b4:	f04f 31ff 	mov.w	r1, #4294967295
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ffe7 	bl	800428c <_kill>
  while (1) {}    /* Make sure we hang here */
 80042be:	bf00      	nop
 80042c0:	e7fd      	b.n	80042be <_exit+0x12>

080042c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e00a      	b.n	80042ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042d4:	f3af 8000 	nop.w
 80042d8:	4601      	mov	r1, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	60ba      	str	r2, [r7, #8]
 80042e0:	b2ca      	uxtb	r2, r1
 80042e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3301      	adds	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dbf0      	blt.n	80042d4 <_read+0x12>
  }

  return len;
 80042f2:	687b      	ldr	r3, [r7, #4]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004324:	605a      	str	r2, [r3, #4]
  return 0;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <_isatty>:

int _isatty(int file)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800433c:	2301      	movs	r3, #1
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800436c:	4a14      	ldr	r2, [pc, #80]	@ (80043c0 <_sbrk+0x5c>)
 800436e:	4b15      	ldr	r3, [pc, #84]	@ (80043c4 <_sbrk+0x60>)
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004378:	4b13      	ldr	r3, [pc, #76]	@ (80043c8 <_sbrk+0x64>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004380:	4b11      	ldr	r3, [pc, #68]	@ (80043c8 <_sbrk+0x64>)
 8004382:	4a12      	ldr	r2, [pc, #72]	@ (80043cc <_sbrk+0x68>)
 8004384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004386:	4b10      	ldr	r3, [pc, #64]	@ (80043c8 <_sbrk+0x64>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4413      	add	r3, r2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	429a      	cmp	r2, r3
 8004392:	d207      	bcs.n	80043a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004394:	f005 fa28 	bl	80097e8 <__errno>
 8004398:	4603      	mov	r3, r0
 800439a:	220c      	movs	r2, #12
 800439c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	e009      	b.n	80043b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043a4:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <_sbrk+0x64>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043aa:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <_sbrk+0x64>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	4a05      	ldr	r2, [pc, #20]	@ (80043c8 <_sbrk+0x64>)
 80043b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043b6:	68fb      	ldr	r3, [r7, #12]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20018000 	.word	0x20018000
 80043c4:	00000400 	.word	0x00000400
 80043c8:	20000910 	.word	0x20000910
 80043cc:	20000a68 	.word	0x20000a68

080043d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043d4:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <SystemInit+0x20>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	4a05      	ldr	r2, [pc, #20]	@ (80043f0 <SystemInit+0x20>)
 80043dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80043e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80043f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800442c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80043f8:	f7ff ffea 	bl	80043d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043fc:	480c      	ldr	r0, [pc, #48]	@ (8004430 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043fe:	490d      	ldr	r1, [pc, #52]	@ (8004434 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004400:	4a0d      	ldr	r2, [pc, #52]	@ (8004438 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004404:	e002      	b.n	800440c <LoopCopyDataInit>

08004406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800440a:	3304      	adds	r3, #4

0800440c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800440c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800440e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004410:	d3f9      	bcc.n	8004406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004412:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004414:	4c0a      	ldr	r4, [pc, #40]	@ (8004440 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004418:	e001      	b.n	800441e <LoopFillZerobss>

0800441a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800441a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800441c:	3204      	adds	r2, #4

0800441e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800441e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004420:	d3fb      	bcc.n	800441a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8004422:	f005 f9e7 	bl	80097f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004426:	f7fc feb3 	bl	8001190 <main>
  bx  lr    
 800442a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800442c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004434:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004438:	0800d558 	.word	0x0800d558
  ldr r2, =_sbss
 800443c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004440:	20000a64 	.word	0x20000a64

08004444 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004444:	e7fe      	b.n	8004444 <ADC_IRQHandler>
	...

08004448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800444c:	4b0e      	ldr	r3, [pc, #56]	@ (8004488 <HAL_Init+0x40>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <HAL_Init+0x40>)
 8004452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004456:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004458:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_Init+0x40>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0a      	ldr	r2, [pc, #40]	@ (8004488 <HAL_Init+0x40>)
 800445e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004462:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004464:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <HAL_Init+0x40>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a07      	ldr	r2, [pc, #28]	@ (8004488 <HAL_Init+0x40>)
 800446a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800446e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004470:	2003      	movs	r0, #3
 8004472:	f000 f94f 	bl	8004714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004476:	200f      	movs	r0, #15
 8004478:	f000 f808 	bl	800448c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800447c:	f7ff fc2c 	bl	8003cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023c00 	.word	0x40023c00

0800448c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004494:	4b12      	ldr	r3, [pc, #72]	@ (80044e0 <HAL_InitTick+0x54>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <HAL_InitTick+0x58>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	4619      	mov	r1, r3
 800449e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f967 	bl	800477e <HAL_SYSTICK_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e00e      	b.n	80044d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d80a      	bhi.n	80044d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044c0:	2200      	movs	r2, #0
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	f000 f92f 	bl	800472a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044cc:	4a06      	ldr	r2, [pc, #24]	@ (80044e8 <HAL_InitTick+0x5c>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000010 	.word	0x20000010
 80044e4:	20000018 	.word	0x20000018
 80044e8:	20000014 	.word	0x20000014

080044ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <HAL_IncTick+0x20>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <HAL_IncTick+0x24>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	4a04      	ldr	r2, [pc, #16]	@ (8004510 <HAL_IncTick+0x24>)
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000018 	.word	0x20000018
 8004510:	20000914 	.word	0x20000914

08004514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return uwTick;
 8004518:	4b03      	ldr	r3, [pc, #12]	@ (8004528 <HAL_GetTick+0x14>)
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000914 	.word	0x20000914

0800452c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004534:	f7ff ffee 	bl	8004514 <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d005      	beq.n	8004552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004546:	4b0a      	ldr	r3, [pc, #40]	@ (8004570 <HAL_Delay+0x44>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004552:	bf00      	nop
 8004554:	f7ff ffde 	bl	8004514 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d8f7      	bhi.n	8004554 <HAL_Delay+0x28>
  {
  }
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000018 	.word	0x20000018

08004574 <__NVIC_SetPriorityGrouping>:
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004584:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004590:	4013      	ands	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800459c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045a6:	4a04      	ldr	r2, [pc, #16]	@ (80045b8 <__NVIC_SetPriorityGrouping+0x44>)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	60d3      	str	r3, [r2, #12]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <__NVIC_GetPriorityGrouping>:
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c0:	4b04      	ldr	r3, [pc, #16]	@ (80045d4 <__NVIC_GetPriorityGrouping+0x18>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	f003 0307 	and.w	r3, r3, #7
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000ed00 	.word	0xe000ed00

080045d8 <__NVIC_EnableIRQ>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	db0b      	blt.n	8004602 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	f003 021f 	and.w	r2, r3, #31
 80045f0:	4907      	ldr	r1, [pc, #28]	@ (8004610 <__NVIC_EnableIRQ+0x38>)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2001      	movs	r0, #1
 80045fa:	fa00 f202 	lsl.w	r2, r0, r2
 80045fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	e000e100 	.word	0xe000e100

08004614 <__NVIC_SetPriority>:
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004624:	2b00      	cmp	r3, #0
 8004626:	db0a      	blt.n	800463e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	490c      	ldr	r1, [pc, #48]	@ (8004660 <__NVIC_SetPriority+0x4c>)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	0112      	lsls	r2, r2, #4
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	440b      	add	r3, r1
 8004638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800463c:	e00a      	b.n	8004654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4908      	ldr	r1, [pc, #32]	@ (8004664 <__NVIC_SetPriority+0x50>)
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	3b04      	subs	r3, #4
 800464c:	0112      	lsls	r2, r2, #4
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	440b      	add	r3, r1
 8004652:	761a      	strb	r2, [r3, #24]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000e100 	.word	0xe000e100
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <NVIC_EncodePriority>:
{
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	@ 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f1c3 0307 	rsb	r3, r3, #7
 8004682:	2b04      	cmp	r3, #4
 8004684:	bf28      	it	cs
 8004686:	2304      	movcs	r3, #4
 8004688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3304      	adds	r3, #4
 800468e:	2b06      	cmp	r3, #6
 8004690:	d902      	bls.n	8004698 <NVIC_EncodePriority+0x30>
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3b03      	subs	r3, #3
 8004696:	e000      	b.n	800469a <NVIC_EncodePriority+0x32>
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43da      	mvns	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	401a      	ands	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b0:	f04f 31ff 	mov.w	r1, #4294967295
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ba:	43d9      	mvns	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c0:	4313      	orrs	r3, r2
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3724      	adds	r7, #36	@ 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <SysTick_Config>:
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3b01      	subs	r3, #1
 80046dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046e0:	d301      	bcc.n	80046e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80046e2:	2301      	movs	r3, #1
 80046e4:	e00f      	b.n	8004706 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004710 <SysTick_Config+0x40>)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ee:	210f      	movs	r1, #15
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	f7ff ff8e 	bl	8004614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f8:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <SysTick_Config+0x40>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046fe:	4b04      	ldr	r3, [pc, #16]	@ (8004710 <SysTick_Config+0x40>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	e000e010 	.word	0xe000e010

08004714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff ff29 	bl	8004574 <__NVIC_SetPriorityGrouping>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800473c:	f7ff ff3e 	bl	80045bc <__NVIC_GetPriorityGrouping>
 8004740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	6978      	ldr	r0, [r7, #20]
 8004748:	f7ff ff8e 	bl	8004668 <NVIC_EncodePriority>
 800474c:	4602      	mov	r2, r0
 800474e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff5d 	bl	8004614 <__NVIC_SetPriority>
}
 800475a:	bf00      	nop
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	4603      	mov	r3, r0
 800476a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800476c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff31 	bl	80045d8 <__NVIC_EnableIRQ>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ffa2 	bl	80046d0 <SysTick_Config>
 800478c:	4603      	mov	r3, r0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff feb6 	bl	8004514 <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d008      	beq.n	80047c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2280      	movs	r2, #128	@ 0x80
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e052      	b.n	800486e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0216 	bic.w	r2, r2, #22
 80047d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d103      	bne.n	80047f8 <HAL_DMA_Abort+0x62>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0208 	bic.w	r2, r2, #8
 8004806:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004818:	e013      	b.n	8004842 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800481a:	f7ff fe7b 	bl	8004514 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b05      	cmp	r3, #5
 8004826:	d90c      	bls.n	8004842 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2203      	movs	r2, #3
 8004832:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e015      	b.n	800486e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e4      	bne.n	800481a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004854:	223f      	movs	r2, #63	@ 0x3f
 8004856:	409a      	lsls	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d004      	beq.n	8004894 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2280      	movs	r2, #128	@ 0x80
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e00c      	b.n	80048ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2205      	movs	r2, #5
 8004898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	@ 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	e159      	b.n	8004b8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048d8:	2201      	movs	r2, #1
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	f040 8148 	bne.w	8004b86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d005      	beq.n	800490e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800490a:	2b02      	cmp	r3, #2
 800490c:	d130      	bne.n	8004970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004944:	2201      	movs	r2, #1
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 0201 	and.w	r2, r3, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b03      	cmp	r3, #3
 800497a:	d017      	beq.n	80049ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2203      	movs	r2, #3
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d123      	bne.n	8004a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	08da      	lsrs	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3208      	adds	r2, #8
 80049c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	220f      	movs	r2, #15
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	08da      	lsrs	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3208      	adds	r2, #8
 80049fa:	69b9      	ldr	r1, [r7, #24]
 80049fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 0203 	and.w	r2, r3, #3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a2 	beq.w	8004b86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	4b57      	ldr	r3, [pc, #348]	@ (8004ba4 <HAL_GPIO_Init+0x2e8>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	4a56      	ldr	r2, [pc, #344]	@ (8004ba4 <HAL_GPIO_Init+0x2e8>)
 8004a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a52:	4b54      	ldr	r3, [pc, #336]	@ (8004ba4 <HAL_GPIO_Init+0x2e8>)
 8004a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a5e:	4a52      	ldr	r2, [pc, #328]	@ (8004ba8 <HAL_GPIO_Init+0x2ec>)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	3302      	adds	r3, #2
 8004a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	220f      	movs	r2, #15
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a49      	ldr	r2, [pc, #292]	@ (8004bac <HAL_GPIO_Init+0x2f0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d019      	beq.n	8004abe <HAL_GPIO_Init+0x202>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a48      	ldr	r2, [pc, #288]	@ (8004bb0 <HAL_GPIO_Init+0x2f4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_GPIO_Init+0x1fe>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a47      	ldr	r2, [pc, #284]	@ (8004bb4 <HAL_GPIO_Init+0x2f8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00d      	beq.n	8004ab6 <HAL_GPIO_Init+0x1fa>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a46      	ldr	r2, [pc, #280]	@ (8004bb8 <HAL_GPIO_Init+0x2fc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <HAL_GPIO_Init+0x1f6>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a45      	ldr	r2, [pc, #276]	@ (8004bbc <HAL_GPIO_Init+0x300>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_GPIO_Init+0x1f2>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	e008      	b.n	8004ac0 <HAL_GPIO_Init+0x204>
 8004aae:	2307      	movs	r3, #7
 8004ab0:	e006      	b.n	8004ac0 <HAL_GPIO_Init+0x204>
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e004      	b.n	8004ac0 <HAL_GPIO_Init+0x204>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e002      	b.n	8004ac0 <HAL_GPIO_Init+0x204>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e000      	b.n	8004ac0 <HAL_GPIO_Init+0x204>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	f002 0203 	and.w	r2, r2, #3
 8004ac6:	0092      	lsls	r2, r2, #2
 8004ac8:	4093      	lsls	r3, r2
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ad0:	4935      	ldr	r1, [pc, #212]	@ (8004ba8 <HAL_GPIO_Init+0x2ec>)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	3302      	adds	r3, #2
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ade:	4b38      	ldr	r3, [pc, #224]	@ (8004bc0 <HAL_GPIO_Init+0x304>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4013      	ands	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b02:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc0 <HAL_GPIO_Init+0x304>)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b08:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc0 <HAL_GPIO_Init+0x304>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b2c:	4a24      	ldr	r2, [pc, #144]	@ (8004bc0 <HAL_GPIO_Init+0x304>)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b32:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <HAL_GPIO_Init+0x304>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b56:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc0 <HAL_GPIO_Init+0x304>)
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b5c:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <HAL_GPIO_Init+0x304>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b80:	4a0f      	ldr	r2, [pc, #60]	@ (8004bc0 <HAL_GPIO_Init+0x304>)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	61fb      	str	r3, [r7, #28]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	f67f aea2 	bls.w	80048d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	3724      	adds	r7, #36	@ 0x24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40013800 	.word	0x40013800
 8004bac:	40020000 	.word	0x40020000
 8004bb0:	40020400 	.word	0x40020400
 8004bb4:	40020800 	.word	0x40020800
 8004bb8:	40020c00 	.word	0x40020c00
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	40013c00 	.word	0x40013c00

08004bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd4:	787b      	ldrb	r3, [r7, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004be0:	e003      	b.n	8004bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	041a      	lsls	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	619a      	str	r2, [r3, #24]
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c02:	4b08      	ldr	r3, [pc, #32]	@ (8004c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d006      	beq.n	8004c1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c0e:	4a05      	ldr	r2, [pc, #20]	@ (8004c24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c10:	88fb      	ldrh	r3, [r7, #6]
 8004c12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fc fa86 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40013c00 	.word	0x40013c00

08004c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e12b      	b.n	8004e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff f86a 	bl	8003d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	@ 0x24
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c8c:	f001 f8aa 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 8004c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4a81      	ldr	r2, [pc, #516]	@ (8004e9c <HAL_I2C_Init+0x274>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d807      	bhi.n	8004cac <HAL_I2C_Init+0x84>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4a80      	ldr	r2, [pc, #512]	@ (8004ea0 <HAL_I2C_Init+0x278>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	bf94      	ite	ls
 8004ca4:	2301      	movls	r3, #1
 8004ca6:	2300      	movhi	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	e006      	b.n	8004cba <HAL_I2C_Init+0x92>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a7d      	ldr	r2, [pc, #500]	@ (8004ea4 <HAL_I2C_Init+0x27c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	bf94      	ite	ls
 8004cb4:	2301      	movls	r3, #1
 8004cb6:	2300      	movhi	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e0e7      	b.n	8004e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a78      	ldr	r2, [pc, #480]	@ (8004ea8 <HAL_I2C_Init+0x280>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	0c9b      	lsrs	r3, r3, #18
 8004ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8004e9c <HAL_I2C_Init+0x274>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d802      	bhi.n	8004cfc <HAL_I2C_Init+0xd4>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	e009      	b.n	8004d10 <HAL_I2C_Init+0xe8>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	4a69      	ldr	r2, [pc, #420]	@ (8004eac <HAL_I2C_Init+0x284>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	099b      	lsrs	r3, r3, #6
 8004d0e:	3301      	adds	r3, #1
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	495c      	ldr	r1, [pc, #368]	@ (8004e9c <HAL_I2C_Init+0x274>)
 8004d2c:	428b      	cmp	r3, r1
 8004d2e:	d819      	bhi.n	8004d64 <HAL_I2C_Init+0x13c>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e59      	subs	r1, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d3e:	1c59      	adds	r1, r3, #1
 8004d40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d44:	400b      	ands	r3, r1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_I2C_Init+0x138>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1e59      	subs	r1, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d58:	3301      	adds	r3, #1
 8004d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5e:	e051      	b.n	8004e04 <HAL_I2C_Init+0x1dc>
 8004d60:	2304      	movs	r3, #4
 8004d62:	e04f      	b.n	8004e04 <HAL_I2C_Init+0x1dc>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d111      	bne.n	8004d90 <HAL_I2C_Init+0x168>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	1e58      	subs	r0, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6859      	ldr	r1, [r3, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	440b      	add	r3, r1
 8004d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e012      	b.n	8004db6 <HAL_I2C_Init+0x18e>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1e58      	subs	r0, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6859      	ldr	r1, [r3, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	0099      	lsls	r1, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004da6:	3301      	adds	r3, #1
 8004da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bf0c      	ite	eq
 8004db0:	2301      	moveq	r3, #1
 8004db2:	2300      	movne	r3, #0
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_I2C_Init+0x196>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e022      	b.n	8004e04 <HAL_I2C_Init+0x1dc>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10e      	bne.n	8004de4 <HAL_I2C_Init+0x1bc>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1e58      	subs	r0, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6859      	ldr	r1, [r3, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	440b      	add	r3, r1
 8004dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004de2:	e00f      	b.n	8004e04 <HAL_I2C_Init+0x1dc>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1e58      	subs	r0, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	0099      	lsls	r1, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	6809      	ldr	r1, [r1, #0]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6911      	ldr	r1, [r2, #16]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	68d2      	ldr	r2, [r2, #12]
 8004e3e:	4311      	orrs	r1, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	430b      	orrs	r3, r1
 8004e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	000186a0 	.word	0x000186a0
 8004ea0:	001e847f 	.word	0x001e847f
 8004ea4:	003d08ff 	.word	0x003d08ff
 8004ea8:	431bde83 	.word	0x431bde83
 8004eac:	10624dd3 	.word	0x10624dd3

08004eb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	817b      	strh	r3, [r7, #10]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	813b      	strh	r3, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eca:	f7ff fb23 	bl	8004514 <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	f040 80d9 	bne.w	8005090 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2319      	movs	r3, #25
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	496d      	ldr	r1, [pc, #436]	@ (800509c <HAL_I2C_Mem_Write+0x1ec>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f971 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0cc      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_I2C_Mem_Write+0x56>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0c5      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d007      	beq.n	8004f2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2221      	movs	r2, #33	@ 0x21
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2240      	movs	r2, #64	@ 0x40
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80050a0 <HAL_I2C_Mem_Write+0x1f0>)
 8004f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f6e:	88f8      	ldrh	r0, [r7, #6]
 8004f70:	893a      	ldrh	r2, [r7, #8]
 8004f72:	8979      	ldrh	r1, [r7, #10]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f890 	bl	80050a4 <I2C_RequestMemoryWrite>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d052      	beq.n	8005030 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e081      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa36 	bl	8005404 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00d      	beq.n	8004fba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d107      	bne.n	8004fb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e06b      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	781a      	ldrb	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d11b      	bne.n	8005030 <HAL_I2C_Mem_Write+0x180>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d017      	beq.n	8005030 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	781a      	ldrb	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1aa      	bne.n	8004f8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fa29 	bl	8005494 <I2C_WaitOnBTFFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00d      	beq.n	8005064 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	2b04      	cmp	r3, #4
 800504e:	d107      	bne.n	8005060 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e016      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	00100002 	.word	0x00100002
 80050a0:	ffff0000 	.word	0xffff0000

080050a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	461a      	mov	r2, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	817b      	strh	r3, [r7, #10]
 80050b6:	460b      	mov	r3, r1
 80050b8:	813b      	strh	r3, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f878 	bl	80051d0 <I2C_WaitOnFlagUntilTimeout>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050f4:	d103      	bne.n	80050fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e05f      	b.n	80051c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	492d      	ldr	r1, [pc, #180]	@ (80051cc <I2C_RequestMemoryWrite+0x128>)
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f8d3 	bl	80052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e04c      	b.n	80051c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800513e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005140:	6a39      	ldr	r1, [r7, #32]
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f95e 	bl	8005404 <I2C_WaitOnTXEFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	2b04      	cmp	r3, #4
 8005154:	d107      	bne.n	8005166 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e02b      	b.n	80051c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d105      	bne.n	800517c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005170:	893b      	ldrh	r3, [r7, #8]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]
 800517a:	e021      	b.n	80051c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800517c:	893b      	ldrh	r3, [r7, #8]
 800517e:	0a1b      	lsrs	r3, r3, #8
 8005180:	b29b      	uxth	r3, r3
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518c:	6a39      	ldr	r1, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f938 	bl	8005404 <I2C_WaitOnTXEFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00d      	beq.n	80051b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d107      	bne.n	80051b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e005      	b.n	80051c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b6:	893b      	ldrh	r3, [r7, #8]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	00010002 	.word	0x00010002

080051d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e0:	e048      	b.n	8005274 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d044      	beq.n	8005274 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ea:	f7ff f993 	bl	8004514 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d302      	bcc.n	8005200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d139      	bne.n	8005274 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	0c1b      	lsrs	r3, r3, #16
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10d      	bne.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x56>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	43da      	mvns	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	e00c      	b.n	8005240 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	43da      	mvns	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	429a      	cmp	r2, r3
 8005244:	d116      	bne.n	8005274 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e023      	b.n	80052bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10d      	bne.n	800529a <I2C_WaitOnFlagUntilTimeout+0xca>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	43da      	mvns	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	e00c      	b.n	80052b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	43da      	mvns	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	4013      	ands	r3, r2
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d093      	beq.n	80051e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d2:	e071      	b.n	80053b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052e2:	d123      	bne.n	800532c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	f043 0204 	orr.w	r2, r3, #4
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e067      	b.n	80053fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d041      	beq.n	80053b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005334:	f7ff f8ee 	bl	8004514 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d136      	bne.n	80053b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	0c1b      	lsrs	r3, r3, #16
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d10c      	bne.n	800536e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	43da      	mvns	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	bf14      	ite	ne
 8005366:	2301      	movne	r3, #1
 8005368:	2300      	moveq	r3, #0
 800536a:	b2db      	uxtb	r3, r3
 800536c:	e00b      	b.n	8005386 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	43da      	mvns	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e021      	b.n	80053fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10c      	bne.n	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	43da      	mvns	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	4013      	ands	r3, r2
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e00b      	b.n	80053f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	43da      	mvns	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f47f af6d 	bne.w	80052d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005410:	e034      	b.n	800547c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f886 	bl	8005524 <I2C_IsAcknowledgeFailed>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e034      	b.n	800548c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d028      	beq.n	800547c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7ff f873 	bl	8004514 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11d      	bne.n	800547c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800544a:	2b80      	cmp	r3, #128	@ 0x80
 800544c:	d016      	beq.n	800547c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e007      	b.n	800548c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b80      	cmp	r3, #128	@ 0x80
 8005488:	d1c3      	bne.n	8005412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054a0:	e034      	b.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f83e 	bl	8005524 <I2C_IsAcknowledgeFailed>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e034      	b.n	800551c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d028      	beq.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7ff f82b 	bl	8004514 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d11d      	bne.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d016      	beq.n	800550c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e007      	b.n	800551c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b04      	cmp	r3, #4
 8005518:	d1c3      	bne.n	80054a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800553a:	d11b      	bne.n	8005574 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005544:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005560:	f043 0204 	orr.w	r2, r3, #4
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e267      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d075      	beq.n	800568e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055a2:	4b88      	ldr	r3, [pc, #544]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d00c      	beq.n	80055c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ae:	4b85      	ldr	r3, [pc, #532]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d112      	bne.n	80055e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ba:	4b82      	ldr	r3, [pc, #520]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055c6:	d10b      	bne.n	80055e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c8:	4b7e      	ldr	r3, [pc, #504]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d05b      	beq.n	800568c <HAL_RCC_OscConfig+0x108>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d157      	bne.n	800568c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e242      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e8:	d106      	bne.n	80055f8 <HAL_RCC_OscConfig+0x74>
 80055ea:	4b76      	ldr	r3, [pc, #472]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a75      	ldr	r2, [pc, #468]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80055f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	e01d      	b.n	8005634 <HAL_RCC_OscConfig+0xb0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005600:	d10c      	bne.n	800561c <HAL_RCC_OscConfig+0x98>
 8005602:	4b70      	ldr	r3, [pc, #448]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a6f      	ldr	r2, [pc, #444]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4b6d      	ldr	r3, [pc, #436]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6c      	ldr	r2, [pc, #432]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e00b      	b.n	8005634 <HAL_RCC_OscConfig+0xb0>
 800561c:	4b69      	ldr	r3, [pc, #420]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a68      	ldr	r2, [pc, #416]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	4b66      	ldr	r3, [pc, #408]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a65      	ldr	r2, [pc, #404]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 800562e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d013      	beq.n	8005664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fe ff6a 	bl	8004514 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005644:	f7fe ff66 	bl	8004514 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b64      	cmp	r3, #100	@ 0x64
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e207      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005656:	4b5b      	ldr	r3, [pc, #364]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCC_OscConfig+0xc0>
 8005662:	e014      	b.n	800568e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005664:	f7fe ff56 	bl	8004514 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800566c:	f7fe ff52 	bl	8004514 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b64      	cmp	r3, #100	@ 0x64
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e1f3      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800567e:	4b51      	ldr	r3, [pc, #324]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0xe8>
 800568a:	e000      	b.n	800568e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800568c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d063      	beq.n	8005762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800569a:	4b4a      	ldr	r3, [pc, #296]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 030c 	and.w	r3, r3, #12
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056a6:	4b47      	ldr	r3, [pc, #284]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d11c      	bne.n	80056ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056b2:	4b44      	ldr	r3, [pc, #272]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d116      	bne.n	80056ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056be:	4b41      	ldr	r3, [pc, #260]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_RCC_OscConfig+0x152>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d001      	beq.n	80056d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e1c7      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d6:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	4937      	ldr	r1, [pc, #220]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ea:	e03a      	b.n	8005762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d020      	beq.n	8005736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056f4:	4b34      	ldr	r3, [pc, #208]	@ (80057c8 <HAL_RCC_OscConfig+0x244>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fa:	f7fe ff0b 	bl	8004514 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005702:	f7fe ff07 	bl	8004514 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e1a8      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005714:	4b2b      	ldr	r3, [pc, #172]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005720:	4b28      	ldr	r3, [pc, #160]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4925      	ldr	r1, [pc, #148]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005730:	4313      	orrs	r3, r2
 8005732:	600b      	str	r3, [r1, #0]
 8005734:	e015      	b.n	8005762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005736:	4b24      	ldr	r3, [pc, #144]	@ (80057c8 <HAL_RCC_OscConfig+0x244>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fe feea 	bl	8004514 <HAL_GetTick>
 8005740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005744:	f7fe fee6 	bl	8004514 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e187      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005756:	4b1b      	ldr	r3, [pc, #108]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f0      	bne.n	8005744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d036      	beq.n	80057dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005776:	4b15      	ldr	r3, [pc, #84]	@ (80057cc <HAL_RCC_OscConfig+0x248>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fe feca 	bl	8004514 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005784:	f7fe fec6 	bl	8004514 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e167      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005796:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <HAL_RCC_OscConfig+0x240>)
 8005798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x200>
 80057a2:	e01b      	b.n	80057dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a4:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <HAL_RCC_OscConfig+0x248>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057aa:	f7fe feb3 	bl	8004514 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b0:	e00e      	b.n	80057d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b2:	f7fe feaf 	bl	8004514 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d907      	bls.n	80057d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e150      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
 80057c4:	40023800 	.word	0x40023800
 80057c8:	42470000 	.word	0x42470000
 80057cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d0:	4b88      	ldr	r3, [pc, #544]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 80057d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1ea      	bne.n	80057b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8097 	beq.w	8005918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ee:	4b81      	ldr	r3, [pc, #516]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10f      	bne.n	800581a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057fa:	2300      	movs	r3, #0
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	4b7d      	ldr	r3, [pc, #500]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	4a7c      	ldr	r2, [pc, #496]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005808:	6413      	str	r3, [r2, #64]	@ 0x40
 800580a:	4b7a      	ldr	r3, [pc, #488]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800581a:	4b77      	ldr	r3, [pc, #476]	@ (80059f8 <HAL_RCC_OscConfig+0x474>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d118      	bne.n	8005858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005826:	4b74      	ldr	r3, [pc, #464]	@ (80059f8 <HAL_RCC_OscConfig+0x474>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a73      	ldr	r2, [pc, #460]	@ (80059f8 <HAL_RCC_OscConfig+0x474>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005832:	f7fe fe6f 	bl	8004514 <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583a:	f7fe fe6b 	bl	8004514 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e10c      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584c:	4b6a      	ldr	r3, [pc, #424]	@ (80059f8 <HAL_RCC_OscConfig+0x474>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d106      	bne.n	800586e <HAL_RCC_OscConfig+0x2ea>
 8005860:	4b64      	ldr	r3, [pc, #400]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005864:	4a63      	ldr	r2, [pc, #396]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6713      	str	r3, [r2, #112]	@ 0x70
 800586c:	e01c      	b.n	80058a8 <HAL_RCC_OscConfig+0x324>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b05      	cmp	r3, #5
 8005874:	d10c      	bne.n	8005890 <HAL_RCC_OscConfig+0x30c>
 8005876:	4b5f      	ldr	r3, [pc, #380]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	4a5e      	ldr	r2, [pc, #376]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 800587c:	f043 0304 	orr.w	r3, r3, #4
 8005880:	6713      	str	r3, [r2, #112]	@ 0x70
 8005882:	4b5c      	ldr	r3, [pc, #368]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005886:	4a5b      	ldr	r2, [pc, #364]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6713      	str	r3, [r2, #112]	@ 0x70
 800588e:	e00b      	b.n	80058a8 <HAL_RCC_OscConfig+0x324>
 8005890:	4b58      	ldr	r3, [pc, #352]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005894:	4a57      	ldr	r2, [pc, #348]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	6713      	str	r3, [r2, #112]	@ 0x70
 800589c:	4b55      	ldr	r3, [pc, #340]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 800589e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a0:	4a54      	ldr	r2, [pc, #336]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 80058a2:	f023 0304 	bic.w	r3, r3, #4
 80058a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d015      	beq.n	80058dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fe fe30 	bl	8004514 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058b8:	f7fe fe2c 	bl	8004514 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e0cb      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ce:	4b49      	ldr	r3, [pc, #292]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0ee      	beq.n	80058b8 <HAL_RCC_OscConfig+0x334>
 80058da:	e014      	b.n	8005906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058dc:	f7fe fe1a 	bl	8004514 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e2:	e00a      	b.n	80058fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7fe fe16 	bl	8004514 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e0b5      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058fa:	4b3e      	ldr	r3, [pc, #248]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1ee      	bne.n	80058e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d105      	bne.n	8005918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590c:	4b39      	ldr	r3, [pc, #228]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005910:	4a38      	ldr	r2, [pc, #224]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005916:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80a1 	beq.w	8005a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005922:	4b34      	ldr	r3, [pc, #208]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 030c 	and.w	r3, r3, #12
 800592a:	2b08      	cmp	r3, #8
 800592c:	d05c      	beq.n	80059e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b02      	cmp	r3, #2
 8005934:	d141      	bne.n	80059ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005936:	4b31      	ldr	r3, [pc, #196]	@ (80059fc <HAL_RCC_OscConfig+0x478>)
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593c:	f7fe fdea 	bl	8004514 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005944:	f7fe fde6 	bl	8004514 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e087      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005956:	4b27      	ldr	r3, [pc, #156]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f0      	bne.n	8005944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	019b      	lsls	r3, r3, #6
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	3b01      	subs	r3, #1
 800597c:	041b      	lsls	r3, r3, #16
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	061b      	lsls	r3, r3, #24
 8005986:	491b      	ldr	r1, [pc, #108]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598c:	4b1b      	ldr	r3, [pc, #108]	@ (80059fc <HAL_RCC_OscConfig+0x478>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005992:	f7fe fdbf 	bl	8004514 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599a:	f7fe fdbb 	bl	8004514 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e05c      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ac:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x416>
 80059b8:	e054      	b.n	8005a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b10      	ldr	r3, [pc, #64]	@ (80059fc <HAL_RCC_OscConfig+0x478>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fe fda8 	bl	8004514 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fe fda4 	bl	8004514 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e045      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <HAL_RCC_OscConfig+0x470>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x444>
 80059e6:	e03d      	b.n	8005a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e038      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40007000 	.word	0x40007000
 80059fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a00:	4b1b      	ldr	r3, [pc, #108]	@ (8005a70 <HAL_RCC_OscConfig+0x4ec>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d028      	beq.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d121      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d11a      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a30:	4013      	ands	r3, r2
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d111      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	085b      	lsrs	r3, r3, #1
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3718      	adds	r7, #24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800

08005a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0cc      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a88:	4b68      	ldr	r3, [pc, #416]	@ (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d90c      	bls.n	8005ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a96:	4b65      	ldr	r3, [pc, #404]	@ (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9e:	4b63      	ldr	r3, [pc, #396]	@ (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0b8      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d020      	beq.n	8005afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ac8:	4b59      	ldr	r3, [pc, #356]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4a58      	ldr	r2, [pc, #352]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ad2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d005      	beq.n	8005aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ae0:	4b53      	ldr	r3, [pc, #332]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	4a52      	ldr	r2, [pc, #328]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aec:	4b50      	ldr	r3, [pc, #320]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	494d      	ldr	r1, [pc, #308]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d044      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d107      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	4b47      	ldr	r3, [pc, #284]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d119      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e07f      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d003      	beq.n	8005b32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d107      	bne.n	8005b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b32:	4b3f      	ldr	r3, [pc, #252]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e06f      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b42:	4b3b      	ldr	r3, [pc, #236]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e067      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b52:	4b37      	ldr	r3, [pc, #220]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f023 0203 	bic.w	r2, r3, #3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	4934      	ldr	r1, [pc, #208]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b64:	f7fe fcd6 	bl	8004514 <HAL_GetTick>
 8005b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b6c:	f7fe fcd2 	bl	8004514 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e04f      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b82:	4b2b      	ldr	r3, [pc, #172]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 020c 	and.w	r2, r3, #12
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d1eb      	bne.n	8005b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b94:	4b25      	ldr	r3, [pc, #148]	@ (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d20c      	bcs.n	8005bbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b22      	ldr	r3, [pc, #136]	@ (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005baa:	4b20      	ldr	r3, [pc, #128]	@ (8005c2c <HAL_RCC_ClockConfig+0x1b8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d001      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e032      	b.n	8005c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bc8:	4b19      	ldr	r3, [pc, #100]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4916      	ldr	r1, [pc, #88]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005be6:	4b12      	ldr	r3, [pc, #72]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	490e      	ldr	r1, [pc, #56]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bfa:	f000 f821 	bl	8005c40 <HAL_RCC_GetSysClockFreq>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	4b0b      	ldr	r3, [pc, #44]	@ (8005c30 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	091b      	lsrs	r3, r3, #4
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	490a      	ldr	r1, [pc, #40]	@ (8005c34 <HAL_RCC_ClockConfig+0x1c0>)
 8005c0c:	5ccb      	ldrb	r3, [r1, r3]
 8005c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c12:	4a09      	ldr	r2, [pc, #36]	@ (8005c38 <HAL_RCC_ClockConfig+0x1c4>)
 8005c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c16:	4b09      	ldr	r3, [pc, #36]	@ (8005c3c <HAL_RCC_ClockConfig+0x1c8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7fe fc36 	bl	800448c <HAL_InitTick>

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40023c00 	.word	0x40023c00
 8005c30:	40023800 	.word	0x40023800
 8005c34:	0800d184 	.word	0x0800d184
 8005c38:	20000010 	.word	0x20000010
 8005c3c:	20000014 	.word	0x20000014

08005c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c44:	b090      	sub	sp, #64	@ 0x40
 8005c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c58:	4b59      	ldr	r3, [pc, #356]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 030c 	and.w	r3, r3, #12
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d00d      	beq.n	8005c80 <HAL_RCC_GetSysClockFreq+0x40>
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	f200 80a1 	bhi.w	8005dac <HAL_RCC_GetSysClockFreq+0x16c>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0x34>
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d003      	beq.n	8005c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c72:	e09b      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c74:	4b53      	ldr	r3, [pc, #332]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c78:	e09b      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c7a:	4b53      	ldr	r3, [pc, #332]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c7e:	e098      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c80:	4b4f      	ldr	r3, [pc, #316]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d028      	beq.n	8005ce8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c96:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	099b      	lsrs	r3, r3, #6
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	623b      	str	r3, [r7, #32]
 8005ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4b47      	ldr	r3, [pc, #284]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cac:	fb03 f201 	mul.w	r2, r3, r1
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	fb00 f303 	mul.w	r3, r0, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	4a43      	ldr	r2, [pc, #268]	@ (8005dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005cba:	fba0 1202 	umull	r1, r2, r0, r2
 8005cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cc0:	460a      	mov	r2, r1
 8005cc2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cc6:	4413      	add	r3, r2
 8005cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ccc:	2200      	movs	r2, #0
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	61fa      	str	r2, [r7, #28]
 8005cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005cda:	f7fa ffbd 	bl	8000c58 <__aeabi_uldivmod>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce6:	e053      	b.n	8005d90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce8:	4b35      	ldr	r3, [pc, #212]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	099b      	lsrs	r3, r3, #6
 8005cee:	2200      	movs	r2, #0
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	617a      	str	r2, [r7, #20]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005cfa:	f04f 0b00 	mov.w	fp, #0
 8005cfe:	4652      	mov	r2, sl
 8005d00:	465b      	mov	r3, fp
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f04f 0100 	mov.w	r1, #0
 8005d0a:	0159      	lsls	r1, r3, #5
 8005d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d10:	0150      	lsls	r0, r2, #5
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	ebb2 080a 	subs.w	r8, r2, sl
 8005d1a:	eb63 090b 	sbc.w	r9, r3, fp
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d32:	ebb2 0408 	subs.w	r4, r2, r8
 8005d36:	eb63 0509 	sbc.w	r5, r3, r9
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	00eb      	lsls	r3, r5, #3
 8005d44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d48:	00e2      	lsls	r2, r4, #3
 8005d4a:	4614      	mov	r4, r2
 8005d4c:	461d      	mov	r5, r3
 8005d4e:	eb14 030a 	adds.w	r3, r4, sl
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	eb45 030b 	adc.w	r3, r5, fp
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d66:	4629      	mov	r1, r5
 8005d68:	028b      	lsls	r3, r1, #10
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d70:	4621      	mov	r1, r4
 8005d72:	028a      	lsls	r2, r1, #10
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	60fa      	str	r2, [r7, #12]
 8005d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d84:	f7fa ff68 	bl	8000c58 <__aeabi_uldivmod>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d90:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	0c1b      	lsrs	r3, r3, #16
 8005d96:	f003 0303 	and.w	r3, r3, #3
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005da0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005daa:	e002      	b.n	8005db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dac:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005dae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3740      	adds	r7, #64	@ 0x40
 8005db8:	46bd      	mov	sp, r7
 8005dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	00f42400 	.word	0x00f42400
 8005dc8:	017d7840 	.word	0x017d7840

08005dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dd0:	4b03      	ldr	r3, [pc, #12]	@ (8005de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	20000010 	.word	0x20000010

08005de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005de8:	f7ff fff0 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005dec:	4602      	mov	r2, r0
 8005dee:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	0a9b      	lsrs	r3, r3, #10
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	4903      	ldr	r1, [pc, #12]	@ (8005e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dfa:	5ccb      	ldrb	r3, [r1, r3]
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40023800 	.word	0x40023800
 8005e08:	0800d194 	.word	0x0800d194

08005e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e10:	f7ff ffdc 	bl	8005dcc <HAL_RCC_GetHCLKFreq>
 8005e14:	4602      	mov	r2, r0
 8005e16:	4b05      	ldr	r3, [pc, #20]	@ (8005e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	0b5b      	lsrs	r3, r3, #13
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	4903      	ldr	r1, [pc, #12]	@ (8005e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e22:	5ccb      	ldrb	r3, [r1, r3]
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	0800d194 	.word	0x0800d194

08005e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e07b      	b.n	8005f3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d108      	bne.n	8005e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e56:	d009      	beq.n	8005e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	61da      	str	r2, [r3, #28]
 8005e5e:	e005      	b.n	8005e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d106      	bne.n	8005e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fd ffee 	bl	8003e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef0:	ea42 0103 	orr.w	r1, r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	f003 0104 	and.w	r1, r3, #4
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	f003 0210 	and.w	r2, r3, #16
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b088      	sub	sp, #32
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	603b      	str	r3, [r7, #0]
 8005f52:	4613      	mov	r3, r2
 8005f54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f56:	f7fe fadd 	bl	8004514 <HAL_GetTick>
 8005f5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d001      	beq.n	8005f70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e12a      	b.n	80061c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_SPI_Transmit+0x36>
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e122      	b.n	80061c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_SPI_Transmit+0x48>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e11b      	b.n	80061c6 <HAL_SPI_Transmit+0x280>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2203      	movs	r2, #3
 8005f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	88fa      	ldrh	r2, [r7, #6]
 8005fae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fdc:	d10f      	bne.n	8005ffe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ffc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006008:	2b40      	cmp	r3, #64	@ 0x40
 800600a:	d007      	beq.n	800601c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800601a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006024:	d152      	bne.n	80060cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_SPI_Transmit+0xee>
 800602e:	8b7b      	ldrh	r3, [r7, #26]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d145      	bne.n	80060c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006038:	881a      	ldrh	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006044:	1c9a      	adds	r2, r3, #2
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800604e:	b29b      	uxth	r3, r3
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006058:	e032      	b.n	80060c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b02      	cmp	r3, #2
 8006066:	d112      	bne.n	800608e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606c:	881a      	ldrh	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006078:	1c9a      	adds	r2, r3, #2
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800608c:	e018      	b.n	80060c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800608e:	f7fe fa41 	bl	8004514 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d803      	bhi.n	80060a6 <HAL_SPI_Transmit+0x160>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d102      	bne.n	80060ac <HAL_SPI_Transmit+0x166>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e082      	b.n	80061c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1c7      	bne.n	800605a <HAL_SPI_Transmit+0x114>
 80060ca:	e053      	b.n	8006174 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_SPI_Transmit+0x194>
 80060d4:	8b7b      	ldrh	r3, [r7, #26]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d147      	bne.n	800616a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	7812      	ldrb	r2, [r2, #0]
 80060e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006100:	e033      	b.n	800616a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b02      	cmp	r3, #2
 800610e:	d113      	bne.n	8006138 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	7812      	ldrb	r2, [r2, #0]
 800611c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006136:	e018      	b.n	800616a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006138:	f7fe f9ec 	bl	8004514 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d803      	bhi.n	8006150 <HAL_SPI_Transmit+0x20a>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d102      	bne.n	8006156 <HAL_SPI_Transmit+0x210>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e02d      	b.n	80061c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1c6      	bne.n	8006102 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fbd9 	bl	8006930 <SPI_EndRxTxTransaction>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80061c4:	2300      	movs	r3, #0
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b088      	sub	sp, #32
 80061d2:	af02      	add	r7, sp, #8
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	603b      	str	r3, [r7, #0]
 80061da:	4613      	mov	r3, r2
 80061dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d001      	beq.n	80061ee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
 80061ec:	e104      	b.n	80063f8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061f6:	d112      	bne.n	800621e <HAL_SPI_Receive+0x50>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10e      	bne.n	800621e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2204      	movs	r2, #4
 8006204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006208:	88fa      	ldrh	r2, [r7, #6]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	4613      	mov	r3, r2
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f8f3 	bl	8006400 <HAL_SPI_TransmitReceive>
 800621a:	4603      	mov	r3, r0
 800621c:	e0ec      	b.n	80063f8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800621e:	f7fe f979 	bl	8004514 <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_SPI_Receive+0x62>
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0e1      	b.n	80063f8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_SPI_Receive+0x74>
 800623e:	2302      	movs	r3, #2
 8006240:	e0da      	b.n	80063f8 <HAL_SPI_Receive+0x22a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2204      	movs	r2, #4
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006290:	d10f      	bne.n	80062b2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062bc:	2b40      	cmp	r3, #64	@ 0x40
 80062be:	d007      	beq.n	80062d0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d170      	bne.n	80063ba <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80062d8:	e035      	b.n	8006346 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d115      	bne.n	8006314 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f103 020c 	add.w	r2, r3, #12
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	7812      	ldrb	r2, [r2, #0]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006312:	e018      	b.n	8006346 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006314:	f7fe f8fe 	bl	8004514 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d803      	bhi.n	800632c <HAL_SPI_Receive+0x15e>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d102      	bne.n	8006332 <HAL_SPI_Receive+0x164>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e058      	b.n	80063f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1c4      	bne.n	80062da <HAL_SPI_Receive+0x10c>
 8006350:	e038      	b.n	80063c4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d113      	bne.n	8006388 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636a:	b292      	uxth	r2, r2
 800636c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006372:	1c9a      	adds	r2, r3, #2
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006386:	e018      	b.n	80063ba <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006388:	f7fe f8c4 	bl	8004514 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d803      	bhi.n	80063a0 <HAL_SPI_Receive+0x1d2>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d102      	bne.n	80063a6 <HAL_SPI_Receive+0x1d8>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d109      	bne.n	80063ba <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e01e      	b.n	80063f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1c6      	bne.n	8006352 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fa4b 	bl	8006864 <SPI_EndRxTransaction>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80063f6:	2300      	movs	r3, #0
  }
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	@ 0x28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800640e:	2301      	movs	r3, #1
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006412:	f7fe f87f 	bl	8004514 <HAL_GetTick>
 8006416:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800641e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006426:	887b      	ldrh	r3, [r7, #2]
 8006428:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800642a:	7ffb      	ldrb	r3, [r7, #31]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d00c      	beq.n	800644a <HAL_SPI_TransmitReceive+0x4a>
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006436:	d106      	bne.n	8006446 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <HAL_SPI_TransmitReceive+0x46>
 8006440:	7ffb      	ldrb	r3, [r7, #31]
 8006442:	2b04      	cmp	r3, #4
 8006444:	d001      	beq.n	800644a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006446:	2302      	movs	r3, #2
 8006448:	e17f      	b.n	800674a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_SPI_TransmitReceive+0x5c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_SPI_TransmitReceive+0x5c>
 8006456:	887b      	ldrh	r3, [r7, #2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e174      	b.n	800674a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_SPI_TransmitReceive+0x6e>
 800646a:	2302      	movs	r3, #2
 800646c:	e16d      	b.n	800674a <HAL_SPI_TransmitReceive+0x34a>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b04      	cmp	r3, #4
 8006480:	d003      	beq.n	800648a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2205      	movs	r2, #5
 8006486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	887a      	ldrh	r2, [r7, #2]
 800649a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	887a      	ldrh	r2, [r7, #2]
 80064a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	887a      	ldrh	r2, [r7, #2]
 80064ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	887a      	ldrh	r2, [r7, #2]
 80064b2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ca:	2b40      	cmp	r3, #64	@ 0x40
 80064cc:	d007      	beq.n	80064de <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064e6:	d17e      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <HAL_SPI_TransmitReceive+0xf6>
 80064f0:	8afb      	ldrh	r3, [r7, #22]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d16c      	bne.n	80065d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fa:	881a      	ldrh	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006506:	1c9a      	adds	r2, r3, #2
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800651a:	e059      	b.n	80065d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b02      	cmp	r3, #2
 8006528:	d11b      	bne.n	8006562 <HAL_SPI_TransmitReceive+0x162>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d016      	beq.n	8006562 <HAL_SPI_TransmitReceive+0x162>
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006536:	2b01      	cmp	r3, #1
 8006538:	d113      	bne.n	8006562 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	881a      	ldrh	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654a:	1c9a      	adds	r2, r3, #2
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006554:	b29b      	uxth	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b01      	cmp	r3, #1
 800656e:	d119      	bne.n	80065a4 <HAL_SPI_TransmitReceive+0x1a4>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d014      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	b292      	uxth	r2, r2
 8006586:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658c:	1c9a      	adds	r2, r3, #2
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065a0:	2301      	movs	r3, #1
 80065a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065a4:	f7fd ffb6 	bl	8004514 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d80d      	bhi.n	80065d0 <HAL_SPI_TransmitReceive+0x1d0>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d009      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e0bc      	b.n	800674a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1a0      	bne.n	800651c <HAL_SPI_TransmitReceive+0x11c>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d19b      	bne.n	800651c <HAL_SPI_TransmitReceive+0x11c>
 80065e4:	e082      	b.n	80066ec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x1f4>
 80065ee:	8afb      	ldrh	r3, [r7, #22]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d171      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	330c      	adds	r3, #12
 80065fe:	7812      	ldrb	r2, [r2, #0]
 8006600:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800661a:	e05d      	b.n	80066d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b02      	cmp	r3, #2
 8006628:	d11c      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x264>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d017      	beq.n	8006664 <HAL_SPI_TransmitReceive+0x264>
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	2b01      	cmp	r3, #1
 8006638:	d114      	bne.n	8006664 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d119      	bne.n	80066a6 <HAL_SPI_TransmitReceive+0x2a6>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d014      	beq.n	80066a6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066a2:	2301      	movs	r3, #1
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066a6:	f7fd ff35 	bl	8004514 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d803      	bhi.n	80066be <HAL_SPI_TransmitReceive+0x2be>
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d102      	bne.n	80066c4 <HAL_SPI_TransmitReceive+0x2c4>
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d109      	bne.n	80066d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e038      	b.n	800674a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d19c      	bne.n	800661c <HAL_SPI_TransmitReceive+0x21c>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d197      	bne.n	800661c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066ec:	6a3a      	ldr	r2, [r7, #32]
 80066ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f91d 	bl	8006930 <SPI_EndRxTxTransaction>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e01d      	b.n	800674a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006748:	2300      	movs	r3, #0
  }
}
 800674a:	4618      	mov	r0, r3
 800674c:	3728      	adds	r7, #40	@ 0x28
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	4613      	mov	r3, r2
 8006762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006764:	f7fd fed6 	bl	8004514 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4413      	add	r3, r2
 8006772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006774:	f7fd fece 	bl	8004514 <HAL_GetTick>
 8006778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800677a:	4b39      	ldr	r3, [pc, #228]	@ (8006860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	015b      	lsls	r3, r3, #5
 8006780:	0d1b      	lsrs	r3, r3, #20
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	fb02 f303 	mul.w	r3, r2, r3
 8006788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800678a:	e054      	b.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d050      	beq.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006794:	f7fd febe 	bl	8004514 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d902      	bls.n	80067aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d13d      	bne.n	8006826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067c2:	d111      	bne.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067cc:	d004      	beq.n	80067d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d6:	d107      	bne.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f0:	d10f      	bne.n	8006812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e017      	b.n	8006856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	3b01      	subs	r3, #1
 8006834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	429a      	cmp	r2, r3
 8006852:	d19b      	bne.n	800678c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000010 	.word	0x20000010

08006864 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006878:	d111      	bne.n	800689e <SPI_EndRxTransaction+0x3a>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006882:	d004      	beq.n	800688e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800688c:	d107      	bne.n	800689e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800689c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068a6:	d12a      	bne.n	80068fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068b0:	d012      	beq.n	80068d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2200      	movs	r2, #0
 80068ba:	2180      	movs	r1, #128	@ 0x80
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff ff49 	bl	8006754 <SPI_WaitFlagStateUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d02d      	beq.n	8006924 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068cc:	f043 0220 	orr.w	r2, r3, #32
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e026      	b.n	8006926 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2200      	movs	r2, #0
 80068e0:	2101      	movs	r1, #1
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff ff36 	bl	8006754 <SPI_WaitFlagStateUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01a      	beq.n	8006924 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f2:	f043 0220 	orr.w	r2, r3, #32
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e013      	b.n	8006926 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	2101      	movs	r1, #1
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff ff23 	bl	8006754 <SPI_WaitFlagStateUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d007      	beq.n	8006924 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006918:	f043 0220 	orr.w	r2, r3, #32
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e000      	b.n	8006926 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2201      	movs	r2, #1
 8006944:	2102      	movs	r1, #2
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f7ff ff04 	bl	8006754 <SPI_WaitFlagStateUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d007      	beq.n	8006962 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006956:	f043 0220 	orr.w	r2, r3, #32
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e032      	b.n	80069c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006962:	4b1b      	ldr	r3, [pc, #108]	@ (80069d0 <SPI_EndRxTxTransaction+0xa0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1b      	ldr	r2, [pc, #108]	@ (80069d4 <SPI_EndRxTxTransaction+0xa4>)
 8006968:	fba2 2303 	umull	r2, r3, r2, r3
 800696c:	0d5b      	lsrs	r3, r3, #21
 800696e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006980:	d112      	bne.n	80069a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2200      	movs	r2, #0
 800698a:	2180      	movs	r1, #128	@ 0x80
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff fee1 	bl	8006754 <SPI_WaitFlagStateUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d016      	beq.n	80069c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699c:	f043 0220 	orr.w	r2, r3, #32
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e00f      	b.n	80069c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069be:	2b80      	cmp	r3, #128	@ 0x80
 80069c0:	d0f2      	beq.n	80069a8 <SPI_EndRxTxTransaction+0x78>
 80069c2:	e000      	b.n	80069c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80069c4:	bf00      	nop
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20000010 	.word	0x20000010
 80069d4:	165e9f81 	.word	0x165e9f81

080069d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e041      	b.n	8006a6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fd fa7a 	bl	8003ef8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3304      	adds	r3, #4
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f000 fd66 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d001      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e044      	b.n	8006b1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_TIM_Base_Start_IT+0xb0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d018      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aba:	d013      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b2c <HAL_TIM_Base_Start_IT+0xb4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a19      	ldr	r2, [pc, #100]	@ (8006b30 <HAL_TIM_Base_Start_IT+0xb8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d009      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a17      	ldr	r2, [pc, #92]	@ (8006b34 <HAL_TIM_Base_Start_IT+0xbc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a16      	ldr	r2, [pc, #88]	@ (8006b38 <HAL_TIM_Base_Start_IT+0xc0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d111      	bne.n	8006b08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0307 	and.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2b06      	cmp	r3, #6
 8006af4:	d010      	beq.n	8006b18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 0201 	orr.w	r2, r2, #1
 8006b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b06:	e007      	b.n	8006b18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40010000 	.word	0x40010000
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000c00 	.word	0x40000c00
 8006b38:	40014000 	.word	0x40014000

08006b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e041      	b.n	8006bd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fd fa8c 	bl	8004080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3304      	adds	r3, #4
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f000 fcb4 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <HAL_TIM_PWM_Start+0x24>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	bf14      	ite	ne
 8006bf8:	2301      	movne	r3, #1
 8006bfa:	2300      	moveq	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	e022      	b.n	8006c46 <HAL_TIM_PWM_Start+0x6a>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d109      	bne.n	8006c1a <HAL_TIM_PWM_Start+0x3e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	bf14      	ite	ne
 8006c12:	2301      	movne	r3, #1
 8006c14:	2300      	moveq	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	e015      	b.n	8006c46 <HAL_TIM_PWM_Start+0x6a>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d109      	bne.n	8006c34 <HAL_TIM_PWM_Start+0x58>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	e008      	b.n	8006c46 <HAL_TIM_PWM_Start+0x6a>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	bf14      	ite	ne
 8006c40:	2301      	movne	r3, #1
 8006c42:	2300      	moveq	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e068      	b.n	8006d20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Start+0x82>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c5c:	e013      	b.n	8006c86 <HAL_TIM_PWM_Start+0xaa>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_PWM_Start+0x92>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c6c:	e00b      	b.n	8006c86 <HAL_TIM_PWM_Start+0xaa>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_PWM_Start+0xa2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c7c:	e003      	b.n	8006c86 <HAL_TIM_PWM_Start+0xaa>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fedc 	bl	8007a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a23      	ldr	r2, [pc, #140]	@ (8006d28 <HAL_TIM_PWM_Start+0x14c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d107      	bne.n	8006cae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <HAL_TIM_PWM_Start+0x14c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <HAL_TIM_PWM_Start+0x10e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc0:	d013      	beq.n	8006cea <HAL_TIM_PWM_Start+0x10e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a19      	ldr	r2, [pc, #100]	@ (8006d2c <HAL_TIM_PWM_Start+0x150>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_TIM_PWM_Start+0x10e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a17      	ldr	r2, [pc, #92]	@ (8006d30 <HAL_TIM_PWM_Start+0x154>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_TIM_PWM_Start+0x10e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a16      	ldr	r2, [pc, #88]	@ (8006d34 <HAL_TIM_PWM_Start+0x158>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_TIM_PWM_Start+0x10e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a14      	ldr	r2, [pc, #80]	@ (8006d38 <HAL_TIM_PWM_Start+0x15c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d111      	bne.n	8006d0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b06      	cmp	r3, #6
 8006cfa:	d010      	beq.n	8006d1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0c:	e007      	b.n	8006d1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0201 	orr.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40010000 	.word	0x40010000
 8006d2c:	40000400 	.word	0x40000400
 8006d30:	40000800 	.word	0x40000800
 8006d34:	40000c00 	.word	0x40000c00
 8006d38:	40014000 	.word	0x40014000

08006d3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e097      	b.n	8006e80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7fd f8ef 	bl	8003f48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d80:	f023 0307 	bic.w	r3, r3, #7
 8006d84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4610      	mov	r0, r2
 8006d92:	f000 fba9 	bl	80074e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dbe:	f023 0303 	bic.w	r3, r3, #3
 8006dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006ddc:	f023 030c 	bic.w	r3, r3, #12
 8006de0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006de8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	011a      	lsls	r2, r3, #4
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	031b      	lsls	r3, r3, #12
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2201      	movs	r2, #1
 8006e62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ea0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ea8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006eb0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d110      	bne.n	8006eda <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d102      	bne.n	8006ec4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ebe:	7b7b      	ldrb	r3, [r7, #13]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d001      	beq.n	8006ec8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e069      	b.n	8006f9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed8:	e031      	b.n	8006f3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b04      	cmp	r3, #4
 8006ede:	d110      	bne.n	8006f02 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d102      	bne.n	8006eec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ee6:	7b3b      	ldrb	r3, [r7, #12]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d001      	beq.n	8006ef0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e055      	b.n	8006f9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f00:	e01d      	b.n	8006f3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d108      	bne.n	8006f1a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d105      	bne.n	8006f1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f0e:	7b7b      	ldrb	r3, [r7, #13]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d102      	bne.n	8006f1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f14:	7b3b      	ldrb	r3, [r7, #12]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d001      	beq.n	8006f1e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e03e      	b.n	8006f9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2202      	movs	r2, #2
 8006f2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_TIM_Encoder_Start+0xc4>
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d008      	beq.n	8006f5c <HAL_TIM_Encoder_Start+0xd4>
 8006f4a:	e00f      	b.n	8006f6c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2201      	movs	r2, #1
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fd79 	bl	8007a4c <TIM_CCxChannelCmd>
      break;
 8006f5a:	e016      	b.n	8006f8a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2201      	movs	r2, #1
 8006f62:	2104      	movs	r1, #4
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fd71 	bl	8007a4c <TIM_CCxChannelCmd>
      break;
 8006f6a:	e00e      	b.n	8006f8a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2201      	movs	r2, #1
 8006f72:	2100      	movs	r1, #0
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 fd69 	bl	8007a4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	2104      	movs	r1, #4
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fd62 	bl	8007a4c <TIM_CCxChannelCmd>
      break;
 8006f88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0201 	orr.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d020      	beq.n	8007008 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d01b      	beq.n	8007008 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f06f 0202 	mvn.w	r2, #2
 8006fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa5b 	bl	80074aa <HAL_TIM_IC_CaptureCallback>
 8006ff4:	e005      	b.n	8007002 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa4d 	bl	8007496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fa5e 	bl	80074be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d020      	beq.n	8007054 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01b      	beq.n	8007054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0204 	mvn.w	r2, #4
 8007024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2202      	movs	r2, #2
 800702a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa35 	bl	80074aa <HAL_TIM_IC_CaptureCallback>
 8007040:	e005      	b.n	800704e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa27 	bl	8007496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fa38 	bl	80074be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d020      	beq.n	80070a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01b      	beq.n	80070a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0208 	mvn.w	r2, #8
 8007070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2204      	movs	r2, #4
 8007076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fa0f 	bl	80074aa <HAL_TIM_IC_CaptureCallback>
 800708c:	e005      	b.n	800709a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa01 	bl	8007496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fa12 	bl	80074be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d020      	beq.n	80070ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f003 0310 	and.w	r3, r3, #16
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d01b      	beq.n	80070ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f06f 0210 	mvn.w	r2, #16
 80070bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2208      	movs	r2, #8
 80070c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f9e9 	bl	80074aa <HAL_TIM_IC_CaptureCallback>
 80070d8:	e005      	b.n	80070e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f9db 	bl	8007496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9ec 	bl	80074be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d007      	beq.n	8007110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0201 	mvn.w	r2, #1
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fb f848 	bl	80021a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00c      	beq.n	8007134 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007120:	2b00      	cmp	r3, #0
 8007122:	d007      	beq.n	8007134 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800712c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fd2a 	bl	8007b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00c      	beq.n	8007158 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d007      	beq.n	8007158 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9bd 	bl	80074d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00c      	beq.n	800717c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f06f 0220 	mvn.w	r2, #32
 8007174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fcfc 	bl	8007b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800719e:	2302      	movs	r3, #2
 80071a0:	e0ae      	b.n	8007300 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b0c      	cmp	r3, #12
 80071ae:	f200 809f 	bhi.w	80072f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071b2:	a201      	add	r2, pc, #4	@ (adr r2, 80071b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b8:	080071ed 	.word	0x080071ed
 80071bc:	080072f1 	.word	0x080072f1
 80071c0:	080072f1 	.word	0x080072f1
 80071c4:	080072f1 	.word	0x080072f1
 80071c8:	0800722d 	.word	0x0800722d
 80071cc:	080072f1 	.word	0x080072f1
 80071d0:	080072f1 	.word	0x080072f1
 80071d4:	080072f1 	.word	0x080072f1
 80071d8:	0800726f 	.word	0x0800726f
 80071dc:	080072f1 	.word	0x080072f1
 80071e0:	080072f1 	.word	0x080072f1
 80071e4:	080072f1 	.word	0x080072f1
 80071e8:	080072af 	.word	0x080072af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fa04 	bl	8007600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0204 	bic.w	r2, r2, #4
 8007216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6999      	ldr	r1, [r3, #24]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	619a      	str	r2, [r3, #24]
      break;
 800722a:	e064      	b.n	80072f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fa4a 	bl	80076cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6999      	ldr	r1, [r3, #24]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	619a      	str	r2, [r3, #24]
      break;
 800726c:	e043      	b.n	80072f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fa95 	bl	80077a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0208 	orr.w	r2, r2, #8
 8007288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0204 	bic.w	r2, r2, #4
 8007298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69d9      	ldr	r1, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	61da      	str	r2, [r3, #28]
      break;
 80072ac:	e023      	b.n	80072f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fadf 	bl	8007878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69d9      	ldr	r1, [r3, #28]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	021a      	lsls	r2, r3, #8
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	61da      	str	r2, [r3, #28]
      break;
 80072ee:	e002      	b.n	80072f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	75fb      	strb	r3, [r7, #23]
      break;
 80072f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIM_ConfigClockSource+0x1c>
 8007320:	2302      	movs	r3, #2
 8007322:	e0b4      	b.n	800748e <HAL_TIM_ConfigClockSource+0x186>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800734a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800735c:	d03e      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0xd4>
 800735e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007362:	f200 8087 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x16c>
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800736a:	f000 8086 	beq.w	800747a <HAL_TIM_ConfigClockSource+0x172>
 800736e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007372:	d87f      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x16c>
 8007374:	2b70      	cmp	r3, #112	@ 0x70
 8007376:	d01a      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0xa6>
 8007378:	2b70      	cmp	r3, #112	@ 0x70
 800737a:	d87b      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x16c>
 800737c:	2b60      	cmp	r3, #96	@ 0x60
 800737e:	d050      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x11a>
 8007380:	2b60      	cmp	r3, #96	@ 0x60
 8007382:	d877      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x16c>
 8007384:	2b50      	cmp	r3, #80	@ 0x50
 8007386:	d03c      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0xfa>
 8007388:	2b50      	cmp	r3, #80	@ 0x50
 800738a:	d873      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x16c>
 800738c:	2b40      	cmp	r3, #64	@ 0x40
 800738e:	d058      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x13a>
 8007390:	2b40      	cmp	r3, #64	@ 0x40
 8007392:	d86f      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x16c>
 8007394:	2b30      	cmp	r3, #48	@ 0x30
 8007396:	d064      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x15a>
 8007398:	2b30      	cmp	r3, #48	@ 0x30
 800739a:	d86b      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x16c>
 800739c:	2b20      	cmp	r3, #32
 800739e:	d060      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x15a>
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d867      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x16c>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05c      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x15a>
 80073a8:	2b10      	cmp	r3, #16
 80073aa:	d05a      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x15a>
 80073ac:	e062      	b.n	8007474 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073be:	f000 fb25 	bl	8007a0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	609a      	str	r2, [r3, #8]
      break;
 80073da:	e04f      	b.n	800747c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073ec:	f000 fb0e 	bl	8007a0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073fe:	609a      	str	r2, [r3, #8]
      break;
 8007400:	e03c      	b.n	800747c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800740e:	461a      	mov	r2, r3
 8007410:	f000 fa82 	bl	8007918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2150      	movs	r1, #80	@ 0x50
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fadb 	bl	80079d6 <TIM_ITRx_SetConfig>
      break;
 8007420:	e02c      	b.n	800747c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800742e:	461a      	mov	r2, r3
 8007430:	f000 faa1 	bl	8007976 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2160      	movs	r1, #96	@ 0x60
 800743a:	4618      	mov	r0, r3
 800743c:	f000 facb 	bl	80079d6 <TIM_ITRx_SetConfig>
      break;
 8007440:	e01c      	b.n	800747c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800744e:	461a      	mov	r2, r3
 8007450:	f000 fa62 	bl	8007918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2140      	movs	r1, #64	@ 0x40
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fabb 	bl	80079d6 <TIM_ITRx_SetConfig>
      break;
 8007460:	e00c      	b.n	800747c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4619      	mov	r1, r3
 800746c:	4610      	mov	r0, r2
 800746e:	f000 fab2 	bl	80079d6 <TIM_ITRx_SetConfig>
      break;
 8007472:	e003      	b.n	800747c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
      break;
 8007478:	e000      	b.n	800747c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800747a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3a      	ldr	r2, [pc, #232]	@ (80075e4 <TIM_Base_SetConfig+0xfc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00f      	beq.n	8007520 <TIM_Base_SetConfig+0x38>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007506:	d00b      	beq.n	8007520 <TIM_Base_SetConfig+0x38>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a37      	ldr	r2, [pc, #220]	@ (80075e8 <TIM_Base_SetConfig+0x100>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d007      	beq.n	8007520 <TIM_Base_SetConfig+0x38>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a36      	ldr	r2, [pc, #216]	@ (80075ec <TIM_Base_SetConfig+0x104>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_Base_SetConfig+0x38>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a35      	ldr	r2, [pc, #212]	@ (80075f0 <TIM_Base_SetConfig+0x108>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d108      	bne.n	8007532 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a2b      	ldr	r2, [pc, #172]	@ (80075e4 <TIM_Base_SetConfig+0xfc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d01b      	beq.n	8007572 <TIM_Base_SetConfig+0x8a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007540:	d017      	beq.n	8007572 <TIM_Base_SetConfig+0x8a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a28      	ldr	r2, [pc, #160]	@ (80075e8 <TIM_Base_SetConfig+0x100>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d013      	beq.n	8007572 <TIM_Base_SetConfig+0x8a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a27      	ldr	r2, [pc, #156]	@ (80075ec <TIM_Base_SetConfig+0x104>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00f      	beq.n	8007572 <TIM_Base_SetConfig+0x8a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a26      	ldr	r2, [pc, #152]	@ (80075f0 <TIM_Base_SetConfig+0x108>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00b      	beq.n	8007572 <TIM_Base_SetConfig+0x8a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a25      	ldr	r2, [pc, #148]	@ (80075f4 <TIM_Base_SetConfig+0x10c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d007      	beq.n	8007572 <TIM_Base_SetConfig+0x8a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a24      	ldr	r2, [pc, #144]	@ (80075f8 <TIM_Base_SetConfig+0x110>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d003      	beq.n	8007572 <TIM_Base_SetConfig+0x8a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a23      	ldr	r2, [pc, #140]	@ (80075fc <TIM_Base_SetConfig+0x114>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d108      	bne.n	8007584 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a0e      	ldr	r2, [pc, #56]	@ (80075e4 <TIM_Base_SetConfig+0xfc>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d103      	bne.n	80075b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d105      	bne.n	80075d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f023 0201 	bic.w	r2, r3, #1
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	611a      	str	r2, [r3, #16]
  }
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40000c00 	.word	0x40000c00
 80075f4:	40014000 	.word	0x40014000
 80075f8:	40014400 	.word	0x40014400
 80075fc:	40014800 	.word	0x40014800

08007600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	f023 0201 	bic.w	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 0302 	bic.w	r3, r3, #2
 8007648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a1c      	ldr	r2, [pc, #112]	@ (80076c8 <TIM_OC1_SetConfig+0xc8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d10c      	bne.n	8007676 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0308 	bic.w	r3, r3, #8
 8007662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f023 0304 	bic.w	r3, r3, #4
 8007674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a13      	ldr	r2, [pc, #76]	@ (80076c8 <TIM_OC1_SetConfig+0xc8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d111      	bne.n	80076a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800768c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	621a      	str	r2, [r3, #32]
}
 80076bc:	bf00      	nop
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	40010000 	.word	0x40010000

080076cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	f023 0210 	bic.w	r2, r3, #16
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0320 	bic.w	r3, r3, #32
 8007716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a1e      	ldr	r2, [pc, #120]	@ (80077a0 <TIM_OC2_SetConfig+0xd4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10d      	bne.n	8007748 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007746:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a15      	ldr	r2, [pc, #84]	@ (80077a0 <TIM_OC2_SetConfig+0xd4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d113      	bne.n	8007778 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800775e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	4313      	orrs	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010000 	.word	0x40010000

080077a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007874 <TIM_OC3_SetConfig+0xd0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d10d      	bne.n	800781e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800781c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a14      	ldr	r2, [pc, #80]	@ (8007874 <TIM_OC3_SetConfig+0xd0>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d113      	bne.n	800784e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800782c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4313      	orrs	r3, r2
 8007840:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	011b      	lsls	r3, r3, #4
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	621a      	str	r2, [r3, #32]
}
 8007868:	bf00      	nop
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	40010000 	.word	0x40010000

08007878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	031b      	lsls	r3, r3, #12
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a10      	ldr	r2, [pc, #64]	@ (8007914 <TIM_OC4_SetConfig+0x9c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d109      	bne.n	80078ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	019b      	lsls	r3, r3, #6
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40010000 	.word	0x40010000

08007918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007918:	b480      	push	{r7}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0201 	bic.w	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f023 030a 	bic.w	r3, r3, #10
 8007954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4313      	orrs	r3, r2
 800795c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	621a      	str	r2, [r3, #32]
}
 800796a:	bf00      	nop
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007976:	b480      	push	{r7}
 8007978:	b087      	sub	sp, #28
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	f023 0210 	bic.w	r2, r3, #16
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	031b      	lsls	r3, r3, #12
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	621a      	str	r2, [r3, #32]
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f043 0307 	orr.w	r3, r3, #7
 80079f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	609a      	str	r2, [r3, #8]
}
 8007a00:	bf00      	nop
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	021a      	lsls	r2, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	609a      	str	r2, [r3, #8]
}
 8007a40:	bf00      	nop
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	2201      	movs	r2, #1
 8007a60:	fa02 f303 	lsl.w	r3, r2, r3
 8007a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a1a      	ldr	r2, [r3, #32]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	43db      	mvns	r3, r3
 8007a6e:	401a      	ands	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a1a      	ldr	r2, [r3, #32]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	fa01 f303 	lsl.w	r3, r1, r3
 8007a84:	431a      	orrs	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	621a      	str	r2, [r3, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e050      	b.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1c      	ldr	r2, [pc, #112]	@ (8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d018      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afc:	d013      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a18      	ldr	r2, [pc, #96]	@ (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d00e      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a16      	ldr	r2, [pc, #88]	@ (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d009      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a15      	ldr	r2, [pc, #84]	@ (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d004      	beq.n	8007b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a13      	ldr	r2, [pc, #76]	@ (8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d10c      	bne.n	8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40010000 	.word	0x40010000
 8007b64:	40000400 	.word	0x40000400
 8007b68:	40000800 	.word	0x40000800
 8007b6c:	40000c00 	.word	0x40000c00
 8007b70:	40014000 	.word	0x40014000

08007b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e042      	b.n	8007c34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7fc fab8 	bl	8004138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2224      	movs	r2, #36	@ 0x24
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fdbd 	bl	8008760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695a      	ldr	r2, [r3, #20]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08a      	sub	sp, #40	@ 0x28
 8007c40:	af02      	add	r7, sp, #8
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d175      	bne.n	8007d48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_UART_Transmit+0x2c>
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e06e      	b.n	8007d4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2221      	movs	r2, #33	@ 0x21
 8007c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c7a:	f7fc fc4b 	bl	8004514 <HAL_GetTick>
 8007c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	88fa      	ldrh	r2, [r7, #6]
 8007c84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	88fa      	ldrh	r2, [r7, #6]
 8007c8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c94:	d108      	bne.n	8007ca8 <HAL_UART_Transmit+0x6c>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d104      	bne.n	8007ca8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	e003      	b.n	8007cb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007cb0:	e02e      	b.n	8007d10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2180      	movs	r1, #128	@ 0x80
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fb1f 	bl	8008300 <UART_WaitOnFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e03a      	b.n	8007d4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	3302      	adds	r3, #2
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	e007      	b.n	8007d02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	781a      	ldrb	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1cb      	bne.n	8007cb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2200      	movs	r2, #0
 8007d22:	2140      	movs	r1, #64	@ 0x40
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f000 faeb 	bl	8008300 <UART_WaitOnFlagUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e000      	b.n	8007d4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3720      	adds	r7, #32
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b20      	cmp	r3, #32
 8007d6a:	d112      	bne.n	8007d92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <HAL_UART_Receive_IT+0x26>
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e00b      	b.n	8007d94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d82:	88fb      	ldrh	r3, [r7, #6]
 8007d84:	461a      	mov	r2, r3
 8007d86:	68b9      	ldr	r1, [r7, #8]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 fb12 	bl	80083b2 <UART_Start_Receive_IT>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	e000      	b.n	8007d94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007d92:	2302      	movs	r3, #2
  }
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b0ba      	sub	sp, #232	@ 0xe8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd2:	f003 030f 	and.w	r3, r3, #15
 8007dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10f      	bne.n	8007e02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d009      	beq.n	8007e02 <HAL_UART_IRQHandler+0x66>
 8007dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007df2:	f003 0320 	and.w	r3, r3, #32
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fbf2 	bl	80085e4 <UART_Receive_IT>
      return;
 8007e00:	e25b      	b.n	80082ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 80de 	beq.w	8007fc8 <HAL_UART_IRQHandler+0x22c>
 8007e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d106      	bne.n	8007e26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 80d1 	beq.w	8007fc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <HAL_UART_IRQHandler+0xae>
 8007e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d005      	beq.n	8007e4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e42:	f043 0201 	orr.w	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <HAL_UART_IRQHandler+0xd2>
 8007e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e66:	f043 0202 	orr.w	r2, r3, #2
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00b      	beq.n	8007e92 <HAL_UART_IRQHandler+0xf6>
 8007e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e8a:	f043 0204 	orr.w	r2, r3, #4
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d011      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x126>
 8007e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d005      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eba:	f043 0208 	orr.w	r2, r3, #8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 81f2 	beq.w	80082b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d008      	beq.n	8007eea <HAL_UART_IRQHandler+0x14e>
 8007ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fb7d 	bl	80085e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2301      	moveq	r3, #1
 8007efa:	2300      	movne	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f06:	f003 0308 	and.w	r3, r3, #8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <HAL_UART_IRQHandler+0x17a>
 8007f0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d04f      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa85 	bl	8008426 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f26:	2b40      	cmp	r3, #64	@ 0x40
 8007f28:	d141      	bne.n	8007fae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3314      	adds	r3, #20
 8007f30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3314      	adds	r3, #20
 8007f52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1d9      	bne.n	8007f2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d013      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f82:	4a7e      	ldr	r2, [pc, #504]	@ (800817c <HAL_UART_IRQHandler+0x3e0>)
 8007f84:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fc fc73 	bl	8004876 <HAL_DMA_Abort_IT>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d016      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa4:	e00e      	b.n	8007fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f994 	bl	80082d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fac:	e00a      	b.n	8007fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f990 	bl	80082d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb4:	e006      	b.n	8007fc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f98c 	bl	80082d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007fc2:	e175      	b.n	80082b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc4:	bf00      	nop
    return;
 8007fc6:	e173      	b.n	80082b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	f040 814f 	bne.w	8008270 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd6:	f003 0310 	and.w	r3, r3, #16
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 8148 	beq.w	8008270 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe4:	f003 0310 	and.w	r3, r3, #16
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8141 	beq.w	8008270 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60bb      	str	r3, [r7, #8]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	60bb      	str	r3, [r7, #8]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	60bb      	str	r3, [r7, #8]
 8008002:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800e:	2b40      	cmp	r3, #64	@ 0x40
 8008010:	f040 80b6 	bne.w	8008180 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008020:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 8145 	beq.w	80082b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800802e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008032:	429a      	cmp	r2, r3
 8008034:	f080 813e 	bcs.w	80082b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800803e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800804a:	f000 8088 	beq.w	800815e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	330c      	adds	r3, #12
 8008054:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008064:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800806c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	330c      	adds	r3, #12
 8008076:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800807a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800807e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008086:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008092:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1d9      	bne.n	800804e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3314      	adds	r3, #20
 80080a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080a4:	e853 3f00 	ldrex	r3, [r3]
 80080a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080ac:	f023 0301 	bic.w	r3, r3, #1
 80080b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3314      	adds	r3, #20
 80080ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e1      	bne.n	800809a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3314      	adds	r3, #20
 80080dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3314      	adds	r3, #20
 80080f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80080fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008100:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008108:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e3      	bne.n	80080d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2220      	movs	r2, #32
 8008112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	330c      	adds	r3, #12
 8008122:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800812c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800812e:	f023 0310 	bic.w	r3, r3, #16
 8008132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	330c      	adds	r3, #12
 800813c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008140:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008142:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008144:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008146:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008148:	e841 2300 	strex	r3, r2, [r1]
 800814c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800814e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e3      	bne.n	800811c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008158:	4618      	mov	r0, r3
 800815a:	f7fc fb1c 	bl	8004796 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800816c:	b29b      	uxth	r3, r3
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	b29b      	uxth	r3, r3
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8b7 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800817a:	e09b      	b.n	80082b4 <HAL_UART_IRQHandler+0x518>
 800817c:	080084ed 	.word	0x080084ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008188:	b29b      	uxth	r3, r3
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008194:	b29b      	uxth	r3, r3
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 808e 	beq.w	80082b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800819c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 8089 	beq.w	80082b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	330c      	adds	r3, #12
 80081ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	330c      	adds	r3, #12
 80081c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80081ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80081cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e3      	bne.n	80081a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3314      	adds	r3, #20
 80081e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	623b      	str	r3, [r7, #32]
   return(result);
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3314      	adds	r3, #20
 80081fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008202:	633a      	str	r2, [r7, #48]	@ 0x30
 8008204:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800820a:	e841 2300 	strex	r3, r2, [r1]
 800820e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1e3      	bne.n	80081de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	60fb      	str	r3, [r7, #12]
   return(result);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0310 	bic.w	r3, r3, #16
 800823a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	330c      	adds	r3, #12
 8008244:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008248:	61fa      	str	r2, [r7, #28]
 800824a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	69b9      	ldr	r1, [r7, #24]
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	e841 2300 	strex	r3, r2, [r1]
 8008254:	617b      	str	r3, [r7, #20]
   return(result);
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e3      	bne.n	8008224 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008262:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f83d 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800826e:	e023      	b.n	80082b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <HAL_UART_IRQHandler+0x4f4>
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f943 	bl	8008514 <UART_Transmit_IT>
    return;
 800828e:	e014      	b.n	80082ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00e      	beq.n	80082ba <HAL_UART_IRQHandler+0x51e>
 800829c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d008      	beq.n	80082ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f983 	bl	80085b4 <UART_EndTransmit_IT>
    return;
 80082ae:	e004      	b.n	80082ba <HAL_UART_IRQHandler+0x51e>
    return;
 80082b0:	bf00      	nop
 80082b2:	e002      	b.n	80082ba <HAL_UART_IRQHandler+0x51e>
      return;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <HAL_UART_IRQHandler+0x51e>
      return;
 80082b8:	bf00      	nop
  }
}
 80082ba:	37e8      	adds	r7, #232	@ 0xe8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008310:	e03b      	b.n	800838a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008318:	d037      	beq.n	800838a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800831a:	f7fc f8fb 	bl	8004514 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	6a3a      	ldr	r2, [r7, #32]
 8008326:	429a      	cmp	r2, r3
 8008328:	d302      	bcc.n	8008330 <UART_WaitOnFlagUntilTimeout+0x30>
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e03a      	b.n	80083aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b00      	cmp	r3, #0
 8008340:	d023      	beq.n	800838a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b80      	cmp	r3, #128	@ 0x80
 8008346:	d020      	beq.n	800838a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b40      	cmp	r3, #64	@ 0x40
 800834c:	d01d      	beq.n	800838a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b08      	cmp	r3, #8
 800835a:	d116      	bne.n	800838a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f857 	bl	8008426 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2208      	movs	r2, #8
 800837c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e00f      	b.n	80083aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4013      	ands	r3, r2
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	429a      	cmp	r2, r3
 8008398:	bf0c      	ite	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	2300      	movne	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	461a      	mov	r2, r3
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d0b4      	beq.n	8008312 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	4613      	mov	r3, r2
 80083be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	88fa      	ldrh	r2, [r7, #6]
 80083ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	88fa      	ldrh	r2, [r7, #6]
 80083d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2222      	movs	r2, #34	@ 0x22
 80083dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695a      	ldr	r2, [r3, #20]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f042 0220 	orr.w	r2, r2, #32
 8008416:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008426:	b480      	push	{r7}
 8008428:	b095      	sub	sp, #84	@ 0x54
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	330c      	adds	r3, #12
 8008434:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008444:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800844e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008454:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e5      	bne.n	800842e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3314      	adds	r3, #20
 8008468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	61fb      	str	r3, [r7, #28]
   return(result);
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	64bb      	str	r3, [r7, #72]	@ 0x48
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3314      	adds	r3, #20
 8008480:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008484:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849a:	2b01      	cmp	r3, #1
 800849c:	d119      	bne.n	80084d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	330c      	adds	r3, #12
 80084a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	f023 0310 	bic.w	r3, r3, #16
 80084b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	330c      	adds	r3, #12
 80084bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084be:	61ba      	str	r2, [r7, #24]
 80084c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	6979      	ldr	r1, [r7, #20]
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	613b      	str	r3, [r7, #16]
   return(result);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e5      	bne.n	800849e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80084e0:	bf00      	nop
 80084e2:	3754      	adds	r7, #84	@ 0x54
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff fee4 	bl	80082d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800850c:	bf00      	nop
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b21      	cmp	r3, #33	@ 0x21
 8008526:	d13e      	bne.n	80085a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008530:	d114      	bne.n	800855c <UART_Transmit_IT+0x48>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d110      	bne.n	800855c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	1c9a      	adds	r2, r3, #2
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	621a      	str	r2, [r3, #32]
 800855a:	e008      	b.n	800856e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	1c59      	adds	r1, r3, #1
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6211      	str	r1, [r2, #32]
 8008566:	781a      	ldrb	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008572:	b29b      	uxth	r3, r3
 8008574:	3b01      	subs	r3, #1
 8008576:	b29b      	uxth	r3, r3
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	4619      	mov	r1, r3
 800857c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10f      	bne.n	80085a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008590:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68da      	ldr	r2, [r3, #12]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	e000      	b.n	80085a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085a6:	2302      	movs	r3, #2
  }
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff fe73 	bl	80082c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08c      	sub	sp, #48	@ 0x30
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b22      	cmp	r3, #34	@ 0x22
 80085f6:	f040 80ae 	bne.w	8008756 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008602:	d117      	bne.n	8008634 <UART_Receive_IT+0x50>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d113      	bne.n	8008634 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800860c:	2300      	movs	r3, #0
 800860e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008614:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	b29b      	uxth	r3, r3
 800861e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008622:	b29a      	uxth	r2, r3
 8008624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008626:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862c:	1c9a      	adds	r2, r3, #2
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	629a      	str	r2, [r3, #40]	@ 0x28
 8008632:	e026      	b.n	8008682 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008638:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800863a:	2300      	movs	r3, #0
 800863c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008646:	d007      	beq.n	8008658 <UART_Receive_IT+0x74>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <UART_Receive_IT+0x82>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	e008      	b.n	8008678 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	b2db      	uxtb	r3, r3
 800866e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008672:	b2da      	uxtb	r2, r3
 8008674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008676:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008686:	b29b      	uxth	r3, r3
 8008688:	3b01      	subs	r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	4619      	mov	r1, r3
 8008690:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008692:	2b00      	cmp	r3, #0
 8008694:	d15d      	bne.n	8008752 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68da      	ldr	r2, [r3, #12]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f022 0220 	bic.w	r2, r2, #32
 80086a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	695a      	ldr	r2, [r3, #20]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f022 0201 	bic.w	r2, r2, #1
 80086c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d135      	bne.n	8008748 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	330c      	adds	r3, #12
 80086e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	613b      	str	r3, [r7, #16]
   return(result);
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	f023 0310 	bic.w	r3, r3, #16
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	330c      	adds	r3, #12
 8008700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008702:	623a      	str	r2, [r7, #32]
 8008704:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	69f9      	ldr	r1, [r7, #28]
 8008708:	6a3a      	ldr	r2, [r7, #32]
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e5      	bne.n	80086e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	2b10      	cmp	r3, #16
 8008722:	d10a      	bne.n	800873a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff fdd1 	bl	80082e8 <HAL_UARTEx_RxEventCallback>
 8008746:	e002      	b.n	800874e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7f8 fd03 	bl	8001154 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	e002      	b.n	8008758 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	e000      	b.n	8008758 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008756:	2302      	movs	r3, #2
  }
}
 8008758:	4618      	mov	r0, r3
 800875a:	3730      	adds	r7, #48	@ 0x30
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008764:	b0c0      	sub	sp, #256	@ 0x100
 8008766:	af00      	add	r7, sp, #0
 8008768:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800876c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	691b      	ldr	r3, [r3, #16]
 8008774:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800877c:	68d9      	ldr	r1, [r3, #12]
 800877e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	ea40 0301 	orr.w	r3, r0, r1
 8008788:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800878a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	431a      	orrs	r2, r3
 8008798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	431a      	orrs	r2, r3
 80087a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80087b8:	f021 010c 	bic.w	r1, r1, #12
 80087bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087c6:	430b      	orrs	r3, r1
 80087c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80087d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087da:	6999      	ldr	r1, [r3, #24]
 80087dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	ea40 0301 	orr.w	r3, r0, r1
 80087e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4b8f      	ldr	r3, [pc, #572]	@ (8008a2c <UART_SetConfig+0x2cc>)
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d005      	beq.n	8008800 <UART_SetConfig+0xa0>
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4b8d      	ldr	r3, [pc, #564]	@ (8008a30 <UART_SetConfig+0x2d0>)
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d104      	bne.n	800880a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008800:	f7fd fb04 	bl	8005e0c <HAL_RCC_GetPCLK2Freq>
 8008804:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008808:	e003      	b.n	8008812 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800880a:	f7fd faeb 	bl	8005de4 <HAL_RCC_GetPCLK1Freq>
 800880e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800881c:	f040 810c 	bne.w	8008a38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008824:	2200      	movs	r2, #0
 8008826:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800882a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800882e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008832:	4622      	mov	r2, r4
 8008834:	462b      	mov	r3, r5
 8008836:	1891      	adds	r1, r2, r2
 8008838:	65b9      	str	r1, [r7, #88]	@ 0x58
 800883a:	415b      	adcs	r3, r3
 800883c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800883e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008842:	4621      	mov	r1, r4
 8008844:	eb12 0801 	adds.w	r8, r2, r1
 8008848:	4629      	mov	r1, r5
 800884a:	eb43 0901 	adc.w	r9, r3, r1
 800884e:	f04f 0200 	mov.w	r2, #0
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800885a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800885e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008862:	4690      	mov	r8, r2
 8008864:	4699      	mov	r9, r3
 8008866:	4623      	mov	r3, r4
 8008868:	eb18 0303 	adds.w	r3, r8, r3
 800886c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008870:	462b      	mov	r3, r5
 8008872:	eb49 0303 	adc.w	r3, r9, r3
 8008876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800887a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008886:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800888a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800888e:	460b      	mov	r3, r1
 8008890:	18db      	adds	r3, r3, r3
 8008892:	653b      	str	r3, [r7, #80]	@ 0x50
 8008894:	4613      	mov	r3, r2
 8008896:	eb42 0303 	adc.w	r3, r2, r3
 800889a:	657b      	str	r3, [r7, #84]	@ 0x54
 800889c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80088a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80088a4:	f7f8 f9d8 	bl	8000c58 <__aeabi_uldivmod>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4b61      	ldr	r3, [pc, #388]	@ (8008a34 <UART_SetConfig+0x2d4>)
 80088ae:	fba3 2302 	umull	r2, r3, r3, r2
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	011c      	lsls	r4, r3, #4
 80088b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088ba:	2200      	movs	r2, #0
 80088bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80088c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	1891      	adds	r1, r2, r2
 80088ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80088d0:	415b      	adcs	r3, r3
 80088d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80088d8:	4641      	mov	r1, r8
 80088da:	eb12 0a01 	adds.w	sl, r2, r1
 80088de:	4649      	mov	r1, r9
 80088e0:	eb43 0b01 	adc.w	fp, r3, r1
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088f8:	4692      	mov	sl, r2
 80088fa:	469b      	mov	fp, r3
 80088fc:	4643      	mov	r3, r8
 80088fe:	eb1a 0303 	adds.w	r3, sl, r3
 8008902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008906:	464b      	mov	r3, r9
 8008908:	eb4b 0303 	adc.w	r3, fp, r3
 800890c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800891c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008920:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008924:	460b      	mov	r3, r1
 8008926:	18db      	adds	r3, r3, r3
 8008928:	643b      	str	r3, [r7, #64]	@ 0x40
 800892a:	4613      	mov	r3, r2
 800892c:	eb42 0303 	adc.w	r3, r2, r3
 8008930:	647b      	str	r3, [r7, #68]	@ 0x44
 8008932:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008936:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800893a:	f7f8 f98d 	bl	8000c58 <__aeabi_uldivmod>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4611      	mov	r1, r2
 8008944:	4b3b      	ldr	r3, [pc, #236]	@ (8008a34 <UART_SetConfig+0x2d4>)
 8008946:	fba3 2301 	umull	r2, r3, r3, r1
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	2264      	movs	r2, #100	@ 0x64
 800894e:	fb02 f303 	mul.w	r3, r2, r3
 8008952:	1acb      	subs	r3, r1, r3
 8008954:	00db      	lsls	r3, r3, #3
 8008956:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800895a:	4b36      	ldr	r3, [pc, #216]	@ (8008a34 <UART_SetConfig+0x2d4>)
 800895c:	fba3 2302 	umull	r2, r3, r3, r2
 8008960:	095b      	lsrs	r3, r3, #5
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008968:	441c      	add	r4, r3
 800896a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800896e:	2200      	movs	r2, #0
 8008970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008974:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008978:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800897c:	4642      	mov	r2, r8
 800897e:	464b      	mov	r3, r9
 8008980:	1891      	adds	r1, r2, r2
 8008982:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008984:	415b      	adcs	r3, r3
 8008986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800898c:	4641      	mov	r1, r8
 800898e:	1851      	adds	r1, r2, r1
 8008990:	6339      	str	r1, [r7, #48]	@ 0x30
 8008992:	4649      	mov	r1, r9
 8008994:	414b      	adcs	r3, r1
 8008996:	637b      	str	r3, [r7, #52]	@ 0x34
 8008998:	f04f 0200 	mov.w	r2, #0
 800899c:	f04f 0300 	mov.w	r3, #0
 80089a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80089a4:	4659      	mov	r1, fp
 80089a6:	00cb      	lsls	r3, r1, #3
 80089a8:	4651      	mov	r1, sl
 80089aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089ae:	4651      	mov	r1, sl
 80089b0:	00ca      	lsls	r2, r1, #3
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	4603      	mov	r3, r0
 80089b8:	4642      	mov	r2, r8
 80089ba:	189b      	adds	r3, r3, r2
 80089bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089c0:	464b      	mov	r3, r9
 80089c2:	460a      	mov	r2, r1
 80089c4:	eb42 0303 	adc.w	r3, r2, r3
 80089c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80089dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089e0:	460b      	mov	r3, r1
 80089e2:	18db      	adds	r3, r3, r3
 80089e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089e6:	4613      	mov	r3, r2
 80089e8:	eb42 0303 	adc.w	r3, r2, r3
 80089ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80089f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80089f6:	f7f8 f92f 	bl	8000c58 <__aeabi_uldivmod>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <UART_SetConfig+0x2d4>)
 8008a00:	fba3 1302 	umull	r1, r3, r3, r2
 8008a04:	095b      	lsrs	r3, r3, #5
 8008a06:	2164      	movs	r1, #100	@ 0x64
 8008a08:	fb01 f303 	mul.w	r3, r1, r3
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	3332      	adds	r3, #50	@ 0x32
 8008a12:	4a08      	ldr	r2, [pc, #32]	@ (8008a34 <UART_SetConfig+0x2d4>)
 8008a14:	fba2 2303 	umull	r2, r3, r2, r3
 8008a18:	095b      	lsrs	r3, r3, #5
 8008a1a:	f003 0207 	and.w	r2, r3, #7
 8008a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4422      	add	r2, r4
 8008a26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a28:	e106      	b.n	8008c38 <UART_SetConfig+0x4d8>
 8008a2a:	bf00      	nop
 8008a2c:	40011000 	.word	0x40011000
 8008a30:	40011400 	.word	0x40011400
 8008a34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008a46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008a4a:	4642      	mov	r2, r8
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	1891      	adds	r1, r2, r2
 8008a50:	6239      	str	r1, [r7, #32]
 8008a52:	415b      	adcs	r3, r3
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a5a:	4641      	mov	r1, r8
 8008a5c:	1854      	adds	r4, r2, r1
 8008a5e:	4649      	mov	r1, r9
 8008a60:	eb43 0501 	adc.w	r5, r3, r1
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	00eb      	lsls	r3, r5, #3
 8008a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a72:	00e2      	lsls	r2, r4, #3
 8008a74:	4614      	mov	r4, r2
 8008a76:	461d      	mov	r5, r3
 8008a78:	4643      	mov	r3, r8
 8008a7a:	18e3      	adds	r3, r4, r3
 8008a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a80:	464b      	mov	r3, r9
 8008a82:	eb45 0303 	adc.w	r3, r5, r3
 8008a86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a9a:	f04f 0200 	mov.w	r2, #0
 8008a9e:	f04f 0300 	mov.w	r3, #0
 8008aa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	008b      	lsls	r3, r1, #2
 8008aaa:	4621      	mov	r1, r4
 8008aac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ab0:	4621      	mov	r1, r4
 8008ab2:	008a      	lsls	r2, r1, #2
 8008ab4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ab8:	f7f8 f8ce 	bl	8000c58 <__aeabi_uldivmod>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4b60      	ldr	r3, [pc, #384]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac6:	095b      	lsrs	r3, r3, #5
 8008ac8:	011c      	lsls	r4, r3, #4
 8008aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ad4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008ad8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	1891      	adds	r1, r2, r2
 8008ae2:	61b9      	str	r1, [r7, #24]
 8008ae4:	415b      	adcs	r3, r3
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aec:	4641      	mov	r1, r8
 8008aee:	1851      	adds	r1, r2, r1
 8008af0:	6139      	str	r1, [r7, #16]
 8008af2:	4649      	mov	r1, r9
 8008af4:	414b      	adcs	r3, r1
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	f04f 0200 	mov.w	r2, #0
 8008afc:	f04f 0300 	mov.w	r3, #0
 8008b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b04:	4659      	mov	r1, fp
 8008b06:	00cb      	lsls	r3, r1, #3
 8008b08:	4651      	mov	r1, sl
 8008b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b0e:	4651      	mov	r1, sl
 8008b10:	00ca      	lsls	r2, r1, #3
 8008b12:	4610      	mov	r0, r2
 8008b14:	4619      	mov	r1, r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	4642      	mov	r2, r8
 8008b1a:	189b      	adds	r3, r3, r2
 8008b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b20:	464b      	mov	r3, r9
 8008b22:	460a      	mov	r2, r1
 8008b24:	eb42 0303 	adc.w	r3, r2, r3
 8008b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008b44:	4649      	mov	r1, r9
 8008b46:	008b      	lsls	r3, r1, #2
 8008b48:	4641      	mov	r1, r8
 8008b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b4e:	4641      	mov	r1, r8
 8008b50:	008a      	lsls	r2, r1, #2
 8008b52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008b56:	f7f8 f87f 	bl	8000c58 <__aeabi_uldivmod>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	4611      	mov	r1, r2
 8008b60:	4b38      	ldr	r3, [pc, #224]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008b62:	fba3 2301 	umull	r2, r3, r3, r1
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	2264      	movs	r2, #100	@ 0x64
 8008b6a:	fb02 f303 	mul.w	r3, r2, r3
 8008b6e:	1acb      	subs	r3, r1, r3
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	3332      	adds	r3, #50	@ 0x32
 8008b74:	4a33      	ldr	r2, [pc, #204]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b80:	441c      	add	r4, r3
 8008b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b86:	2200      	movs	r2, #0
 8008b88:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	1891      	adds	r1, r2, r2
 8008b96:	60b9      	str	r1, [r7, #8]
 8008b98:	415b      	adcs	r3, r3
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ba0:	4641      	mov	r1, r8
 8008ba2:	1851      	adds	r1, r2, r1
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	414b      	adcs	r3, r1
 8008baa:	607b      	str	r3, [r7, #4]
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bb8:	4659      	mov	r1, fp
 8008bba:	00cb      	lsls	r3, r1, #3
 8008bbc:	4651      	mov	r1, sl
 8008bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bc2:	4651      	mov	r1, sl
 8008bc4:	00ca      	lsls	r2, r1, #3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4642      	mov	r2, r8
 8008bce:	189b      	adds	r3, r3, r2
 8008bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	460a      	mov	r2, r1
 8008bd6:	eb42 0303 	adc.w	r3, r2, r3
 8008bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008be6:	667a      	str	r2, [r7, #100]	@ 0x64
 8008be8:	f04f 0200 	mov.w	r2, #0
 8008bec:	f04f 0300 	mov.w	r3, #0
 8008bf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	008b      	lsls	r3, r1, #2
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bfe:	4641      	mov	r1, r8
 8008c00:	008a      	lsls	r2, r1, #2
 8008c02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c06:	f7f8 f827 	bl	8000c58 <__aeabi_uldivmod>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008c10:	fba3 1302 	umull	r1, r3, r3, r2
 8008c14:	095b      	lsrs	r3, r3, #5
 8008c16:	2164      	movs	r1, #100	@ 0x64
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	3332      	adds	r3, #50	@ 0x32
 8008c22:	4a08      	ldr	r2, [pc, #32]	@ (8008c44 <UART_SetConfig+0x4e4>)
 8008c24:	fba2 2303 	umull	r2, r3, r2, r3
 8008c28:	095b      	lsrs	r3, r3, #5
 8008c2a:	f003 020f 	and.w	r2, r3, #15
 8008c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4422      	add	r2, r4
 8008c36:	609a      	str	r2, [r3, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c44:	51eb851f 	.word	0x51eb851f

08008c48 <__cvt>:
 8008c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	ec57 6b10 	vmov	r6, r7, d0
 8008c50:	2f00      	cmp	r7, #0
 8008c52:	460c      	mov	r4, r1
 8008c54:	4619      	mov	r1, r3
 8008c56:	463b      	mov	r3, r7
 8008c58:	bfbb      	ittet	lt
 8008c5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c5e:	461f      	movlt	r7, r3
 8008c60:	2300      	movge	r3, #0
 8008c62:	232d      	movlt	r3, #45	@ 0x2d
 8008c64:	700b      	strb	r3, [r1, #0]
 8008c66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008c6c:	4691      	mov	r9, r2
 8008c6e:	f023 0820 	bic.w	r8, r3, #32
 8008c72:	bfbc      	itt	lt
 8008c74:	4632      	movlt	r2, r6
 8008c76:	4616      	movlt	r6, r2
 8008c78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c7c:	d005      	beq.n	8008c8a <__cvt+0x42>
 8008c7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c82:	d100      	bne.n	8008c86 <__cvt+0x3e>
 8008c84:	3401      	adds	r4, #1
 8008c86:	2102      	movs	r1, #2
 8008c88:	e000      	b.n	8008c8c <__cvt+0x44>
 8008c8a:	2103      	movs	r1, #3
 8008c8c:	ab03      	add	r3, sp, #12
 8008c8e:	9301      	str	r3, [sp, #4]
 8008c90:	ab02      	add	r3, sp, #8
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	ec47 6b10 	vmov	d0, r6, r7
 8008c98:	4653      	mov	r3, sl
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	f000 fe5c 	bl	8009958 <_dtoa_r>
 8008ca0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	d119      	bne.n	8008cdc <__cvt+0x94>
 8008ca8:	f019 0f01 	tst.w	r9, #1
 8008cac:	d00e      	beq.n	8008ccc <__cvt+0x84>
 8008cae:	eb00 0904 	add.w	r9, r0, r4
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	4639      	mov	r1, r7
 8008cba:	f7f7 ff0d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cbe:	b108      	cbz	r0, 8008cc4 <__cvt+0x7c>
 8008cc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008cc4:	2230      	movs	r2, #48	@ 0x30
 8008cc6:	9b03      	ldr	r3, [sp, #12]
 8008cc8:	454b      	cmp	r3, r9
 8008cca:	d31e      	bcc.n	8008d0a <__cvt+0xc2>
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cd0:	1b5b      	subs	r3, r3, r5
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	b004      	add	sp, #16
 8008cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ce0:	eb00 0904 	add.w	r9, r0, r4
 8008ce4:	d1e5      	bne.n	8008cb2 <__cvt+0x6a>
 8008ce6:	7803      	ldrb	r3, [r0, #0]
 8008ce8:	2b30      	cmp	r3, #48	@ 0x30
 8008cea:	d10a      	bne.n	8008d02 <__cvt+0xba>
 8008cec:	2200      	movs	r2, #0
 8008cee:	2300      	movs	r3, #0
 8008cf0:	4630      	mov	r0, r6
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	f7f7 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cf8:	b918      	cbnz	r0, 8008d02 <__cvt+0xba>
 8008cfa:	f1c4 0401 	rsb	r4, r4, #1
 8008cfe:	f8ca 4000 	str.w	r4, [sl]
 8008d02:	f8da 3000 	ldr.w	r3, [sl]
 8008d06:	4499      	add	r9, r3
 8008d08:	e7d3      	b.n	8008cb2 <__cvt+0x6a>
 8008d0a:	1c59      	adds	r1, r3, #1
 8008d0c:	9103      	str	r1, [sp, #12]
 8008d0e:	701a      	strb	r2, [r3, #0]
 8008d10:	e7d9      	b.n	8008cc6 <__cvt+0x7e>

08008d12 <__exponent>:
 8008d12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d14:	2900      	cmp	r1, #0
 8008d16:	bfba      	itte	lt
 8008d18:	4249      	neglt	r1, r1
 8008d1a:	232d      	movlt	r3, #45	@ 0x2d
 8008d1c:	232b      	movge	r3, #43	@ 0x2b
 8008d1e:	2909      	cmp	r1, #9
 8008d20:	7002      	strb	r2, [r0, #0]
 8008d22:	7043      	strb	r3, [r0, #1]
 8008d24:	dd29      	ble.n	8008d7a <__exponent+0x68>
 8008d26:	f10d 0307 	add.w	r3, sp, #7
 8008d2a:	461d      	mov	r5, r3
 8008d2c:	270a      	movs	r7, #10
 8008d2e:	461a      	mov	r2, r3
 8008d30:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d34:	fb07 1416 	mls	r4, r7, r6, r1
 8008d38:	3430      	adds	r4, #48	@ 0x30
 8008d3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d3e:	460c      	mov	r4, r1
 8008d40:	2c63      	cmp	r4, #99	@ 0x63
 8008d42:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d46:	4631      	mov	r1, r6
 8008d48:	dcf1      	bgt.n	8008d2e <__exponent+0x1c>
 8008d4a:	3130      	adds	r1, #48	@ 0x30
 8008d4c:	1e94      	subs	r4, r2, #2
 8008d4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d52:	1c41      	adds	r1, r0, #1
 8008d54:	4623      	mov	r3, r4
 8008d56:	42ab      	cmp	r3, r5
 8008d58:	d30a      	bcc.n	8008d70 <__exponent+0x5e>
 8008d5a:	f10d 0309 	add.w	r3, sp, #9
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	42ac      	cmp	r4, r5
 8008d62:	bf88      	it	hi
 8008d64:	2300      	movhi	r3, #0
 8008d66:	3302      	adds	r3, #2
 8008d68:	4403      	add	r3, r0
 8008d6a:	1a18      	subs	r0, r3, r0
 8008d6c:	b003      	add	sp, #12
 8008d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d78:	e7ed      	b.n	8008d56 <__exponent+0x44>
 8008d7a:	2330      	movs	r3, #48	@ 0x30
 8008d7c:	3130      	adds	r1, #48	@ 0x30
 8008d7e:	7083      	strb	r3, [r0, #2]
 8008d80:	70c1      	strb	r1, [r0, #3]
 8008d82:	1d03      	adds	r3, r0, #4
 8008d84:	e7f1      	b.n	8008d6a <__exponent+0x58>
	...

08008d88 <_printf_float>:
 8008d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8c:	b08d      	sub	sp, #52	@ 0x34
 8008d8e:	460c      	mov	r4, r1
 8008d90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d94:	4616      	mov	r6, r2
 8008d96:	461f      	mov	r7, r3
 8008d98:	4605      	mov	r5, r0
 8008d9a:	f000 fcdb 	bl	8009754 <_localeconv_r>
 8008d9e:	6803      	ldr	r3, [r0, #0]
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7f7 fa6c 	bl	8000280 <strlen>
 8008da8:	2300      	movs	r3, #0
 8008daa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dac:	f8d8 3000 	ldr.w	r3, [r8]
 8008db0:	9005      	str	r0, [sp, #20]
 8008db2:	3307      	adds	r3, #7
 8008db4:	f023 0307 	bic.w	r3, r3, #7
 8008db8:	f103 0208 	add.w	r2, r3, #8
 8008dbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008dc0:	f8d4 b000 	ldr.w	fp, [r4]
 8008dc4:	f8c8 2000 	str.w	r2, [r8]
 8008dc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dcc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008dd0:	9307      	str	r3, [sp, #28]
 8008dd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008dd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dde:	4b9c      	ldr	r3, [pc, #624]	@ (8009050 <_printf_float+0x2c8>)
 8008de0:	f04f 32ff 	mov.w	r2, #4294967295
 8008de4:	f7f7 feaa 	bl	8000b3c <__aeabi_dcmpun>
 8008de8:	bb70      	cbnz	r0, 8008e48 <_printf_float+0xc0>
 8008dea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008dee:	4b98      	ldr	r3, [pc, #608]	@ (8009050 <_printf_float+0x2c8>)
 8008df0:	f04f 32ff 	mov.w	r2, #4294967295
 8008df4:	f7f7 fe84 	bl	8000b00 <__aeabi_dcmple>
 8008df8:	bb30      	cbnz	r0, 8008e48 <_printf_float+0xc0>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 fe73 	bl	8000aec <__aeabi_dcmplt>
 8008e06:	b110      	cbz	r0, 8008e0e <_printf_float+0x86>
 8008e08:	232d      	movs	r3, #45	@ 0x2d
 8008e0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e0e:	4a91      	ldr	r2, [pc, #580]	@ (8009054 <_printf_float+0x2cc>)
 8008e10:	4b91      	ldr	r3, [pc, #580]	@ (8009058 <_printf_float+0x2d0>)
 8008e12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e16:	bf94      	ite	ls
 8008e18:	4690      	movls	r8, r2
 8008e1a:	4698      	movhi	r8, r3
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	f02b 0304 	bic.w	r3, fp, #4
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	f04f 0900 	mov.w	r9, #0
 8008e2a:	9700      	str	r7, [sp, #0]
 8008e2c:	4633      	mov	r3, r6
 8008e2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e30:	4621      	mov	r1, r4
 8008e32:	4628      	mov	r0, r5
 8008e34:	f000 f9d2 	bl	80091dc <_printf_common>
 8008e38:	3001      	adds	r0, #1
 8008e3a:	f040 808d 	bne.w	8008f58 <_printf_float+0x1d0>
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	b00d      	add	sp, #52	@ 0x34
 8008e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e48:	4642      	mov	r2, r8
 8008e4a:	464b      	mov	r3, r9
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	4649      	mov	r1, r9
 8008e50:	f7f7 fe74 	bl	8000b3c <__aeabi_dcmpun>
 8008e54:	b140      	cbz	r0, 8008e68 <_printf_float+0xe0>
 8008e56:	464b      	mov	r3, r9
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	bfbc      	itt	lt
 8008e5c:	232d      	movlt	r3, #45	@ 0x2d
 8008e5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e62:	4a7e      	ldr	r2, [pc, #504]	@ (800905c <_printf_float+0x2d4>)
 8008e64:	4b7e      	ldr	r3, [pc, #504]	@ (8009060 <_printf_float+0x2d8>)
 8008e66:	e7d4      	b.n	8008e12 <_printf_float+0x8a>
 8008e68:	6863      	ldr	r3, [r4, #4]
 8008e6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008e6e:	9206      	str	r2, [sp, #24]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	d13b      	bne.n	8008eec <_printf_float+0x164>
 8008e74:	2306      	movs	r3, #6
 8008e76:	6063      	str	r3, [r4, #4]
 8008e78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	6022      	str	r2, [r4, #0]
 8008e80:	9303      	str	r3, [sp, #12]
 8008e82:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e84:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e88:	ab09      	add	r3, sp, #36	@ 0x24
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	6861      	ldr	r1, [r4, #4]
 8008e8e:	ec49 8b10 	vmov	d0, r8, r9
 8008e92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e96:	4628      	mov	r0, r5
 8008e98:	f7ff fed6 	bl	8008c48 <__cvt>
 8008e9c:	9b06      	ldr	r3, [sp, #24]
 8008e9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ea0:	2b47      	cmp	r3, #71	@ 0x47
 8008ea2:	4680      	mov	r8, r0
 8008ea4:	d129      	bne.n	8008efa <_printf_float+0x172>
 8008ea6:	1cc8      	adds	r0, r1, #3
 8008ea8:	db02      	blt.n	8008eb0 <_printf_float+0x128>
 8008eaa:	6863      	ldr	r3, [r4, #4]
 8008eac:	4299      	cmp	r1, r3
 8008eae:	dd41      	ble.n	8008f34 <_printf_float+0x1ac>
 8008eb0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008eb4:	fa5f fa8a 	uxtb.w	sl, sl
 8008eb8:	3901      	subs	r1, #1
 8008eba:	4652      	mov	r2, sl
 8008ebc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ec0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ec2:	f7ff ff26 	bl	8008d12 <__exponent>
 8008ec6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ec8:	1813      	adds	r3, r2, r0
 8008eca:	2a01      	cmp	r2, #1
 8008ecc:	4681      	mov	r9, r0
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	dc02      	bgt.n	8008ed8 <_printf_float+0x150>
 8008ed2:	6822      	ldr	r2, [r4, #0]
 8008ed4:	07d2      	lsls	r2, r2, #31
 8008ed6:	d501      	bpl.n	8008edc <_printf_float+0x154>
 8008ed8:	3301      	adds	r3, #1
 8008eda:	6123      	str	r3, [r4, #16]
 8008edc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0a2      	beq.n	8008e2a <_printf_float+0xa2>
 8008ee4:	232d      	movs	r3, #45	@ 0x2d
 8008ee6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eea:	e79e      	b.n	8008e2a <_printf_float+0xa2>
 8008eec:	9a06      	ldr	r2, [sp, #24]
 8008eee:	2a47      	cmp	r2, #71	@ 0x47
 8008ef0:	d1c2      	bne.n	8008e78 <_printf_float+0xf0>
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1c0      	bne.n	8008e78 <_printf_float+0xf0>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e7bd      	b.n	8008e76 <_printf_float+0xee>
 8008efa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008efe:	d9db      	bls.n	8008eb8 <_printf_float+0x130>
 8008f00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f04:	d118      	bne.n	8008f38 <_printf_float+0x1b0>
 8008f06:	2900      	cmp	r1, #0
 8008f08:	6863      	ldr	r3, [r4, #4]
 8008f0a:	dd0b      	ble.n	8008f24 <_printf_float+0x19c>
 8008f0c:	6121      	str	r1, [r4, #16]
 8008f0e:	b913      	cbnz	r3, 8008f16 <_printf_float+0x18e>
 8008f10:	6822      	ldr	r2, [r4, #0]
 8008f12:	07d0      	lsls	r0, r2, #31
 8008f14:	d502      	bpl.n	8008f1c <_printf_float+0x194>
 8008f16:	3301      	adds	r3, #1
 8008f18:	440b      	add	r3, r1
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f1e:	f04f 0900 	mov.w	r9, #0
 8008f22:	e7db      	b.n	8008edc <_printf_float+0x154>
 8008f24:	b913      	cbnz	r3, 8008f2c <_printf_float+0x1a4>
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	07d2      	lsls	r2, r2, #31
 8008f2a:	d501      	bpl.n	8008f30 <_printf_float+0x1a8>
 8008f2c:	3302      	adds	r3, #2
 8008f2e:	e7f4      	b.n	8008f1a <_printf_float+0x192>
 8008f30:	2301      	movs	r3, #1
 8008f32:	e7f2      	b.n	8008f1a <_printf_float+0x192>
 8008f34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f3a:	4299      	cmp	r1, r3
 8008f3c:	db05      	blt.n	8008f4a <_printf_float+0x1c2>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	6121      	str	r1, [r4, #16]
 8008f42:	07d8      	lsls	r0, r3, #31
 8008f44:	d5ea      	bpl.n	8008f1c <_printf_float+0x194>
 8008f46:	1c4b      	adds	r3, r1, #1
 8008f48:	e7e7      	b.n	8008f1a <_printf_float+0x192>
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	bfd4      	ite	le
 8008f4e:	f1c1 0202 	rsble	r2, r1, #2
 8008f52:	2201      	movgt	r2, #1
 8008f54:	4413      	add	r3, r2
 8008f56:	e7e0      	b.n	8008f1a <_printf_float+0x192>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	055a      	lsls	r2, r3, #21
 8008f5c:	d407      	bmi.n	8008f6e <_printf_float+0x1e6>
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	4642      	mov	r2, r8
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b8      	blx	r7
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d12b      	bne.n	8008fc4 <_printf_float+0x23c>
 8008f6c:	e767      	b.n	8008e3e <_printf_float+0xb6>
 8008f6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f72:	f240 80dd 	bls.w	8009130 <_printf_float+0x3a8>
 8008f76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f7f7 fdab 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d033      	beq.n	8008fee <_printf_float+0x266>
 8008f86:	4a37      	ldr	r2, [pc, #220]	@ (8009064 <_printf_float+0x2dc>)
 8008f88:	2301      	movs	r3, #1
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b8      	blx	r7
 8008f90:	3001      	adds	r0, #1
 8008f92:	f43f af54 	beq.w	8008e3e <_printf_float+0xb6>
 8008f96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f9a:	4543      	cmp	r3, r8
 8008f9c:	db02      	blt.n	8008fa4 <_printf_float+0x21c>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	07d8      	lsls	r0, r3, #31
 8008fa2:	d50f      	bpl.n	8008fc4 <_printf_float+0x23c>
 8008fa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f43f af45 	beq.w	8008e3e <_printf_float+0xb6>
 8008fb4:	f04f 0900 	mov.w	r9, #0
 8008fb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fbc:	f104 0a1a 	add.w	sl, r4, #26
 8008fc0:	45c8      	cmp	r8, r9
 8008fc2:	dc09      	bgt.n	8008fd8 <_printf_float+0x250>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	079b      	lsls	r3, r3, #30
 8008fc8:	f100 8103 	bmi.w	80091d2 <_printf_float+0x44a>
 8008fcc:	68e0      	ldr	r0, [r4, #12]
 8008fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fd0:	4298      	cmp	r0, r3
 8008fd2:	bfb8      	it	lt
 8008fd4:	4618      	movlt	r0, r3
 8008fd6:	e734      	b.n	8008e42 <_printf_float+0xba>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	4652      	mov	r2, sl
 8008fdc:	4631      	mov	r1, r6
 8008fde:	4628      	mov	r0, r5
 8008fe0:	47b8      	blx	r7
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	f43f af2b 	beq.w	8008e3e <_printf_float+0xb6>
 8008fe8:	f109 0901 	add.w	r9, r9, #1
 8008fec:	e7e8      	b.n	8008fc0 <_printf_float+0x238>
 8008fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	dc39      	bgt.n	8009068 <_printf_float+0x2e0>
 8008ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8009064 <_printf_float+0x2dc>)
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	47b8      	blx	r7
 8008ffe:	3001      	adds	r0, #1
 8009000:	f43f af1d 	beq.w	8008e3e <_printf_float+0xb6>
 8009004:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009008:	ea59 0303 	orrs.w	r3, r9, r3
 800900c:	d102      	bne.n	8009014 <_printf_float+0x28c>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	07d9      	lsls	r1, r3, #31
 8009012:	d5d7      	bpl.n	8008fc4 <_printf_float+0x23c>
 8009014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009018:	4631      	mov	r1, r6
 800901a:	4628      	mov	r0, r5
 800901c:	47b8      	blx	r7
 800901e:	3001      	adds	r0, #1
 8009020:	f43f af0d 	beq.w	8008e3e <_printf_float+0xb6>
 8009024:	f04f 0a00 	mov.w	sl, #0
 8009028:	f104 0b1a 	add.w	fp, r4, #26
 800902c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800902e:	425b      	negs	r3, r3
 8009030:	4553      	cmp	r3, sl
 8009032:	dc01      	bgt.n	8009038 <_printf_float+0x2b0>
 8009034:	464b      	mov	r3, r9
 8009036:	e793      	b.n	8008f60 <_printf_float+0x1d8>
 8009038:	2301      	movs	r3, #1
 800903a:	465a      	mov	r2, fp
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f aefb 	beq.w	8008e3e <_printf_float+0xb6>
 8009048:	f10a 0a01 	add.w	sl, sl, #1
 800904c:	e7ee      	b.n	800902c <_printf_float+0x2a4>
 800904e:	bf00      	nop
 8009050:	7fefffff 	.word	0x7fefffff
 8009054:	0800d19c 	.word	0x0800d19c
 8009058:	0800d1a0 	.word	0x0800d1a0
 800905c:	0800d1a4 	.word	0x0800d1a4
 8009060:	0800d1a8 	.word	0x0800d1a8
 8009064:	0800d1ac 	.word	0x0800d1ac
 8009068:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800906a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800906e:	4553      	cmp	r3, sl
 8009070:	bfa8      	it	ge
 8009072:	4653      	movge	r3, sl
 8009074:	2b00      	cmp	r3, #0
 8009076:	4699      	mov	r9, r3
 8009078:	dc36      	bgt.n	80090e8 <_printf_float+0x360>
 800907a:	f04f 0b00 	mov.w	fp, #0
 800907e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009082:	f104 021a 	add.w	r2, r4, #26
 8009086:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009088:	9306      	str	r3, [sp, #24]
 800908a:	eba3 0309 	sub.w	r3, r3, r9
 800908e:	455b      	cmp	r3, fp
 8009090:	dc31      	bgt.n	80090f6 <_printf_float+0x36e>
 8009092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009094:	459a      	cmp	sl, r3
 8009096:	dc3a      	bgt.n	800910e <_printf_float+0x386>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	07da      	lsls	r2, r3, #31
 800909c:	d437      	bmi.n	800910e <_printf_float+0x386>
 800909e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a0:	ebaa 0903 	sub.w	r9, sl, r3
 80090a4:	9b06      	ldr	r3, [sp, #24]
 80090a6:	ebaa 0303 	sub.w	r3, sl, r3
 80090aa:	4599      	cmp	r9, r3
 80090ac:	bfa8      	it	ge
 80090ae:	4699      	movge	r9, r3
 80090b0:	f1b9 0f00 	cmp.w	r9, #0
 80090b4:	dc33      	bgt.n	800911e <_printf_float+0x396>
 80090b6:	f04f 0800 	mov.w	r8, #0
 80090ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090be:	f104 0b1a 	add.w	fp, r4, #26
 80090c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c4:	ebaa 0303 	sub.w	r3, sl, r3
 80090c8:	eba3 0309 	sub.w	r3, r3, r9
 80090cc:	4543      	cmp	r3, r8
 80090ce:	f77f af79 	ble.w	8008fc4 <_printf_float+0x23c>
 80090d2:	2301      	movs	r3, #1
 80090d4:	465a      	mov	r2, fp
 80090d6:	4631      	mov	r1, r6
 80090d8:	4628      	mov	r0, r5
 80090da:	47b8      	blx	r7
 80090dc:	3001      	adds	r0, #1
 80090de:	f43f aeae 	beq.w	8008e3e <_printf_float+0xb6>
 80090e2:	f108 0801 	add.w	r8, r8, #1
 80090e6:	e7ec      	b.n	80090c2 <_printf_float+0x33a>
 80090e8:	4642      	mov	r2, r8
 80090ea:	4631      	mov	r1, r6
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	d1c2      	bne.n	800907a <_printf_float+0x2f2>
 80090f4:	e6a3      	b.n	8008e3e <_printf_float+0xb6>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4631      	mov	r1, r6
 80090fa:	4628      	mov	r0, r5
 80090fc:	9206      	str	r2, [sp, #24]
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	f43f ae9c 	beq.w	8008e3e <_printf_float+0xb6>
 8009106:	9a06      	ldr	r2, [sp, #24]
 8009108:	f10b 0b01 	add.w	fp, fp, #1
 800910c:	e7bb      	b.n	8009086 <_printf_float+0x2fe>
 800910e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009112:	4631      	mov	r1, r6
 8009114:	4628      	mov	r0, r5
 8009116:	47b8      	blx	r7
 8009118:	3001      	adds	r0, #1
 800911a:	d1c0      	bne.n	800909e <_printf_float+0x316>
 800911c:	e68f      	b.n	8008e3e <_printf_float+0xb6>
 800911e:	9a06      	ldr	r2, [sp, #24]
 8009120:	464b      	mov	r3, r9
 8009122:	4442      	add	r2, r8
 8009124:	4631      	mov	r1, r6
 8009126:	4628      	mov	r0, r5
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	d1c3      	bne.n	80090b6 <_printf_float+0x32e>
 800912e:	e686      	b.n	8008e3e <_printf_float+0xb6>
 8009130:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009134:	f1ba 0f01 	cmp.w	sl, #1
 8009138:	dc01      	bgt.n	800913e <_printf_float+0x3b6>
 800913a:	07db      	lsls	r3, r3, #31
 800913c:	d536      	bpl.n	80091ac <_printf_float+0x424>
 800913e:	2301      	movs	r3, #1
 8009140:	4642      	mov	r2, r8
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f ae78 	beq.w	8008e3e <_printf_float+0xb6>
 800914e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	f43f ae70 	beq.w	8008e3e <_printf_float+0xb6>
 800915e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009162:	2200      	movs	r2, #0
 8009164:	2300      	movs	r3, #0
 8009166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916a:	f7f7 fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800916e:	b9c0      	cbnz	r0, 80091a2 <_printf_float+0x41a>
 8009170:	4653      	mov	r3, sl
 8009172:	f108 0201 	add.w	r2, r8, #1
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	d10c      	bne.n	800919a <_printf_float+0x412>
 8009180:	e65d      	b.n	8008e3e <_printf_float+0xb6>
 8009182:	2301      	movs	r3, #1
 8009184:	465a      	mov	r2, fp
 8009186:	4631      	mov	r1, r6
 8009188:	4628      	mov	r0, r5
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	f43f ae56 	beq.w	8008e3e <_printf_float+0xb6>
 8009192:	f108 0801 	add.w	r8, r8, #1
 8009196:	45d0      	cmp	r8, sl
 8009198:	dbf3      	blt.n	8009182 <_printf_float+0x3fa>
 800919a:	464b      	mov	r3, r9
 800919c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80091a0:	e6df      	b.n	8008f62 <_printf_float+0x1da>
 80091a2:	f04f 0800 	mov.w	r8, #0
 80091a6:	f104 0b1a 	add.w	fp, r4, #26
 80091aa:	e7f4      	b.n	8009196 <_printf_float+0x40e>
 80091ac:	2301      	movs	r3, #1
 80091ae:	4642      	mov	r2, r8
 80091b0:	e7e1      	b.n	8009176 <_printf_float+0x3ee>
 80091b2:	2301      	movs	r3, #1
 80091b4:	464a      	mov	r2, r9
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	f43f ae3e 	beq.w	8008e3e <_printf_float+0xb6>
 80091c2:	f108 0801 	add.w	r8, r8, #1
 80091c6:	68e3      	ldr	r3, [r4, #12]
 80091c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80091ca:	1a5b      	subs	r3, r3, r1
 80091cc:	4543      	cmp	r3, r8
 80091ce:	dcf0      	bgt.n	80091b2 <_printf_float+0x42a>
 80091d0:	e6fc      	b.n	8008fcc <_printf_float+0x244>
 80091d2:	f04f 0800 	mov.w	r8, #0
 80091d6:	f104 0919 	add.w	r9, r4, #25
 80091da:	e7f4      	b.n	80091c6 <_printf_float+0x43e>

080091dc <_printf_common>:
 80091dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091e0:	4616      	mov	r6, r2
 80091e2:	4698      	mov	r8, r3
 80091e4:	688a      	ldr	r2, [r1, #8]
 80091e6:	690b      	ldr	r3, [r1, #16]
 80091e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091ec:	4293      	cmp	r3, r2
 80091ee:	bfb8      	it	lt
 80091f0:	4613      	movlt	r3, r2
 80091f2:	6033      	str	r3, [r6, #0]
 80091f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091f8:	4607      	mov	r7, r0
 80091fa:	460c      	mov	r4, r1
 80091fc:	b10a      	cbz	r2, 8009202 <_printf_common+0x26>
 80091fe:	3301      	adds	r3, #1
 8009200:	6033      	str	r3, [r6, #0]
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	0699      	lsls	r1, r3, #26
 8009206:	bf42      	ittt	mi
 8009208:	6833      	ldrmi	r3, [r6, #0]
 800920a:	3302      	addmi	r3, #2
 800920c:	6033      	strmi	r3, [r6, #0]
 800920e:	6825      	ldr	r5, [r4, #0]
 8009210:	f015 0506 	ands.w	r5, r5, #6
 8009214:	d106      	bne.n	8009224 <_printf_common+0x48>
 8009216:	f104 0a19 	add.w	sl, r4, #25
 800921a:	68e3      	ldr	r3, [r4, #12]
 800921c:	6832      	ldr	r2, [r6, #0]
 800921e:	1a9b      	subs	r3, r3, r2
 8009220:	42ab      	cmp	r3, r5
 8009222:	dc26      	bgt.n	8009272 <_printf_common+0x96>
 8009224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009228:	6822      	ldr	r2, [r4, #0]
 800922a:	3b00      	subs	r3, #0
 800922c:	bf18      	it	ne
 800922e:	2301      	movne	r3, #1
 8009230:	0692      	lsls	r2, r2, #26
 8009232:	d42b      	bmi.n	800928c <_printf_common+0xb0>
 8009234:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009238:	4641      	mov	r1, r8
 800923a:	4638      	mov	r0, r7
 800923c:	47c8      	blx	r9
 800923e:	3001      	adds	r0, #1
 8009240:	d01e      	beq.n	8009280 <_printf_common+0xa4>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	6922      	ldr	r2, [r4, #16]
 8009246:	f003 0306 	and.w	r3, r3, #6
 800924a:	2b04      	cmp	r3, #4
 800924c:	bf02      	ittt	eq
 800924e:	68e5      	ldreq	r5, [r4, #12]
 8009250:	6833      	ldreq	r3, [r6, #0]
 8009252:	1aed      	subeq	r5, r5, r3
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	bf0c      	ite	eq
 8009258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800925c:	2500      	movne	r5, #0
 800925e:	4293      	cmp	r3, r2
 8009260:	bfc4      	itt	gt
 8009262:	1a9b      	subgt	r3, r3, r2
 8009264:	18ed      	addgt	r5, r5, r3
 8009266:	2600      	movs	r6, #0
 8009268:	341a      	adds	r4, #26
 800926a:	42b5      	cmp	r5, r6
 800926c:	d11a      	bne.n	80092a4 <_printf_common+0xc8>
 800926e:	2000      	movs	r0, #0
 8009270:	e008      	b.n	8009284 <_printf_common+0xa8>
 8009272:	2301      	movs	r3, #1
 8009274:	4652      	mov	r2, sl
 8009276:	4641      	mov	r1, r8
 8009278:	4638      	mov	r0, r7
 800927a:	47c8      	blx	r9
 800927c:	3001      	adds	r0, #1
 800927e:	d103      	bne.n	8009288 <_printf_common+0xac>
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009288:	3501      	adds	r5, #1
 800928a:	e7c6      	b.n	800921a <_printf_common+0x3e>
 800928c:	18e1      	adds	r1, r4, r3
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	2030      	movs	r0, #48	@ 0x30
 8009292:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009296:	4422      	add	r2, r4
 8009298:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800929c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092a0:	3302      	adds	r3, #2
 80092a2:	e7c7      	b.n	8009234 <_printf_common+0x58>
 80092a4:	2301      	movs	r3, #1
 80092a6:	4622      	mov	r2, r4
 80092a8:	4641      	mov	r1, r8
 80092aa:	4638      	mov	r0, r7
 80092ac:	47c8      	blx	r9
 80092ae:	3001      	adds	r0, #1
 80092b0:	d0e6      	beq.n	8009280 <_printf_common+0xa4>
 80092b2:	3601      	adds	r6, #1
 80092b4:	e7d9      	b.n	800926a <_printf_common+0x8e>
	...

080092b8 <_printf_i>:
 80092b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092bc:	7e0f      	ldrb	r7, [r1, #24]
 80092be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092c0:	2f78      	cmp	r7, #120	@ 0x78
 80092c2:	4691      	mov	r9, r2
 80092c4:	4680      	mov	r8, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	469a      	mov	sl, r3
 80092ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092ce:	d807      	bhi.n	80092e0 <_printf_i+0x28>
 80092d0:	2f62      	cmp	r7, #98	@ 0x62
 80092d2:	d80a      	bhi.n	80092ea <_printf_i+0x32>
 80092d4:	2f00      	cmp	r7, #0
 80092d6:	f000 80d2 	beq.w	800947e <_printf_i+0x1c6>
 80092da:	2f58      	cmp	r7, #88	@ 0x58
 80092dc:	f000 80b9 	beq.w	8009452 <_printf_i+0x19a>
 80092e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092e8:	e03a      	b.n	8009360 <_printf_i+0xa8>
 80092ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092ee:	2b15      	cmp	r3, #21
 80092f0:	d8f6      	bhi.n	80092e0 <_printf_i+0x28>
 80092f2:	a101      	add	r1, pc, #4	@ (adr r1, 80092f8 <_printf_i+0x40>)
 80092f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092f8:	08009351 	.word	0x08009351
 80092fc:	08009365 	.word	0x08009365
 8009300:	080092e1 	.word	0x080092e1
 8009304:	080092e1 	.word	0x080092e1
 8009308:	080092e1 	.word	0x080092e1
 800930c:	080092e1 	.word	0x080092e1
 8009310:	08009365 	.word	0x08009365
 8009314:	080092e1 	.word	0x080092e1
 8009318:	080092e1 	.word	0x080092e1
 800931c:	080092e1 	.word	0x080092e1
 8009320:	080092e1 	.word	0x080092e1
 8009324:	08009465 	.word	0x08009465
 8009328:	0800938f 	.word	0x0800938f
 800932c:	0800941f 	.word	0x0800941f
 8009330:	080092e1 	.word	0x080092e1
 8009334:	080092e1 	.word	0x080092e1
 8009338:	08009487 	.word	0x08009487
 800933c:	080092e1 	.word	0x080092e1
 8009340:	0800938f 	.word	0x0800938f
 8009344:	080092e1 	.word	0x080092e1
 8009348:	080092e1 	.word	0x080092e1
 800934c:	08009427 	.word	0x08009427
 8009350:	6833      	ldr	r3, [r6, #0]
 8009352:	1d1a      	adds	r2, r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6032      	str	r2, [r6, #0]
 8009358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800935c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009360:	2301      	movs	r3, #1
 8009362:	e09d      	b.n	80094a0 <_printf_i+0x1e8>
 8009364:	6833      	ldr	r3, [r6, #0]
 8009366:	6820      	ldr	r0, [r4, #0]
 8009368:	1d19      	adds	r1, r3, #4
 800936a:	6031      	str	r1, [r6, #0]
 800936c:	0606      	lsls	r6, r0, #24
 800936e:	d501      	bpl.n	8009374 <_printf_i+0xbc>
 8009370:	681d      	ldr	r5, [r3, #0]
 8009372:	e003      	b.n	800937c <_printf_i+0xc4>
 8009374:	0645      	lsls	r5, r0, #25
 8009376:	d5fb      	bpl.n	8009370 <_printf_i+0xb8>
 8009378:	f9b3 5000 	ldrsh.w	r5, [r3]
 800937c:	2d00      	cmp	r5, #0
 800937e:	da03      	bge.n	8009388 <_printf_i+0xd0>
 8009380:	232d      	movs	r3, #45	@ 0x2d
 8009382:	426d      	negs	r5, r5
 8009384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009388:	4859      	ldr	r0, [pc, #356]	@ (80094f0 <_printf_i+0x238>)
 800938a:	230a      	movs	r3, #10
 800938c:	e011      	b.n	80093b2 <_printf_i+0xfa>
 800938e:	6821      	ldr	r1, [r4, #0]
 8009390:	6833      	ldr	r3, [r6, #0]
 8009392:	0608      	lsls	r0, r1, #24
 8009394:	f853 5b04 	ldr.w	r5, [r3], #4
 8009398:	d402      	bmi.n	80093a0 <_printf_i+0xe8>
 800939a:	0649      	lsls	r1, r1, #25
 800939c:	bf48      	it	mi
 800939e:	b2ad      	uxthmi	r5, r5
 80093a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80093a2:	4853      	ldr	r0, [pc, #332]	@ (80094f0 <_printf_i+0x238>)
 80093a4:	6033      	str	r3, [r6, #0]
 80093a6:	bf14      	ite	ne
 80093a8:	230a      	movne	r3, #10
 80093aa:	2308      	moveq	r3, #8
 80093ac:	2100      	movs	r1, #0
 80093ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093b2:	6866      	ldr	r6, [r4, #4]
 80093b4:	60a6      	str	r6, [r4, #8]
 80093b6:	2e00      	cmp	r6, #0
 80093b8:	bfa2      	ittt	ge
 80093ba:	6821      	ldrge	r1, [r4, #0]
 80093bc:	f021 0104 	bicge.w	r1, r1, #4
 80093c0:	6021      	strge	r1, [r4, #0]
 80093c2:	b90d      	cbnz	r5, 80093c8 <_printf_i+0x110>
 80093c4:	2e00      	cmp	r6, #0
 80093c6:	d04b      	beq.n	8009460 <_printf_i+0x1a8>
 80093c8:	4616      	mov	r6, r2
 80093ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80093ce:	fb03 5711 	mls	r7, r3, r1, r5
 80093d2:	5dc7      	ldrb	r7, [r0, r7]
 80093d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093d8:	462f      	mov	r7, r5
 80093da:	42bb      	cmp	r3, r7
 80093dc:	460d      	mov	r5, r1
 80093de:	d9f4      	bls.n	80093ca <_printf_i+0x112>
 80093e0:	2b08      	cmp	r3, #8
 80093e2:	d10b      	bne.n	80093fc <_printf_i+0x144>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	07df      	lsls	r7, r3, #31
 80093e8:	d508      	bpl.n	80093fc <_printf_i+0x144>
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	6861      	ldr	r1, [r4, #4]
 80093ee:	4299      	cmp	r1, r3
 80093f0:	bfde      	ittt	le
 80093f2:	2330      	movle	r3, #48	@ 0x30
 80093f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093fc:	1b92      	subs	r2, r2, r6
 80093fe:	6122      	str	r2, [r4, #16]
 8009400:	f8cd a000 	str.w	sl, [sp]
 8009404:	464b      	mov	r3, r9
 8009406:	aa03      	add	r2, sp, #12
 8009408:	4621      	mov	r1, r4
 800940a:	4640      	mov	r0, r8
 800940c:	f7ff fee6 	bl	80091dc <_printf_common>
 8009410:	3001      	adds	r0, #1
 8009412:	d14a      	bne.n	80094aa <_printf_i+0x1f2>
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	b004      	add	sp, #16
 800941a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	f043 0320 	orr.w	r3, r3, #32
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	4833      	ldr	r0, [pc, #204]	@ (80094f4 <_printf_i+0x23c>)
 8009428:	2778      	movs	r7, #120	@ 0x78
 800942a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	6831      	ldr	r1, [r6, #0]
 8009432:	061f      	lsls	r7, r3, #24
 8009434:	f851 5b04 	ldr.w	r5, [r1], #4
 8009438:	d402      	bmi.n	8009440 <_printf_i+0x188>
 800943a:	065f      	lsls	r7, r3, #25
 800943c:	bf48      	it	mi
 800943e:	b2ad      	uxthmi	r5, r5
 8009440:	6031      	str	r1, [r6, #0]
 8009442:	07d9      	lsls	r1, r3, #31
 8009444:	bf44      	itt	mi
 8009446:	f043 0320 	orrmi.w	r3, r3, #32
 800944a:	6023      	strmi	r3, [r4, #0]
 800944c:	b11d      	cbz	r5, 8009456 <_printf_i+0x19e>
 800944e:	2310      	movs	r3, #16
 8009450:	e7ac      	b.n	80093ac <_printf_i+0xf4>
 8009452:	4827      	ldr	r0, [pc, #156]	@ (80094f0 <_printf_i+0x238>)
 8009454:	e7e9      	b.n	800942a <_printf_i+0x172>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	f023 0320 	bic.w	r3, r3, #32
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	e7f6      	b.n	800944e <_printf_i+0x196>
 8009460:	4616      	mov	r6, r2
 8009462:	e7bd      	b.n	80093e0 <_printf_i+0x128>
 8009464:	6833      	ldr	r3, [r6, #0]
 8009466:	6825      	ldr	r5, [r4, #0]
 8009468:	6961      	ldr	r1, [r4, #20]
 800946a:	1d18      	adds	r0, r3, #4
 800946c:	6030      	str	r0, [r6, #0]
 800946e:	062e      	lsls	r6, r5, #24
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	d501      	bpl.n	8009478 <_printf_i+0x1c0>
 8009474:	6019      	str	r1, [r3, #0]
 8009476:	e002      	b.n	800947e <_printf_i+0x1c6>
 8009478:	0668      	lsls	r0, r5, #25
 800947a:	d5fb      	bpl.n	8009474 <_printf_i+0x1bc>
 800947c:	8019      	strh	r1, [r3, #0]
 800947e:	2300      	movs	r3, #0
 8009480:	6123      	str	r3, [r4, #16]
 8009482:	4616      	mov	r6, r2
 8009484:	e7bc      	b.n	8009400 <_printf_i+0x148>
 8009486:	6833      	ldr	r3, [r6, #0]
 8009488:	1d1a      	adds	r2, r3, #4
 800948a:	6032      	str	r2, [r6, #0]
 800948c:	681e      	ldr	r6, [r3, #0]
 800948e:	6862      	ldr	r2, [r4, #4]
 8009490:	2100      	movs	r1, #0
 8009492:	4630      	mov	r0, r6
 8009494:	f7f6 fea4 	bl	80001e0 <memchr>
 8009498:	b108      	cbz	r0, 800949e <_printf_i+0x1e6>
 800949a:	1b80      	subs	r0, r0, r6
 800949c:	6060      	str	r0, [r4, #4]
 800949e:	6863      	ldr	r3, [r4, #4]
 80094a0:	6123      	str	r3, [r4, #16]
 80094a2:	2300      	movs	r3, #0
 80094a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094a8:	e7aa      	b.n	8009400 <_printf_i+0x148>
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	4632      	mov	r2, r6
 80094ae:	4649      	mov	r1, r9
 80094b0:	4640      	mov	r0, r8
 80094b2:	47d0      	blx	sl
 80094b4:	3001      	adds	r0, #1
 80094b6:	d0ad      	beq.n	8009414 <_printf_i+0x15c>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	079b      	lsls	r3, r3, #30
 80094bc:	d413      	bmi.n	80094e6 <_printf_i+0x22e>
 80094be:	68e0      	ldr	r0, [r4, #12]
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	4298      	cmp	r0, r3
 80094c4:	bfb8      	it	lt
 80094c6:	4618      	movlt	r0, r3
 80094c8:	e7a6      	b.n	8009418 <_printf_i+0x160>
 80094ca:	2301      	movs	r3, #1
 80094cc:	4632      	mov	r2, r6
 80094ce:	4649      	mov	r1, r9
 80094d0:	4640      	mov	r0, r8
 80094d2:	47d0      	blx	sl
 80094d4:	3001      	adds	r0, #1
 80094d6:	d09d      	beq.n	8009414 <_printf_i+0x15c>
 80094d8:	3501      	adds	r5, #1
 80094da:	68e3      	ldr	r3, [r4, #12]
 80094dc:	9903      	ldr	r1, [sp, #12]
 80094de:	1a5b      	subs	r3, r3, r1
 80094e0:	42ab      	cmp	r3, r5
 80094e2:	dcf2      	bgt.n	80094ca <_printf_i+0x212>
 80094e4:	e7eb      	b.n	80094be <_printf_i+0x206>
 80094e6:	2500      	movs	r5, #0
 80094e8:	f104 0619 	add.w	r6, r4, #25
 80094ec:	e7f5      	b.n	80094da <_printf_i+0x222>
 80094ee:	bf00      	nop
 80094f0:	0800d1ae 	.word	0x0800d1ae
 80094f4:	0800d1bf 	.word	0x0800d1bf

080094f8 <std>:
 80094f8:	2300      	movs	r3, #0
 80094fa:	b510      	push	{r4, lr}
 80094fc:	4604      	mov	r4, r0
 80094fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009506:	6083      	str	r3, [r0, #8]
 8009508:	8181      	strh	r1, [r0, #12]
 800950a:	6643      	str	r3, [r0, #100]	@ 0x64
 800950c:	81c2      	strh	r2, [r0, #14]
 800950e:	6183      	str	r3, [r0, #24]
 8009510:	4619      	mov	r1, r3
 8009512:	2208      	movs	r2, #8
 8009514:	305c      	adds	r0, #92	@ 0x5c
 8009516:	f000 f914 	bl	8009742 <memset>
 800951a:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <std+0x58>)
 800951c:	6263      	str	r3, [r4, #36]	@ 0x24
 800951e:	4b0d      	ldr	r3, [pc, #52]	@ (8009554 <std+0x5c>)
 8009520:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009522:	4b0d      	ldr	r3, [pc, #52]	@ (8009558 <std+0x60>)
 8009524:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009526:	4b0d      	ldr	r3, [pc, #52]	@ (800955c <std+0x64>)
 8009528:	6323      	str	r3, [r4, #48]	@ 0x30
 800952a:	4b0d      	ldr	r3, [pc, #52]	@ (8009560 <std+0x68>)
 800952c:	6224      	str	r4, [r4, #32]
 800952e:	429c      	cmp	r4, r3
 8009530:	d006      	beq.n	8009540 <std+0x48>
 8009532:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009536:	4294      	cmp	r4, r2
 8009538:	d002      	beq.n	8009540 <std+0x48>
 800953a:	33d0      	adds	r3, #208	@ 0xd0
 800953c:	429c      	cmp	r4, r3
 800953e:	d105      	bne.n	800954c <std+0x54>
 8009540:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009548:	f000 b978 	b.w	800983c <__retarget_lock_init_recursive>
 800954c:	bd10      	pop	{r4, pc}
 800954e:	bf00      	nop
 8009550:	080096bd 	.word	0x080096bd
 8009554:	080096df 	.word	0x080096df
 8009558:	08009717 	.word	0x08009717
 800955c:	0800973b 	.word	0x0800973b
 8009560:	20000918 	.word	0x20000918

08009564 <stdio_exit_handler>:
 8009564:	4a02      	ldr	r2, [pc, #8]	@ (8009570 <stdio_exit_handler+0xc>)
 8009566:	4903      	ldr	r1, [pc, #12]	@ (8009574 <stdio_exit_handler+0x10>)
 8009568:	4803      	ldr	r0, [pc, #12]	@ (8009578 <stdio_exit_handler+0x14>)
 800956a:	f000 b869 	b.w	8009640 <_fwalk_sglue>
 800956e:	bf00      	nop
 8009570:	2000001c 	.word	0x2000001c
 8009574:	0800b19d 	.word	0x0800b19d
 8009578:	2000002c 	.word	0x2000002c

0800957c <cleanup_stdio>:
 800957c:	6841      	ldr	r1, [r0, #4]
 800957e:	4b0c      	ldr	r3, [pc, #48]	@ (80095b0 <cleanup_stdio+0x34>)
 8009580:	4299      	cmp	r1, r3
 8009582:	b510      	push	{r4, lr}
 8009584:	4604      	mov	r4, r0
 8009586:	d001      	beq.n	800958c <cleanup_stdio+0x10>
 8009588:	f001 fe08 	bl	800b19c <_fflush_r>
 800958c:	68a1      	ldr	r1, [r4, #8]
 800958e:	4b09      	ldr	r3, [pc, #36]	@ (80095b4 <cleanup_stdio+0x38>)
 8009590:	4299      	cmp	r1, r3
 8009592:	d002      	beq.n	800959a <cleanup_stdio+0x1e>
 8009594:	4620      	mov	r0, r4
 8009596:	f001 fe01 	bl	800b19c <_fflush_r>
 800959a:	68e1      	ldr	r1, [r4, #12]
 800959c:	4b06      	ldr	r3, [pc, #24]	@ (80095b8 <cleanup_stdio+0x3c>)
 800959e:	4299      	cmp	r1, r3
 80095a0:	d004      	beq.n	80095ac <cleanup_stdio+0x30>
 80095a2:	4620      	mov	r0, r4
 80095a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095a8:	f001 bdf8 	b.w	800b19c <_fflush_r>
 80095ac:	bd10      	pop	{r4, pc}
 80095ae:	bf00      	nop
 80095b0:	20000918 	.word	0x20000918
 80095b4:	20000980 	.word	0x20000980
 80095b8:	200009e8 	.word	0x200009e8

080095bc <global_stdio_init.part.0>:
 80095bc:	b510      	push	{r4, lr}
 80095be:	4b0b      	ldr	r3, [pc, #44]	@ (80095ec <global_stdio_init.part.0+0x30>)
 80095c0:	4c0b      	ldr	r4, [pc, #44]	@ (80095f0 <global_stdio_init.part.0+0x34>)
 80095c2:	4a0c      	ldr	r2, [pc, #48]	@ (80095f4 <global_stdio_init.part.0+0x38>)
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	4620      	mov	r0, r4
 80095c8:	2200      	movs	r2, #0
 80095ca:	2104      	movs	r1, #4
 80095cc:	f7ff ff94 	bl	80094f8 <std>
 80095d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095d4:	2201      	movs	r2, #1
 80095d6:	2109      	movs	r1, #9
 80095d8:	f7ff ff8e 	bl	80094f8 <std>
 80095dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095e0:	2202      	movs	r2, #2
 80095e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e6:	2112      	movs	r1, #18
 80095e8:	f7ff bf86 	b.w	80094f8 <std>
 80095ec:	20000a50 	.word	0x20000a50
 80095f0:	20000918 	.word	0x20000918
 80095f4:	08009565 	.word	0x08009565

080095f8 <__sfp_lock_acquire>:
 80095f8:	4801      	ldr	r0, [pc, #4]	@ (8009600 <__sfp_lock_acquire+0x8>)
 80095fa:	f000 b920 	b.w	800983e <__retarget_lock_acquire_recursive>
 80095fe:	bf00      	nop
 8009600:	20000a59 	.word	0x20000a59

08009604 <__sfp_lock_release>:
 8009604:	4801      	ldr	r0, [pc, #4]	@ (800960c <__sfp_lock_release+0x8>)
 8009606:	f000 b91b 	b.w	8009840 <__retarget_lock_release_recursive>
 800960a:	bf00      	nop
 800960c:	20000a59 	.word	0x20000a59

08009610 <__sinit>:
 8009610:	b510      	push	{r4, lr}
 8009612:	4604      	mov	r4, r0
 8009614:	f7ff fff0 	bl	80095f8 <__sfp_lock_acquire>
 8009618:	6a23      	ldr	r3, [r4, #32]
 800961a:	b11b      	cbz	r3, 8009624 <__sinit+0x14>
 800961c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009620:	f7ff bff0 	b.w	8009604 <__sfp_lock_release>
 8009624:	4b04      	ldr	r3, [pc, #16]	@ (8009638 <__sinit+0x28>)
 8009626:	6223      	str	r3, [r4, #32]
 8009628:	4b04      	ldr	r3, [pc, #16]	@ (800963c <__sinit+0x2c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1f5      	bne.n	800961c <__sinit+0xc>
 8009630:	f7ff ffc4 	bl	80095bc <global_stdio_init.part.0>
 8009634:	e7f2      	b.n	800961c <__sinit+0xc>
 8009636:	bf00      	nop
 8009638:	0800957d 	.word	0x0800957d
 800963c:	20000a50 	.word	0x20000a50

08009640 <_fwalk_sglue>:
 8009640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009644:	4607      	mov	r7, r0
 8009646:	4688      	mov	r8, r1
 8009648:	4614      	mov	r4, r2
 800964a:	2600      	movs	r6, #0
 800964c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009650:	f1b9 0901 	subs.w	r9, r9, #1
 8009654:	d505      	bpl.n	8009662 <_fwalk_sglue+0x22>
 8009656:	6824      	ldr	r4, [r4, #0]
 8009658:	2c00      	cmp	r4, #0
 800965a:	d1f7      	bne.n	800964c <_fwalk_sglue+0xc>
 800965c:	4630      	mov	r0, r6
 800965e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009662:	89ab      	ldrh	r3, [r5, #12]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d907      	bls.n	8009678 <_fwalk_sglue+0x38>
 8009668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800966c:	3301      	adds	r3, #1
 800966e:	d003      	beq.n	8009678 <_fwalk_sglue+0x38>
 8009670:	4629      	mov	r1, r5
 8009672:	4638      	mov	r0, r7
 8009674:	47c0      	blx	r8
 8009676:	4306      	orrs	r6, r0
 8009678:	3568      	adds	r5, #104	@ 0x68
 800967a:	e7e9      	b.n	8009650 <_fwalk_sglue+0x10>

0800967c <siprintf>:
 800967c:	b40e      	push	{r1, r2, r3}
 800967e:	b500      	push	{lr}
 8009680:	b09c      	sub	sp, #112	@ 0x70
 8009682:	ab1d      	add	r3, sp, #116	@ 0x74
 8009684:	9002      	str	r0, [sp, #8]
 8009686:	9006      	str	r0, [sp, #24]
 8009688:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800968c:	4809      	ldr	r0, [pc, #36]	@ (80096b4 <siprintf+0x38>)
 800968e:	9107      	str	r1, [sp, #28]
 8009690:	9104      	str	r1, [sp, #16]
 8009692:	4909      	ldr	r1, [pc, #36]	@ (80096b8 <siprintf+0x3c>)
 8009694:	f853 2b04 	ldr.w	r2, [r3], #4
 8009698:	9105      	str	r1, [sp, #20]
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	a902      	add	r1, sp, #8
 80096a0:	f001 fbfc 	bl	800ae9c <_svfiprintf_r>
 80096a4:	9b02      	ldr	r3, [sp, #8]
 80096a6:	2200      	movs	r2, #0
 80096a8:	701a      	strb	r2, [r3, #0]
 80096aa:	b01c      	add	sp, #112	@ 0x70
 80096ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80096b0:	b003      	add	sp, #12
 80096b2:	4770      	bx	lr
 80096b4:	20000028 	.word	0x20000028
 80096b8:	ffff0208 	.word	0xffff0208

080096bc <__sread>:
 80096bc:	b510      	push	{r4, lr}
 80096be:	460c      	mov	r4, r1
 80096c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c4:	f000 f86c 	bl	80097a0 <_read_r>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	bfab      	itete	ge
 80096cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096ce:	89a3      	ldrhlt	r3, [r4, #12]
 80096d0:	181b      	addge	r3, r3, r0
 80096d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096d6:	bfac      	ite	ge
 80096d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096da:	81a3      	strhlt	r3, [r4, #12]
 80096dc:	bd10      	pop	{r4, pc}

080096de <__swrite>:
 80096de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e2:	461f      	mov	r7, r3
 80096e4:	898b      	ldrh	r3, [r1, #12]
 80096e6:	05db      	lsls	r3, r3, #23
 80096e8:	4605      	mov	r5, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	4616      	mov	r6, r2
 80096ee:	d505      	bpl.n	80096fc <__swrite+0x1e>
 80096f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f4:	2302      	movs	r3, #2
 80096f6:	2200      	movs	r2, #0
 80096f8:	f000 f840 	bl	800977c <_lseek_r>
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009702:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	4632      	mov	r2, r6
 800970a:	463b      	mov	r3, r7
 800970c:	4628      	mov	r0, r5
 800970e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009712:	f000 b857 	b.w	80097c4 <_write_r>

08009716 <__sseek>:
 8009716:	b510      	push	{r4, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800971e:	f000 f82d 	bl	800977c <_lseek_r>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	bf15      	itete	ne
 8009728:	6560      	strne	r0, [r4, #84]	@ 0x54
 800972a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800972e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009732:	81a3      	strheq	r3, [r4, #12]
 8009734:	bf18      	it	ne
 8009736:	81a3      	strhne	r3, [r4, #12]
 8009738:	bd10      	pop	{r4, pc}

0800973a <__sclose>:
 800973a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973e:	f000 b80d 	b.w	800975c <_close_r>

08009742 <memset>:
 8009742:	4402      	add	r2, r0
 8009744:	4603      	mov	r3, r0
 8009746:	4293      	cmp	r3, r2
 8009748:	d100      	bne.n	800974c <memset+0xa>
 800974a:	4770      	bx	lr
 800974c:	f803 1b01 	strb.w	r1, [r3], #1
 8009750:	e7f9      	b.n	8009746 <memset+0x4>
	...

08009754 <_localeconv_r>:
 8009754:	4800      	ldr	r0, [pc, #0]	@ (8009758 <_localeconv_r+0x4>)
 8009756:	4770      	bx	lr
 8009758:	20000168 	.word	0x20000168

0800975c <_close_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	@ (8009778 <_close_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7fa fdc8 	bl	80042fc <_close>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_close_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_close_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	20000a54 	.word	0x20000a54

0800977c <_lseek_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	4d07      	ldr	r5, [pc, #28]	@ (800979c <_lseek_r+0x20>)
 8009780:	4604      	mov	r4, r0
 8009782:	4608      	mov	r0, r1
 8009784:	4611      	mov	r1, r2
 8009786:	2200      	movs	r2, #0
 8009788:	602a      	str	r2, [r5, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f7fa fddd 	bl	800434a <_lseek>
 8009790:	1c43      	adds	r3, r0, #1
 8009792:	d102      	bne.n	800979a <_lseek_r+0x1e>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	b103      	cbz	r3, 800979a <_lseek_r+0x1e>
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	bd38      	pop	{r3, r4, r5, pc}
 800979c:	20000a54 	.word	0x20000a54

080097a0 <_read_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d07      	ldr	r5, [pc, #28]	@ (80097c0 <_read_r+0x20>)
 80097a4:	4604      	mov	r4, r0
 80097a6:	4608      	mov	r0, r1
 80097a8:	4611      	mov	r1, r2
 80097aa:	2200      	movs	r2, #0
 80097ac:	602a      	str	r2, [r5, #0]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f7fa fd87 	bl	80042c2 <_read>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d102      	bne.n	80097be <_read_r+0x1e>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	b103      	cbz	r3, 80097be <_read_r+0x1e>
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	bd38      	pop	{r3, r4, r5, pc}
 80097c0:	20000a54 	.word	0x20000a54

080097c4 <_write_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	4d07      	ldr	r5, [pc, #28]	@ (80097e4 <_write_r+0x20>)
 80097c8:	4604      	mov	r4, r0
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	2200      	movs	r2, #0
 80097d0:	602a      	str	r2, [r5, #0]
 80097d2:	461a      	mov	r2, r3
 80097d4:	f7f8 fcfa 	bl	80021cc <_write>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d102      	bne.n	80097e2 <_write_r+0x1e>
 80097dc:	682b      	ldr	r3, [r5, #0]
 80097de:	b103      	cbz	r3, 80097e2 <_write_r+0x1e>
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	20000a54 	.word	0x20000a54

080097e8 <__errno>:
 80097e8:	4b01      	ldr	r3, [pc, #4]	@ (80097f0 <__errno+0x8>)
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	20000028 	.word	0x20000028

080097f4 <__libc_init_array>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	4d0d      	ldr	r5, [pc, #52]	@ (800982c <__libc_init_array+0x38>)
 80097f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009830 <__libc_init_array+0x3c>)
 80097fa:	1b64      	subs	r4, r4, r5
 80097fc:	10a4      	asrs	r4, r4, #2
 80097fe:	2600      	movs	r6, #0
 8009800:	42a6      	cmp	r6, r4
 8009802:	d109      	bne.n	8009818 <__libc_init_array+0x24>
 8009804:	4d0b      	ldr	r5, [pc, #44]	@ (8009834 <__libc_init_array+0x40>)
 8009806:	4c0c      	ldr	r4, [pc, #48]	@ (8009838 <__libc_init_array+0x44>)
 8009808:	f002 fb00 	bl	800be0c <_init>
 800980c:	1b64      	subs	r4, r4, r5
 800980e:	10a4      	asrs	r4, r4, #2
 8009810:	2600      	movs	r6, #0
 8009812:	42a6      	cmp	r6, r4
 8009814:	d105      	bne.n	8009822 <__libc_init_array+0x2e>
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	f855 3b04 	ldr.w	r3, [r5], #4
 800981c:	4798      	blx	r3
 800981e:	3601      	adds	r6, #1
 8009820:	e7ee      	b.n	8009800 <__libc_init_array+0xc>
 8009822:	f855 3b04 	ldr.w	r3, [r5], #4
 8009826:	4798      	blx	r3
 8009828:	3601      	adds	r6, #1
 800982a:	e7f2      	b.n	8009812 <__libc_init_array+0x1e>
 800982c:	0800d550 	.word	0x0800d550
 8009830:	0800d550 	.word	0x0800d550
 8009834:	0800d550 	.word	0x0800d550
 8009838:	0800d554 	.word	0x0800d554

0800983c <__retarget_lock_init_recursive>:
 800983c:	4770      	bx	lr

0800983e <__retarget_lock_acquire_recursive>:
 800983e:	4770      	bx	lr

08009840 <__retarget_lock_release_recursive>:
 8009840:	4770      	bx	lr

08009842 <quorem>:
 8009842:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009846:	6903      	ldr	r3, [r0, #16]
 8009848:	690c      	ldr	r4, [r1, #16]
 800984a:	42a3      	cmp	r3, r4
 800984c:	4607      	mov	r7, r0
 800984e:	db7e      	blt.n	800994e <quorem+0x10c>
 8009850:	3c01      	subs	r4, #1
 8009852:	f101 0814 	add.w	r8, r1, #20
 8009856:	00a3      	lsls	r3, r4, #2
 8009858:	f100 0514 	add.w	r5, r0, #20
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009868:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800986c:	3301      	adds	r3, #1
 800986e:	429a      	cmp	r2, r3
 8009870:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009874:	fbb2 f6f3 	udiv	r6, r2, r3
 8009878:	d32e      	bcc.n	80098d8 <quorem+0x96>
 800987a:	f04f 0a00 	mov.w	sl, #0
 800987e:	46c4      	mov	ip, r8
 8009880:	46ae      	mov	lr, r5
 8009882:	46d3      	mov	fp, sl
 8009884:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009888:	b298      	uxth	r0, r3
 800988a:	fb06 a000 	mla	r0, r6, r0, sl
 800988e:	0c02      	lsrs	r2, r0, #16
 8009890:	0c1b      	lsrs	r3, r3, #16
 8009892:	fb06 2303 	mla	r3, r6, r3, r2
 8009896:	f8de 2000 	ldr.w	r2, [lr]
 800989a:	b280      	uxth	r0, r0
 800989c:	b292      	uxth	r2, r2
 800989e:	1a12      	subs	r2, r2, r0
 80098a0:	445a      	add	r2, fp
 80098a2:	f8de 0000 	ldr.w	r0, [lr]
 80098a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80098b4:	b292      	uxth	r2, r2
 80098b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80098ba:	45e1      	cmp	r9, ip
 80098bc:	f84e 2b04 	str.w	r2, [lr], #4
 80098c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80098c4:	d2de      	bcs.n	8009884 <quorem+0x42>
 80098c6:	9b00      	ldr	r3, [sp, #0]
 80098c8:	58eb      	ldr	r3, [r5, r3]
 80098ca:	b92b      	cbnz	r3, 80098d8 <quorem+0x96>
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	3b04      	subs	r3, #4
 80098d0:	429d      	cmp	r5, r3
 80098d2:	461a      	mov	r2, r3
 80098d4:	d32f      	bcc.n	8009936 <quorem+0xf4>
 80098d6:	613c      	str	r4, [r7, #16]
 80098d8:	4638      	mov	r0, r7
 80098da:	f001 f97b 	bl	800abd4 <__mcmp>
 80098de:	2800      	cmp	r0, #0
 80098e0:	db25      	blt.n	800992e <quorem+0xec>
 80098e2:	4629      	mov	r1, r5
 80098e4:	2000      	movs	r0, #0
 80098e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80098ea:	f8d1 c000 	ldr.w	ip, [r1]
 80098ee:	fa1f fe82 	uxth.w	lr, r2
 80098f2:	fa1f f38c 	uxth.w	r3, ip
 80098f6:	eba3 030e 	sub.w	r3, r3, lr
 80098fa:	4403      	add	r3, r0
 80098fc:	0c12      	lsrs	r2, r2, #16
 80098fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009902:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009906:	b29b      	uxth	r3, r3
 8009908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800990c:	45c1      	cmp	r9, r8
 800990e:	f841 3b04 	str.w	r3, [r1], #4
 8009912:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009916:	d2e6      	bcs.n	80098e6 <quorem+0xa4>
 8009918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800991c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009920:	b922      	cbnz	r2, 800992c <quorem+0xea>
 8009922:	3b04      	subs	r3, #4
 8009924:	429d      	cmp	r5, r3
 8009926:	461a      	mov	r2, r3
 8009928:	d30b      	bcc.n	8009942 <quorem+0x100>
 800992a:	613c      	str	r4, [r7, #16]
 800992c:	3601      	adds	r6, #1
 800992e:	4630      	mov	r0, r6
 8009930:	b003      	add	sp, #12
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	6812      	ldr	r2, [r2, #0]
 8009938:	3b04      	subs	r3, #4
 800993a:	2a00      	cmp	r2, #0
 800993c:	d1cb      	bne.n	80098d6 <quorem+0x94>
 800993e:	3c01      	subs	r4, #1
 8009940:	e7c6      	b.n	80098d0 <quorem+0x8e>
 8009942:	6812      	ldr	r2, [r2, #0]
 8009944:	3b04      	subs	r3, #4
 8009946:	2a00      	cmp	r2, #0
 8009948:	d1ef      	bne.n	800992a <quorem+0xe8>
 800994a:	3c01      	subs	r4, #1
 800994c:	e7ea      	b.n	8009924 <quorem+0xe2>
 800994e:	2000      	movs	r0, #0
 8009950:	e7ee      	b.n	8009930 <quorem+0xee>
 8009952:	0000      	movs	r0, r0
 8009954:	0000      	movs	r0, r0
	...

08009958 <_dtoa_r>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	69c7      	ldr	r7, [r0, #28]
 800995e:	b099      	sub	sp, #100	@ 0x64
 8009960:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009964:	ec55 4b10 	vmov	r4, r5, d0
 8009968:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800996a:	9109      	str	r1, [sp, #36]	@ 0x24
 800996c:	4683      	mov	fp, r0
 800996e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009970:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009972:	b97f      	cbnz	r7, 8009994 <_dtoa_r+0x3c>
 8009974:	2010      	movs	r0, #16
 8009976:	f000 fdfd 	bl	800a574 <malloc>
 800997a:	4602      	mov	r2, r0
 800997c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009980:	b920      	cbnz	r0, 800998c <_dtoa_r+0x34>
 8009982:	4ba7      	ldr	r3, [pc, #668]	@ (8009c20 <_dtoa_r+0x2c8>)
 8009984:	21ef      	movs	r1, #239	@ 0xef
 8009986:	48a7      	ldr	r0, [pc, #668]	@ (8009c24 <_dtoa_r+0x2cc>)
 8009988:	f001 fc68 	bl	800b25c <__assert_func>
 800998c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009990:	6007      	str	r7, [r0, #0]
 8009992:	60c7      	str	r7, [r0, #12]
 8009994:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009998:	6819      	ldr	r1, [r3, #0]
 800999a:	b159      	cbz	r1, 80099b4 <_dtoa_r+0x5c>
 800999c:	685a      	ldr	r2, [r3, #4]
 800999e:	604a      	str	r2, [r1, #4]
 80099a0:	2301      	movs	r3, #1
 80099a2:	4093      	lsls	r3, r2
 80099a4:	608b      	str	r3, [r1, #8]
 80099a6:	4658      	mov	r0, fp
 80099a8:	f000 feda 	bl	800a760 <_Bfree>
 80099ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80099b0:	2200      	movs	r2, #0
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	1e2b      	subs	r3, r5, #0
 80099b6:	bfb9      	ittee	lt
 80099b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80099bc:	9303      	strlt	r3, [sp, #12]
 80099be:	2300      	movge	r3, #0
 80099c0:	6033      	strge	r3, [r6, #0]
 80099c2:	9f03      	ldr	r7, [sp, #12]
 80099c4:	4b98      	ldr	r3, [pc, #608]	@ (8009c28 <_dtoa_r+0x2d0>)
 80099c6:	bfbc      	itt	lt
 80099c8:	2201      	movlt	r2, #1
 80099ca:	6032      	strlt	r2, [r6, #0]
 80099cc:	43bb      	bics	r3, r7
 80099ce:	d112      	bne.n	80099f6 <_dtoa_r+0x9e>
 80099d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80099d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099dc:	4323      	orrs	r3, r4
 80099de:	f000 854d 	beq.w	800a47c <_dtoa_r+0xb24>
 80099e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c3c <_dtoa_r+0x2e4>
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 854f 	beq.w	800a48c <_dtoa_r+0xb34>
 80099ee:	f10a 0303 	add.w	r3, sl, #3
 80099f2:	f000 bd49 	b.w	800a488 <_dtoa_r+0xb30>
 80099f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099fa:	2200      	movs	r2, #0
 80099fc:	ec51 0b17 	vmov	r0, r1, d7
 8009a00:	2300      	movs	r3, #0
 8009a02:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a06:	f7f7 f867 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a0a:	4680      	mov	r8, r0
 8009a0c:	b158      	cbz	r0, 8009a26 <_dtoa_r+0xce>
 8009a0e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a10:	2301      	movs	r3, #1
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a16:	b113      	cbz	r3, 8009a1e <_dtoa_r+0xc6>
 8009a18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a1a:	4b84      	ldr	r3, [pc, #528]	@ (8009c2c <_dtoa_r+0x2d4>)
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009c40 <_dtoa_r+0x2e8>
 8009a22:	f000 bd33 	b.w	800a48c <_dtoa_r+0xb34>
 8009a26:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a2a:	aa16      	add	r2, sp, #88	@ 0x58
 8009a2c:	a917      	add	r1, sp, #92	@ 0x5c
 8009a2e:	4658      	mov	r0, fp
 8009a30:	f001 f980 	bl	800ad34 <__d2b>
 8009a34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009a38:	4681      	mov	r9, r0
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	d077      	beq.n	8009b2e <_dtoa_r+0x1d6>
 8009a3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a40:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a58:	4619      	mov	r1, r3
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	4b74      	ldr	r3, [pc, #464]	@ (8009c30 <_dtoa_r+0x2d8>)
 8009a5e:	f7f6 fc1b 	bl	8000298 <__aeabi_dsub>
 8009a62:	a369      	add	r3, pc, #420	@ (adr r3, 8009c08 <_dtoa_r+0x2b0>)
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f7f6 fdce 	bl	8000608 <__aeabi_dmul>
 8009a6c:	a368      	add	r3, pc, #416	@ (adr r3, 8009c10 <_dtoa_r+0x2b8>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f7f6 fc13 	bl	800029c <__adddf3>
 8009a76:	4604      	mov	r4, r0
 8009a78:	4630      	mov	r0, r6
 8009a7a:	460d      	mov	r5, r1
 8009a7c:	f7f6 fd5a 	bl	8000534 <__aeabi_i2d>
 8009a80:	a365      	add	r3, pc, #404	@ (adr r3, 8009c18 <_dtoa_r+0x2c0>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 fdbf 	bl	8000608 <__aeabi_dmul>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7f6 fc03 	bl	800029c <__adddf3>
 8009a96:	4604      	mov	r4, r0
 8009a98:	460d      	mov	r5, r1
 8009a9a:	f7f7 f865 	bl	8000b68 <__aeabi_d2iz>
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f7 f820 	bl	8000aec <__aeabi_dcmplt>
 8009aac:	b140      	cbz	r0, 8009ac0 <_dtoa_r+0x168>
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f7f6 fd40 	bl	8000534 <__aeabi_i2d>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	f7f7 f80e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009abc:	b900      	cbnz	r0, 8009ac0 <_dtoa_r+0x168>
 8009abe:	3f01      	subs	r7, #1
 8009ac0:	2f16      	cmp	r7, #22
 8009ac2:	d851      	bhi.n	8009b68 <_dtoa_r+0x210>
 8009ac4:	4b5b      	ldr	r3, [pc, #364]	@ (8009c34 <_dtoa_r+0x2dc>)
 8009ac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ad2:	f7f7 f80b 	bl	8000aec <__aeabi_dcmplt>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d048      	beq.n	8009b6c <_dtoa_r+0x214>
 8009ada:	3f01      	subs	r7, #1
 8009adc:	2300      	movs	r3, #0
 8009ade:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ae0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ae2:	1b9b      	subs	r3, r3, r6
 8009ae4:	1e5a      	subs	r2, r3, #1
 8009ae6:	bf44      	itt	mi
 8009ae8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009aec:	2300      	movmi	r3, #0
 8009aee:	9208      	str	r2, [sp, #32]
 8009af0:	bf54      	ite	pl
 8009af2:	f04f 0800 	movpl.w	r8, #0
 8009af6:	9308      	strmi	r3, [sp, #32]
 8009af8:	2f00      	cmp	r7, #0
 8009afa:	db39      	blt.n	8009b70 <_dtoa_r+0x218>
 8009afc:	9b08      	ldr	r3, [sp, #32]
 8009afe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b00:	443b      	add	r3, r7
 8009b02:	9308      	str	r3, [sp, #32]
 8009b04:	2300      	movs	r3, #0
 8009b06:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b0a:	2b09      	cmp	r3, #9
 8009b0c:	d864      	bhi.n	8009bd8 <_dtoa_r+0x280>
 8009b0e:	2b05      	cmp	r3, #5
 8009b10:	bfc4      	itt	gt
 8009b12:	3b04      	subgt	r3, #4
 8009b14:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b18:	f1a3 0302 	sub.w	r3, r3, #2
 8009b1c:	bfcc      	ite	gt
 8009b1e:	2400      	movgt	r4, #0
 8009b20:	2401      	movle	r4, #1
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	d863      	bhi.n	8009bee <_dtoa_r+0x296>
 8009b26:	e8df f003 	tbb	[pc, r3]
 8009b2a:	372a      	.short	0x372a
 8009b2c:	5535      	.short	0x5535
 8009b2e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009b32:	441e      	add	r6, r3
 8009b34:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b38:	2b20      	cmp	r3, #32
 8009b3a:	bfc1      	itttt	gt
 8009b3c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b40:	409f      	lslgt	r7, r3
 8009b42:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b46:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b4a:	bfd6      	itet	le
 8009b4c:	f1c3 0320 	rsble	r3, r3, #32
 8009b50:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b54:	fa04 f003 	lslle.w	r0, r4, r3
 8009b58:	f7f6 fcdc 	bl	8000514 <__aeabi_ui2d>
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b62:	3e01      	subs	r6, #1
 8009b64:	9214      	str	r2, [sp, #80]	@ 0x50
 8009b66:	e777      	b.n	8009a58 <_dtoa_r+0x100>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e7b8      	b.n	8009ade <_dtoa_r+0x186>
 8009b6c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009b6e:	e7b7      	b.n	8009ae0 <_dtoa_r+0x188>
 8009b70:	427b      	negs	r3, r7
 8009b72:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b74:	2300      	movs	r3, #0
 8009b76:	eba8 0807 	sub.w	r8, r8, r7
 8009b7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b7c:	e7c4      	b.n	8009b08 <_dtoa_r+0x1b0>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dc35      	bgt.n	8009bf4 <_dtoa_r+0x29c>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	9307      	str	r3, [sp, #28]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b92:	e00b      	b.n	8009bac <_dtoa_r+0x254>
 8009b94:	2301      	movs	r3, #1
 8009b96:	e7f3      	b.n	8009b80 <_dtoa_r+0x228>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b9e:	18fb      	adds	r3, r7, r3
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	bfb8      	it	lt
 8009baa:	2301      	movlt	r3, #1
 8009bac:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	2204      	movs	r2, #4
 8009bb4:	f102 0514 	add.w	r5, r2, #20
 8009bb8:	429d      	cmp	r5, r3
 8009bba:	d91f      	bls.n	8009bfc <_dtoa_r+0x2a4>
 8009bbc:	6041      	str	r1, [r0, #4]
 8009bbe:	4658      	mov	r0, fp
 8009bc0:	f000 fd8e 	bl	800a6e0 <_Balloc>
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d13c      	bne.n	8009c44 <_dtoa_r+0x2ec>
 8009bca:	4b1b      	ldr	r3, [pc, #108]	@ (8009c38 <_dtoa_r+0x2e0>)
 8009bcc:	4602      	mov	r2, r0
 8009bce:	f240 11af 	movw	r1, #431	@ 0x1af
 8009bd2:	e6d8      	b.n	8009986 <_dtoa_r+0x2e>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e7e0      	b.n	8009b9a <_dtoa_r+0x242>
 8009bd8:	2401      	movs	r4, #1
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bde:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009be0:	f04f 33ff 	mov.w	r3, #4294967295
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	9307      	str	r3, [sp, #28]
 8009be8:	2200      	movs	r2, #0
 8009bea:	2312      	movs	r3, #18
 8009bec:	e7d0      	b.n	8009b90 <_dtoa_r+0x238>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bf2:	e7f5      	b.n	8009be0 <_dtoa_r+0x288>
 8009bf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	9307      	str	r3, [sp, #28]
 8009bfa:	e7d7      	b.n	8009bac <_dtoa_r+0x254>
 8009bfc:	3101      	adds	r1, #1
 8009bfe:	0052      	lsls	r2, r2, #1
 8009c00:	e7d8      	b.n	8009bb4 <_dtoa_r+0x25c>
 8009c02:	bf00      	nop
 8009c04:	f3af 8000 	nop.w
 8009c08:	636f4361 	.word	0x636f4361
 8009c0c:	3fd287a7 	.word	0x3fd287a7
 8009c10:	8b60c8b3 	.word	0x8b60c8b3
 8009c14:	3fc68a28 	.word	0x3fc68a28
 8009c18:	509f79fb 	.word	0x509f79fb
 8009c1c:	3fd34413 	.word	0x3fd34413
 8009c20:	0800d1dd 	.word	0x0800d1dd
 8009c24:	0800d1f4 	.word	0x0800d1f4
 8009c28:	7ff00000 	.word	0x7ff00000
 8009c2c:	0800d1ad 	.word	0x0800d1ad
 8009c30:	3ff80000 	.word	0x3ff80000
 8009c34:	0800d2f0 	.word	0x0800d2f0
 8009c38:	0800d24c 	.word	0x0800d24c
 8009c3c:	0800d1d9 	.word	0x0800d1d9
 8009c40:	0800d1ac 	.word	0x0800d1ac
 8009c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c48:	6018      	str	r0, [r3, #0]
 8009c4a:	9b07      	ldr	r3, [sp, #28]
 8009c4c:	2b0e      	cmp	r3, #14
 8009c4e:	f200 80a4 	bhi.w	8009d9a <_dtoa_r+0x442>
 8009c52:	2c00      	cmp	r4, #0
 8009c54:	f000 80a1 	beq.w	8009d9a <_dtoa_r+0x442>
 8009c58:	2f00      	cmp	r7, #0
 8009c5a:	dd33      	ble.n	8009cc4 <_dtoa_r+0x36c>
 8009c5c:	4bad      	ldr	r3, [pc, #692]	@ (8009f14 <_dtoa_r+0x5bc>)
 8009c5e:	f007 020f 	and.w	r2, r7, #15
 8009c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c66:	ed93 7b00 	vldr	d7, [r3]
 8009c6a:	05f8      	lsls	r0, r7, #23
 8009c6c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009c70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c74:	d516      	bpl.n	8009ca4 <_dtoa_r+0x34c>
 8009c76:	4ba8      	ldr	r3, [pc, #672]	@ (8009f18 <_dtoa_r+0x5c0>)
 8009c78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c80:	f7f6 fdec 	bl	800085c <__aeabi_ddiv>
 8009c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c88:	f004 040f 	and.w	r4, r4, #15
 8009c8c:	2603      	movs	r6, #3
 8009c8e:	4da2      	ldr	r5, [pc, #648]	@ (8009f18 <_dtoa_r+0x5c0>)
 8009c90:	b954      	cbnz	r4, 8009ca8 <_dtoa_r+0x350>
 8009c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c9a:	f7f6 fddf 	bl	800085c <__aeabi_ddiv>
 8009c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca2:	e028      	b.n	8009cf6 <_dtoa_r+0x39e>
 8009ca4:	2602      	movs	r6, #2
 8009ca6:	e7f2      	b.n	8009c8e <_dtoa_r+0x336>
 8009ca8:	07e1      	lsls	r1, r4, #31
 8009caa:	d508      	bpl.n	8009cbe <_dtoa_r+0x366>
 8009cac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cb0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cb4:	f7f6 fca8 	bl	8000608 <__aeabi_dmul>
 8009cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cbc:	3601      	adds	r6, #1
 8009cbe:	1064      	asrs	r4, r4, #1
 8009cc0:	3508      	adds	r5, #8
 8009cc2:	e7e5      	b.n	8009c90 <_dtoa_r+0x338>
 8009cc4:	f000 80d2 	beq.w	8009e6c <_dtoa_r+0x514>
 8009cc8:	427c      	negs	r4, r7
 8009cca:	4b92      	ldr	r3, [pc, #584]	@ (8009f14 <_dtoa_r+0x5bc>)
 8009ccc:	4d92      	ldr	r5, [pc, #584]	@ (8009f18 <_dtoa_r+0x5c0>)
 8009cce:	f004 020f 	and.w	r2, r4, #15
 8009cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cde:	f7f6 fc93 	bl	8000608 <__aeabi_dmul>
 8009ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ce6:	1124      	asrs	r4, r4, #4
 8009ce8:	2300      	movs	r3, #0
 8009cea:	2602      	movs	r6, #2
 8009cec:	2c00      	cmp	r4, #0
 8009cee:	f040 80b2 	bne.w	8009e56 <_dtoa_r+0x4fe>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1d3      	bne.n	8009c9e <_dtoa_r+0x346>
 8009cf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cf8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80b7 	beq.w	8009e70 <_dtoa_r+0x518>
 8009d02:	4b86      	ldr	r3, [pc, #536]	@ (8009f1c <_dtoa_r+0x5c4>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	4620      	mov	r0, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	f7f6 feef 	bl	8000aec <__aeabi_dcmplt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f000 80ae 	beq.w	8009e70 <_dtoa_r+0x518>
 8009d14:	9b07      	ldr	r3, [sp, #28]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 80aa 	beq.w	8009e70 <_dtoa_r+0x518>
 8009d1c:	9b00      	ldr	r3, [sp, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	dd37      	ble.n	8009d92 <_dtoa_r+0x43a>
 8009d22:	1e7b      	subs	r3, r7, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	4620      	mov	r0, r4
 8009d28:	4b7d      	ldr	r3, [pc, #500]	@ (8009f20 <_dtoa_r+0x5c8>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	f7f6 fc6b 	bl	8000608 <__aeabi_dmul>
 8009d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d36:	9c00      	ldr	r4, [sp, #0]
 8009d38:	3601      	adds	r6, #1
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7f6 fbfa 	bl	8000534 <__aeabi_i2d>
 8009d40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d44:	f7f6 fc60 	bl	8000608 <__aeabi_dmul>
 8009d48:	4b76      	ldr	r3, [pc, #472]	@ (8009f24 <_dtoa_r+0x5cc>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f7f6 faa6 	bl	800029c <__adddf3>
 8009d50:	4605      	mov	r5, r0
 8009d52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d56:	2c00      	cmp	r4, #0
 8009d58:	f040 808d 	bne.w	8009e76 <_dtoa_r+0x51e>
 8009d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d60:	4b71      	ldr	r3, [pc, #452]	@ (8009f28 <_dtoa_r+0x5d0>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	f7f6 fa98 	bl	8000298 <__aeabi_dsub>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d70:	462a      	mov	r2, r5
 8009d72:	4633      	mov	r3, r6
 8009d74:	f7f6 fed8 	bl	8000b28 <__aeabi_dcmpgt>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f040 828b 	bne.w	800a294 <_dtoa_r+0x93c>
 8009d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d82:	462a      	mov	r2, r5
 8009d84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d88:	f7f6 feb0 	bl	8000aec <__aeabi_dcmplt>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	f040 8128 	bne.w	8009fe2 <_dtoa_r+0x68a>
 8009d92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009d96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f2c0 815a 	blt.w	800a056 <_dtoa_r+0x6fe>
 8009da2:	2f0e      	cmp	r7, #14
 8009da4:	f300 8157 	bgt.w	800a056 <_dtoa_r+0x6fe>
 8009da8:	4b5a      	ldr	r3, [pc, #360]	@ (8009f14 <_dtoa_r+0x5bc>)
 8009daa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009dae:	ed93 7b00 	vldr	d7, [r3]
 8009db2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	ed8d 7b00 	vstr	d7, [sp]
 8009dba:	da03      	bge.n	8009dc4 <_dtoa_r+0x46c>
 8009dbc:	9b07      	ldr	r3, [sp, #28]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f340 8101 	ble.w	8009fc6 <_dtoa_r+0x66e>
 8009dc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009dc8:	4656      	mov	r6, sl
 8009dca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f7f6 fd43 	bl	800085c <__aeabi_ddiv>
 8009dd6:	f7f6 fec7 	bl	8000b68 <__aeabi_d2iz>
 8009dda:	4680      	mov	r8, r0
 8009ddc:	f7f6 fbaa 	bl	8000534 <__aeabi_i2d>
 8009de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009de4:	f7f6 fc10 	bl	8000608 <__aeabi_dmul>
 8009de8:	4602      	mov	r2, r0
 8009dea:	460b      	mov	r3, r1
 8009dec:	4620      	mov	r0, r4
 8009dee:	4629      	mov	r1, r5
 8009df0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009df4:	f7f6 fa50 	bl	8000298 <__aeabi_dsub>
 8009df8:	f806 4b01 	strb.w	r4, [r6], #1
 8009dfc:	9d07      	ldr	r5, [sp, #28]
 8009dfe:	eba6 040a 	sub.w	r4, r6, sl
 8009e02:	42a5      	cmp	r5, r4
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	f040 8117 	bne.w	800a03a <_dtoa_r+0x6e2>
 8009e0c:	f7f6 fa46 	bl	800029c <__adddf3>
 8009e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e14:	4604      	mov	r4, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	f7f6 fe86 	bl	8000b28 <__aeabi_dcmpgt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	f040 80f9 	bne.w	800a014 <_dtoa_r+0x6bc>
 8009e22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e26:	4620      	mov	r0, r4
 8009e28:	4629      	mov	r1, r5
 8009e2a:	f7f6 fe55 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e2e:	b118      	cbz	r0, 8009e38 <_dtoa_r+0x4e0>
 8009e30:	f018 0f01 	tst.w	r8, #1
 8009e34:	f040 80ee 	bne.w	800a014 <_dtoa_r+0x6bc>
 8009e38:	4649      	mov	r1, r9
 8009e3a:	4658      	mov	r0, fp
 8009e3c:	f000 fc90 	bl	800a760 <_Bfree>
 8009e40:	2300      	movs	r3, #0
 8009e42:	7033      	strb	r3, [r6, #0]
 8009e44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e46:	3701      	adds	r7, #1
 8009e48:	601f      	str	r7, [r3, #0]
 8009e4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 831d 	beq.w	800a48c <_dtoa_r+0xb34>
 8009e52:	601e      	str	r6, [r3, #0]
 8009e54:	e31a      	b.n	800a48c <_dtoa_r+0xb34>
 8009e56:	07e2      	lsls	r2, r4, #31
 8009e58:	d505      	bpl.n	8009e66 <_dtoa_r+0x50e>
 8009e5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e5e:	f7f6 fbd3 	bl	8000608 <__aeabi_dmul>
 8009e62:	3601      	adds	r6, #1
 8009e64:	2301      	movs	r3, #1
 8009e66:	1064      	asrs	r4, r4, #1
 8009e68:	3508      	adds	r5, #8
 8009e6a:	e73f      	b.n	8009cec <_dtoa_r+0x394>
 8009e6c:	2602      	movs	r6, #2
 8009e6e:	e742      	b.n	8009cf6 <_dtoa_r+0x39e>
 8009e70:	9c07      	ldr	r4, [sp, #28]
 8009e72:	9704      	str	r7, [sp, #16]
 8009e74:	e761      	b.n	8009d3a <_dtoa_r+0x3e2>
 8009e76:	4b27      	ldr	r3, [pc, #156]	@ (8009f14 <_dtoa_r+0x5bc>)
 8009e78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e7e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e82:	4454      	add	r4, sl
 8009e84:	2900      	cmp	r1, #0
 8009e86:	d053      	beq.n	8009f30 <_dtoa_r+0x5d8>
 8009e88:	4928      	ldr	r1, [pc, #160]	@ (8009f2c <_dtoa_r+0x5d4>)
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	f7f6 fce6 	bl	800085c <__aeabi_ddiv>
 8009e90:	4633      	mov	r3, r6
 8009e92:	462a      	mov	r2, r5
 8009e94:	f7f6 fa00 	bl	8000298 <__aeabi_dsub>
 8009e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e9c:	4656      	mov	r6, sl
 8009e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea2:	f7f6 fe61 	bl	8000b68 <__aeabi_d2iz>
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	f7f6 fb44 	bl	8000534 <__aeabi_i2d>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eb4:	f7f6 f9f0 	bl	8000298 <__aeabi_dsub>
 8009eb8:	3530      	adds	r5, #48	@ 0x30
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ec2:	f806 5b01 	strb.w	r5, [r6], #1
 8009ec6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009eca:	f7f6 fe0f 	bl	8000aec <__aeabi_dcmplt>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d171      	bne.n	8009fb6 <_dtoa_r+0x65e>
 8009ed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ed6:	4911      	ldr	r1, [pc, #68]	@ (8009f1c <_dtoa_r+0x5c4>)
 8009ed8:	2000      	movs	r0, #0
 8009eda:	f7f6 f9dd 	bl	8000298 <__aeabi_dsub>
 8009ede:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ee2:	f7f6 fe03 	bl	8000aec <__aeabi_dcmplt>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f040 8095 	bne.w	800a016 <_dtoa_r+0x6be>
 8009eec:	42a6      	cmp	r6, r4
 8009eee:	f43f af50 	beq.w	8009d92 <_dtoa_r+0x43a>
 8009ef2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8009f20 <_dtoa_r+0x5c8>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f7f6 fb85 	bl	8000608 <__aeabi_dmul>
 8009efe:	4b08      	ldr	r3, [pc, #32]	@ (8009f20 <_dtoa_r+0x5c8>)
 8009f00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f04:	2200      	movs	r2, #0
 8009f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f0a:	f7f6 fb7d 	bl	8000608 <__aeabi_dmul>
 8009f0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f12:	e7c4      	b.n	8009e9e <_dtoa_r+0x546>
 8009f14:	0800d2f0 	.word	0x0800d2f0
 8009f18:	0800d2c8 	.word	0x0800d2c8
 8009f1c:	3ff00000 	.word	0x3ff00000
 8009f20:	40240000 	.word	0x40240000
 8009f24:	401c0000 	.word	0x401c0000
 8009f28:	40140000 	.word	0x40140000
 8009f2c:	3fe00000 	.word	0x3fe00000
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	f7f6 fb68 	bl	8000608 <__aeabi_dmul>
 8009f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009f3e:	4656      	mov	r6, sl
 8009f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f44:	f7f6 fe10 	bl	8000b68 <__aeabi_d2iz>
 8009f48:	4605      	mov	r5, r0
 8009f4a:	f7f6 faf3 	bl	8000534 <__aeabi_i2d>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f56:	f7f6 f99f 	bl	8000298 <__aeabi_dsub>
 8009f5a:	3530      	adds	r5, #48	@ 0x30
 8009f5c:	f806 5b01 	strb.w	r5, [r6], #1
 8009f60:	4602      	mov	r2, r0
 8009f62:	460b      	mov	r3, r1
 8009f64:	42a6      	cmp	r6, r4
 8009f66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	d124      	bne.n	8009fba <_dtoa_r+0x662>
 8009f70:	4bac      	ldr	r3, [pc, #688]	@ (800a224 <_dtoa_r+0x8cc>)
 8009f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f76:	f7f6 f991 	bl	800029c <__adddf3>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f82:	f7f6 fdd1 	bl	8000b28 <__aeabi_dcmpgt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d145      	bne.n	800a016 <_dtoa_r+0x6be>
 8009f8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f8e:	49a5      	ldr	r1, [pc, #660]	@ (800a224 <_dtoa_r+0x8cc>)
 8009f90:	2000      	movs	r0, #0
 8009f92:	f7f6 f981 	bl	8000298 <__aeabi_dsub>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f9e:	f7f6 fda5 	bl	8000aec <__aeabi_dcmplt>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f43f aef5 	beq.w	8009d92 <_dtoa_r+0x43a>
 8009fa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009faa:	1e73      	subs	r3, r6, #1
 8009fac:	9315      	str	r3, [sp, #84]	@ 0x54
 8009fae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fb2:	2b30      	cmp	r3, #48	@ 0x30
 8009fb4:	d0f8      	beq.n	8009fa8 <_dtoa_r+0x650>
 8009fb6:	9f04      	ldr	r7, [sp, #16]
 8009fb8:	e73e      	b.n	8009e38 <_dtoa_r+0x4e0>
 8009fba:	4b9b      	ldr	r3, [pc, #620]	@ (800a228 <_dtoa_r+0x8d0>)
 8009fbc:	f7f6 fb24 	bl	8000608 <__aeabi_dmul>
 8009fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fc4:	e7bc      	b.n	8009f40 <_dtoa_r+0x5e8>
 8009fc6:	d10c      	bne.n	8009fe2 <_dtoa_r+0x68a>
 8009fc8:	4b98      	ldr	r3, [pc, #608]	@ (800a22c <_dtoa_r+0x8d4>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd0:	f7f6 fb1a 	bl	8000608 <__aeabi_dmul>
 8009fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fd8:	f7f6 fd9c 	bl	8000b14 <__aeabi_dcmpge>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f000 8157 	beq.w	800a290 <_dtoa_r+0x938>
 8009fe2:	2400      	movs	r4, #0
 8009fe4:	4625      	mov	r5, r4
 8009fe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe8:	43db      	mvns	r3, r3
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	4656      	mov	r6, sl
 8009fee:	2700      	movs	r7, #0
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4658      	mov	r0, fp
 8009ff4:	f000 fbb4 	bl	800a760 <_Bfree>
 8009ff8:	2d00      	cmp	r5, #0
 8009ffa:	d0dc      	beq.n	8009fb6 <_dtoa_r+0x65e>
 8009ffc:	b12f      	cbz	r7, 800a00a <_dtoa_r+0x6b2>
 8009ffe:	42af      	cmp	r7, r5
 800a000:	d003      	beq.n	800a00a <_dtoa_r+0x6b2>
 800a002:	4639      	mov	r1, r7
 800a004:	4658      	mov	r0, fp
 800a006:	f000 fbab 	bl	800a760 <_Bfree>
 800a00a:	4629      	mov	r1, r5
 800a00c:	4658      	mov	r0, fp
 800a00e:	f000 fba7 	bl	800a760 <_Bfree>
 800a012:	e7d0      	b.n	8009fb6 <_dtoa_r+0x65e>
 800a014:	9704      	str	r7, [sp, #16]
 800a016:	4633      	mov	r3, r6
 800a018:	461e      	mov	r6, r3
 800a01a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a01e:	2a39      	cmp	r2, #57	@ 0x39
 800a020:	d107      	bne.n	800a032 <_dtoa_r+0x6da>
 800a022:	459a      	cmp	sl, r3
 800a024:	d1f8      	bne.n	800a018 <_dtoa_r+0x6c0>
 800a026:	9a04      	ldr	r2, [sp, #16]
 800a028:	3201      	adds	r2, #1
 800a02a:	9204      	str	r2, [sp, #16]
 800a02c:	2230      	movs	r2, #48	@ 0x30
 800a02e:	f88a 2000 	strb.w	r2, [sl]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	3201      	adds	r2, #1
 800a036:	701a      	strb	r2, [r3, #0]
 800a038:	e7bd      	b.n	8009fb6 <_dtoa_r+0x65e>
 800a03a:	4b7b      	ldr	r3, [pc, #492]	@ (800a228 <_dtoa_r+0x8d0>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	f7f6 fae3 	bl	8000608 <__aeabi_dmul>
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4604      	mov	r4, r0
 800a048:	460d      	mov	r5, r1
 800a04a:	f7f6 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800a04e:	2800      	cmp	r0, #0
 800a050:	f43f aebb 	beq.w	8009dca <_dtoa_r+0x472>
 800a054:	e6f0      	b.n	8009e38 <_dtoa_r+0x4e0>
 800a056:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a058:	2a00      	cmp	r2, #0
 800a05a:	f000 80db 	beq.w	800a214 <_dtoa_r+0x8bc>
 800a05e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a060:	2a01      	cmp	r2, #1
 800a062:	f300 80bf 	bgt.w	800a1e4 <_dtoa_r+0x88c>
 800a066:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a068:	2a00      	cmp	r2, #0
 800a06a:	f000 80b7 	beq.w	800a1dc <_dtoa_r+0x884>
 800a06e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a074:	4646      	mov	r6, r8
 800a076:	9a08      	ldr	r2, [sp, #32]
 800a078:	2101      	movs	r1, #1
 800a07a:	441a      	add	r2, r3
 800a07c:	4658      	mov	r0, fp
 800a07e:	4498      	add	r8, r3
 800a080:	9208      	str	r2, [sp, #32]
 800a082:	f000 fc21 	bl	800a8c8 <__i2b>
 800a086:	4605      	mov	r5, r0
 800a088:	b15e      	cbz	r6, 800a0a2 <_dtoa_r+0x74a>
 800a08a:	9b08      	ldr	r3, [sp, #32]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd08      	ble.n	800a0a2 <_dtoa_r+0x74a>
 800a090:	42b3      	cmp	r3, r6
 800a092:	9a08      	ldr	r2, [sp, #32]
 800a094:	bfa8      	it	ge
 800a096:	4633      	movge	r3, r6
 800a098:	eba8 0803 	sub.w	r8, r8, r3
 800a09c:	1af6      	subs	r6, r6, r3
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0a4:	b1f3      	cbz	r3, 800a0e4 <_dtoa_r+0x78c>
 800a0a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 80b7 	beq.w	800a21c <_dtoa_r+0x8c4>
 800a0ae:	b18c      	cbz	r4, 800a0d4 <_dtoa_r+0x77c>
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	4658      	mov	r0, fp
 800a0b6:	f000 fcc7 	bl	800aa48 <__pow5mult>
 800a0ba:	464a      	mov	r2, r9
 800a0bc:	4601      	mov	r1, r0
 800a0be:	4605      	mov	r5, r0
 800a0c0:	4658      	mov	r0, fp
 800a0c2:	f000 fc17 	bl	800a8f4 <__multiply>
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	9004      	str	r0, [sp, #16]
 800a0ca:	4658      	mov	r0, fp
 800a0cc:	f000 fb48 	bl	800a760 <_Bfree>
 800a0d0:	9b04      	ldr	r3, [sp, #16]
 800a0d2:	4699      	mov	r9, r3
 800a0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0d6:	1b1a      	subs	r2, r3, r4
 800a0d8:	d004      	beq.n	800a0e4 <_dtoa_r+0x78c>
 800a0da:	4649      	mov	r1, r9
 800a0dc:	4658      	mov	r0, fp
 800a0de:	f000 fcb3 	bl	800aa48 <__pow5mult>
 800a0e2:	4681      	mov	r9, r0
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	4658      	mov	r0, fp
 800a0e8:	f000 fbee 	bl	800a8c8 <__i2b>
 800a0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 81cf 	beq.w	800a494 <_dtoa_r+0xb3c>
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	4601      	mov	r1, r0
 800a0fa:	4658      	mov	r0, fp
 800a0fc:	f000 fca4 	bl	800aa48 <__pow5mult>
 800a100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a102:	2b01      	cmp	r3, #1
 800a104:	4604      	mov	r4, r0
 800a106:	f300 8095 	bgt.w	800a234 <_dtoa_r+0x8dc>
 800a10a:	9b02      	ldr	r3, [sp, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 8087 	bne.w	800a220 <_dtoa_r+0x8c8>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f040 8089 	bne.w	800a230 <_dtoa_r+0x8d8>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a124:	0d1b      	lsrs	r3, r3, #20
 800a126:	051b      	lsls	r3, r3, #20
 800a128:	b12b      	cbz	r3, 800a136 <_dtoa_r+0x7de>
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	3301      	adds	r3, #1
 800a12e:	9308      	str	r3, [sp, #32]
 800a130:	f108 0801 	add.w	r8, r8, #1
 800a134:	2301      	movs	r3, #1
 800a136:	930a      	str	r3, [sp, #40]	@ 0x28
 800a138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 81b0 	beq.w	800a4a0 <_dtoa_r+0xb48>
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a146:	6918      	ldr	r0, [r3, #16]
 800a148:	f000 fb72 	bl	800a830 <__hi0bits>
 800a14c:	f1c0 0020 	rsb	r0, r0, #32
 800a150:	9b08      	ldr	r3, [sp, #32]
 800a152:	4418      	add	r0, r3
 800a154:	f010 001f 	ands.w	r0, r0, #31
 800a158:	d077      	beq.n	800a24a <_dtoa_r+0x8f2>
 800a15a:	f1c0 0320 	rsb	r3, r0, #32
 800a15e:	2b04      	cmp	r3, #4
 800a160:	dd6b      	ble.n	800a23a <_dtoa_r+0x8e2>
 800a162:	9b08      	ldr	r3, [sp, #32]
 800a164:	f1c0 001c 	rsb	r0, r0, #28
 800a168:	4403      	add	r3, r0
 800a16a:	4480      	add	r8, r0
 800a16c:	4406      	add	r6, r0
 800a16e:	9308      	str	r3, [sp, #32]
 800a170:	f1b8 0f00 	cmp.w	r8, #0
 800a174:	dd05      	ble.n	800a182 <_dtoa_r+0x82a>
 800a176:	4649      	mov	r1, r9
 800a178:	4642      	mov	r2, r8
 800a17a:	4658      	mov	r0, fp
 800a17c:	f000 fcbe 	bl	800aafc <__lshift>
 800a180:	4681      	mov	r9, r0
 800a182:	9b08      	ldr	r3, [sp, #32]
 800a184:	2b00      	cmp	r3, #0
 800a186:	dd05      	ble.n	800a194 <_dtoa_r+0x83c>
 800a188:	4621      	mov	r1, r4
 800a18a:	461a      	mov	r2, r3
 800a18c:	4658      	mov	r0, fp
 800a18e:	f000 fcb5 	bl	800aafc <__lshift>
 800a192:	4604      	mov	r4, r0
 800a194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a196:	2b00      	cmp	r3, #0
 800a198:	d059      	beq.n	800a24e <_dtoa_r+0x8f6>
 800a19a:	4621      	mov	r1, r4
 800a19c:	4648      	mov	r0, r9
 800a19e:	f000 fd19 	bl	800abd4 <__mcmp>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	da53      	bge.n	800a24e <_dtoa_r+0x8f6>
 800a1a6:	1e7b      	subs	r3, r7, #1
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	220a      	movs	r2, #10
 800a1b0:	4658      	mov	r0, fp
 800a1b2:	f000 faf7 	bl	800a7a4 <__multadd>
 800a1b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1b8:	4681      	mov	r9, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 8172 	beq.w	800a4a4 <_dtoa_r+0xb4c>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	220a      	movs	r2, #10
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f000 faec 	bl	800a7a4 <__multadd>
 800a1cc:	9b00      	ldr	r3, [sp, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	dc67      	bgt.n	800a2a4 <_dtoa_r+0x94c>
 800a1d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	dc41      	bgt.n	800a25e <_dtoa_r+0x906>
 800a1da:	e063      	b.n	800a2a4 <_dtoa_r+0x94c>
 800a1dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a1de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a1e2:	e746      	b.n	800a072 <_dtoa_r+0x71a>
 800a1e4:	9b07      	ldr	r3, [sp, #28]
 800a1e6:	1e5c      	subs	r4, r3, #1
 800a1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1ea:	42a3      	cmp	r3, r4
 800a1ec:	bfbf      	itttt	lt
 800a1ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a1f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a1f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a1f4:	1ae3      	sublt	r3, r4, r3
 800a1f6:	bfb4      	ite	lt
 800a1f8:	18d2      	addlt	r2, r2, r3
 800a1fa:	1b1c      	subge	r4, r3, r4
 800a1fc:	9b07      	ldr	r3, [sp, #28]
 800a1fe:	bfbc      	itt	lt
 800a200:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a202:	2400      	movlt	r4, #0
 800a204:	2b00      	cmp	r3, #0
 800a206:	bfb5      	itete	lt
 800a208:	eba8 0603 	sublt.w	r6, r8, r3
 800a20c:	9b07      	ldrge	r3, [sp, #28]
 800a20e:	2300      	movlt	r3, #0
 800a210:	4646      	movge	r6, r8
 800a212:	e730      	b.n	800a076 <_dtoa_r+0x71e>
 800a214:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a216:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a218:	4646      	mov	r6, r8
 800a21a:	e735      	b.n	800a088 <_dtoa_r+0x730>
 800a21c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a21e:	e75c      	b.n	800a0da <_dtoa_r+0x782>
 800a220:	2300      	movs	r3, #0
 800a222:	e788      	b.n	800a136 <_dtoa_r+0x7de>
 800a224:	3fe00000 	.word	0x3fe00000
 800a228:	40240000 	.word	0x40240000
 800a22c:	40140000 	.word	0x40140000
 800a230:	9b02      	ldr	r3, [sp, #8]
 800a232:	e780      	b.n	800a136 <_dtoa_r+0x7de>
 800a234:	2300      	movs	r3, #0
 800a236:	930a      	str	r3, [sp, #40]	@ 0x28
 800a238:	e782      	b.n	800a140 <_dtoa_r+0x7e8>
 800a23a:	d099      	beq.n	800a170 <_dtoa_r+0x818>
 800a23c:	9a08      	ldr	r2, [sp, #32]
 800a23e:	331c      	adds	r3, #28
 800a240:	441a      	add	r2, r3
 800a242:	4498      	add	r8, r3
 800a244:	441e      	add	r6, r3
 800a246:	9208      	str	r2, [sp, #32]
 800a248:	e792      	b.n	800a170 <_dtoa_r+0x818>
 800a24a:	4603      	mov	r3, r0
 800a24c:	e7f6      	b.n	800a23c <_dtoa_r+0x8e4>
 800a24e:	9b07      	ldr	r3, [sp, #28]
 800a250:	9704      	str	r7, [sp, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	dc20      	bgt.n	800a298 <_dtoa_r+0x940>
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	dd1e      	ble.n	800a29c <_dtoa_r+0x944>
 800a25e:	9b00      	ldr	r3, [sp, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	f47f aec0 	bne.w	8009fe6 <_dtoa_r+0x68e>
 800a266:	4621      	mov	r1, r4
 800a268:	2205      	movs	r2, #5
 800a26a:	4658      	mov	r0, fp
 800a26c:	f000 fa9a 	bl	800a7a4 <__multadd>
 800a270:	4601      	mov	r1, r0
 800a272:	4604      	mov	r4, r0
 800a274:	4648      	mov	r0, r9
 800a276:	f000 fcad 	bl	800abd4 <__mcmp>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	f77f aeb3 	ble.w	8009fe6 <_dtoa_r+0x68e>
 800a280:	4656      	mov	r6, sl
 800a282:	2331      	movs	r3, #49	@ 0x31
 800a284:	f806 3b01 	strb.w	r3, [r6], #1
 800a288:	9b04      	ldr	r3, [sp, #16]
 800a28a:	3301      	adds	r3, #1
 800a28c:	9304      	str	r3, [sp, #16]
 800a28e:	e6ae      	b.n	8009fee <_dtoa_r+0x696>
 800a290:	9c07      	ldr	r4, [sp, #28]
 800a292:	9704      	str	r7, [sp, #16]
 800a294:	4625      	mov	r5, r4
 800a296:	e7f3      	b.n	800a280 <_dtoa_r+0x928>
 800a298:	9b07      	ldr	r3, [sp, #28]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f000 8104 	beq.w	800a4ac <_dtoa_r+0xb54>
 800a2a4:	2e00      	cmp	r6, #0
 800a2a6:	dd05      	ble.n	800a2b4 <_dtoa_r+0x95c>
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	4658      	mov	r0, fp
 800a2ae:	f000 fc25 	bl	800aafc <__lshift>
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d05a      	beq.n	800a370 <_dtoa_r+0xa18>
 800a2ba:	6869      	ldr	r1, [r5, #4]
 800a2bc:	4658      	mov	r0, fp
 800a2be:	f000 fa0f 	bl	800a6e0 <_Balloc>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <_dtoa_r+0x97a>
 800a2c6:	4b84      	ldr	r3, [pc, #528]	@ (800a4d8 <_dtoa_r+0xb80>)
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a2ce:	f7ff bb5a 	b.w	8009986 <_dtoa_r+0x2e>
 800a2d2:	692a      	ldr	r2, [r5, #16]
 800a2d4:	3202      	adds	r2, #2
 800a2d6:	0092      	lsls	r2, r2, #2
 800a2d8:	f105 010c 	add.w	r1, r5, #12
 800a2dc:	300c      	adds	r0, #12
 800a2de:	f000 ffaf 	bl	800b240 <memcpy>
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4658      	mov	r0, fp
 800a2e8:	f000 fc08 	bl	800aafc <__lshift>
 800a2ec:	f10a 0301 	add.w	r3, sl, #1
 800a2f0:	9307      	str	r3, [sp, #28]
 800a2f2:	9b00      	ldr	r3, [sp, #0]
 800a2f4:	4453      	add	r3, sl
 800a2f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	462f      	mov	r7, r5
 800a300:	930a      	str	r3, [sp, #40]	@ 0x28
 800a302:	4605      	mov	r5, r0
 800a304:	9b07      	ldr	r3, [sp, #28]
 800a306:	4621      	mov	r1, r4
 800a308:	3b01      	subs	r3, #1
 800a30a:	4648      	mov	r0, r9
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	f7ff fa98 	bl	8009842 <quorem>
 800a312:	4639      	mov	r1, r7
 800a314:	9002      	str	r0, [sp, #8]
 800a316:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a31a:	4648      	mov	r0, r9
 800a31c:	f000 fc5a 	bl	800abd4 <__mcmp>
 800a320:	462a      	mov	r2, r5
 800a322:	9008      	str	r0, [sp, #32]
 800a324:	4621      	mov	r1, r4
 800a326:	4658      	mov	r0, fp
 800a328:	f000 fc70 	bl	800ac0c <__mdiff>
 800a32c:	68c2      	ldr	r2, [r0, #12]
 800a32e:	4606      	mov	r6, r0
 800a330:	bb02      	cbnz	r2, 800a374 <_dtoa_r+0xa1c>
 800a332:	4601      	mov	r1, r0
 800a334:	4648      	mov	r0, r9
 800a336:	f000 fc4d 	bl	800abd4 <__mcmp>
 800a33a:	4602      	mov	r2, r0
 800a33c:	4631      	mov	r1, r6
 800a33e:	4658      	mov	r0, fp
 800a340:	920e      	str	r2, [sp, #56]	@ 0x38
 800a342:	f000 fa0d 	bl	800a760 <_Bfree>
 800a346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a34a:	9e07      	ldr	r6, [sp, #28]
 800a34c:	ea43 0102 	orr.w	r1, r3, r2
 800a350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a352:	4319      	orrs	r1, r3
 800a354:	d110      	bne.n	800a378 <_dtoa_r+0xa20>
 800a356:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a35a:	d029      	beq.n	800a3b0 <_dtoa_r+0xa58>
 800a35c:	9b08      	ldr	r3, [sp, #32]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	dd02      	ble.n	800a368 <_dtoa_r+0xa10>
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a368:	9b00      	ldr	r3, [sp, #0]
 800a36a:	f883 8000 	strb.w	r8, [r3]
 800a36e:	e63f      	b.n	8009ff0 <_dtoa_r+0x698>
 800a370:	4628      	mov	r0, r5
 800a372:	e7bb      	b.n	800a2ec <_dtoa_r+0x994>
 800a374:	2201      	movs	r2, #1
 800a376:	e7e1      	b.n	800a33c <_dtoa_r+0x9e4>
 800a378:	9b08      	ldr	r3, [sp, #32]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	db04      	blt.n	800a388 <_dtoa_r+0xa30>
 800a37e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a380:	430b      	orrs	r3, r1
 800a382:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a384:	430b      	orrs	r3, r1
 800a386:	d120      	bne.n	800a3ca <_dtoa_r+0xa72>
 800a388:	2a00      	cmp	r2, #0
 800a38a:	dded      	ble.n	800a368 <_dtoa_r+0xa10>
 800a38c:	4649      	mov	r1, r9
 800a38e:	2201      	movs	r2, #1
 800a390:	4658      	mov	r0, fp
 800a392:	f000 fbb3 	bl	800aafc <__lshift>
 800a396:	4621      	mov	r1, r4
 800a398:	4681      	mov	r9, r0
 800a39a:	f000 fc1b 	bl	800abd4 <__mcmp>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	dc03      	bgt.n	800a3aa <_dtoa_r+0xa52>
 800a3a2:	d1e1      	bne.n	800a368 <_dtoa_r+0xa10>
 800a3a4:	f018 0f01 	tst.w	r8, #1
 800a3a8:	d0de      	beq.n	800a368 <_dtoa_r+0xa10>
 800a3aa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3ae:	d1d8      	bne.n	800a362 <_dtoa_r+0xa0a>
 800a3b0:	9a00      	ldr	r2, [sp, #0]
 800a3b2:	2339      	movs	r3, #57	@ 0x39
 800a3b4:	7013      	strb	r3, [r2, #0]
 800a3b6:	4633      	mov	r3, r6
 800a3b8:	461e      	mov	r6, r3
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a3c0:	2a39      	cmp	r2, #57	@ 0x39
 800a3c2:	d052      	beq.n	800a46a <_dtoa_r+0xb12>
 800a3c4:	3201      	adds	r2, #1
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	e612      	b.n	8009ff0 <_dtoa_r+0x698>
 800a3ca:	2a00      	cmp	r2, #0
 800a3cc:	dd07      	ble.n	800a3de <_dtoa_r+0xa86>
 800a3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3d2:	d0ed      	beq.n	800a3b0 <_dtoa_r+0xa58>
 800a3d4:	9a00      	ldr	r2, [sp, #0]
 800a3d6:	f108 0301 	add.w	r3, r8, #1
 800a3da:	7013      	strb	r3, [r2, #0]
 800a3dc:	e608      	b.n	8009ff0 <_dtoa_r+0x698>
 800a3de:	9b07      	ldr	r3, [sp, #28]
 800a3e0:	9a07      	ldr	r2, [sp, #28]
 800a3e2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a3e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d028      	beq.n	800a43e <_dtoa_r+0xae6>
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	4658      	mov	r0, fp
 800a3f4:	f000 f9d6 	bl	800a7a4 <__multadd>
 800a3f8:	42af      	cmp	r7, r5
 800a3fa:	4681      	mov	r9, r0
 800a3fc:	f04f 0300 	mov.w	r3, #0
 800a400:	f04f 020a 	mov.w	r2, #10
 800a404:	4639      	mov	r1, r7
 800a406:	4658      	mov	r0, fp
 800a408:	d107      	bne.n	800a41a <_dtoa_r+0xac2>
 800a40a:	f000 f9cb 	bl	800a7a4 <__multadd>
 800a40e:	4607      	mov	r7, r0
 800a410:	4605      	mov	r5, r0
 800a412:	9b07      	ldr	r3, [sp, #28]
 800a414:	3301      	adds	r3, #1
 800a416:	9307      	str	r3, [sp, #28]
 800a418:	e774      	b.n	800a304 <_dtoa_r+0x9ac>
 800a41a:	f000 f9c3 	bl	800a7a4 <__multadd>
 800a41e:	4629      	mov	r1, r5
 800a420:	4607      	mov	r7, r0
 800a422:	2300      	movs	r3, #0
 800a424:	220a      	movs	r2, #10
 800a426:	4658      	mov	r0, fp
 800a428:	f000 f9bc 	bl	800a7a4 <__multadd>
 800a42c:	4605      	mov	r5, r0
 800a42e:	e7f0      	b.n	800a412 <_dtoa_r+0xaba>
 800a430:	9b00      	ldr	r3, [sp, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	bfcc      	ite	gt
 800a436:	461e      	movgt	r6, r3
 800a438:	2601      	movle	r6, #1
 800a43a:	4456      	add	r6, sl
 800a43c:	2700      	movs	r7, #0
 800a43e:	4649      	mov	r1, r9
 800a440:	2201      	movs	r2, #1
 800a442:	4658      	mov	r0, fp
 800a444:	f000 fb5a 	bl	800aafc <__lshift>
 800a448:	4621      	mov	r1, r4
 800a44a:	4681      	mov	r9, r0
 800a44c:	f000 fbc2 	bl	800abd4 <__mcmp>
 800a450:	2800      	cmp	r0, #0
 800a452:	dcb0      	bgt.n	800a3b6 <_dtoa_r+0xa5e>
 800a454:	d102      	bne.n	800a45c <_dtoa_r+0xb04>
 800a456:	f018 0f01 	tst.w	r8, #1
 800a45a:	d1ac      	bne.n	800a3b6 <_dtoa_r+0xa5e>
 800a45c:	4633      	mov	r3, r6
 800a45e:	461e      	mov	r6, r3
 800a460:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a464:	2a30      	cmp	r2, #48	@ 0x30
 800a466:	d0fa      	beq.n	800a45e <_dtoa_r+0xb06>
 800a468:	e5c2      	b.n	8009ff0 <_dtoa_r+0x698>
 800a46a:	459a      	cmp	sl, r3
 800a46c:	d1a4      	bne.n	800a3b8 <_dtoa_r+0xa60>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	3301      	adds	r3, #1
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	2331      	movs	r3, #49	@ 0x31
 800a476:	f88a 3000 	strb.w	r3, [sl]
 800a47a:	e5b9      	b.n	8009ff0 <_dtoa_r+0x698>
 800a47c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a47e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a4dc <_dtoa_r+0xb84>
 800a482:	b11b      	cbz	r3, 800a48c <_dtoa_r+0xb34>
 800a484:	f10a 0308 	add.w	r3, sl, #8
 800a488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	4650      	mov	r0, sl
 800a48e:	b019      	add	sp, #100	@ 0x64
 800a490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a496:	2b01      	cmp	r3, #1
 800a498:	f77f ae37 	ble.w	800a10a <_dtoa_r+0x7b2>
 800a49c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a49e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	e655      	b.n	800a150 <_dtoa_r+0x7f8>
 800a4a4:	9b00      	ldr	r3, [sp, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f77f aed6 	ble.w	800a258 <_dtoa_r+0x900>
 800a4ac:	4656      	mov	r6, sl
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	4648      	mov	r0, r9
 800a4b2:	f7ff f9c6 	bl	8009842 <quorem>
 800a4b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a4ba:	f806 8b01 	strb.w	r8, [r6], #1
 800a4be:	9b00      	ldr	r3, [sp, #0]
 800a4c0:	eba6 020a 	sub.w	r2, r6, sl
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	ddb3      	ble.n	800a430 <_dtoa_r+0xad8>
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	4658      	mov	r0, fp
 800a4d0:	f000 f968 	bl	800a7a4 <__multadd>
 800a4d4:	4681      	mov	r9, r0
 800a4d6:	e7ea      	b.n	800a4ae <_dtoa_r+0xb56>
 800a4d8:	0800d24c 	.word	0x0800d24c
 800a4dc:	0800d1d0 	.word	0x0800d1d0

0800a4e0 <_free_r>:
 800a4e0:	b538      	push	{r3, r4, r5, lr}
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	d041      	beq.n	800a56c <_free_r+0x8c>
 800a4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ec:	1f0c      	subs	r4, r1, #4
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bfb8      	it	lt
 800a4f2:	18e4      	addlt	r4, r4, r3
 800a4f4:	f000 f8e8 	bl	800a6c8 <__malloc_lock>
 800a4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a570 <_free_r+0x90>)
 800a4fa:	6813      	ldr	r3, [r2, #0]
 800a4fc:	b933      	cbnz	r3, 800a50c <_free_r+0x2c>
 800a4fe:	6063      	str	r3, [r4, #4]
 800a500:	6014      	str	r4, [r2, #0]
 800a502:	4628      	mov	r0, r5
 800a504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a508:	f000 b8e4 	b.w	800a6d4 <__malloc_unlock>
 800a50c:	42a3      	cmp	r3, r4
 800a50e:	d908      	bls.n	800a522 <_free_r+0x42>
 800a510:	6820      	ldr	r0, [r4, #0]
 800a512:	1821      	adds	r1, r4, r0
 800a514:	428b      	cmp	r3, r1
 800a516:	bf01      	itttt	eq
 800a518:	6819      	ldreq	r1, [r3, #0]
 800a51a:	685b      	ldreq	r3, [r3, #4]
 800a51c:	1809      	addeq	r1, r1, r0
 800a51e:	6021      	streq	r1, [r4, #0]
 800a520:	e7ed      	b.n	800a4fe <_free_r+0x1e>
 800a522:	461a      	mov	r2, r3
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	b10b      	cbz	r3, 800a52c <_free_r+0x4c>
 800a528:	42a3      	cmp	r3, r4
 800a52a:	d9fa      	bls.n	800a522 <_free_r+0x42>
 800a52c:	6811      	ldr	r1, [r2, #0]
 800a52e:	1850      	adds	r0, r2, r1
 800a530:	42a0      	cmp	r0, r4
 800a532:	d10b      	bne.n	800a54c <_free_r+0x6c>
 800a534:	6820      	ldr	r0, [r4, #0]
 800a536:	4401      	add	r1, r0
 800a538:	1850      	adds	r0, r2, r1
 800a53a:	4283      	cmp	r3, r0
 800a53c:	6011      	str	r1, [r2, #0]
 800a53e:	d1e0      	bne.n	800a502 <_free_r+0x22>
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	6053      	str	r3, [r2, #4]
 800a546:	4408      	add	r0, r1
 800a548:	6010      	str	r0, [r2, #0]
 800a54a:	e7da      	b.n	800a502 <_free_r+0x22>
 800a54c:	d902      	bls.n	800a554 <_free_r+0x74>
 800a54e:	230c      	movs	r3, #12
 800a550:	602b      	str	r3, [r5, #0]
 800a552:	e7d6      	b.n	800a502 <_free_r+0x22>
 800a554:	6820      	ldr	r0, [r4, #0]
 800a556:	1821      	adds	r1, r4, r0
 800a558:	428b      	cmp	r3, r1
 800a55a:	bf04      	itt	eq
 800a55c:	6819      	ldreq	r1, [r3, #0]
 800a55e:	685b      	ldreq	r3, [r3, #4]
 800a560:	6063      	str	r3, [r4, #4]
 800a562:	bf04      	itt	eq
 800a564:	1809      	addeq	r1, r1, r0
 800a566:	6021      	streq	r1, [r4, #0]
 800a568:	6054      	str	r4, [r2, #4]
 800a56a:	e7ca      	b.n	800a502 <_free_r+0x22>
 800a56c:	bd38      	pop	{r3, r4, r5, pc}
 800a56e:	bf00      	nop
 800a570:	20000a60 	.word	0x20000a60

0800a574 <malloc>:
 800a574:	4b02      	ldr	r3, [pc, #8]	@ (800a580 <malloc+0xc>)
 800a576:	4601      	mov	r1, r0
 800a578:	6818      	ldr	r0, [r3, #0]
 800a57a:	f000 b825 	b.w	800a5c8 <_malloc_r>
 800a57e:	bf00      	nop
 800a580:	20000028 	.word	0x20000028

0800a584 <sbrk_aligned>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	4e0f      	ldr	r6, [pc, #60]	@ (800a5c4 <sbrk_aligned+0x40>)
 800a588:	460c      	mov	r4, r1
 800a58a:	6831      	ldr	r1, [r6, #0]
 800a58c:	4605      	mov	r5, r0
 800a58e:	b911      	cbnz	r1, 800a596 <sbrk_aligned+0x12>
 800a590:	f000 fe46 	bl	800b220 <_sbrk_r>
 800a594:	6030      	str	r0, [r6, #0]
 800a596:	4621      	mov	r1, r4
 800a598:	4628      	mov	r0, r5
 800a59a:	f000 fe41 	bl	800b220 <_sbrk_r>
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	d103      	bne.n	800a5aa <sbrk_aligned+0x26>
 800a5a2:	f04f 34ff 	mov.w	r4, #4294967295
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	bd70      	pop	{r4, r5, r6, pc}
 800a5aa:	1cc4      	adds	r4, r0, #3
 800a5ac:	f024 0403 	bic.w	r4, r4, #3
 800a5b0:	42a0      	cmp	r0, r4
 800a5b2:	d0f8      	beq.n	800a5a6 <sbrk_aligned+0x22>
 800a5b4:	1a21      	subs	r1, r4, r0
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 fe32 	bl	800b220 <_sbrk_r>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d1f2      	bne.n	800a5a6 <sbrk_aligned+0x22>
 800a5c0:	e7ef      	b.n	800a5a2 <sbrk_aligned+0x1e>
 800a5c2:	bf00      	nop
 800a5c4:	20000a5c 	.word	0x20000a5c

0800a5c8 <_malloc_r>:
 800a5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5cc:	1ccd      	adds	r5, r1, #3
 800a5ce:	f025 0503 	bic.w	r5, r5, #3
 800a5d2:	3508      	adds	r5, #8
 800a5d4:	2d0c      	cmp	r5, #12
 800a5d6:	bf38      	it	cc
 800a5d8:	250c      	movcc	r5, #12
 800a5da:	2d00      	cmp	r5, #0
 800a5dc:	4606      	mov	r6, r0
 800a5de:	db01      	blt.n	800a5e4 <_malloc_r+0x1c>
 800a5e0:	42a9      	cmp	r1, r5
 800a5e2:	d904      	bls.n	800a5ee <_malloc_r+0x26>
 800a5e4:	230c      	movs	r3, #12
 800a5e6:	6033      	str	r3, [r6, #0]
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6c4 <_malloc_r+0xfc>
 800a5f2:	f000 f869 	bl	800a6c8 <__malloc_lock>
 800a5f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5fa:	461c      	mov	r4, r3
 800a5fc:	bb44      	cbnz	r4, 800a650 <_malloc_r+0x88>
 800a5fe:	4629      	mov	r1, r5
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff ffbf 	bl	800a584 <sbrk_aligned>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	4604      	mov	r4, r0
 800a60a:	d158      	bne.n	800a6be <_malloc_r+0xf6>
 800a60c:	f8d8 4000 	ldr.w	r4, [r8]
 800a610:	4627      	mov	r7, r4
 800a612:	2f00      	cmp	r7, #0
 800a614:	d143      	bne.n	800a69e <_malloc_r+0xd6>
 800a616:	2c00      	cmp	r4, #0
 800a618:	d04b      	beq.n	800a6b2 <_malloc_r+0xea>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	4639      	mov	r1, r7
 800a61e:	4630      	mov	r0, r6
 800a620:	eb04 0903 	add.w	r9, r4, r3
 800a624:	f000 fdfc 	bl	800b220 <_sbrk_r>
 800a628:	4581      	cmp	r9, r0
 800a62a:	d142      	bne.n	800a6b2 <_malloc_r+0xea>
 800a62c:	6821      	ldr	r1, [r4, #0]
 800a62e:	1a6d      	subs	r5, r5, r1
 800a630:	4629      	mov	r1, r5
 800a632:	4630      	mov	r0, r6
 800a634:	f7ff ffa6 	bl	800a584 <sbrk_aligned>
 800a638:	3001      	adds	r0, #1
 800a63a:	d03a      	beq.n	800a6b2 <_malloc_r+0xea>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	442b      	add	r3, r5
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	f8d8 3000 	ldr.w	r3, [r8]
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	bb62      	cbnz	r2, 800a6a4 <_malloc_r+0xdc>
 800a64a:	f8c8 7000 	str.w	r7, [r8]
 800a64e:	e00f      	b.n	800a670 <_malloc_r+0xa8>
 800a650:	6822      	ldr	r2, [r4, #0]
 800a652:	1b52      	subs	r2, r2, r5
 800a654:	d420      	bmi.n	800a698 <_malloc_r+0xd0>
 800a656:	2a0b      	cmp	r2, #11
 800a658:	d917      	bls.n	800a68a <_malloc_r+0xc2>
 800a65a:	1961      	adds	r1, r4, r5
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	6025      	str	r5, [r4, #0]
 800a660:	bf18      	it	ne
 800a662:	6059      	strne	r1, [r3, #4]
 800a664:	6863      	ldr	r3, [r4, #4]
 800a666:	bf08      	it	eq
 800a668:	f8c8 1000 	streq.w	r1, [r8]
 800a66c:	5162      	str	r2, [r4, r5]
 800a66e:	604b      	str	r3, [r1, #4]
 800a670:	4630      	mov	r0, r6
 800a672:	f000 f82f 	bl	800a6d4 <__malloc_unlock>
 800a676:	f104 000b 	add.w	r0, r4, #11
 800a67a:	1d23      	adds	r3, r4, #4
 800a67c:	f020 0007 	bic.w	r0, r0, #7
 800a680:	1ac2      	subs	r2, r0, r3
 800a682:	bf1c      	itt	ne
 800a684:	1a1b      	subne	r3, r3, r0
 800a686:	50a3      	strne	r3, [r4, r2]
 800a688:	e7af      	b.n	800a5ea <_malloc_r+0x22>
 800a68a:	6862      	ldr	r2, [r4, #4]
 800a68c:	42a3      	cmp	r3, r4
 800a68e:	bf0c      	ite	eq
 800a690:	f8c8 2000 	streq.w	r2, [r8]
 800a694:	605a      	strne	r2, [r3, #4]
 800a696:	e7eb      	b.n	800a670 <_malloc_r+0xa8>
 800a698:	4623      	mov	r3, r4
 800a69a:	6864      	ldr	r4, [r4, #4]
 800a69c:	e7ae      	b.n	800a5fc <_malloc_r+0x34>
 800a69e:	463c      	mov	r4, r7
 800a6a0:	687f      	ldr	r7, [r7, #4]
 800a6a2:	e7b6      	b.n	800a612 <_malloc_r+0x4a>
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	42a3      	cmp	r3, r4
 800a6aa:	d1fb      	bne.n	800a6a4 <_malloc_r+0xdc>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	6053      	str	r3, [r2, #4]
 800a6b0:	e7de      	b.n	800a670 <_malloc_r+0xa8>
 800a6b2:	230c      	movs	r3, #12
 800a6b4:	6033      	str	r3, [r6, #0]
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f000 f80c 	bl	800a6d4 <__malloc_unlock>
 800a6bc:	e794      	b.n	800a5e8 <_malloc_r+0x20>
 800a6be:	6005      	str	r5, [r0, #0]
 800a6c0:	e7d6      	b.n	800a670 <_malloc_r+0xa8>
 800a6c2:	bf00      	nop
 800a6c4:	20000a60 	.word	0x20000a60

0800a6c8 <__malloc_lock>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	@ (800a6d0 <__malloc_lock+0x8>)
 800a6ca:	f7ff b8b8 	b.w	800983e <__retarget_lock_acquire_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	20000a58 	.word	0x20000a58

0800a6d4 <__malloc_unlock>:
 800a6d4:	4801      	ldr	r0, [pc, #4]	@ (800a6dc <__malloc_unlock+0x8>)
 800a6d6:	f7ff b8b3 	b.w	8009840 <__retarget_lock_release_recursive>
 800a6da:	bf00      	nop
 800a6dc:	20000a58 	.word	0x20000a58

0800a6e0 <_Balloc>:
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	69c6      	ldr	r6, [r0, #28]
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	b976      	cbnz	r6, 800a708 <_Balloc+0x28>
 800a6ea:	2010      	movs	r0, #16
 800a6ec:	f7ff ff42 	bl	800a574 <malloc>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	61e0      	str	r0, [r4, #28]
 800a6f4:	b920      	cbnz	r0, 800a700 <_Balloc+0x20>
 800a6f6:	4b18      	ldr	r3, [pc, #96]	@ (800a758 <_Balloc+0x78>)
 800a6f8:	4818      	ldr	r0, [pc, #96]	@ (800a75c <_Balloc+0x7c>)
 800a6fa:	216b      	movs	r1, #107	@ 0x6b
 800a6fc:	f000 fdae 	bl	800b25c <__assert_func>
 800a700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a704:	6006      	str	r6, [r0, #0]
 800a706:	60c6      	str	r6, [r0, #12]
 800a708:	69e6      	ldr	r6, [r4, #28]
 800a70a:	68f3      	ldr	r3, [r6, #12]
 800a70c:	b183      	cbz	r3, 800a730 <_Balloc+0x50>
 800a70e:	69e3      	ldr	r3, [r4, #28]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a716:	b9b8      	cbnz	r0, 800a748 <_Balloc+0x68>
 800a718:	2101      	movs	r1, #1
 800a71a:	fa01 f605 	lsl.w	r6, r1, r5
 800a71e:	1d72      	adds	r2, r6, #5
 800a720:	0092      	lsls	r2, r2, #2
 800a722:	4620      	mov	r0, r4
 800a724:	f000 fdb8 	bl	800b298 <_calloc_r>
 800a728:	b160      	cbz	r0, 800a744 <_Balloc+0x64>
 800a72a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a72e:	e00e      	b.n	800a74e <_Balloc+0x6e>
 800a730:	2221      	movs	r2, #33	@ 0x21
 800a732:	2104      	movs	r1, #4
 800a734:	4620      	mov	r0, r4
 800a736:	f000 fdaf 	bl	800b298 <_calloc_r>
 800a73a:	69e3      	ldr	r3, [r4, #28]
 800a73c:	60f0      	str	r0, [r6, #12]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e4      	bne.n	800a70e <_Balloc+0x2e>
 800a744:	2000      	movs	r0, #0
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	6802      	ldr	r2, [r0, #0]
 800a74a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a74e:	2300      	movs	r3, #0
 800a750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a754:	e7f7      	b.n	800a746 <_Balloc+0x66>
 800a756:	bf00      	nop
 800a758:	0800d1dd 	.word	0x0800d1dd
 800a75c:	0800d25d 	.word	0x0800d25d

0800a760 <_Bfree>:
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	69c6      	ldr	r6, [r0, #28]
 800a764:	4605      	mov	r5, r0
 800a766:	460c      	mov	r4, r1
 800a768:	b976      	cbnz	r6, 800a788 <_Bfree+0x28>
 800a76a:	2010      	movs	r0, #16
 800a76c:	f7ff ff02 	bl	800a574 <malloc>
 800a770:	4602      	mov	r2, r0
 800a772:	61e8      	str	r0, [r5, #28]
 800a774:	b920      	cbnz	r0, 800a780 <_Bfree+0x20>
 800a776:	4b09      	ldr	r3, [pc, #36]	@ (800a79c <_Bfree+0x3c>)
 800a778:	4809      	ldr	r0, [pc, #36]	@ (800a7a0 <_Bfree+0x40>)
 800a77a:	218f      	movs	r1, #143	@ 0x8f
 800a77c:	f000 fd6e 	bl	800b25c <__assert_func>
 800a780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a784:	6006      	str	r6, [r0, #0]
 800a786:	60c6      	str	r6, [r0, #12]
 800a788:	b13c      	cbz	r4, 800a79a <_Bfree+0x3a>
 800a78a:	69eb      	ldr	r3, [r5, #28]
 800a78c:	6862      	ldr	r2, [r4, #4]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a794:	6021      	str	r1, [r4, #0]
 800a796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a79a:	bd70      	pop	{r4, r5, r6, pc}
 800a79c:	0800d1dd 	.word	0x0800d1dd
 800a7a0:	0800d25d 	.word	0x0800d25d

0800a7a4 <__multadd>:
 800a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a8:	690d      	ldr	r5, [r1, #16]
 800a7aa:	4607      	mov	r7, r0
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	f101 0c14 	add.w	ip, r1, #20
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a7ba:	b299      	uxth	r1, r3
 800a7bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a7c0:	0c1e      	lsrs	r6, r3, #16
 800a7c2:	0c0b      	lsrs	r3, r1, #16
 800a7c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a7c8:	b289      	uxth	r1, r1
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7d0:	4285      	cmp	r5, r0
 800a7d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a7d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7da:	dcec      	bgt.n	800a7b6 <__multadd+0x12>
 800a7dc:	b30e      	cbz	r6, 800a822 <__multadd+0x7e>
 800a7de:	68a3      	ldr	r3, [r4, #8]
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	dc19      	bgt.n	800a818 <__multadd+0x74>
 800a7e4:	6861      	ldr	r1, [r4, #4]
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	3101      	adds	r1, #1
 800a7ea:	f7ff ff79 	bl	800a6e0 <_Balloc>
 800a7ee:	4680      	mov	r8, r0
 800a7f0:	b928      	cbnz	r0, 800a7fe <__multadd+0x5a>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <__multadd+0x84>)
 800a7f6:	480d      	ldr	r0, [pc, #52]	@ (800a82c <__multadd+0x88>)
 800a7f8:	21ba      	movs	r1, #186	@ 0xba
 800a7fa:	f000 fd2f 	bl	800b25c <__assert_func>
 800a7fe:	6922      	ldr	r2, [r4, #16]
 800a800:	3202      	adds	r2, #2
 800a802:	f104 010c 	add.w	r1, r4, #12
 800a806:	0092      	lsls	r2, r2, #2
 800a808:	300c      	adds	r0, #12
 800a80a:	f000 fd19 	bl	800b240 <memcpy>
 800a80e:	4621      	mov	r1, r4
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff ffa5 	bl	800a760 <_Bfree>
 800a816:	4644      	mov	r4, r8
 800a818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a81c:	3501      	adds	r5, #1
 800a81e:	615e      	str	r6, [r3, #20]
 800a820:	6125      	str	r5, [r4, #16]
 800a822:	4620      	mov	r0, r4
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a828:	0800d24c 	.word	0x0800d24c
 800a82c:	0800d25d 	.word	0x0800d25d

0800a830 <__hi0bits>:
 800a830:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a834:	4603      	mov	r3, r0
 800a836:	bf36      	itet	cc
 800a838:	0403      	lslcc	r3, r0, #16
 800a83a:	2000      	movcs	r0, #0
 800a83c:	2010      	movcc	r0, #16
 800a83e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a842:	bf3c      	itt	cc
 800a844:	021b      	lslcc	r3, r3, #8
 800a846:	3008      	addcc	r0, #8
 800a848:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a84c:	bf3c      	itt	cc
 800a84e:	011b      	lslcc	r3, r3, #4
 800a850:	3004      	addcc	r0, #4
 800a852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a856:	bf3c      	itt	cc
 800a858:	009b      	lslcc	r3, r3, #2
 800a85a:	3002      	addcc	r0, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	db05      	blt.n	800a86c <__hi0bits+0x3c>
 800a860:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a864:	f100 0001 	add.w	r0, r0, #1
 800a868:	bf08      	it	eq
 800a86a:	2020      	moveq	r0, #32
 800a86c:	4770      	bx	lr

0800a86e <__lo0bits>:
 800a86e:	6803      	ldr	r3, [r0, #0]
 800a870:	4602      	mov	r2, r0
 800a872:	f013 0007 	ands.w	r0, r3, #7
 800a876:	d00b      	beq.n	800a890 <__lo0bits+0x22>
 800a878:	07d9      	lsls	r1, r3, #31
 800a87a:	d421      	bmi.n	800a8c0 <__lo0bits+0x52>
 800a87c:	0798      	lsls	r0, r3, #30
 800a87e:	bf49      	itett	mi
 800a880:	085b      	lsrmi	r3, r3, #1
 800a882:	089b      	lsrpl	r3, r3, #2
 800a884:	2001      	movmi	r0, #1
 800a886:	6013      	strmi	r3, [r2, #0]
 800a888:	bf5c      	itt	pl
 800a88a:	6013      	strpl	r3, [r2, #0]
 800a88c:	2002      	movpl	r0, #2
 800a88e:	4770      	bx	lr
 800a890:	b299      	uxth	r1, r3
 800a892:	b909      	cbnz	r1, 800a898 <__lo0bits+0x2a>
 800a894:	0c1b      	lsrs	r3, r3, #16
 800a896:	2010      	movs	r0, #16
 800a898:	b2d9      	uxtb	r1, r3
 800a89a:	b909      	cbnz	r1, 800a8a0 <__lo0bits+0x32>
 800a89c:	3008      	adds	r0, #8
 800a89e:	0a1b      	lsrs	r3, r3, #8
 800a8a0:	0719      	lsls	r1, r3, #28
 800a8a2:	bf04      	itt	eq
 800a8a4:	091b      	lsreq	r3, r3, #4
 800a8a6:	3004      	addeq	r0, #4
 800a8a8:	0799      	lsls	r1, r3, #30
 800a8aa:	bf04      	itt	eq
 800a8ac:	089b      	lsreq	r3, r3, #2
 800a8ae:	3002      	addeq	r0, #2
 800a8b0:	07d9      	lsls	r1, r3, #31
 800a8b2:	d403      	bmi.n	800a8bc <__lo0bits+0x4e>
 800a8b4:	085b      	lsrs	r3, r3, #1
 800a8b6:	f100 0001 	add.w	r0, r0, #1
 800a8ba:	d003      	beq.n	800a8c4 <__lo0bits+0x56>
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	4770      	bx	lr
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	4770      	bx	lr
 800a8c4:	2020      	movs	r0, #32
 800a8c6:	4770      	bx	lr

0800a8c8 <__i2b>:
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	460c      	mov	r4, r1
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	f7ff ff07 	bl	800a6e0 <_Balloc>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	b928      	cbnz	r0, 800a8e2 <__i2b+0x1a>
 800a8d6:	4b05      	ldr	r3, [pc, #20]	@ (800a8ec <__i2b+0x24>)
 800a8d8:	4805      	ldr	r0, [pc, #20]	@ (800a8f0 <__i2b+0x28>)
 800a8da:	f240 1145 	movw	r1, #325	@ 0x145
 800a8de:	f000 fcbd 	bl	800b25c <__assert_func>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	6144      	str	r4, [r0, #20]
 800a8e6:	6103      	str	r3, [r0, #16]
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	bf00      	nop
 800a8ec:	0800d24c 	.word	0x0800d24c
 800a8f0:	0800d25d 	.word	0x0800d25d

0800a8f4 <__multiply>:
 800a8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	4614      	mov	r4, r2
 800a8fa:	690a      	ldr	r2, [r1, #16]
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	bfa8      	it	ge
 800a902:	4623      	movge	r3, r4
 800a904:	460f      	mov	r7, r1
 800a906:	bfa4      	itt	ge
 800a908:	460c      	movge	r4, r1
 800a90a:	461f      	movge	r7, r3
 800a90c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a910:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a914:	68a3      	ldr	r3, [r4, #8]
 800a916:	6861      	ldr	r1, [r4, #4]
 800a918:	eb0a 0609 	add.w	r6, sl, r9
 800a91c:	42b3      	cmp	r3, r6
 800a91e:	b085      	sub	sp, #20
 800a920:	bfb8      	it	lt
 800a922:	3101      	addlt	r1, #1
 800a924:	f7ff fedc 	bl	800a6e0 <_Balloc>
 800a928:	b930      	cbnz	r0, 800a938 <__multiply+0x44>
 800a92a:	4602      	mov	r2, r0
 800a92c:	4b44      	ldr	r3, [pc, #272]	@ (800aa40 <__multiply+0x14c>)
 800a92e:	4845      	ldr	r0, [pc, #276]	@ (800aa44 <__multiply+0x150>)
 800a930:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a934:	f000 fc92 	bl	800b25c <__assert_func>
 800a938:	f100 0514 	add.w	r5, r0, #20
 800a93c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a940:	462b      	mov	r3, r5
 800a942:	2200      	movs	r2, #0
 800a944:	4543      	cmp	r3, r8
 800a946:	d321      	bcc.n	800a98c <__multiply+0x98>
 800a948:	f107 0114 	add.w	r1, r7, #20
 800a94c:	f104 0214 	add.w	r2, r4, #20
 800a950:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a954:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a958:	9302      	str	r3, [sp, #8]
 800a95a:	1b13      	subs	r3, r2, r4
 800a95c:	3b15      	subs	r3, #21
 800a95e:	f023 0303 	bic.w	r3, r3, #3
 800a962:	3304      	adds	r3, #4
 800a964:	f104 0715 	add.w	r7, r4, #21
 800a968:	42ba      	cmp	r2, r7
 800a96a:	bf38      	it	cc
 800a96c:	2304      	movcc	r3, #4
 800a96e:	9301      	str	r3, [sp, #4]
 800a970:	9b02      	ldr	r3, [sp, #8]
 800a972:	9103      	str	r1, [sp, #12]
 800a974:	428b      	cmp	r3, r1
 800a976:	d80c      	bhi.n	800a992 <__multiply+0x9e>
 800a978:	2e00      	cmp	r6, #0
 800a97a:	dd03      	ble.n	800a984 <__multiply+0x90>
 800a97c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a980:	2b00      	cmp	r3, #0
 800a982:	d05b      	beq.n	800aa3c <__multiply+0x148>
 800a984:	6106      	str	r6, [r0, #16]
 800a986:	b005      	add	sp, #20
 800a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98c:	f843 2b04 	str.w	r2, [r3], #4
 800a990:	e7d8      	b.n	800a944 <__multiply+0x50>
 800a992:	f8b1 a000 	ldrh.w	sl, [r1]
 800a996:	f1ba 0f00 	cmp.w	sl, #0
 800a99a:	d024      	beq.n	800a9e6 <__multiply+0xf2>
 800a99c:	f104 0e14 	add.w	lr, r4, #20
 800a9a0:	46a9      	mov	r9, r5
 800a9a2:	f04f 0c00 	mov.w	ip, #0
 800a9a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9aa:	f8d9 3000 	ldr.w	r3, [r9]
 800a9ae:	fa1f fb87 	uxth.w	fp, r7
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a9b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a9bc:	f8d9 7000 	ldr.w	r7, [r9]
 800a9c0:	4463      	add	r3, ip
 800a9c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a9ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a9d4:	4572      	cmp	r2, lr
 800a9d6:	f849 3b04 	str.w	r3, [r9], #4
 800a9da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a9de:	d8e2      	bhi.n	800a9a6 <__multiply+0xb2>
 800a9e0:	9b01      	ldr	r3, [sp, #4]
 800a9e2:	f845 c003 	str.w	ip, [r5, r3]
 800a9e6:	9b03      	ldr	r3, [sp, #12]
 800a9e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9ec:	3104      	adds	r1, #4
 800a9ee:	f1b9 0f00 	cmp.w	r9, #0
 800a9f2:	d021      	beq.n	800aa38 <__multiply+0x144>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	f104 0c14 	add.w	ip, r4, #20
 800a9fa:	46ae      	mov	lr, r5
 800a9fc:	f04f 0a00 	mov.w	sl, #0
 800aa00:	f8bc b000 	ldrh.w	fp, [ip]
 800aa04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa08:	fb09 770b 	mla	r7, r9, fp, r7
 800aa0c:	4457      	add	r7, sl
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa14:	f84e 3b04 	str.w	r3, [lr], #4
 800aa18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa20:	f8be 3000 	ldrh.w	r3, [lr]
 800aa24:	fb09 330a 	mla	r3, r9, sl, r3
 800aa28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa2c:	4562      	cmp	r2, ip
 800aa2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa32:	d8e5      	bhi.n	800aa00 <__multiply+0x10c>
 800aa34:	9f01      	ldr	r7, [sp, #4]
 800aa36:	51eb      	str	r3, [r5, r7]
 800aa38:	3504      	adds	r5, #4
 800aa3a:	e799      	b.n	800a970 <__multiply+0x7c>
 800aa3c:	3e01      	subs	r6, #1
 800aa3e:	e79b      	b.n	800a978 <__multiply+0x84>
 800aa40:	0800d24c 	.word	0x0800d24c
 800aa44:	0800d25d 	.word	0x0800d25d

0800aa48 <__pow5mult>:
 800aa48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa4c:	4615      	mov	r5, r2
 800aa4e:	f012 0203 	ands.w	r2, r2, #3
 800aa52:	4607      	mov	r7, r0
 800aa54:	460e      	mov	r6, r1
 800aa56:	d007      	beq.n	800aa68 <__pow5mult+0x20>
 800aa58:	4c25      	ldr	r4, [pc, #148]	@ (800aaf0 <__pow5mult+0xa8>)
 800aa5a:	3a01      	subs	r2, #1
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa62:	f7ff fe9f 	bl	800a7a4 <__multadd>
 800aa66:	4606      	mov	r6, r0
 800aa68:	10ad      	asrs	r5, r5, #2
 800aa6a:	d03d      	beq.n	800aae8 <__pow5mult+0xa0>
 800aa6c:	69fc      	ldr	r4, [r7, #28]
 800aa6e:	b97c      	cbnz	r4, 800aa90 <__pow5mult+0x48>
 800aa70:	2010      	movs	r0, #16
 800aa72:	f7ff fd7f 	bl	800a574 <malloc>
 800aa76:	4602      	mov	r2, r0
 800aa78:	61f8      	str	r0, [r7, #28]
 800aa7a:	b928      	cbnz	r0, 800aa88 <__pow5mult+0x40>
 800aa7c:	4b1d      	ldr	r3, [pc, #116]	@ (800aaf4 <__pow5mult+0xac>)
 800aa7e:	481e      	ldr	r0, [pc, #120]	@ (800aaf8 <__pow5mult+0xb0>)
 800aa80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa84:	f000 fbea 	bl	800b25c <__assert_func>
 800aa88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa8c:	6004      	str	r4, [r0, #0]
 800aa8e:	60c4      	str	r4, [r0, #12]
 800aa90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa98:	b94c      	cbnz	r4, 800aaae <__pow5mult+0x66>
 800aa9a:	f240 2171 	movw	r1, #625	@ 0x271
 800aa9e:	4638      	mov	r0, r7
 800aaa0:	f7ff ff12 	bl	800a8c8 <__i2b>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaaa:	4604      	mov	r4, r0
 800aaac:	6003      	str	r3, [r0, #0]
 800aaae:	f04f 0900 	mov.w	r9, #0
 800aab2:	07eb      	lsls	r3, r5, #31
 800aab4:	d50a      	bpl.n	800aacc <__pow5mult+0x84>
 800aab6:	4631      	mov	r1, r6
 800aab8:	4622      	mov	r2, r4
 800aaba:	4638      	mov	r0, r7
 800aabc:	f7ff ff1a 	bl	800a8f4 <__multiply>
 800aac0:	4631      	mov	r1, r6
 800aac2:	4680      	mov	r8, r0
 800aac4:	4638      	mov	r0, r7
 800aac6:	f7ff fe4b 	bl	800a760 <_Bfree>
 800aaca:	4646      	mov	r6, r8
 800aacc:	106d      	asrs	r5, r5, #1
 800aace:	d00b      	beq.n	800aae8 <__pow5mult+0xa0>
 800aad0:	6820      	ldr	r0, [r4, #0]
 800aad2:	b938      	cbnz	r0, 800aae4 <__pow5mult+0x9c>
 800aad4:	4622      	mov	r2, r4
 800aad6:	4621      	mov	r1, r4
 800aad8:	4638      	mov	r0, r7
 800aada:	f7ff ff0b 	bl	800a8f4 <__multiply>
 800aade:	6020      	str	r0, [r4, #0]
 800aae0:	f8c0 9000 	str.w	r9, [r0]
 800aae4:	4604      	mov	r4, r0
 800aae6:	e7e4      	b.n	800aab2 <__pow5mult+0x6a>
 800aae8:	4630      	mov	r0, r6
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	bf00      	nop
 800aaf0:	0800d2b8 	.word	0x0800d2b8
 800aaf4:	0800d1dd 	.word	0x0800d1dd
 800aaf8:	0800d25d 	.word	0x0800d25d

0800aafc <__lshift>:
 800aafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	460c      	mov	r4, r1
 800ab02:	6849      	ldr	r1, [r1, #4]
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	4691      	mov	r9, r2
 800ab10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab14:	f108 0601 	add.w	r6, r8, #1
 800ab18:	42b3      	cmp	r3, r6
 800ab1a:	db0b      	blt.n	800ab34 <__lshift+0x38>
 800ab1c:	4638      	mov	r0, r7
 800ab1e:	f7ff fddf 	bl	800a6e0 <_Balloc>
 800ab22:	4605      	mov	r5, r0
 800ab24:	b948      	cbnz	r0, 800ab3a <__lshift+0x3e>
 800ab26:	4602      	mov	r2, r0
 800ab28:	4b28      	ldr	r3, [pc, #160]	@ (800abcc <__lshift+0xd0>)
 800ab2a:	4829      	ldr	r0, [pc, #164]	@ (800abd0 <__lshift+0xd4>)
 800ab2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab30:	f000 fb94 	bl	800b25c <__assert_func>
 800ab34:	3101      	adds	r1, #1
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	e7ee      	b.n	800ab18 <__lshift+0x1c>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f100 0114 	add.w	r1, r0, #20
 800ab40:	f100 0210 	add.w	r2, r0, #16
 800ab44:	4618      	mov	r0, r3
 800ab46:	4553      	cmp	r3, sl
 800ab48:	db33      	blt.n	800abb2 <__lshift+0xb6>
 800ab4a:	6920      	ldr	r0, [r4, #16]
 800ab4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab50:	f104 0314 	add.w	r3, r4, #20
 800ab54:	f019 091f 	ands.w	r9, r9, #31
 800ab58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab60:	d02b      	beq.n	800abba <__lshift+0xbe>
 800ab62:	f1c9 0e20 	rsb	lr, r9, #32
 800ab66:	468a      	mov	sl, r1
 800ab68:	2200      	movs	r2, #0
 800ab6a:	6818      	ldr	r0, [r3, #0]
 800ab6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ab70:	4310      	orrs	r0, r2
 800ab72:	f84a 0b04 	str.w	r0, [sl], #4
 800ab76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab7a:	459c      	cmp	ip, r3
 800ab7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab80:	d8f3      	bhi.n	800ab6a <__lshift+0x6e>
 800ab82:	ebac 0304 	sub.w	r3, ip, r4
 800ab86:	3b15      	subs	r3, #21
 800ab88:	f023 0303 	bic.w	r3, r3, #3
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	f104 0015 	add.w	r0, r4, #21
 800ab92:	4584      	cmp	ip, r0
 800ab94:	bf38      	it	cc
 800ab96:	2304      	movcc	r3, #4
 800ab98:	50ca      	str	r2, [r1, r3]
 800ab9a:	b10a      	cbz	r2, 800aba0 <__lshift+0xa4>
 800ab9c:	f108 0602 	add.w	r6, r8, #2
 800aba0:	3e01      	subs	r6, #1
 800aba2:	4638      	mov	r0, r7
 800aba4:	612e      	str	r6, [r5, #16]
 800aba6:	4621      	mov	r1, r4
 800aba8:	f7ff fdda 	bl	800a760 <_Bfree>
 800abac:	4628      	mov	r0, r5
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800abb6:	3301      	adds	r3, #1
 800abb8:	e7c5      	b.n	800ab46 <__lshift+0x4a>
 800abba:	3904      	subs	r1, #4
 800abbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800abc4:	459c      	cmp	ip, r3
 800abc6:	d8f9      	bhi.n	800abbc <__lshift+0xc0>
 800abc8:	e7ea      	b.n	800aba0 <__lshift+0xa4>
 800abca:	bf00      	nop
 800abcc:	0800d24c 	.word	0x0800d24c
 800abd0:	0800d25d 	.word	0x0800d25d

0800abd4 <__mcmp>:
 800abd4:	690a      	ldr	r2, [r1, #16]
 800abd6:	4603      	mov	r3, r0
 800abd8:	6900      	ldr	r0, [r0, #16]
 800abda:	1a80      	subs	r0, r0, r2
 800abdc:	b530      	push	{r4, r5, lr}
 800abde:	d10e      	bne.n	800abfe <__mcmp+0x2a>
 800abe0:	3314      	adds	r3, #20
 800abe2:	3114      	adds	r1, #20
 800abe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800abe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800abec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abf4:	4295      	cmp	r5, r2
 800abf6:	d003      	beq.n	800ac00 <__mcmp+0x2c>
 800abf8:	d205      	bcs.n	800ac06 <__mcmp+0x32>
 800abfa:	f04f 30ff 	mov.w	r0, #4294967295
 800abfe:	bd30      	pop	{r4, r5, pc}
 800ac00:	42a3      	cmp	r3, r4
 800ac02:	d3f3      	bcc.n	800abec <__mcmp+0x18>
 800ac04:	e7fb      	b.n	800abfe <__mcmp+0x2a>
 800ac06:	2001      	movs	r0, #1
 800ac08:	e7f9      	b.n	800abfe <__mcmp+0x2a>
	...

0800ac0c <__mdiff>:
 800ac0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac10:	4689      	mov	r9, r1
 800ac12:	4606      	mov	r6, r0
 800ac14:	4611      	mov	r1, r2
 800ac16:	4648      	mov	r0, r9
 800ac18:	4614      	mov	r4, r2
 800ac1a:	f7ff ffdb 	bl	800abd4 <__mcmp>
 800ac1e:	1e05      	subs	r5, r0, #0
 800ac20:	d112      	bne.n	800ac48 <__mdiff+0x3c>
 800ac22:	4629      	mov	r1, r5
 800ac24:	4630      	mov	r0, r6
 800ac26:	f7ff fd5b 	bl	800a6e0 <_Balloc>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	b928      	cbnz	r0, 800ac3a <__mdiff+0x2e>
 800ac2e:	4b3f      	ldr	r3, [pc, #252]	@ (800ad2c <__mdiff+0x120>)
 800ac30:	f240 2137 	movw	r1, #567	@ 0x237
 800ac34:	483e      	ldr	r0, [pc, #248]	@ (800ad30 <__mdiff+0x124>)
 800ac36:	f000 fb11 	bl	800b25c <__assert_func>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac40:	4610      	mov	r0, r2
 800ac42:	b003      	add	sp, #12
 800ac44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac48:	bfbc      	itt	lt
 800ac4a:	464b      	movlt	r3, r9
 800ac4c:	46a1      	movlt	r9, r4
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac54:	bfba      	itte	lt
 800ac56:	461c      	movlt	r4, r3
 800ac58:	2501      	movlt	r5, #1
 800ac5a:	2500      	movge	r5, #0
 800ac5c:	f7ff fd40 	bl	800a6e0 <_Balloc>
 800ac60:	4602      	mov	r2, r0
 800ac62:	b918      	cbnz	r0, 800ac6c <__mdiff+0x60>
 800ac64:	4b31      	ldr	r3, [pc, #196]	@ (800ad2c <__mdiff+0x120>)
 800ac66:	f240 2145 	movw	r1, #581	@ 0x245
 800ac6a:	e7e3      	b.n	800ac34 <__mdiff+0x28>
 800ac6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac70:	6926      	ldr	r6, [r4, #16]
 800ac72:	60c5      	str	r5, [r0, #12]
 800ac74:	f109 0310 	add.w	r3, r9, #16
 800ac78:	f109 0514 	add.w	r5, r9, #20
 800ac7c:	f104 0e14 	add.w	lr, r4, #20
 800ac80:	f100 0b14 	add.w	fp, r0, #20
 800ac84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	46d9      	mov	r9, fp
 800ac90:	f04f 0c00 	mov.w	ip, #0
 800ac94:	9b01      	ldr	r3, [sp, #4]
 800ac96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac9e:	9301      	str	r3, [sp, #4]
 800aca0:	fa1f f38a 	uxth.w	r3, sl
 800aca4:	4619      	mov	r1, r3
 800aca6:	b283      	uxth	r3, r0
 800aca8:	1acb      	subs	r3, r1, r3
 800acaa:	0c00      	lsrs	r0, r0, #16
 800acac:	4463      	add	r3, ip
 800acae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800acb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800acbc:	4576      	cmp	r6, lr
 800acbe:	f849 3b04 	str.w	r3, [r9], #4
 800acc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acc6:	d8e5      	bhi.n	800ac94 <__mdiff+0x88>
 800acc8:	1b33      	subs	r3, r6, r4
 800acca:	3b15      	subs	r3, #21
 800accc:	f023 0303 	bic.w	r3, r3, #3
 800acd0:	3415      	adds	r4, #21
 800acd2:	3304      	adds	r3, #4
 800acd4:	42a6      	cmp	r6, r4
 800acd6:	bf38      	it	cc
 800acd8:	2304      	movcc	r3, #4
 800acda:	441d      	add	r5, r3
 800acdc:	445b      	add	r3, fp
 800acde:	461e      	mov	r6, r3
 800ace0:	462c      	mov	r4, r5
 800ace2:	4544      	cmp	r4, r8
 800ace4:	d30e      	bcc.n	800ad04 <__mdiff+0xf8>
 800ace6:	f108 0103 	add.w	r1, r8, #3
 800acea:	1b49      	subs	r1, r1, r5
 800acec:	f021 0103 	bic.w	r1, r1, #3
 800acf0:	3d03      	subs	r5, #3
 800acf2:	45a8      	cmp	r8, r5
 800acf4:	bf38      	it	cc
 800acf6:	2100      	movcc	r1, #0
 800acf8:	440b      	add	r3, r1
 800acfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acfe:	b191      	cbz	r1, 800ad26 <__mdiff+0x11a>
 800ad00:	6117      	str	r7, [r2, #16]
 800ad02:	e79d      	b.n	800ac40 <__mdiff+0x34>
 800ad04:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad08:	46e6      	mov	lr, ip
 800ad0a:	0c08      	lsrs	r0, r1, #16
 800ad0c:	fa1c fc81 	uxtah	ip, ip, r1
 800ad10:	4471      	add	r1, lr
 800ad12:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad16:	b289      	uxth	r1, r1
 800ad18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad1c:	f846 1b04 	str.w	r1, [r6], #4
 800ad20:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad24:	e7dd      	b.n	800ace2 <__mdiff+0xd6>
 800ad26:	3f01      	subs	r7, #1
 800ad28:	e7e7      	b.n	800acfa <__mdiff+0xee>
 800ad2a:	bf00      	nop
 800ad2c:	0800d24c 	.word	0x0800d24c
 800ad30:	0800d25d 	.word	0x0800d25d

0800ad34 <__d2b>:
 800ad34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad38:	460f      	mov	r7, r1
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	ec59 8b10 	vmov	r8, r9, d0
 800ad40:	4616      	mov	r6, r2
 800ad42:	f7ff fccd 	bl	800a6e0 <_Balloc>
 800ad46:	4604      	mov	r4, r0
 800ad48:	b930      	cbnz	r0, 800ad58 <__d2b+0x24>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4b23      	ldr	r3, [pc, #140]	@ (800addc <__d2b+0xa8>)
 800ad4e:	4824      	ldr	r0, [pc, #144]	@ (800ade0 <__d2b+0xac>)
 800ad50:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad54:	f000 fa82 	bl	800b25c <__assert_func>
 800ad58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad60:	b10d      	cbz	r5, 800ad66 <__d2b+0x32>
 800ad62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	f1b8 0300 	subs.w	r3, r8, #0
 800ad6c:	d023      	beq.n	800adb6 <__d2b+0x82>
 800ad6e:	4668      	mov	r0, sp
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	f7ff fd7c 	bl	800a86e <__lo0bits>
 800ad76:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad7a:	b1d0      	cbz	r0, 800adb2 <__d2b+0x7e>
 800ad7c:	f1c0 0320 	rsb	r3, r0, #32
 800ad80:	fa02 f303 	lsl.w	r3, r2, r3
 800ad84:	430b      	orrs	r3, r1
 800ad86:	40c2      	lsrs	r2, r0
 800ad88:	6163      	str	r3, [r4, #20]
 800ad8a:	9201      	str	r2, [sp, #4]
 800ad8c:	9b01      	ldr	r3, [sp, #4]
 800ad8e:	61a3      	str	r3, [r4, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bf0c      	ite	eq
 800ad94:	2201      	moveq	r2, #1
 800ad96:	2202      	movne	r2, #2
 800ad98:	6122      	str	r2, [r4, #16]
 800ad9a:	b1a5      	cbz	r5, 800adc6 <__d2b+0x92>
 800ad9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ada0:	4405      	add	r5, r0
 800ada2:	603d      	str	r5, [r7, #0]
 800ada4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ada8:	6030      	str	r0, [r6, #0]
 800adaa:	4620      	mov	r0, r4
 800adac:	b003      	add	sp, #12
 800adae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adb2:	6161      	str	r1, [r4, #20]
 800adb4:	e7ea      	b.n	800ad8c <__d2b+0x58>
 800adb6:	a801      	add	r0, sp, #4
 800adb8:	f7ff fd59 	bl	800a86e <__lo0bits>
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	6163      	str	r3, [r4, #20]
 800adc0:	3020      	adds	r0, #32
 800adc2:	2201      	movs	r2, #1
 800adc4:	e7e8      	b.n	800ad98 <__d2b+0x64>
 800adc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800adce:	6038      	str	r0, [r7, #0]
 800add0:	6918      	ldr	r0, [r3, #16]
 800add2:	f7ff fd2d 	bl	800a830 <__hi0bits>
 800add6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adda:	e7e5      	b.n	800ada8 <__d2b+0x74>
 800addc:	0800d24c 	.word	0x0800d24c
 800ade0:	0800d25d 	.word	0x0800d25d

0800ade4 <__ssputs_r>:
 800ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade8:	688e      	ldr	r6, [r1, #8]
 800adea:	461f      	mov	r7, r3
 800adec:	42be      	cmp	r6, r7
 800adee:	680b      	ldr	r3, [r1, #0]
 800adf0:	4682      	mov	sl, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	4690      	mov	r8, r2
 800adf6:	d82d      	bhi.n	800ae54 <__ssputs_r+0x70>
 800adf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae00:	d026      	beq.n	800ae50 <__ssputs_r+0x6c>
 800ae02:	6965      	ldr	r5, [r4, #20]
 800ae04:	6909      	ldr	r1, [r1, #16]
 800ae06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae0a:	eba3 0901 	sub.w	r9, r3, r1
 800ae0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae12:	1c7b      	adds	r3, r7, #1
 800ae14:	444b      	add	r3, r9
 800ae16:	106d      	asrs	r5, r5, #1
 800ae18:	429d      	cmp	r5, r3
 800ae1a:	bf38      	it	cc
 800ae1c:	461d      	movcc	r5, r3
 800ae1e:	0553      	lsls	r3, r2, #21
 800ae20:	d527      	bpl.n	800ae72 <__ssputs_r+0x8e>
 800ae22:	4629      	mov	r1, r5
 800ae24:	f7ff fbd0 	bl	800a5c8 <_malloc_r>
 800ae28:	4606      	mov	r6, r0
 800ae2a:	b360      	cbz	r0, 800ae86 <__ssputs_r+0xa2>
 800ae2c:	6921      	ldr	r1, [r4, #16]
 800ae2e:	464a      	mov	r2, r9
 800ae30:	f000 fa06 	bl	800b240 <memcpy>
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	6126      	str	r6, [r4, #16]
 800ae42:	6165      	str	r5, [r4, #20]
 800ae44:	444e      	add	r6, r9
 800ae46:	eba5 0509 	sub.w	r5, r5, r9
 800ae4a:	6026      	str	r6, [r4, #0]
 800ae4c:	60a5      	str	r5, [r4, #8]
 800ae4e:	463e      	mov	r6, r7
 800ae50:	42be      	cmp	r6, r7
 800ae52:	d900      	bls.n	800ae56 <__ssputs_r+0x72>
 800ae54:	463e      	mov	r6, r7
 800ae56:	6820      	ldr	r0, [r4, #0]
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4641      	mov	r1, r8
 800ae5c:	f000 f9c6 	bl	800b1ec <memmove>
 800ae60:	68a3      	ldr	r3, [r4, #8]
 800ae62:	1b9b      	subs	r3, r3, r6
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	4433      	add	r3, r6
 800ae6a:	6023      	str	r3, [r4, #0]
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae72:	462a      	mov	r2, r5
 800ae74:	f000 fa36 	bl	800b2e4 <_realloc_r>
 800ae78:	4606      	mov	r6, r0
 800ae7a:	2800      	cmp	r0, #0
 800ae7c:	d1e0      	bne.n	800ae40 <__ssputs_r+0x5c>
 800ae7e:	6921      	ldr	r1, [r4, #16]
 800ae80:	4650      	mov	r0, sl
 800ae82:	f7ff fb2d 	bl	800a4e0 <_free_r>
 800ae86:	230c      	movs	r3, #12
 800ae88:	f8ca 3000 	str.w	r3, [sl]
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	e7e9      	b.n	800ae6e <__ssputs_r+0x8a>
	...

0800ae9c <_svfiprintf_r>:
 800ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea0:	4698      	mov	r8, r3
 800aea2:	898b      	ldrh	r3, [r1, #12]
 800aea4:	061b      	lsls	r3, r3, #24
 800aea6:	b09d      	sub	sp, #116	@ 0x74
 800aea8:	4607      	mov	r7, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	4614      	mov	r4, r2
 800aeae:	d510      	bpl.n	800aed2 <_svfiprintf_r+0x36>
 800aeb0:	690b      	ldr	r3, [r1, #16]
 800aeb2:	b973      	cbnz	r3, 800aed2 <_svfiprintf_r+0x36>
 800aeb4:	2140      	movs	r1, #64	@ 0x40
 800aeb6:	f7ff fb87 	bl	800a5c8 <_malloc_r>
 800aeba:	6028      	str	r0, [r5, #0]
 800aebc:	6128      	str	r0, [r5, #16]
 800aebe:	b930      	cbnz	r0, 800aece <_svfiprintf_r+0x32>
 800aec0:	230c      	movs	r3, #12
 800aec2:	603b      	str	r3, [r7, #0]
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	b01d      	add	sp, #116	@ 0x74
 800aeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aece:	2340      	movs	r3, #64	@ 0x40
 800aed0:	616b      	str	r3, [r5, #20]
 800aed2:	2300      	movs	r3, #0
 800aed4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aed6:	2320      	movs	r3, #32
 800aed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aedc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aee0:	2330      	movs	r3, #48	@ 0x30
 800aee2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b080 <_svfiprintf_r+0x1e4>
 800aee6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aeea:	f04f 0901 	mov.w	r9, #1
 800aeee:	4623      	mov	r3, r4
 800aef0:	469a      	mov	sl, r3
 800aef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aef6:	b10a      	cbz	r2, 800aefc <_svfiprintf_r+0x60>
 800aef8:	2a25      	cmp	r2, #37	@ 0x25
 800aefa:	d1f9      	bne.n	800aef0 <_svfiprintf_r+0x54>
 800aefc:	ebba 0b04 	subs.w	fp, sl, r4
 800af00:	d00b      	beq.n	800af1a <_svfiprintf_r+0x7e>
 800af02:	465b      	mov	r3, fp
 800af04:	4622      	mov	r2, r4
 800af06:	4629      	mov	r1, r5
 800af08:	4638      	mov	r0, r7
 800af0a:	f7ff ff6b 	bl	800ade4 <__ssputs_r>
 800af0e:	3001      	adds	r0, #1
 800af10:	f000 80a7 	beq.w	800b062 <_svfiprintf_r+0x1c6>
 800af14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af16:	445a      	add	r2, fp
 800af18:	9209      	str	r2, [sp, #36]	@ 0x24
 800af1a:	f89a 3000 	ldrb.w	r3, [sl]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 809f 	beq.w	800b062 <_svfiprintf_r+0x1c6>
 800af24:	2300      	movs	r3, #0
 800af26:	f04f 32ff 	mov.w	r2, #4294967295
 800af2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af2e:	f10a 0a01 	add.w	sl, sl, #1
 800af32:	9304      	str	r3, [sp, #16]
 800af34:	9307      	str	r3, [sp, #28]
 800af36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af3a:	931a      	str	r3, [sp, #104]	@ 0x68
 800af3c:	4654      	mov	r4, sl
 800af3e:	2205      	movs	r2, #5
 800af40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af44:	484e      	ldr	r0, [pc, #312]	@ (800b080 <_svfiprintf_r+0x1e4>)
 800af46:	f7f5 f94b 	bl	80001e0 <memchr>
 800af4a:	9a04      	ldr	r2, [sp, #16]
 800af4c:	b9d8      	cbnz	r0, 800af86 <_svfiprintf_r+0xea>
 800af4e:	06d0      	lsls	r0, r2, #27
 800af50:	bf44      	itt	mi
 800af52:	2320      	movmi	r3, #32
 800af54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af58:	0711      	lsls	r1, r2, #28
 800af5a:	bf44      	itt	mi
 800af5c:	232b      	movmi	r3, #43	@ 0x2b
 800af5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af62:	f89a 3000 	ldrb.w	r3, [sl]
 800af66:	2b2a      	cmp	r3, #42	@ 0x2a
 800af68:	d015      	beq.n	800af96 <_svfiprintf_r+0xfa>
 800af6a:	9a07      	ldr	r2, [sp, #28]
 800af6c:	4654      	mov	r4, sl
 800af6e:	2000      	movs	r0, #0
 800af70:	f04f 0c0a 	mov.w	ip, #10
 800af74:	4621      	mov	r1, r4
 800af76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af7a:	3b30      	subs	r3, #48	@ 0x30
 800af7c:	2b09      	cmp	r3, #9
 800af7e:	d94b      	bls.n	800b018 <_svfiprintf_r+0x17c>
 800af80:	b1b0      	cbz	r0, 800afb0 <_svfiprintf_r+0x114>
 800af82:	9207      	str	r2, [sp, #28]
 800af84:	e014      	b.n	800afb0 <_svfiprintf_r+0x114>
 800af86:	eba0 0308 	sub.w	r3, r0, r8
 800af8a:	fa09 f303 	lsl.w	r3, r9, r3
 800af8e:	4313      	orrs	r3, r2
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	46a2      	mov	sl, r4
 800af94:	e7d2      	b.n	800af3c <_svfiprintf_r+0xa0>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	1d19      	adds	r1, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9103      	str	r1, [sp, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfbb      	ittet	lt
 800afa2:	425b      	neglt	r3, r3
 800afa4:	f042 0202 	orrlt.w	r2, r2, #2
 800afa8:	9307      	strge	r3, [sp, #28]
 800afaa:	9307      	strlt	r3, [sp, #28]
 800afac:	bfb8      	it	lt
 800afae:	9204      	strlt	r2, [sp, #16]
 800afb0:	7823      	ldrb	r3, [r4, #0]
 800afb2:	2b2e      	cmp	r3, #46	@ 0x2e
 800afb4:	d10a      	bne.n	800afcc <_svfiprintf_r+0x130>
 800afb6:	7863      	ldrb	r3, [r4, #1]
 800afb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800afba:	d132      	bne.n	800b022 <_svfiprintf_r+0x186>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	9203      	str	r2, [sp, #12]
 800afc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afc8:	3402      	adds	r4, #2
 800afca:	9305      	str	r3, [sp, #20]
 800afcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b090 <_svfiprintf_r+0x1f4>
 800afd0:	7821      	ldrb	r1, [r4, #0]
 800afd2:	2203      	movs	r2, #3
 800afd4:	4650      	mov	r0, sl
 800afd6:	f7f5 f903 	bl	80001e0 <memchr>
 800afda:	b138      	cbz	r0, 800afec <_svfiprintf_r+0x150>
 800afdc:	9b04      	ldr	r3, [sp, #16]
 800afde:	eba0 000a 	sub.w	r0, r0, sl
 800afe2:	2240      	movs	r2, #64	@ 0x40
 800afe4:	4082      	lsls	r2, r0
 800afe6:	4313      	orrs	r3, r2
 800afe8:	3401      	adds	r4, #1
 800afea:	9304      	str	r3, [sp, #16]
 800afec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff0:	4824      	ldr	r0, [pc, #144]	@ (800b084 <_svfiprintf_r+0x1e8>)
 800aff2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aff6:	2206      	movs	r2, #6
 800aff8:	f7f5 f8f2 	bl	80001e0 <memchr>
 800affc:	2800      	cmp	r0, #0
 800affe:	d036      	beq.n	800b06e <_svfiprintf_r+0x1d2>
 800b000:	4b21      	ldr	r3, [pc, #132]	@ (800b088 <_svfiprintf_r+0x1ec>)
 800b002:	bb1b      	cbnz	r3, 800b04c <_svfiprintf_r+0x1b0>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	3307      	adds	r3, #7
 800b008:	f023 0307 	bic.w	r3, r3, #7
 800b00c:	3308      	adds	r3, #8
 800b00e:	9303      	str	r3, [sp, #12]
 800b010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b012:	4433      	add	r3, r6
 800b014:	9309      	str	r3, [sp, #36]	@ 0x24
 800b016:	e76a      	b.n	800aeee <_svfiprintf_r+0x52>
 800b018:	fb0c 3202 	mla	r2, ip, r2, r3
 800b01c:	460c      	mov	r4, r1
 800b01e:	2001      	movs	r0, #1
 800b020:	e7a8      	b.n	800af74 <_svfiprintf_r+0xd8>
 800b022:	2300      	movs	r3, #0
 800b024:	3401      	adds	r4, #1
 800b026:	9305      	str	r3, [sp, #20]
 800b028:	4619      	mov	r1, r3
 800b02a:	f04f 0c0a 	mov.w	ip, #10
 800b02e:	4620      	mov	r0, r4
 800b030:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b034:	3a30      	subs	r2, #48	@ 0x30
 800b036:	2a09      	cmp	r2, #9
 800b038:	d903      	bls.n	800b042 <_svfiprintf_r+0x1a6>
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0c6      	beq.n	800afcc <_svfiprintf_r+0x130>
 800b03e:	9105      	str	r1, [sp, #20]
 800b040:	e7c4      	b.n	800afcc <_svfiprintf_r+0x130>
 800b042:	fb0c 2101 	mla	r1, ip, r1, r2
 800b046:	4604      	mov	r4, r0
 800b048:	2301      	movs	r3, #1
 800b04a:	e7f0      	b.n	800b02e <_svfiprintf_r+0x192>
 800b04c:	ab03      	add	r3, sp, #12
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	462a      	mov	r2, r5
 800b052:	4b0e      	ldr	r3, [pc, #56]	@ (800b08c <_svfiprintf_r+0x1f0>)
 800b054:	a904      	add	r1, sp, #16
 800b056:	4638      	mov	r0, r7
 800b058:	f7fd fe96 	bl	8008d88 <_printf_float>
 800b05c:	1c42      	adds	r2, r0, #1
 800b05e:	4606      	mov	r6, r0
 800b060:	d1d6      	bne.n	800b010 <_svfiprintf_r+0x174>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	065b      	lsls	r3, r3, #25
 800b066:	f53f af2d 	bmi.w	800aec4 <_svfiprintf_r+0x28>
 800b06a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b06c:	e72c      	b.n	800aec8 <_svfiprintf_r+0x2c>
 800b06e:	ab03      	add	r3, sp, #12
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	462a      	mov	r2, r5
 800b074:	4b05      	ldr	r3, [pc, #20]	@ (800b08c <_svfiprintf_r+0x1f0>)
 800b076:	a904      	add	r1, sp, #16
 800b078:	4638      	mov	r0, r7
 800b07a:	f7fe f91d 	bl	80092b8 <_printf_i>
 800b07e:	e7ed      	b.n	800b05c <_svfiprintf_r+0x1c0>
 800b080:	0800d3b8 	.word	0x0800d3b8
 800b084:	0800d3c2 	.word	0x0800d3c2
 800b088:	08008d89 	.word	0x08008d89
 800b08c:	0800ade5 	.word	0x0800ade5
 800b090:	0800d3be 	.word	0x0800d3be

0800b094 <__sflush_r>:
 800b094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b09c:	0716      	lsls	r6, r2, #28
 800b09e:	4605      	mov	r5, r0
 800b0a0:	460c      	mov	r4, r1
 800b0a2:	d454      	bmi.n	800b14e <__sflush_r+0xba>
 800b0a4:	684b      	ldr	r3, [r1, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dc02      	bgt.n	800b0b0 <__sflush_r+0x1c>
 800b0aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dd48      	ble.n	800b142 <__sflush_r+0xae>
 800b0b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0b2:	2e00      	cmp	r6, #0
 800b0b4:	d045      	beq.n	800b142 <__sflush_r+0xae>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0bc:	682f      	ldr	r7, [r5, #0]
 800b0be:	6a21      	ldr	r1, [r4, #32]
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	d030      	beq.n	800b126 <__sflush_r+0x92>
 800b0c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0c6:	89a3      	ldrh	r3, [r4, #12]
 800b0c8:	0759      	lsls	r1, r3, #29
 800b0ca:	d505      	bpl.n	800b0d8 <__sflush_r+0x44>
 800b0cc:	6863      	ldr	r3, [r4, #4]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0d2:	b10b      	cbz	r3, 800b0d8 <__sflush_r+0x44>
 800b0d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0d6:	1ad2      	subs	r2, r2, r3
 800b0d8:	2300      	movs	r3, #0
 800b0da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0dc:	6a21      	ldr	r1, [r4, #32]
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b0      	blx	r6
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	d106      	bne.n	800b0f6 <__sflush_r+0x62>
 800b0e8:	6829      	ldr	r1, [r5, #0]
 800b0ea:	291d      	cmp	r1, #29
 800b0ec:	d82b      	bhi.n	800b146 <__sflush_r+0xb2>
 800b0ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b198 <__sflush_r+0x104>)
 800b0f0:	410a      	asrs	r2, r1
 800b0f2:	07d6      	lsls	r6, r2, #31
 800b0f4:	d427      	bmi.n	800b146 <__sflush_r+0xb2>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	6062      	str	r2, [r4, #4]
 800b0fa:	04d9      	lsls	r1, r3, #19
 800b0fc:	6922      	ldr	r2, [r4, #16]
 800b0fe:	6022      	str	r2, [r4, #0]
 800b100:	d504      	bpl.n	800b10c <__sflush_r+0x78>
 800b102:	1c42      	adds	r2, r0, #1
 800b104:	d101      	bne.n	800b10a <__sflush_r+0x76>
 800b106:	682b      	ldr	r3, [r5, #0]
 800b108:	b903      	cbnz	r3, 800b10c <__sflush_r+0x78>
 800b10a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b10c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b10e:	602f      	str	r7, [r5, #0]
 800b110:	b1b9      	cbz	r1, 800b142 <__sflush_r+0xae>
 800b112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b116:	4299      	cmp	r1, r3
 800b118:	d002      	beq.n	800b120 <__sflush_r+0x8c>
 800b11a:	4628      	mov	r0, r5
 800b11c:	f7ff f9e0 	bl	800a4e0 <_free_r>
 800b120:	2300      	movs	r3, #0
 800b122:	6363      	str	r3, [r4, #52]	@ 0x34
 800b124:	e00d      	b.n	800b142 <__sflush_r+0xae>
 800b126:	2301      	movs	r3, #1
 800b128:	4628      	mov	r0, r5
 800b12a:	47b0      	blx	r6
 800b12c:	4602      	mov	r2, r0
 800b12e:	1c50      	adds	r0, r2, #1
 800b130:	d1c9      	bne.n	800b0c6 <__sflush_r+0x32>
 800b132:	682b      	ldr	r3, [r5, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0c6      	beq.n	800b0c6 <__sflush_r+0x32>
 800b138:	2b1d      	cmp	r3, #29
 800b13a:	d001      	beq.n	800b140 <__sflush_r+0xac>
 800b13c:	2b16      	cmp	r3, #22
 800b13e:	d11e      	bne.n	800b17e <__sflush_r+0xea>
 800b140:	602f      	str	r7, [r5, #0]
 800b142:	2000      	movs	r0, #0
 800b144:	e022      	b.n	800b18c <__sflush_r+0xf8>
 800b146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b14a:	b21b      	sxth	r3, r3
 800b14c:	e01b      	b.n	800b186 <__sflush_r+0xf2>
 800b14e:	690f      	ldr	r7, [r1, #16]
 800b150:	2f00      	cmp	r7, #0
 800b152:	d0f6      	beq.n	800b142 <__sflush_r+0xae>
 800b154:	0793      	lsls	r3, r2, #30
 800b156:	680e      	ldr	r6, [r1, #0]
 800b158:	bf08      	it	eq
 800b15a:	694b      	ldreq	r3, [r1, #20]
 800b15c:	600f      	str	r7, [r1, #0]
 800b15e:	bf18      	it	ne
 800b160:	2300      	movne	r3, #0
 800b162:	eba6 0807 	sub.w	r8, r6, r7
 800b166:	608b      	str	r3, [r1, #8]
 800b168:	f1b8 0f00 	cmp.w	r8, #0
 800b16c:	dde9      	ble.n	800b142 <__sflush_r+0xae>
 800b16e:	6a21      	ldr	r1, [r4, #32]
 800b170:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b172:	4643      	mov	r3, r8
 800b174:	463a      	mov	r2, r7
 800b176:	4628      	mov	r0, r5
 800b178:	47b0      	blx	r6
 800b17a:	2800      	cmp	r0, #0
 800b17c:	dc08      	bgt.n	800b190 <__sflush_r+0xfc>
 800b17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	f04f 30ff 	mov.w	r0, #4294967295
 800b18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b190:	4407      	add	r7, r0
 800b192:	eba8 0800 	sub.w	r8, r8, r0
 800b196:	e7e7      	b.n	800b168 <__sflush_r+0xd4>
 800b198:	dfbffffe 	.word	0xdfbffffe

0800b19c <_fflush_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	690b      	ldr	r3, [r1, #16]
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	b913      	cbnz	r3, 800b1ac <_fflush_r+0x10>
 800b1a6:	2500      	movs	r5, #0
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	bd38      	pop	{r3, r4, r5, pc}
 800b1ac:	b118      	cbz	r0, 800b1b6 <_fflush_r+0x1a>
 800b1ae:	6a03      	ldr	r3, [r0, #32]
 800b1b0:	b90b      	cbnz	r3, 800b1b6 <_fflush_r+0x1a>
 800b1b2:	f7fe fa2d 	bl	8009610 <__sinit>
 800b1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0f3      	beq.n	800b1a6 <_fflush_r+0xa>
 800b1be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1c0:	07d0      	lsls	r0, r2, #31
 800b1c2:	d404      	bmi.n	800b1ce <_fflush_r+0x32>
 800b1c4:	0599      	lsls	r1, r3, #22
 800b1c6:	d402      	bmi.n	800b1ce <_fflush_r+0x32>
 800b1c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ca:	f7fe fb38 	bl	800983e <__retarget_lock_acquire_recursive>
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	f7ff ff5f 	bl	800b094 <__sflush_r>
 800b1d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1d8:	07da      	lsls	r2, r3, #31
 800b1da:	4605      	mov	r5, r0
 800b1dc:	d4e4      	bmi.n	800b1a8 <_fflush_r+0xc>
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	059b      	lsls	r3, r3, #22
 800b1e2:	d4e1      	bmi.n	800b1a8 <_fflush_r+0xc>
 800b1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1e6:	f7fe fb2b 	bl	8009840 <__retarget_lock_release_recursive>
 800b1ea:	e7dd      	b.n	800b1a8 <_fflush_r+0xc>

0800b1ec <memmove>:
 800b1ec:	4288      	cmp	r0, r1
 800b1ee:	b510      	push	{r4, lr}
 800b1f0:	eb01 0402 	add.w	r4, r1, r2
 800b1f4:	d902      	bls.n	800b1fc <memmove+0x10>
 800b1f6:	4284      	cmp	r4, r0
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	d807      	bhi.n	800b20c <memmove+0x20>
 800b1fc:	1e43      	subs	r3, r0, #1
 800b1fe:	42a1      	cmp	r1, r4
 800b200:	d008      	beq.n	800b214 <memmove+0x28>
 800b202:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b206:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b20a:	e7f8      	b.n	800b1fe <memmove+0x12>
 800b20c:	4402      	add	r2, r0
 800b20e:	4601      	mov	r1, r0
 800b210:	428a      	cmp	r2, r1
 800b212:	d100      	bne.n	800b216 <memmove+0x2a>
 800b214:	bd10      	pop	{r4, pc}
 800b216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b21a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b21e:	e7f7      	b.n	800b210 <memmove+0x24>

0800b220 <_sbrk_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	@ (800b23c <_sbrk_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f9 f89a 	bl	8004364 <_sbrk>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_sbrk_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_sbrk_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20000a54 	.word	0x20000a54

0800b240 <memcpy>:
 800b240:	440a      	add	r2, r1
 800b242:	4291      	cmp	r1, r2
 800b244:	f100 33ff 	add.w	r3, r0, #4294967295
 800b248:	d100      	bne.n	800b24c <memcpy+0xc>
 800b24a:	4770      	bx	lr
 800b24c:	b510      	push	{r4, lr}
 800b24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b252:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b256:	4291      	cmp	r1, r2
 800b258:	d1f9      	bne.n	800b24e <memcpy+0xe>
 800b25a:	bd10      	pop	{r4, pc}

0800b25c <__assert_func>:
 800b25c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b25e:	4614      	mov	r4, r2
 800b260:	461a      	mov	r2, r3
 800b262:	4b09      	ldr	r3, [pc, #36]	@ (800b288 <__assert_func+0x2c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4605      	mov	r5, r0
 800b268:	68d8      	ldr	r0, [r3, #12]
 800b26a:	b954      	cbnz	r4, 800b282 <__assert_func+0x26>
 800b26c:	4b07      	ldr	r3, [pc, #28]	@ (800b28c <__assert_func+0x30>)
 800b26e:	461c      	mov	r4, r3
 800b270:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b274:	9100      	str	r1, [sp, #0]
 800b276:	462b      	mov	r3, r5
 800b278:	4905      	ldr	r1, [pc, #20]	@ (800b290 <__assert_func+0x34>)
 800b27a:	f000 f86f 	bl	800b35c <fiprintf>
 800b27e:	f000 f87f 	bl	800b380 <abort>
 800b282:	4b04      	ldr	r3, [pc, #16]	@ (800b294 <__assert_func+0x38>)
 800b284:	e7f4      	b.n	800b270 <__assert_func+0x14>
 800b286:	bf00      	nop
 800b288:	20000028 	.word	0x20000028
 800b28c:	0800d40e 	.word	0x0800d40e
 800b290:	0800d3e0 	.word	0x0800d3e0
 800b294:	0800d3d3 	.word	0x0800d3d3

0800b298 <_calloc_r>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	fba1 5402 	umull	r5, r4, r1, r2
 800b29e:	b93c      	cbnz	r4, 800b2b0 <_calloc_r+0x18>
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7ff f991 	bl	800a5c8 <_malloc_r>
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	b928      	cbnz	r0, 800b2b6 <_calloc_r+0x1e>
 800b2aa:	2600      	movs	r6, #0
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	220c      	movs	r2, #12
 800b2b2:	6002      	str	r2, [r0, #0]
 800b2b4:	e7f9      	b.n	800b2aa <_calloc_r+0x12>
 800b2b6:	462a      	mov	r2, r5
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	f7fe fa42 	bl	8009742 <memset>
 800b2be:	e7f5      	b.n	800b2ac <_calloc_r+0x14>

0800b2c0 <__ascii_mbtowc>:
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	b901      	cbnz	r1, 800b2c6 <__ascii_mbtowc+0x6>
 800b2c4:	a901      	add	r1, sp, #4
 800b2c6:	b142      	cbz	r2, 800b2da <__ascii_mbtowc+0x1a>
 800b2c8:	b14b      	cbz	r3, 800b2de <__ascii_mbtowc+0x1e>
 800b2ca:	7813      	ldrb	r3, [r2, #0]
 800b2cc:	600b      	str	r3, [r1, #0]
 800b2ce:	7812      	ldrb	r2, [r2, #0]
 800b2d0:	1e10      	subs	r0, r2, #0
 800b2d2:	bf18      	it	ne
 800b2d4:	2001      	movne	r0, #1
 800b2d6:	b002      	add	sp, #8
 800b2d8:	4770      	bx	lr
 800b2da:	4610      	mov	r0, r2
 800b2dc:	e7fb      	b.n	800b2d6 <__ascii_mbtowc+0x16>
 800b2de:	f06f 0001 	mvn.w	r0, #1
 800b2e2:	e7f8      	b.n	800b2d6 <__ascii_mbtowc+0x16>

0800b2e4 <_realloc_r>:
 800b2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	4615      	mov	r5, r2
 800b2ec:	460c      	mov	r4, r1
 800b2ee:	b921      	cbnz	r1, 800b2fa <_realloc_r+0x16>
 800b2f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	f7ff b967 	b.w	800a5c8 <_malloc_r>
 800b2fa:	b92a      	cbnz	r2, 800b308 <_realloc_r+0x24>
 800b2fc:	f7ff f8f0 	bl	800a4e0 <_free_r>
 800b300:	2400      	movs	r4, #0
 800b302:	4620      	mov	r0, r4
 800b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b308:	f000 f841 	bl	800b38e <_malloc_usable_size_r>
 800b30c:	4285      	cmp	r5, r0
 800b30e:	4606      	mov	r6, r0
 800b310:	d802      	bhi.n	800b318 <_realloc_r+0x34>
 800b312:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b316:	d8f4      	bhi.n	800b302 <_realloc_r+0x1e>
 800b318:	4629      	mov	r1, r5
 800b31a:	4640      	mov	r0, r8
 800b31c:	f7ff f954 	bl	800a5c8 <_malloc_r>
 800b320:	4607      	mov	r7, r0
 800b322:	2800      	cmp	r0, #0
 800b324:	d0ec      	beq.n	800b300 <_realloc_r+0x1c>
 800b326:	42b5      	cmp	r5, r6
 800b328:	462a      	mov	r2, r5
 800b32a:	4621      	mov	r1, r4
 800b32c:	bf28      	it	cs
 800b32e:	4632      	movcs	r2, r6
 800b330:	f7ff ff86 	bl	800b240 <memcpy>
 800b334:	4621      	mov	r1, r4
 800b336:	4640      	mov	r0, r8
 800b338:	f7ff f8d2 	bl	800a4e0 <_free_r>
 800b33c:	463c      	mov	r4, r7
 800b33e:	e7e0      	b.n	800b302 <_realloc_r+0x1e>

0800b340 <__ascii_wctomb>:
 800b340:	4603      	mov	r3, r0
 800b342:	4608      	mov	r0, r1
 800b344:	b141      	cbz	r1, 800b358 <__ascii_wctomb+0x18>
 800b346:	2aff      	cmp	r2, #255	@ 0xff
 800b348:	d904      	bls.n	800b354 <__ascii_wctomb+0x14>
 800b34a:	228a      	movs	r2, #138	@ 0x8a
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	f04f 30ff 	mov.w	r0, #4294967295
 800b352:	4770      	bx	lr
 800b354:	700a      	strb	r2, [r1, #0]
 800b356:	2001      	movs	r0, #1
 800b358:	4770      	bx	lr
	...

0800b35c <fiprintf>:
 800b35c:	b40e      	push	{r1, r2, r3}
 800b35e:	b503      	push	{r0, r1, lr}
 800b360:	4601      	mov	r1, r0
 800b362:	ab03      	add	r3, sp, #12
 800b364:	4805      	ldr	r0, [pc, #20]	@ (800b37c <fiprintf+0x20>)
 800b366:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36a:	6800      	ldr	r0, [r0, #0]
 800b36c:	9301      	str	r3, [sp, #4]
 800b36e:	f000 f83f 	bl	800b3f0 <_vfiprintf_r>
 800b372:	b002      	add	sp, #8
 800b374:	f85d eb04 	ldr.w	lr, [sp], #4
 800b378:	b003      	add	sp, #12
 800b37a:	4770      	bx	lr
 800b37c:	20000028 	.word	0x20000028

0800b380 <abort>:
 800b380:	b508      	push	{r3, lr}
 800b382:	2006      	movs	r0, #6
 800b384:	f000 fa08 	bl	800b798 <raise>
 800b388:	2001      	movs	r0, #1
 800b38a:	f7f8 ff8f 	bl	80042ac <_exit>

0800b38e <_malloc_usable_size_r>:
 800b38e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b392:	1f18      	subs	r0, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	bfbc      	itt	lt
 800b398:	580b      	ldrlt	r3, [r1, r0]
 800b39a:	18c0      	addlt	r0, r0, r3
 800b39c:	4770      	bx	lr

0800b39e <__sfputc_r>:
 800b39e:	6893      	ldr	r3, [r2, #8]
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	b410      	push	{r4}
 800b3a6:	6093      	str	r3, [r2, #8]
 800b3a8:	da08      	bge.n	800b3bc <__sfputc_r+0x1e>
 800b3aa:	6994      	ldr	r4, [r2, #24]
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	db01      	blt.n	800b3b4 <__sfputc_r+0x16>
 800b3b0:	290a      	cmp	r1, #10
 800b3b2:	d103      	bne.n	800b3bc <__sfputc_r+0x1e>
 800b3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b8:	f000 b932 	b.w	800b620 <__swbuf_r>
 800b3bc:	6813      	ldr	r3, [r2, #0]
 800b3be:	1c58      	adds	r0, r3, #1
 800b3c0:	6010      	str	r0, [r2, #0]
 800b3c2:	7019      	strb	r1, [r3, #0]
 800b3c4:	4608      	mov	r0, r1
 800b3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <__sfputs_r>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	460f      	mov	r7, r1
 800b3d2:	4614      	mov	r4, r2
 800b3d4:	18d5      	adds	r5, r2, r3
 800b3d6:	42ac      	cmp	r4, r5
 800b3d8:	d101      	bne.n	800b3de <__sfputs_r+0x12>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e007      	b.n	800b3ee <__sfputs_r+0x22>
 800b3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e2:	463a      	mov	r2, r7
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f7ff ffda 	bl	800b39e <__sfputc_r>
 800b3ea:	1c43      	adds	r3, r0, #1
 800b3ec:	d1f3      	bne.n	800b3d6 <__sfputs_r+0xa>
 800b3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3f0 <_vfiprintf_r>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	460d      	mov	r5, r1
 800b3f6:	b09d      	sub	sp, #116	@ 0x74
 800b3f8:	4614      	mov	r4, r2
 800b3fa:	4698      	mov	r8, r3
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	b118      	cbz	r0, 800b408 <_vfiprintf_r+0x18>
 800b400:	6a03      	ldr	r3, [r0, #32]
 800b402:	b90b      	cbnz	r3, 800b408 <_vfiprintf_r+0x18>
 800b404:	f7fe f904 	bl	8009610 <__sinit>
 800b408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b40a:	07d9      	lsls	r1, r3, #31
 800b40c:	d405      	bmi.n	800b41a <_vfiprintf_r+0x2a>
 800b40e:	89ab      	ldrh	r3, [r5, #12]
 800b410:	059a      	lsls	r2, r3, #22
 800b412:	d402      	bmi.n	800b41a <_vfiprintf_r+0x2a>
 800b414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b416:	f7fe fa12 	bl	800983e <__retarget_lock_acquire_recursive>
 800b41a:	89ab      	ldrh	r3, [r5, #12]
 800b41c:	071b      	lsls	r3, r3, #28
 800b41e:	d501      	bpl.n	800b424 <_vfiprintf_r+0x34>
 800b420:	692b      	ldr	r3, [r5, #16]
 800b422:	b99b      	cbnz	r3, 800b44c <_vfiprintf_r+0x5c>
 800b424:	4629      	mov	r1, r5
 800b426:	4630      	mov	r0, r6
 800b428:	f000 f938 	bl	800b69c <__swsetup_r>
 800b42c:	b170      	cbz	r0, 800b44c <_vfiprintf_r+0x5c>
 800b42e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b430:	07dc      	lsls	r4, r3, #31
 800b432:	d504      	bpl.n	800b43e <_vfiprintf_r+0x4e>
 800b434:	f04f 30ff 	mov.w	r0, #4294967295
 800b438:	b01d      	add	sp, #116	@ 0x74
 800b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	0598      	lsls	r0, r3, #22
 800b442:	d4f7      	bmi.n	800b434 <_vfiprintf_r+0x44>
 800b444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b446:	f7fe f9fb 	bl	8009840 <__retarget_lock_release_recursive>
 800b44a:	e7f3      	b.n	800b434 <_vfiprintf_r+0x44>
 800b44c:	2300      	movs	r3, #0
 800b44e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b450:	2320      	movs	r3, #32
 800b452:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b456:	f8cd 800c 	str.w	r8, [sp, #12]
 800b45a:	2330      	movs	r3, #48	@ 0x30
 800b45c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b60c <_vfiprintf_r+0x21c>
 800b460:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b464:	f04f 0901 	mov.w	r9, #1
 800b468:	4623      	mov	r3, r4
 800b46a:	469a      	mov	sl, r3
 800b46c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b470:	b10a      	cbz	r2, 800b476 <_vfiprintf_r+0x86>
 800b472:	2a25      	cmp	r2, #37	@ 0x25
 800b474:	d1f9      	bne.n	800b46a <_vfiprintf_r+0x7a>
 800b476:	ebba 0b04 	subs.w	fp, sl, r4
 800b47a:	d00b      	beq.n	800b494 <_vfiprintf_r+0xa4>
 800b47c:	465b      	mov	r3, fp
 800b47e:	4622      	mov	r2, r4
 800b480:	4629      	mov	r1, r5
 800b482:	4630      	mov	r0, r6
 800b484:	f7ff ffa2 	bl	800b3cc <__sfputs_r>
 800b488:	3001      	adds	r0, #1
 800b48a:	f000 80a7 	beq.w	800b5dc <_vfiprintf_r+0x1ec>
 800b48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b490:	445a      	add	r2, fp
 800b492:	9209      	str	r2, [sp, #36]	@ 0x24
 800b494:	f89a 3000 	ldrb.w	r3, [sl]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 809f 	beq.w	800b5dc <_vfiprintf_r+0x1ec>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a8:	f10a 0a01 	add.w	sl, sl, #1
 800b4ac:	9304      	str	r3, [sp, #16]
 800b4ae:	9307      	str	r3, [sp, #28]
 800b4b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4b6:	4654      	mov	r4, sl
 800b4b8:	2205      	movs	r2, #5
 800b4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4be:	4853      	ldr	r0, [pc, #332]	@ (800b60c <_vfiprintf_r+0x21c>)
 800b4c0:	f7f4 fe8e 	bl	80001e0 <memchr>
 800b4c4:	9a04      	ldr	r2, [sp, #16]
 800b4c6:	b9d8      	cbnz	r0, 800b500 <_vfiprintf_r+0x110>
 800b4c8:	06d1      	lsls	r1, r2, #27
 800b4ca:	bf44      	itt	mi
 800b4cc:	2320      	movmi	r3, #32
 800b4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d2:	0713      	lsls	r3, r2, #28
 800b4d4:	bf44      	itt	mi
 800b4d6:	232b      	movmi	r3, #43	@ 0x2b
 800b4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4e2:	d015      	beq.n	800b510 <_vfiprintf_r+0x120>
 800b4e4:	9a07      	ldr	r2, [sp, #28]
 800b4e6:	4654      	mov	r4, sl
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	f04f 0c0a 	mov.w	ip, #10
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f4:	3b30      	subs	r3, #48	@ 0x30
 800b4f6:	2b09      	cmp	r3, #9
 800b4f8:	d94b      	bls.n	800b592 <_vfiprintf_r+0x1a2>
 800b4fa:	b1b0      	cbz	r0, 800b52a <_vfiprintf_r+0x13a>
 800b4fc:	9207      	str	r2, [sp, #28]
 800b4fe:	e014      	b.n	800b52a <_vfiprintf_r+0x13a>
 800b500:	eba0 0308 	sub.w	r3, r0, r8
 800b504:	fa09 f303 	lsl.w	r3, r9, r3
 800b508:	4313      	orrs	r3, r2
 800b50a:	9304      	str	r3, [sp, #16]
 800b50c:	46a2      	mov	sl, r4
 800b50e:	e7d2      	b.n	800b4b6 <_vfiprintf_r+0xc6>
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	1d19      	adds	r1, r3, #4
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	9103      	str	r1, [sp, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	bfbb      	ittet	lt
 800b51c:	425b      	neglt	r3, r3
 800b51e:	f042 0202 	orrlt.w	r2, r2, #2
 800b522:	9307      	strge	r3, [sp, #28]
 800b524:	9307      	strlt	r3, [sp, #28]
 800b526:	bfb8      	it	lt
 800b528:	9204      	strlt	r2, [sp, #16]
 800b52a:	7823      	ldrb	r3, [r4, #0]
 800b52c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b52e:	d10a      	bne.n	800b546 <_vfiprintf_r+0x156>
 800b530:	7863      	ldrb	r3, [r4, #1]
 800b532:	2b2a      	cmp	r3, #42	@ 0x2a
 800b534:	d132      	bne.n	800b59c <_vfiprintf_r+0x1ac>
 800b536:	9b03      	ldr	r3, [sp, #12]
 800b538:	1d1a      	adds	r2, r3, #4
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	9203      	str	r2, [sp, #12]
 800b53e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b542:	3402      	adds	r4, #2
 800b544:	9305      	str	r3, [sp, #20]
 800b546:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b61c <_vfiprintf_r+0x22c>
 800b54a:	7821      	ldrb	r1, [r4, #0]
 800b54c:	2203      	movs	r2, #3
 800b54e:	4650      	mov	r0, sl
 800b550:	f7f4 fe46 	bl	80001e0 <memchr>
 800b554:	b138      	cbz	r0, 800b566 <_vfiprintf_r+0x176>
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	eba0 000a 	sub.w	r0, r0, sl
 800b55c:	2240      	movs	r2, #64	@ 0x40
 800b55e:	4082      	lsls	r2, r0
 800b560:	4313      	orrs	r3, r2
 800b562:	3401      	adds	r4, #1
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56a:	4829      	ldr	r0, [pc, #164]	@ (800b610 <_vfiprintf_r+0x220>)
 800b56c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b570:	2206      	movs	r2, #6
 800b572:	f7f4 fe35 	bl	80001e0 <memchr>
 800b576:	2800      	cmp	r0, #0
 800b578:	d03f      	beq.n	800b5fa <_vfiprintf_r+0x20a>
 800b57a:	4b26      	ldr	r3, [pc, #152]	@ (800b614 <_vfiprintf_r+0x224>)
 800b57c:	bb1b      	cbnz	r3, 800b5c6 <_vfiprintf_r+0x1d6>
 800b57e:	9b03      	ldr	r3, [sp, #12]
 800b580:	3307      	adds	r3, #7
 800b582:	f023 0307 	bic.w	r3, r3, #7
 800b586:	3308      	adds	r3, #8
 800b588:	9303      	str	r3, [sp, #12]
 800b58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b58c:	443b      	add	r3, r7
 800b58e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b590:	e76a      	b.n	800b468 <_vfiprintf_r+0x78>
 800b592:	fb0c 3202 	mla	r2, ip, r2, r3
 800b596:	460c      	mov	r4, r1
 800b598:	2001      	movs	r0, #1
 800b59a:	e7a8      	b.n	800b4ee <_vfiprintf_r+0xfe>
 800b59c:	2300      	movs	r3, #0
 800b59e:	3401      	adds	r4, #1
 800b5a0:	9305      	str	r3, [sp, #20]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	f04f 0c0a 	mov.w	ip, #10
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ae:	3a30      	subs	r2, #48	@ 0x30
 800b5b0:	2a09      	cmp	r2, #9
 800b5b2:	d903      	bls.n	800b5bc <_vfiprintf_r+0x1cc>
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0c6      	beq.n	800b546 <_vfiprintf_r+0x156>
 800b5b8:	9105      	str	r1, [sp, #20]
 800b5ba:	e7c4      	b.n	800b546 <_vfiprintf_r+0x156>
 800b5bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e7f0      	b.n	800b5a8 <_vfiprintf_r+0x1b8>
 800b5c6:	ab03      	add	r3, sp, #12
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	462a      	mov	r2, r5
 800b5cc:	4b12      	ldr	r3, [pc, #72]	@ (800b618 <_vfiprintf_r+0x228>)
 800b5ce:	a904      	add	r1, sp, #16
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7fd fbd9 	bl	8008d88 <_printf_float>
 800b5d6:	4607      	mov	r7, r0
 800b5d8:	1c78      	adds	r0, r7, #1
 800b5da:	d1d6      	bne.n	800b58a <_vfiprintf_r+0x19a>
 800b5dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5de:	07d9      	lsls	r1, r3, #31
 800b5e0:	d405      	bmi.n	800b5ee <_vfiprintf_r+0x1fe>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	059a      	lsls	r2, r3, #22
 800b5e6:	d402      	bmi.n	800b5ee <_vfiprintf_r+0x1fe>
 800b5e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5ea:	f7fe f929 	bl	8009840 <__retarget_lock_release_recursive>
 800b5ee:	89ab      	ldrh	r3, [r5, #12]
 800b5f0:	065b      	lsls	r3, r3, #25
 800b5f2:	f53f af1f 	bmi.w	800b434 <_vfiprintf_r+0x44>
 800b5f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f8:	e71e      	b.n	800b438 <_vfiprintf_r+0x48>
 800b5fa:	ab03      	add	r3, sp, #12
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	462a      	mov	r2, r5
 800b600:	4b05      	ldr	r3, [pc, #20]	@ (800b618 <_vfiprintf_r+0x228>)
 800b602:	a904      	add	r1, sp, #16
 800b604:	4630      	mov	r0, r6
 800b606:	f7fd fe57 	bl	80092b8 <_printf_i>
 800b60a:	e7e4      	b.n	800b5d6 <_vfiprintf_r+0x1e6>
 800b60c:	0800d3b8 	.word	0x0800d3b8
 800b610:	0800d3c2 	.word	0x0800d3c2
 800b614:	08008d89 	.word	0x08008d89
 800b618:	0800b3cd 	.word	0x0800b3cd
 800b61c:	0800d3be 	.word	0x0800d3be

0800b620 <__swbuf_r>:
 800b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b622:	460e      	mov	r6, r1
 800b624:	4614      	mov	r4, r2
 800b626:	4605      	mov	r5, r0
 800b628:	b118      	cbz	r0, 800b632 <__swbuf_r+0x12>
 800b62a:	6a03      	ldr	r3, [r0, #32]
 800b62c:	b90b      	cbnz	r3, 800b632 <__swbuf_r+0x12>
 800b62e:	f7fd ffef 	bl	8009610 <__sinit>
 800b632:	69a3      	ldr	r3, [r4, #24]
 800b634:	60a3      	str	r3, [r4, #8]
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	071a      	lsls	r2, r3, #28
 800b63a:	d501      	bpl.n	800b640 <__swbuf_r+0x20>
 800b63c:	6923      	ldr	r3, [r4, #16]
 800b63e:	b943      	cbnz	r3, 800b652 <__swbuf_r+0x32>
 800b640:	4621      	mov	r1, r4
 800b642:	4628      	mov	r0, r5
 800b644:	f000 f82a 	bl	800b69c <__swsetup_r>
 800b648:	b118      	cbz	r0, 800b652 <__swbuf_r+0x32>
 800b64a:	f04f 37ff 	mov.w	r7, #4294967295
 800b64e:	4638      	mov	r0, r7
 800b650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	6922      	ldr	r2, [r4, #16]
 800b656:	1a98      	subs	r0, r3, r2
 800b658:	6963      	ldr	r3, [r4, #20]
 800b65a:	b2f6      	uxtb	r6, r6
 800b65c:	4283      	cmp	r3, r0
 800b65e:	4637      	mov	r7, r6
 800b660:	dc05      	bgt.n	800b66e <__swbuf_r+0x4e>
 800b662:	4621      	mov	r1, r4
 800b664:	4628      	mov	r0, r5
 800b666:	f7ff fd99 	bl	800b19c <_fflush_r>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d1ed      	bne.n	800b64a <__swbuf_r+0x2a>
 800b66e:	68a3      	ldr	r3, [r4, #8]
 800b670:	3b01      	subs	r3, #1
 800b672:	60a3      	str	r3, [r4, #8]
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	6022      	str	r2, [r4, #0]
 800b67a:	701e      	strb	r6, [r3, #0]
 800b67c:	6962      	ldr	r2, [r4, #20]
 800b67e:	1c43      	adds	r3, r0, #1
 800b680:	429a      	cmp	r2, r3
 800b682:	d004      	beq.n	800b68e <__swbuf_r+0x6e>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	07db      	lsls	r3, r3, #31
 800b688:	d5e1      	bpl.n	800b64e <__swbuf_r+0x2e>
 800b68a:	2e0a      	cmp	r6, #10
 800b68c:	d1df      	bne.n	800b64e <__swbuf_r+0x2e>
 800b68e:	4621      	mov	r1, r4
 800b690:	4628      	mov	r0, r5
 800b692:	f7ff fd83 	bl	800b19c <_fflush_r>
 800b696:	2800      	cmp	r0, #0
 800b698:	d0d9      	beq.n	800b64e <__swbuf_r+0x2e>
 800b69a:	e7d6      	b.n	800b64a <__swbuf_r+0x2a>

0800b69c <__swsetup_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4b29      	ldr	r3, [pc, #164]	@ (800b744 <__swsetup_r+0xa8>)
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	6818      	ldr	r0, [r3, #0]
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	b118      	cbz	r0, 800b6b0 <__swsetup_r+0x14>
 800b6a8:	6a03      	ldr	r3, [r0, #32]
 800b6aa:	b90b      	cbnz	r3, 800b6b0 <__swsetup_r+0x14>
 800b6ac:	f7fd ffb0 	bl	8009610 <__sinit>
 800b6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b4:	0719      	lsls	r1, r3, #28
 800b6b6:	d422      	bmi.n	800b6fe <__swsetup_r+0x62>
 800b6b8:	06da      	lsls	r2, r3, #27
 800b6ba:	d407      	bmi.n	800b6cc <__swsetup_r+0x30>
 800b6bc:	2209      	movs	r2, #9
 800b6be:	602a      	str	r2, [r5, #0]
 800b6c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c4:	81a3      	strh	r3, [r4, #12]
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	e033      	b.n	800b734 <__swsetup_r+0x98>
 800b6cc:	0758      	lsls	r0, r3, #29
 800b6ce:	d512      	bpl.n	800b6f6 <__swsetup_r+0x5a>
 800b6d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6d2:	b141      	cbz	r1, 800b6e6 <__swsetup_r+0x4a>
 800b6d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6d8:	4299      	cmp	r1, r3
 800b6da:	d002      	beq.n	800b6e2 <__swsetup_r+0x46>
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f7fe feff 	bl	800a4e0 <_free_r>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6ec:	81a3      	strh	r3, [r4, #12]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6063      	str	r3, [r4, #4]
 800b6f2:	6923      	ldr	r3, [r4, #16]
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f043 0308 	orr.w	r3, r3, #8
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	6923      	ldr	r3, [r4, #16]
 800b700:	b94b      	cbnz	r3, 800b716 <__swsetup_r+0x7a>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b70c:	d003      	beq.n	800b716 <__swsetup_r+0x7a>
 800b70e:	4621      	mov	r1, r4
 800b710:	4628      	mov	r0, r5
 800b712:	f000 f883 	bl	800b81c <__smakebuf_r>
 800b716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71a:	f013 0201 	ands.w	r2, r3, #1
 800b71e:	d00a      	beq.n	800b736 <__swsetup_r+0x9a>
 800b720:	2200      	movs	r2, #0
 800b722:	60a2      	str	r2, [r4, #8]
 800b724:	6962      	ldr	r2, [r4, #20]
 800b726:	4252      	negs	r2, r2
 800b728:	61a2      	str	r2, [r4, #24]
 800b72a:	6922      	ldr	r2, [r4, #16]
 800b72c:	b942      	cbnz	r2, 800b740 <__swsetup_r+0xa4>
 800b72e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b732:	d1c5      	bne.n	800b6c0 <__swsetup_r+0x24>
 800b734:	bd38      	pop	{r3, r4, r5, pc}
 800b736:	0799      	lsls	r1, r3, #30
 800b738:	bf58      	it	pl
 800b73a:	6962      	ldrpl	r2, [r4, #20]
 800b73c:	60a2      	str	r2, [r4, #8]
 800b73e:	e7f4      	b.n	800b72a <__swsetup_r+0x8e>
 800b740:	2000      	movs	r0, #0
 800b742:	e7f7      	b.n	800b734 <__swsetup_r+0x98>
 800b744:	20000028 	.word	0x20000028

0800b748 <_raise_r>:
 800b748:	291f      	cmp	r1, #31
 800b74a:	b538      	push	{r3, r4, r5, lr}
 800b74c:	4605      	mov	r5, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	d904      	bls.n	800b75c <_raise_r+0x14>
 800b752:	2316      	movs	r3, #22
 800b754:	6003      	str	r3, [r0, #0]
 800b756:	f04f 30ff 	mov.w	r0, #4294967295
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b75e:	b112      	cbz	r2, 800b766 <_raise_r+0x1e>
 800b760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b764:	b94b      	cbnz	r3, 800b77a <_raise_r+0x32>
 800b766:	4628      	mov	r0, r5
 800b768:	f000 f830 	bl	800b7cc <_getpid_r>
 800b76c:	4622      	mov	r2, r4
 800b76e:	4601      	mov	r1, r0
 800b770:	4628      	mov	r0, r5
 800b772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b776:	f000 b817 	b.w	800b7a8 <_kill_r>
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d00a      	beq.n	800b794 <_raise_r+0x4c>
 800b77e:	1c59      	adds	r1, r3, #1
 800b780:	d103      	bne.n	800b78a <_raise_r+0x42>
 800b782:	2316      	movs	r3, #22
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	2001      	movs	r0, #1
 800b788:	e7e7      	b.n	800b75a <_raise_r+0x12>
 800b78a:	2100      	movs	r1, #0
 800b78c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b790:	4620      	mov	r0, r4
 800b792:	4798      	blx	r3
 800b794:	2000      	movs	r0, #0
 800b796:	e7e0      	b.n	800b75a <_raise_r+0x12>

0800b798 <raise>:
 800b798:	4b02      	ldr	r3, [pc, #8]	@ (800b7a4 <raise+0xc>)
 800b79a:	4601      	mov	r1, r0
 800b79c:	6818      	ldr	r0, [r3, #0]
 800b79e:	f7ff bfd3 	b.w	800b748 <_raise_r>
 800b7a2:	bf00      	nop
 800b7a4:	20000028 	.word	0x20000028

0800b7a8 <_kill_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4d07      	ldr	r5, [pc, #28]	@ (800b7c8 <_kill_r+0x20>)
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	f7f8 fd69 	bl	800428c <_kill>
 800b7ba:	1c43      	adds	r3, r0, #1
 800b7bc:	d102      	bne.n	800b7c4 <_kill_r+0x1c>
 800b7be:	682b      	ldr	r3, [r5, #0]
 800b7c0:	b103      	cbz	r3, 800b7c4 <_kill_r+0x1c>
 800b7c2:	6023      	str	r3, [r4, #0]
 800b7c4:	bd38      	pop	{r3, r4, r5, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20000a54 	.word	0x20000a54

0800b7cc <_getpid_r>:
 800b7cc:	f7f8 bd56 	b.w	800427c <_getpid>

0800b7d0 <__swhatbuf_r>:
 800b7d0:	b570      	push	{r4, r5, r6, lr}
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	b096      	sub	sp, #88	@ 0x58
 800b7dc:	4615      	mov	r5, r2
 800b7de:	461e      	mov	r6, r3
 800b7e0:	da0d      	bge.n	800b7fe <__swhatbuf_r+0x2e>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7e8:	f04f 0100 	mov.w	r1, #0
 800b7ec:	bf14      	ite	ne
 800b7ee:	2340      	movne	r3, #64	@ 0x40
 800b7f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	6031      	str	r1, [r6, #0]
 800b7f8:	602b      	str	r3, [r5, #0]
 800b7fa:	b016      	add	sp, #88	@ 0x58
 800b7fc:	bd70      	pop	{r4, r5, r6, pc}
 800b7fe:	466a      	mov	r2, sp
 800b800:	f000 f848 	bl	800b894 <_fstat_r>
 800b804:	2800      	cmp	r0, #0
 800b806:	dbec      	blt.n	800b7e2 <__swhatbuf_r+0x12>
 800b808:	9901      	ldr	r1, [sp, #4]
 800b80a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b80e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b812:	4259      	negs	r1, r3
 800b814:	4159      	adcs	r1, r3
 800b816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b81a:	e7eb      	b.n	800b7f4 <__swhatbuf_r+0x24>

0800b81c <__smakebuf_r>:
 800b81c:	898b      	ldrh	r3, [r1, #12]
 800b81e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b820:	079d      	lsls	r5, r3, #30
 800b822:	4606      	mov	r6, r0
 800b824:	460c      	mov	r4, r1
 800b826:	d507      	bpl.n	800b838 <__smakebuf_r+0x1c>
 800b828:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	6123      	str	r3, [r4, #16]
 800b830:	2301      	movs	r3, #1
 800b832:	6163      	str	r3, [r4, #20]
 800b834:	b003      	add	sp, #12
 800b836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b838:	ab01      	add	r3, sp, #4
 800b83a:	466a      	mov	r2, sp
 800b83c:	f7ff ffc8 	bl	800b7d0 <__swhatbuf_r>
 800b840:	9f00      	ldr	r7, [sp, #0]
 800b842:	4605      	mov	r5, r0
 800b844:	4639      	mov	r1, r7
 800b846:	4630      	mov	r0, r6
 800b848:	f7fe febe 	bl	800a5c8 <_malloc_r>
 800b84c:	b948      	cbnz	r0, 800b862 <__smakebuf_r+0x46>
 800b84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b852:	059a      	lsls	r2, r3, #22
 800b854:	d4ee      	bmi.n	800b834 <__smakebuf_r+0x18>
 800b856:	f023 0303 	bic.w	r3, r3, #3
 800b85a:	f043 0302 	orr.w	r3, r3, #2
 800b85e:	81a3      	strh	r3, [r4, #12]
 800b860:	e7e2      	b.n	800b828 <__smakebuf_r+0xc>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	6020      	str	r0, [r4, #0]
 800b866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b86a:	81a3      	strh	r3, [r4, #12]
 800b86c:	9b01      	ldr	r3, [sp, #4]
 800b86e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b872:	b15b      	cbz	r3, 800b88c <__smakebuf_r+0x70>
 800b874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b878:	4630      	mov	r0, r6
 800b87a:	f000 f81d 	bl	800b8b8 <_isatty_r>
 800b87e:	b128      	cbz	r0, 800b88c <__smakebuf_r+0x70>
 800b880:	89a3      	ldrh	r3, [r4, #12]
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	f043 0301 	orr.w	r3, r3, #1
 800b88a:	81a3      	strh	r3, [r4, #12]
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	431d      	orrs	r5, r3
 800b890:	81a5      	strh	r5, [r4, #12]
 800b892:	e7cf      	b.n	800b834 <__smakebuf_r+0x18>

0800b894 <_fstat_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d07      	ldr	r5, [pc, #28]	@ (800b8b4 <_fstat_r+0x20>)
 800b898:	2300      	movs	r3, #0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	4611      	mov	r1, r2
 800b8a0:	602b      	str	r3, [r5, #0]
 800b8a2:	f7f8 fd37 	bl	8004314 <_fstat>
 800b8a6:	1c43      	adds	r3, r0, #1
 800b8a8:	d102      	bne.n	800b8b0 <_fstat_r+0x1c>
 800b8aa:	682b      	ldr	r3, [r5, #0]
 800b8ac:	b103      	cbz	r3, 800b8b0 <_fstat_r+0x1c>
 800b8ae:	6023      	str	r3, [r4, #0]
 800b8b0:	bd38      	pop	{r3, r4, r5, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000a54 	.word	0x20000a54

0800b8b8 <_isatty_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d06      	ldr	r5, [pc, #24]	@ (800b8d4 <_isatty_r+0x1c>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	602b      	str	r3, [r5, #0]
 800b8c4:	f7f8 fd36 	bl	8004334 <_isatty>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_isatty_r+0x1a>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_isatty_r+0x1a>
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	20000a54 	.word	0x20000a54

0800b8d8 <asinf>:
 800b8d8:	b508      	push	{r3, lr}
 800b8da:	ed2d 8b02 	vpush	{d8}
 800b8de:	eeb0 8a40 	vmov.f32	s16, s0
 800b8e2:	f000 f835 	bl	800b950 <__ieee754_asinf>
 800b8e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ee:	eef0 8a40 	vmov.f32	s17, s0
 800b8f2:	d615      	bvs.n	800b920 <asinf+0x48>
 800b8f4:	eeb0 0a48 	vmov.f32	s0, s16
 800b8f8:	f000 f81c 	bl	800b934 <fabsf>
 800b8fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b900:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b908:	dd0a      	ble.n	800b920 <asinf+0x48>
 800b90a:	f7fd ff6d 	bl	80097e8 <__errno>
 800b90e:	ecbd 8b02 	vpop	{d8}
 800b912:	2321      	movs	r3, #33	@ 0x21
 800b914:	6003      	str	r3, [r0, #0]
 800b916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b91a:	4804      	ldr	r0, [pc, #16]	@ (800b92c <asinf+0x54>)
 800b91c:	f000 b812 	b.w	800b944 <nanf>
 800b920:	eeb0 0a68 	vmov.f32	s0, s17
 800b924:	ecbd 8b02 	vpop	{d8}
 800b928:	bd08      	pop	{r3, pc}
 800b92a:	bf00      	nop
 800b92c:	0800d40e 	.word	0x0800d40e

0800b930 <atan2f>:
 800b930:	f000 b8f4 	b.w	800bb1c <__ieee754_atan2f>

0800b934 <fabsf>:
 800b934:	ee10 3a10 	vmov	r3, s0
 800b938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b93c:	ee00 3a10 	vmov	s0, r3
 800b940:	4770      	bx	lr
	...

0800b944 <nanf>:
 800b944:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b94c <nanf+0x8>
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	7fc00000 	.word	0x7fc00000

0800b950 <__ieee754_asinf>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	ee10 5a10 	vmov	r5, s0
 800b956:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800b95a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800b95e:	ed2d 8b04 	vpush	{d8-d9}
 800b962:	d10c      	bne.n	800b97e <__ieee754_asinf+0x2e>
 800b964:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800badc <__ieee754_asinf+0x18c>
 800b968:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800bae0 <__ieee754_asinf+0x190>
 800b96c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b970:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b974:	eeb0 0a67 	vmov.f32	s0, s15
 800b978:	ecbd 8b04 	vpop	{d8-d9}
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	d904      	bls.n	800b98a <__ieee754_asinf+0x3a>
 800b980:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b984:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b988:	e7f6      	b.n	800b978 <__ieee754_asinf+0x28>
 800b98a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800b98e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b992:	d20b      	bcs.n	800b9ac <__ieee754_asinf+0x5c>
 800b994:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800b998:	d252      	bcs.n	800ba40 <__ieee754_asinf+0xf0>
 800b99a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800bae4 <__ieee754_asinf+0x194>
 800b99e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b9a2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800b9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9aa:	dce5      	bgt.n	800b978 <__ieee754_asinf+0x28>
 800b9ac:	f7ff ffc2 	bl	800b934 <fabsf>
 800b9b0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800b9b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b9b8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b9bc:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800bae8 <__ieee754_asinf+0x198>
 800b9c0:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800baec <__ieee754_asinf+0x19c>
 800b9c4:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800baf0 <__ieee754_asinf+0x1a0>
 800b9c8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800b9cc:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800baf4 <__ieee754_asinf+0x1a4>
 800b9d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b9d4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800baf8 <__ieee754_asinf+0x1a8>
 800b9d8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b9dc:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800bafc <__ieee754_asinf+0x1ac>
 800b9e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b9e4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800bb00 <__ieee754_asinf+0x1b0>
 800b9e8:	eea7 9a88 	vfma.f32	s18, s15, s16
 800b9ec:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800bb04 <__ieee754_asinf+0x1b4>
 800b9f0:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b9f4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800bb08 <__ieee754_asinf+0x1b8>
 800b9f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b9fc:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800bb0c <__ieee754_asinf+0x1bc>
 800ba00:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ba04:	eeb0 0a48 	vmov.f32	s0, s16
 800ba08:	eee7 8a88 	vfma.f32	s17, s15, s16
 800ba0c:	f000 f9fa 	bl	800be04 <__ieee754_sqrtf>
 800ba10:	4b3f      	ldr	r3, [pc, #252]	@ (800bb10 <__ieee754_asinf+0x1c0>)
 800ba12:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ba16:	429c      	cmp	r4, r3
 800ba18:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ba1c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ba20:	d93d      	bls.n	800ba9e <__ieee754_asinf+0x14e>
 800ba22:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ba26:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800bb14 <__ieee754_asinf+0x1c4>
 800ba2a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800ba2e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800bae0 <__ieee754_asinf+0x190>
 800ba32:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba36:	2d00      	cmp	r5, #0
 800ba38:	bfd8      	it	le
 800ba3a:	eeb1 0a40 	vnegle.f32	s0, s0
 800ba3e:	e79b      	b.n	800b978 <__ieee754_asinf+0x28>
 800ba40:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ba44:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800baec <__ieee754_asinf+0x19c>
 800ba48:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800bae8 <__ieee754_asinf+0x198>
 800ba4c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800bb00 <__ieee754_asinf+0x1b0>
 800ba50:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ba54:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800baf4 <__ieee754_asinf+0x1a4>
 800ba58:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba5c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800baf8 <__ieee754_asinf+0x1a8>
 800ba60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ba64:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800bafc <__ieee754_asinf+0x1ac>
 800ba68:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba6c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800baf0 <__ieee754_asinf+0x1a0>
 800ba70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ba74:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800bb04 <__ieee754_asinf+0x1b4>
 800ba78:	eee7 6a86 	vfma.f32	s13, s15, s12
 800ba7c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800bb08 <__ieee754_asinf+0x1b8>
 800ba80:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ba84:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800bb0c <__ieee754_asinf+0x1bc>
 800ba88:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ba8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba90:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ba94:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ba98:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ba9c:	e76c      	b.n	800b978 <__ieee754_asinf+0x28>
 800ba9e:	ee10 3a10 	vmov	r3, s0
 800baa2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800baa6:	f023 030f 	bic.w	r3, r3, #15
 800baaa:	ee07 3a10 	vmov	s14, r3
 800baae:	eea7 8a47 	vfms.f32	s16, s14, s14
 800bab2:	ee70 5a00 	vadd.f32	s11, s0, s0
 800bab6:	ee30 0a07 	vadd.f32	s0, s0, s14
 800baba:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800badc <__ieee754_asinf+0x18c>
 800babe:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800bac2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800bb18 <__ieee754_asinf+0x1c8>
 800bac6:	eee5 7a66 	vfms.f32	s15, s10, s13
 800baca:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800bace:	eeb0 6a40 	vmov.f32	s12, s0
 800bad2:	eea7 6a66 	vfms.f32	s12, s14, s13
 800bad6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bada:	e7aa      	b.n	800ba32 <__ieee754_asinf+0xe2>
 800badc:	b33bbd2e 	.word	0xb33bbd2e
 800bae0:	3fc90fdb 	.word	0x3fc90fdb
 800bae4:	7149f2ca 	.word	0x7149f2ca
 800bae8:	3a4f7f04 	.word	0x3a4f7f04
 800baec:	3811ef08 	.word	0x3811ef08
 800baf0:	3e2aaaab 	.word	0x3e2aaaab
 800baf4:	bd241146 	.word	0xbd241146
 800baf8:	3e4e0aa8 	.word	0x3e4e0aa8
 800bafc:	bea6b090 	.word	0xbea6b090
 800bb00:	3d9dc62e 	.word	0x3d9dc62e
 800bb04:	bf303361 	.word	0xbf303361
 800bb08:	4001572d 	.word	0x4001572d
 800bb0c:	c019d139 	.word	0xc019d139
 800bb10:	3f799999 	.word	0x3f799999
 800bb14:	333bbd2e 	.word	0x333bbd2e
 800bb18:	3f490fdb 	.word	0x3f490fdb

0800bb1c <__ieee754_atan2f>:
 800bb1c:	ee10 2a90 	vmov	r2, s1
 800bb20:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800bb24:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bb28:	b510      	push	{r4, lr}
 800bb2a:	eef0 7a40 	vmov.f32	s15, s0
 800bb2e:	d806      	bhi.n	800bb3e <__ieee754_atan2f+0x22>
 800bb30:	ee10 0a10 	vmov	r0, s0
 800bb34:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800bb38:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bb3c:	d904      	bls.n	800bb48 <__ieee754_atan2f+0x2c>
 800bb3e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bb42:	eeb0 0a67 	vmov.f32	s0, s15
 800bb46:	bd10      	pop	{r4, pc}
 800bb48:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800bb4c:	d103      	bne.n	800bb56 <__ieee754_atan2f+0x3a>
 800bb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb52:	f000 b883 	b.w	800bc5c <atanf>
 800bb56:	1794      	asrs	r4, r2, #30
 800bb58:	f004 0402 	and.w	r4, r4, #2
 800bb5c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bb60:	b943      	cbnz	r3, 800bb74 <__ieee754_atan2f+0x58>
 800bb62:	2c02      	cmp	r4, #2
 800bb64:	d05e      	beq.n	800bc24 <__ieee754_atan2f+0x108>
 800bb66:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bc38 <__ieee754_atan2f+0x11c>
 800bb6a:	2c03      	cmp	r4, #3
 800bb6c:	bf08      	it	eq
 800bb6e:	eef0 7a47 	vmoveq.f32	s15, s14
 800bb72:	e7e6      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bb74:	b941      	cbnz	r1, 800bb88 <__ieee754_atan2f+0x6c>
 800bb76:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800bc3c <__ieee754_atan2f+0x120>
 800bb7a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bc40 <__ieee754_atan2f+0x124>
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	bfb8      	it	lt
 800bb82:	eef0 7a47 	vmovlt.f32	s15, s14
 800bb86:	e7dc      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bb88:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bb8c:	d110      	bne.n	800bbb0 <__ieee754_atan2f+0x94>
 800bb8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bb92:	f104 34ff 	add.w	r4, r4, #4294967295
 800bb96:	d107      	bne.n	800bba8 <__ieee754_atan2f+0x8c>
 800bb98:	2c02      	cmp	r4, #2
 800bb9a:	d846      	bhi.n	800bc2a <__ieee754_atan2f+0x10e>
 800bb9c:	4b29      	ldr	r3, [pc, #164]	@ (800bc44 <__ieee754_atan2f+0x128>)
 800bb9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bba2:	edd3 7a00 	vldr	s15, [r3]
 800bba6:	e7cc      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bba8:	2c02      	cmp	r4, #2
 800bbaa:	d841      	bhi.n	800bc30 <__ieee754_atan2f+0x114>
 800bbac:	4b26      	ldr	r3, [pc, #152]	@ (800bc48 <__ieee754_atan2f+0x12c>)
 800bbae:	e7f6      	b.n	800bb9e <__ieee754_atan2f+0x82>
 800bbb0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bbb4:	d0df      	beq.n	800bb76 <__ieee754_atan2f+0x5a>
 800bbb6:	1a5b      	subs	r3, r3, r1
 800bbb8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800bbbc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bbc0:	da1a      	bge.n	800bbf8 <__ieee754_atan2f+0xdc>
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	da01      	bge.n	800bbca <__ieee754_atan2f+0xae>
 800bbc6:	313c      	adds	r1, #60	@ 0x3c
 800bbc8:	db19      	blt.n	800bbfe <__ieee754_atan2f+0xe2>
 800bbca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800bbce:	f7ff feb1 	bl	800b934 <fabsf>
 800bbd2:	f000 f843 	bl	800bc5c <atanf>
 800bbd6:	eef0 7a40 	vmov.f32	s15, s0
 800bbda:	2c01      	cmp	r4, #1
 800bbdc:	d012      	beq.n	800bc04 <__ieee754_atan2f+0xe8>
 800bbde:	2c02      	cmp	r4, #2
 800bbe0:	d017      	beq.n	800bc12 <__ieee754_atan2f+0xf6>
 800bbe2:	2c00      	cmp	r4, #0
 800bbe4:	d0ad      	beq.n	800bb42 <__ieee754_atan2f+0x26>
 800bbe6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800bc4c <__ieee754_atan2f+0x130>
 800bbea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbee:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800bc50 <__ieee754_atan2f+0x134>
 800bbf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbf6:	e7a4      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bbf8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800bc3c <__ieee754_atan2f+0x120>
 800bbfc:	e7ed      	b.n	800bbda <__ieee754_atan2f+0xbe>
 800bbfe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bc54 <__ieee754_atan2f+0x138>
 800bc02:	e7ea      	b.n	800bbda <__ieee754_atan2f+0xbe>
 800bc04:	ee17 3a90 	vmov	r3, s15
 800bc08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bc0c:	ee07 3a90 	vmov	s15, r3
 800bc10:	e797      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bc12:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800bc4c <__ieee754_atan2f+0x130>
 800bc16:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800bc50 <__ieee754_atan2f+0x134>
 800bc1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc22:	e78e      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bc24:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800bc50 <__ieee754_atan2f+0x134>
 800bc28:	e78b      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bc2a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800bc58 <__ieee754_atan2f+0x13c>
 800bc2e:	e788      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bc30:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800bc54 <__ieee754_atan2f+0x138>
 800bc34:	e785      	b.n	800bb42 <__ieee754_atan2f+0x26>
 800bc36:	bf00      	nop
 800bc38:	c0490fdb 	.word	0xc0490fdb
 800bc3c:	3fc90fdb 	.word	0x3fc90fdb
 800bc40:	bfc90fdb 	.word	0xbfc90fdb
 800bc44:	0800d51c 	.word	0x0800d51c
 800bc48:	0800d510 	.word	0x0800d510
 800bc4c:	33bbbd2e 	.word	0x33bbbd2e
 800bc50:	40490fdb 	.word	0x40490fdb
 800bc54:	00000000 	.word	0x00000000
 800bc58:	3f490fdb 	.word	0x3f490fdb

0800bc5c <atanf>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	ee10 5a10 	vmov	r5, s0
 800bc62:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bc66:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800bc6a:	eef0 7a40 	vmov.f32	s15, s0
 800bc6e:	d310      	bcc.n	800bc92 <atanf+0x36>
 800bc70:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800bc74:	d904      	bls.n	800bc80 <atanf+0x24>
 800bc76:	ee70 7a00 	vadd.f32	s15, s0, s0
 800bc7a:	eeb0 0a67 	vmov.f32	s0, s15
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800bdb8 <atanf+0x15c>
 800bc84:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800bdbc <atanf+0x160>
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	bfc8      	it	gt
 800bc8c:	eef0 7a47 	vmovgt.f32	s15, s14
 800bc90:	e7f3      	b.n	800bc7a <atanf+0x1e>
 800bc92:	4b4b      	ldr	r3, [pc, #300]	@ (800bdc0 <atanf+0x164>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	d810      	bhi.n	800bcba <atanf+0x5e>
 800bc98:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800bc9c:	d20a      	bcs.n	800bcb4 <atanf+0x58>
 800bc9e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800bdc4 <atanf+0x168>
 800bca2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800bca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcaa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bcae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb2:	dce2      	bgt.n	800bc7a <atanf+0x1e>
 800bcb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb8:	e013      	b.n	800bce2 <atanf+0x86>
 800bcba:	f7ff fe3b 	bl	800b934 <fabsf>
 800bcbe:	4b42      	ldr	r3, [pc, #264]	@ (800bdc8 <atanf+0x16c>)
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	d84f      	bhi.n	800bd64 <atanf+0x108>
 800bcc4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800bcc8:	429c      	cmp	r4, r3
 800bcca:	d841      	bhi.n	800bd50 <atanf+0xf4>
 800bccc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800bcd0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bcd4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bcd8:	2300      	movs	r3, #0
 800bcda:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bcde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bce2:	1c5a      	adds	r2, r3, #1
 800bce4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bce8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800bdcc <atanf+0x170>
 800bcec:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800bdd0 <atanf+0x174>
 800bcf0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800bdd4 <atanf+0x178>
 800bcf4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800bcf8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800bcfc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800bdd8 <atanf+0x17c>
 800bd00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bd04:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800bddc <atanf+0x180>
 800bd08:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bd0c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bde0 <atanf+0x184>
 800bd10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800bd14:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800bde4 <atanf+0x188>
 800bd18:	eee7 5a26 	vfma.f32	s11, s14, s13
 800bd1c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800bde8 <atanf+0x18c>
 800bd20:	eea6 5a87 	vfma.f32	s10, s13, s14
 800bd24:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800bdec <atanf+0x190>
 800bd28:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bd2c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800bdf0 <atanf+0x194>
 800bd30:	eea7 5a26 	vfma.f32	s10, s14, s13
 800bd34:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800bdf4 <atanf+0x198>
 800bd38:	eea5 7a26 	vfma.f32	s14, s10, s13
 800bd3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800bd40:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bd44:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bd48:	d121      	bne.n	800bd8e <atanf+0x132>
 800bd4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd4e:	e794      	b.n	800bc7a <atanf+0x1e>
 800bd50:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bd54:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bd58:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bd62:	e7be      	b.n	800bce2 <atanf+0x86>
 800bd64:	4b24      	ldr	r3, [pc, #144]	@ (800bdf8 <atanf+0x19c>)
 800bd66:	429c      	cmp	r4, r3
 800bd68:	d80b      	bhi.n	800bd82 <atanf+0x126>
 800bd6a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800bd6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd72:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bd76:	2302      	movs	r3, #2
 800bd78:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bd7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd80:	e7af      	b.n	800bce2 <atanf+0x86>
 800bd82:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800bd86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	e7a9      	b.n	800bce2 <atanf+0x86>
 800bd8e:	4a1b      	ldr	r2, [pc, #108]	@ (800bdfc <atanf+0x1a0>)
 800bd90:	491b      	ldr	r1, [pc, #108]	@ (800be00 <atanf+0x1a4>)
 800bd92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bd96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bd9a:	edd3 6a00 	vldr	s13, [r3]
 800bd9e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bda2:	2d00      	cmp	r5, #0
 800bda4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bda8:	edd2 7a00 	vldr	s15, [r2]
 800bdac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdb0:	bfb8      	it	lt
 800bdb2:	eef1 7a67 	vneglt.f32	s15, s15
 800bdb6:	e760      	b.n	800bc7a <atanf+0x1e>
 800bdb8:	bfc90fdb 	.word	0xbfc90fdb
 800bdbc:	3fc90fdb 	.word	0x3fc90fdb
 800bdc0:	3edfffff 	.word	0x3edfffff
 800bdc4:	7149f2ca 	.word	0x7149f2ca
 800bdc8:	3f97ffff 	.word	0x3f97ffff
 800bdcc:	3c8569d7 	.word	0x3c8569d7
 800bdd0:	3d4bda59 	.word	0x3d4bda59
 800bdd4:	bd6ef16b 	.word	0xbd6ef16b
 800bdd8:	3d886b35 	.word	0x3d886b35
 800bddc:	3dba2e6e 	.word	0x3dba2e6e
 800bde0:	3e124925 	.word	0x3e124925
 800bde4:	3eaaaaab 	.word	0x3eaaaaab
 800bde8:	bd15a221 	.word	0xbd15a221
 800bdec:	bd9d8795 	.word	0xbd9d8795
 800bdf0:	bde38e38 	.word	0xbde38e38
 800bdf4:	be4ccccd 	.word	0xbe4ccccd
 800bdf8:	401bffff 	.word	0x401bffff
 800bdfc:	0800d538 	.word	0x0800d538
 800be00:	0800d528 	.word	0x0800d528

0800be04 <__ieee754_sqrtf>:
 800be04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800be08:	4770      	bx	lr
	...

0800be0c <_init>:
 800be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0e:	bf00      	nop
 800be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be12:	bc08      	pop	{r3}
 800be14:	469e      	mov	lr, r3
 800be16:	4770      	bx	lr

0800be18 <_fini>:
 800be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be1a:	bf00      	nop
 800be1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be1e:	bc08      	pop	{r3}
 800be20:	469e      	mov	lr, r3
 800be22:	4770      	bx	lr
