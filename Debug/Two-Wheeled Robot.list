
Two-Wheeled Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a080  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  0800a220  0800a220  0000b220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb0  0800adb0  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800adb0  0800adb0  0000bdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb8  0800adb8  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb8  0800adb8  0000bdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800adc0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  200001e0  0800afa0  0000c1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  0800afa0  0000ca64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148e8  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3f  00000000  00000000  00020af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00023838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018668  00000000  00000000  00024c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000178e4  00000000  00000000  0003d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00094d0d  00000000  00000000  00054b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000e9859  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000f7e  00000000  00000000  000e989c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006558  00000000  00000000  000ea81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f0d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a208 	.word	0x0800a208

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a208 	.word	0x0800a208

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000eb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000eb4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ec0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ec4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000ec8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00b      	beq.n	8000ee8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed0:	e000      	b.n	8000ed4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ed2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ed4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f9      	beq.n	8000ed2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ede:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_GPIO_EXTI_Callback>:
            imu->ax, imu->ay, imu->az,
            imu->rol, imu->pit, imu->yaw);
    HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1) { // PB1, the up button
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d102      	bne.n	8000f0c <HAL_GPIO_EXTI_Callback+0x16>
		MPU6500_InitStructures();
 8000f06:	f001 f859 	bl	8001fbc <MPU6500_InitStructures>
	}
	else if (GPIO_Pin == GPIO_PIN_10) { // PA10, 触发电机启动
		Motor_Forward(50); // 电机以50%的速度向前转动
	}
}
 8000f0a:	e006      	b.n	8000f1a <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == GPIO_PIN_10) { // PA10, 触发电机启动
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f12:	d102      	bne.n	8000f1a <HAL_GPIO_EXTI_Callback+0x24>
		Motor_Forward(50); // 电机以50%的速度向前转动
 8000f14:	2032      	movs	r0, #50	@ 0x32
 8000f16:	f000 fe1d 	bl	8001b54 <Motor_Forward>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <HAL_UART_RxCpltCallback+0x24>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d104      	bne.n	8000f40 <HAL_UART_RxCpltCallback+0x1c>
        //Motor_BluetoothCommand(bluetooth_rx_data);
        HAL_UART_Receive_IT(&huart6, &bluetooth_rx_data, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	4904      	ldr	r1, [pc, #16]	@ (8000f4c <HAL_UART_RxCpltCallback+0x28>)
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <HAL_UART_RxCpltCallback+0x2c>)
 8000f3c:	f005 fba3 	bl	8006686 <HAL_UART_Receive_IT>
    }
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40011400 	.word	0x40011400
 8000f4c:	20000465 	.word	0x20000465
 8000f50:	2000041c 	.word	0x2000041c

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b0a6      	sub	sp, #152	@ 0x98
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f001 ff05 	bl	8002d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f96b 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f62:	f000 fc21 	bl	80017a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f66:	f000 fa2f 	bl	80013c8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000f6a:	f000 fa63 	bl	8001434 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000f6e:	f000 fbf1 	bl	8001754 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000f72:	f000 faaf 	bl	80014d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f76:	f000 fb01 	bl	800157c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f7a:	f000 fb53 	bl	8001624 <MX_TIM4_Init>
  MX_I2C3_Init();
 8000f7e:	f000 f9f5 	bl	800136c <MX_I2C3_Init>
  MX_I2C2_Init();
 8000f82:	f000 f9c5 	bl	8001310 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init(&hi2c3);
 8000f86:	48a1      	ldr	r0, [pc, #644]	@ (800120c <main+0x2b8>)
 8000f88:	f001 f89e 	bl	80020c8 <ssd1306_Init>
  // 清屏
  ssd1306_Fill(Black);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f001 f9bb 	bl	8002308 <ssd1306_Fill>

  MPU6500_Init();
 8000f92:	f000 fea7 	bl	8001ce4 <MPU6500_Init>
  MPU6500_InitStructures();
 8000f96:	f001 f811 	bl	8001fbc <MPU6500_InitStructures>
  
  // Initialize DMP for better quaternion calculation
  DMP_Init_SPI();
 8000f9a:	f000 fe55 	bl	8001c48 <DMP_Init_SPI>
  
  HAL_TIM_Base_Start_IT(&htim1);
 8000f9e:	489c      	ldr	r0, [pc, #624]	@ (8001210 <main+0x2bc>)
 8000fa0:	f004 f9fa 	bl	8005398 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2180      	movs	r1, #128	@ 0x80
 8000fa8:	489a      	ldr	r0, [pc, #616]	@ (8001214 <main+0x2c0>)
 8000faa:	f002 fa9b 	bl	80034e4 <HAL_GPIO_WritePin>
  Motor_Init();
 8000fae:	f000 fcc5 	bl	800193c <Motor_Init>
  char at_command[] = "AT+NAME=MSDG48\r\n";
  send_at_command("AT\n");
  send_at_command(at_command);*/

  uint8_t dummy;
  HAL_UART_Receive_IT(&huart6, &dummy, 1);
 8000fb2:	f107 037f 	add.w	r3, r7, #127	@ 0x7f
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4897      	ldr	r0, [pc, #604]	@ (8001218 <main+0x2c4>)
 8000fbc:	f005 fb63 	bl	8006686 <HAL_UART_Receive_IT>

  uint32_t last_send_time = HAL_GetTick();
 8000fc0:	f001 ff38 	bl	8002e34 <HAL_GetTick>
 8000fc4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  uint32_t last_refresh_time = HAL_GetTick();
 8000fc8:	f001 ff34 	bl	8002e34 <HAL_GetTick>
 8000fcc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	char display_str1[20];
	char buffer[100];
	sprintf(buffer, "Forward\n");
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4992      	ldr	r1, [pc, #584]	@ (800121c <main+0x2c8>)
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f006 ffeb 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff f94f 	bl	8000280 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	1d39      	adds	r1, r7, #4
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	488a      	ldr	r0, [pc, #552]	@ (8001218 <main+0x2c4>)
 8000fee:	f005 fabf 	bl	8006570 <HAL_UART_Transmit>
    // 正转：从慢到快再到慢
    for (int speed = 40; speed <= 100; speed += 2) {
 8000ff2:	2328      	movs	r3, #40	@ 0x28
 8000ff4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000ff8:	e026      	b.n	8001048 <main+0xf4>
      ssd1306_Fill(Black);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f001 f984 	bl	8002308 <ssd1306_Fill>
      sprintf(display_str1, "Speed: %d", speed);
 8001000:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001004:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001008:	4985      	ldr	r1, [pc, #532]	@ (8001220 <main+0x2cc>)
 800100a:	4618      	mov	r0, r3
 800100c:	f006 ffd0 	bl	8007fb0 <siprintf>
      ssd1306_SetCursor(0, 0);
 8001010:	2100      	movs	r1, #0
 8001012:	2000      	movs	r0, #0
 8001014:	f001 fad4 	bl	80025c0 <ssd1306_SetCursor>
      ssd1306_WriteString(display_str1, Font_7x10, White);
 8001018:	4a82      	ldr	r2, [pc, #520]	@ (8001224 <main+0x2d0>)
 800101a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800101e:	2301      	movs	r3, #1
 8001020:	ca06      	ldmia	r2, {r1, r2}
 8001022:	f001 faa7 	bl	8002574 <ssd1306_WriteString>
      ssd1306_UpdateScreen(&hi2c3);
 8001026:	4879      	ldr	r0, [pc, #484]	@ (800120c <main+0x2b8>)
 8001028:	f001 f992 	bl	8002350 <ssd1306_UpdateScreen>

      Motor_Forward(speed);
 800102c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001030:	b21b      	sxth	r3, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fd8e 	bl	8001b54 <Motor_Forward>
      HAL_Delay(200);  // 每个速度维持200ms
 8001038:	20c8      	movs	r0, #200	@ 0xc8
 800103a:	f001 ff07 	bl	8002e4c <HAL_Delay>
    for (int speed = 40; speed <= 100; speed += 2) {
 800103e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001042:	3302      	adds	r3, #2
 8001044:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001048:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800104c:	2b64      	cmp	r3, #100	@ 0x64
 800104e:	ddd4      	ble.n	8000ffa <main+0xa6>
    }
    sprintf(buffer, "Forward Decreasing\n");
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4975      	ldr	r1, [pc, #468]	@ (8001228 <main+0x2d4>)
 8001054:	4618      	mov	r0, r3
 8001056:	f006 ffab 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff f90f 	bl	8000280 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	1d39      	adds	r1, r7, #4
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	486a      	ldr	r0, [pc, #424]	@ (8001218 <main+0x2c4>)
 800106e:	f005 fa7f 	bl	8006570 <HAL_UART_Transmit>
    for (int speed = 100; speed >= 40; speed -= 2) {
 8001072:	2364      	movs	r3, #100	@ 0x64
 8001074:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001078:	e026      	b.n	80010c8 <main+0x174>
		ssd1306_Fill(Black);
 800107a:	2000      	movs	r0, #0
 800107c:	f001 f944 	bl	8002308 <ssd1306_Fill>
		sprintf(display_str1, "Speed: %d", speed);
 8001080:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001084:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001088:	4965      	ldr	r1, [pc, #404]	@ (8001220 <main+0x2cc>)
 800108a:	4618      	mov	r0, r3
 800108c:	f006 ff90 	bl	8007fb0 <siprintf>
		ssd1306_SetCursor(0, 0);
 8001090:	2100      	movs	r1, #0
 8001092:	2000      	movs	r0, #0
 8001094:	f001 fa94 	bl	80025c0 <ssd1306_SetCursor>
		ssd1306_WriteString(display_str1, Font_7x10, White);
 8001098:	4a62      	ldr	r2, [pc, #392]	@ (8001224 <main+0x2d0>)
 800109a:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800109e:	2301      	movs	r3, #1
 80010a0:	ca06      	ldmia	r2, {r1, r2}
 80010a2:	f001 fa67 	bl	8002574 <ssd1306_WriteString>
		ssd1306_UpdateScreen(&hi2c3);
 80010a6:	4859      	ldr	r0, [pc, #356]	@ (800120c <main+0x2b8>)
 80010a8:	f001 f952 	bl	8002350 <ssd1306_UpdateScreen>

      Motor_Forward(speed);
 80010ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fd4e 	bl	8001b54 <Motor_Forward>
      HAL_Delay(200);
 80010b8:	20c8      	movs	r0, #200	@ 0xc8
 80010ba:	f001 fec7 	bl	8002e4c <HAL_Delay>
    for (int speed = 100; speed >= 40; speed -= 2) {
 80010be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010c2:	3b02      	subs	r3, #2
 80010c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80010c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010cc:	2b27      	cmp	r3, #39	@ 0x27
 80010ce:	dcd4      	bgt.n	800107a <main+0x126>
    }
    
    // 停止1秒
    sprintf(buffer, "Brake\n");
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4956      	ldr	r1, [pc, #344]	@ (800122c <main+0x2d8>)
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 ff6b 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f8cf 	bl	8000280 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	1d39      	adds	r1, r7, #4
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	484a      	ldr	r0, [pc, #296]	@ (8001218 <main+0x2c4>)
 80010ee:	f005 fa3f 	bl	8006570 <HAL_UART_Transmit>
    Motor_Brake();
 80010f2:	f000 fd6f 	bl	8001bd4 <Motor_Brake>
    HAL_Delay(2000);
 80010f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010fa:	f001 fea7 	bl	8002e4c <HAL_Delay>
    
    // 反转：从慢到快再到慢
    sprintf(buffer, "Backward\n");
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	494b      	ldr	r1, [pc, #300]	@ (8001230 <main+0x2dc>)
 8001102:	4618      	mov	r0, r3
 8001104:	f006 ff54 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f8b8 	bl	8000280 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	b29a      	uxth	r2, r3
 8001114:	1d39      	adds	r1, r7, #4
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	483f      	ldr	r0, [pc, #252]	@ (8001218 <main+0x2c4>)
 800111c:	f005 fa28 	bl	8006570 <HAL_UART_Transmit>
    for (int speed = 40; speed <= 100; speed += 2) {
 8001120:	2328      	movs	r3, #40	@ 0x28
 8001122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001126:	e026      	b.n	8001176 <main+0x222>
    	ssd1306_Fill(Black);
 8001128:	2000      	movs	r0, #0
 800112a:	f001 f8ed 	bl	8002308 <ssd1306_Fill>
    	      sprintf(display_str1, "Speed: %d", speed);
 800112e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001132:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001136:	493a      	ldr	r1, [pc, #232]	@ (8001220 <main+0x2cc>)
 8001138:	4618      	mov	r0, r3
 800113a:	f006 ff39 	bl	8007fb0 <siprintf>
    	      ssd1306_SetCursor(0, 0);
 800113e:	2100      	movs	r1, #0
 8001140:	2000      	movs	r0, #0
 8001142:	f001 fa3d 	bl	80025c0 <ssd1306_SetCursor>
    	      ssd1306_WriteString(display_str1, Font_7x10, White);
 8001146:	4a37      	ldr	r2, [pc, #220]	@ (8001224 <main+0x2d0>)
 8001148:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 800114c:	2301      	movs	r3, #1
 800114e:	ca06      	ldmia	r2, {r1, r2}
 8001150:	f001 fa10 	bl	8002574 <ssd1306_WriteString>
    	      ssd1306_UpdateScreen(&hi2c3);
 8001154:	482d      	ldr	r0, [pc, #180]	@ (800120c <main+0x2b8>)
 8001156:	f001 f8fb 	bl	8002350 <ssd1306_UpdateScreen>

      Motor_Backward(speed);
 800115a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800115e:	b21b      	sxth	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fd15 	bl	8001b90 <Motor_Backward>
      HAL_Delay(200);
 8001166:	20c8      	movs	r0, #200	@ 0xc8
 8001168:	f001 fe70 	bl	8002e4c <HAL_Delay>
    for (int speed = 40; speed <= 100; speed += 2) {
 800116c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001170:	3302      	adds	r3, #2
 8001172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800117a:	2b64      	cmp	r3, #100	@ 0x64
 800117c:	ddd4      	ble.n	8001128 <main+0x1d4>
    }
    sprintf(buffer, "Backward Decreasing\n");
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	492c      	ldr	r1, [pc, #176]	@ (8001234 <main+0x2e0>)
 8001182:	4618      	mov	r0, r3
 8001184:	f006 ff14 	bl	8007fb0 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f878 	bl	8000280 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	1d39      	adds	r1, r7, #4
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	481f      	ldr	r0, [pc, #124]	@ (8001218 <main+0x2c4>)
 800119c:	f005 f9e8 	bl	8006570 <HAL_UART_Transmit>
    for (int speed = 100; speed >= 40; speed -= 2) {
 80011a0:	2364      	movs	r3, #100	@ 0x64
 80011a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80011a6:	e026      	b.n	80011f6 <main+0x2a2>
    	ssd1306_Fill(Black);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f001 f8ad 	bl	8002308 <ssd1306_Fill>
    	      sprintf(display_str1, "Speed: %d", speed);
 80011ae:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80011b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80011b6:	491a      	ldr	r1, [pc, #104]	@ (8001220 <main+0x2cc>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f006 fef9 	bl	8007fb0 <siprintf>
    	      ssd1306_SetCursor(0, 0);
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f001 f9fd 	bl	80025c0 <ssd1306_SetCursor>
    	      ssd1306_WriteString(display_str1, Font_7x10, White);
 80011c6:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <main+0x2d0>)
 80011c8:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80011cc:	2301      	movs	r3, #1
 80011ce:	ca06      	ldmia	r2, {r1, r2}
 80011d0:	f001 f9d0 	bl	8002574 <ssd1306_WriteString>
    	      ssd1306_UpdateScreen(&hi2c3);
 80011d4:	480d      	ldr	r0, [pc, #52]	@ (800120c <main+0x2b8>)
 80011d6:	f001 f8bb 	bl	8002350 <ssd1306_UpdateScreen>

      Motor_Backward(speed);
 80011da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fcd5 	bl	8001b90 <Motor_Backward>
      HAL_Delay(200);
 80011e6:	20c8      	movs	r0, #200	@ 0xc8
 80011e8:	f001 fe30 	bl	8002e4c <HAL_Delay>
    for (int speed = 100; speed >= 40; speed -= 2) {
 80011ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011f0:	3b02      	subs	r3, #2
 80011f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80011f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80011fa:	2b27      	cmp	r3, #39	@ 0x27
 80011fc:	dcd4      	bgt.n	80011a8 <main+0x254>
    }
    
    // 停止1秒
    Motor_Stop();
 80011fe:	f000 fca1 	bl	8001b44 <Motor_Stop>
    HAL_Delay(1000);
 8001202:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001206:	f001 fe21 	bl	8002e4c <HAL_Delay>
  {
 800120a:	e6e1      	b.n	8000fd0 <main+0x7c>
 800120c:	20000250 	.word	0x20000250
 8001210:	200002fc 	.word	0x200002fc
 8001214:	40020800 	.word	0x40020800
 8001218:	2000041c 	.word	0x2000041c
 800121c:	0800a264 	.word	0x0800a264
 8001220:	0800a270 	.word	0x0800a270
 8001224:	20000000 	.word	0x20000000
 8001228:	0800a27c 	.word	0x0800a27c
 800122c:	0800a290 	.word	0x0800a290
 8001230:	0800a298 	.word	0x0800a298
 8001234:	0800a2a4 	.word	0x0800a2a4

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	@ 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	@ 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f006 ff15 	bl	8008076 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <SystemClock_Config+0xd0>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	4a28      	ldr	r2, [pc, #160]	@ (8001308 <SystemClock_Config+0xd0>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	@ 0x40
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <SystemClock_Config+0xd0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <SystemClock_Config+0xd4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <SystemClock_Config+0xd4>)
 8001286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <SystemClock_Config+0xd4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129c:	2301      	movs	r3, #1
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2310      	movs	r3, #16
 80012a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a8:	2300      	movs	r3, #0
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012ac:	2310      	movs	r3, #16
 80012ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012b6:	2304      	movs	r3, #4
 80012b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ba:	2304      	movs	r3, #4
 80012bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fdee 	bl	8003ea4 <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ce:	f000 fb2f 	bl	8001930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 f850 	bl	8004394 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012fa:	f000 fb19 	bl	8001930 <Error_Handler>
  }
}
 80012fe:	bf00      	nop
 8001300:	3750      	adds	r7, #80	@ 0x50
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_I2C2_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_I2C2_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_I2C2_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <MX_I2C2_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_I2C2_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <MX_I2C2_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_I2C2_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <MX_I2C2_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_I2C2_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <MX_I2C2_Init+0x50>)
 800134e:	f002 f8fb 	bl	8003548 <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 faea 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200001fc 	.word	0x200001fc
 8001364:	40005800 	.word	0x40005800
 8001368:	000186a0 	.word	0x000186a0

0800136c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <MX_I2C3_Init+0x50>)
 8001372:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <MX_I2C3_Init+0x54>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_I2C3_Init+0x50>)
 8001378:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_I2C3_Init+0x58>)
 800137a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800137c:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_I2C3_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <MX_I2C3_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <MX_I2C3_Init+0x50>)
 800138a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800138e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <MX_I2C3_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <MX_I2C3_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <MX_I2C3_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <MX_I2C3_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	@ (80013bc <MX_I2C3_Init+0x50>)
 80013aa:	f002 f8cd 	bl	8003548 <HAL_I2C_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013b4:	f000 fabc 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000250 	.word	0x20000250
 80013c0:	40005c00 	.word	0x40005c00
 80013c4:	000186a0 	.word	0x000186a0

080013c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <MX_SPI1_Init+0x64>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <MX_SPI1_Init+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_SPI1_Init+0x64>)
 80013d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_SPI1_Init+0x64>)
 80013e8:	2202      	movs	r2, #2
 80013ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_SPI1_Init+0x64>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <MX_SPI1_Init+0x64>)
 80013f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_SPI1_Init+0x64>)
 80013fc:	2230      	movs	r2, #48	@ 0x30
 80013fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_SPI1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	@ (800142c <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_SPI1_Init+0x64>)
 8001414:	220a      	movs	r2, #10
 8001416:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <MX_SPI1_Init+0x64>)
 800141a:	f003 f99b 	bl	8004754 <HAL_SPI_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001424:	f000 fa84 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200002a4 	.word	0x200002a4
 8001430:	40013000 	.word	0x40013000

08001434 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001450:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <MX_TIM1_Init+0x98>)
 8001452:	4a1f      	ldr	r2, [pc, #124]	@ (80014d0 <MX_TIM1_Init+0x9c>)
 8001454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <MX_TIM1_Init+0x98>)
 8001458:	2253      	movs	r2, #83	@ 0x53
 800145a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_TIM1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM1_Init+0x98>)
 8001464:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001468:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_TIM1_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001470:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_TIM1_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_TIM1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_TIM1_Init+0x98>)
 800147e:	f003 ff3b 	bl	80052f8 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001488:	f000 fa52 	bl	8001930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	4619      	mov	r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <MX_TIM1_Init+0x98>)
 800149a:	f004 fbcf 	bl	8005c3c <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014a4:	f000 fa44 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_TIM1_Init+0x98>)
 80014b6:	f004 ff89 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014c0:	f000 fa36 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200002fc 	.word	0x200002fc
 80014d0:	40010000 	.word	0x40010000

080014d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	@ 0x30
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2224      	movs	r2, #36	@ 0x24
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f006 fdc7 	bl	8008076 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <MX_TIM2_Init+0xa4>)
 80014f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_TIM2_Init+0xa4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_TIM2_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8399;
 8001504:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_TIM2_Init+0xa4>)
 8001506:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800150a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_TIM2_Init+0xa4>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MX_TIM2_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001518:	2303      	movs	r3, #3
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001530:	2301      	movs	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	@ (8001578 <MX_TIM2_Init+0xa4>)
 8001544:	f004 f894 	bl	8005670 <HAL_TIM_Encoder_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800154e:	f000 f9ef 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	@ (8001578 <MX_TIM2_Init+0xa4>)
 8001560:	f004 ff34 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800156a:	f000 f9e1 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3730      	adds	r7, #48	@ 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000344 	.word	0x20000344

0800157c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	@ 0x30
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2224      	movs	r2, #36	@ 0x24
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f006 fd73 	bl	8008076 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <MX_TIM3_Init+0xa0>)
 800159a:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <MX_TIM3_Init+0xa4>)
 800159c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800159e:	4b1f      	ldr	r3, [pc, #124]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8399;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015ac:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80015b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015be:	2303      	movs	r3, #3
 80015c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d6:	2301      	movs	r3, #1
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015e2:	f107 030c 	add.w	r3, r7, #12
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <MX_TIM3_Init+0xa0>)
 80015ea:	f004 f841 	bl	8005670 <HAL_TIM_Encoder_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015f4:	f000 f99c 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_TIM3_Init+0xa0>)
 8001606:	f004 fee1 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001610:	f000 f98e 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	@ 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000038c 	.word	0x2000038c
 8001620:	40000400 	.word	0x40000400

08001624 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08e      	sub	sp, #56	@ 0x38
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
 8001650:	615a      	str	r2, [r3, #20]
 8001652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001654:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <MX_TIM4_Init+0x128>)
 8001656:	4a3e      	ldr	r2, [pc, #248]	@ (8001750 <MX_TIM4_Init+0x12c>)
 8001658:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800165a:	4b3c      	ldr	r3, [pc, #240]	@ (800174c <MX_TIM4_Init+0x128>)
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <MX_TIM4_Init+0x128>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8399;
 8001666:	4b39      	ldr	r3, [pc, #228]	@ (800174c <MX_TIM4_Init+0x128>)
 8001668:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800166c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166e:	4b37      	ldr	r3, [pc, #220]	@ (800174c <MX_TIM4_Init+0x128>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b35      	ldr	r3, [pc, #212]	@ (800174c <MX_TIM4_Init+0x128>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800167a:	4834      	ldr	r0, [pc, #208]	@ (800174c <MX_TIM4_Init+0x128>)
 800167c:	f003 fe3c 	bl	80052f8 <HAL_TIM_Base_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001686:	f000 f953 	bl	8001930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001690:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001694:	4619      	mov	r1, r3
 8001696:	482d      	ldr	r0, [pc, #180]	@ (800174c <MX_TIM4_Init+0x128>)
 8001698:	f004 fad0 	bl	8005c3c <HAL_TIM_ConfigClockSource>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016a2:	f000 f945 	bl	8001930 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016a6:	4829      	ldr	r0, [pc, #164]	@ (800174c <MX_TIM4_Init+0x128>)
 80016a8:	f003 fed8 	bl	800545c <HAL_TIM_PWM_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80016b2:	f000 f93d 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016be:	f107 0320 	add.w	r3, r7, #32
 80016c2:	4619      	mov	r1, r3
 80016c4:	4821      	ldr	r0, [pc, #132]	@ (800174c <MX_TIM4_Init+0x128>)
 80016c6:	f004 fe81 	bl	80063cc <HAL_TIMEx_MasterConfigSynchronization>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80016d0:	f000 f92e 	bl	8001930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d4:	2360      	movs	r3, #96	@ 0x60
 80016d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	4818      	ldr	r0, [pc, #96]	@ (800174c <MX_TIM4_Init+0x128>)
 80016ec:	f004 f9e4 	bl	8005ab8 <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80016f6:	f000 f91b 	bl	8001930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	2204      	movs	r2, #4
 80016fe:	4619      	mov	r1, r3
 8001700:	4812      	ldr	r0, [pc, #72]	@ (800174c <MX_TIM4_Init+0x128>)
 8001702:	f004 f9d9 	bl	8005ab8 <HAL_TIM_PWM_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800170c:	f000 f910 	bl	8001930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2208      	movs	r2, #8
 8001714:	4619      	mov	r1, r3
 8001716:	480d      	ldr	r0, [pc, #52]	@ (800174c <MX_TIM4_Init+0x128>)
 8001718:	f004 f9ce 	bl	8005ab8 <HAL_TIM_PWM_ConfigChannel>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001722:	f000 f905 	bl	8001930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	220c      	movs	r2, #12
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	@ (800174c <MX_TIM4_Init+0x128>)
 800172e:	f004 f9c3 	bl	8005ab8 <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001738:	f000 f8fa 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <MX_TIM4_Init+0x128>)
 800173e:	f001 f951 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3738      	adds	r7, #56	@ 0x38
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200003d4 	.word	0x200003d4
 8001750:	40000800 	.word	0x40000800

08001754 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001758:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 800175a:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <MX_USART6_UART_Init+0x50>)
 800175c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001760:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001764:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800178a:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <MX_USART6_UART_Init+0x4c>)
 800178c:	f004 fea0 	bl	80064d0 <HAL_UART_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001796:	f000 f8cb 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000041c 	.word	0x2000041c
 80017a4:	40011400 	.word	0x40011400

080017a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
 80017bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b3e      	ldr	r3, [pc, #248]	@ (80018bc <MX_GPIO_Init+0x114>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	4a3d      	ldr	r2, [pc, #244]	@ (80018bc <MX_GPIO_Init+0x114>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ce:	4b3b      	ldr	r3, [pc, #236]	@ (80018bc <MX_GPIO_Init+0x114>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	4b37      	ldr	r3, [pc, #220]	@ (80018bc <MX_GPIO_Init+0x114>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a36      	ldr	r2, [pc, #216]	@ (80018bc <MX_GPIO_Init+0x114>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <MX_GPIO_Init+0x114>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	4b30      	ldr	r3, [pc, #192]	@ (80018bc <MX_GPIO_Init+0x114>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a2f      	ldr	r2, [pc, #188]	@ (80018bc <MX_GPIO_Init+0x114>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <MX_GPIO_Init+0x114>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2110      	movs	r1, #16
 8001816:	482a      	ldr	r0, [pc, #168]	@ (80018c0 <MX_GPIO_Init+0x118>)
 8001818:	f001 fe64 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2180      	movs	r1, #128	@ 0x80
 8001820:	4828      	ldr	r0, [pc, #160]	@ (80018c4 <MX_GPIO_Init+0x11c>)
 8001822:	f001 fe5f 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001826:	2310      	movs	r3, #16
 8001828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	4619      	mov	r1, r3
 800183c:	4820      	ldr	r0, [pc, #128]	@ (80018c0 <MX_GPIO_Init+0x118>)
 800183e:	f001 fccd 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001842:	2302      	movs	r3, #2
 8001844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001846:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	4619      	mov	r1, r3
 8001856:	481c      	ldr	r0, [pc, #112]	@ (80018c8 <MX_GPIO_Init+0x120>)
 8001858:	f001 fcc0 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4619      	mov	r1, r3
 8001872:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <MX_GPIO_Init+0x11c>)
 8001874:	f001 fcb2 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800187c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800187e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4619      	mov	r1, r3
 800188e:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <MX_GPIO_Init+0x118>)
 8001890:	f001 fca4 	bl	80031dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2007      	movs	r0, #7
 800189a:	f001 fbd6 	bl	800304a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800189e:	2007      	movs	r0, #7
 80018a0:	f001 fbef 	bl	8003082 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2028      	movs	r0, #40	@ 0x28
 80018aa:	f001 fbce 	bl	800304a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ae:	2028      	movs	r0, #40	@ 0x28
 80018b0:	f001 fbe7 	bl	8003082 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020400 	.word	0x40020400

080018cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d102      	bne.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
	}
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	200002fc 	.word	0x200002fc
 80018f4:	20000464 	.word	0x20000464

080018f8 <_write>:
int _write(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e009      	b.n	800191e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fac8 	bl	8000ea8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	dbf1      	blt.n	800190a <_write+0x12>
	}
	return len;
 8001926:	687b      	ldr	r3, [r7, #4]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
}
 8001936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <Error_Handler+0x8>

0800193c <Motor_Init>:
  * @brief  Initialize motor driver
  * @param  None
  * @retval None
  */
void Motor_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    // Start PWM generation on all TIM4 channels
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);  // PWMB1
 8001940:	2100      	movs	r1, #0
 8001942:	480d      	ldr	r0, [pc, #52]	@ (8001978 <Motor_Init+0x3c>)
 8001944:	f003 fde4 	bl	8005510 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);  // PWMB2
 8001948:	2104      	movs	r1, #4
 800194a:	480b      	ldr	r0, [pc, #44]	@ (8001978 <Motor_Init+0x3c>)
 800194c:	f003 fde0 	bl	8005510 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);  // PWMA1
 8001950:	2108      	movs	r1, #8
 8001952:	4809      	ldr	r0, [pc, #36]	@ (8001978 <Motor_Init+0x3c>)
 8001954:	f003 fddc 	bl	8005510 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);  // PWMA2
 8001958:	210c      	movs	r1, #12
 800195a:	4807      	ldr	r0, [pc, #28]	@ (8001978 <Motor_Init+0x3c>)
 800195c:	f003 fdd8 	bl	8005510 <HAL_TIM_PWM_Start>
    
    // Initialize motors to stop state
    Motor_Stop();
 8001960:	f000 f8f0 	bl	8001b44 <Motor_Stop>
    
    // Initialize current speeds
    current_speeds.left_speed = 0;
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <Motor_Init+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	801a      	strh	r2, [r3, #0]
    current_speeds.right_speed = 0;
 800196a:	4b04      	ldr	r3, [pc, #16]	@ (800197c <Motor_Init+0x40>)
 800196c:	2200      	movs	r2, #0
 800196e:	805a      	strh	r2, [r3, #2]
    
    // Initialize encoder functionality
    Encoder_Init();
 8001970:	f000 f806 	bl	8001980 <Encoder_Init>
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200003d4 	.word	0x200003d4
 800197c:	20000468 	.word	0x20000468

08001980 <Encoder_Init>:
  * @brief  Initialize encoder functionality
  * @param  None
  * @retval None
  */
void Encoder_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    // Start encoder timers
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);  // Left encoder (TIM2)
 8001984:	213c      	movs	r1, #60	@ 0x3c
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <Encoder_Init+0x1c>)
 8001988:	f003 ff18 	bl	80057bc <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);  // Right encoder (TIM3)
 800198c:	213c      	movs	r1, #60	@ 0x3c
 800198e:	4804      	ldr	r0, [pc, #16]	@ (80019a0 <Encoder_Init+0x20>)
 8001990:	f003 ff14 	bl	80057bc <HAL_TIM_Encoder_Start>
    
    // Reset encoder data
    Encoder_Reset();
 8001994:	f000 f806 	bl	80019a4 <Encoder_Reset>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000344 	.word	0x20000344
 80019a0:	2000038c 	.word	0x2000038c

080019a4 <Encoder_Reset>:
  * @brief  Reset encoder data
  * @param  None
  * @retval None
  */
void Encoder_Reset(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COUNTER(&htim2, 32768);  // Set to middle value to handle negative counts
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <Encoder_Reset+0x50>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim3, 32768);
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <Encoder_Reset+0x54>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019ba:	625a      	str	r2, [r3, #36]	@ 0x24
    
    encoder_data.left_encoder = 0;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <Encoder_Reset+0x58>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
    encoder_data.right_encoder = 0;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <Encoder_Reset+0x58>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
    encoder_data.left_encoder_prev = 0;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <Encoder_Reset+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
    encoder_data.right_encoder_prev = 0;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <Encoder_Reset+0x58>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
    encoder_data.left_speed_rpm = 0.0f;
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <Encoder_Reset+0x58>)
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
    encoder_data.right_speed_rpm = 0.0f;
 80019dc:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <Encoder_Reset+0x58>)
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
    
    last_encoder_update_time = HAL_GetTick();
 80019e4:	f001 fa26 	bl	8002e34 <HAL_GetTick>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <Encoder_Reset+0x5c>)
 80019ec:	6013      	str	r3, [r2, #0]
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000344 	.word	0x20000344
 80019f8:	2000038c 	.word	0x2000038c
 80019fc:	2000046c 	.word	0x2000046c
 8001a00:	20000484 	.word	0x20000484

08001a04 <Motor_SpeedToPWMDiff>:
  * @brief  Convert speed percentage to PWM value
  * @param  speed: Speed percentage (-100 to 100)
  * @retval PWM value (0 to PWM_PERIOD_VALUE)
  */
static uint32_t Motor_SpeedToPWMDiff(int16_t speed)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
    // Get absolute value for PWM calculation
    int16_t abs_speed = (speed < 0) ? -speed : speed;
 8001a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bfb8      	it	lt
 8001a16:	425b      	neglt	r3, r3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	81fb      	strh	r3, [r7, #14]
    
    // Clamp speed to valid range
    //abs_speed = CLAMP(abs_speed, 0, MOTOR_MAX_SPEED);
    
    // Convert percentage (0-100) to PWM value (0-PWM_PERIOD_VALUE)
    uint32_t pwm_value = (uint32_t)((abs_speed * PWM_PERIOD_VALUE) / 100);
 8001a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a20:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <Motor_SpeedToPWMDiff+0x40>)
 8001a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2e:	1152      	asrs	r2, r2, #5
 8001a30:	17db      	asrs	r3, r3, #31
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	60bb      	str	r3, [r7, #8]
    
    return pwm_value;
 8001a36:	68bb      	ldr	r3, [r7, #8]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	51eb851f 	.word	0x51eb851f

08001a48 <Motor_SetPWM>:
  * @param  motor: Motor selector (MOTOR_LEFT or MOTOR_RIGHT)
  * @param  speed: Speed percentage (-100 to 100, negative for backward)
  * @retval None
  */
static void Motor_SetPWM(MotorSelector_t motor, int16_t speed)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	460a      	mov	r2, r1
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	80bb      	strh	r3, [r7, #4]
    // Clamp speed to valid range
    //speed = CLAMP(speed, MOTOR_MIN_SPEED, MOTOR_MAX_SPEED);
    
    // Correct direction for right motor if physically reversed
    if (motor == MOTOR_RIGHT) {
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d103      	bne.n	8001a66 <Motor_SetPWM+0x1e>
        speed = -speed;  // Uncomment this line if right motor direction is physically reversed
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	425b      	negs	r3, r3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	80bb      	strh	r3, [r7, #4]
    }
    
    uint32_t pwm_value = Motor_SpeedToPWMDiff(speed);
 8001a66:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ffca 	bl	8001a04 <Motor_SpeedToPWMDiff>
 8001a70:	60f8      	str	r0, [r7, #12]
    uint32_t pwm_in1, pwm_in2;
    
    if (speed > 0) {
 8001a72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	dd04      	ble.n	8001a84 <Motor_SetPWM+0x3c>
        // Forward direction: IN1=PWM, IN2=0
        pwm_in1 = pwm_value;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	617b      	str	r3, [r7, #20]
        pwm_in2 = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e00c      	b.n	8001a9e <Motor_SetPWM+0x56>
    } else if (speed < 0) {
 8001a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da04      	bge.n	8001a96 <Motor_SetPWM+0x4e>
        // Backward direction: IN1=0, IN2=PWM
        pwm_in1 = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
        pwm_in2 = pwm_value;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e003      	b.n	8001a9e <Motor_SetPWM+0x56>
    } else {
        // Stop: IN1=0, IN2=0
        pwm_in1 = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
        pwm_in2 = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
    }
    
    // Set PWM values for specified motor
    if (motor == MOTOR_LEFT) {
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d108      	bne.n	8001ab6 <Motor_SetPWM+0x6e>
        // Left motor: PWMA1 (TIM4_CH3), PWMA2 (TIM4_CH4)
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_in1);
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <Motor_SetPWM+0x88>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_in2);
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <Motor_SetPWM+0x88>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40
    } else {
        // Right motor: PWMB1 (TIM4_CH1), PWMB2 (TIM4_CH2)
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_in1);
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_in2);
    }
}
 8001ab4:	e007      	b.n	8001ac6 <Motor_SetPWM+0x7e>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_in1);
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <Motor_SetPWM+0x88>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_in2);
 8001abe:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <Motor_SetPWM+0x88>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200003d4 	.word	0x200003d4

08001ad4 <Motor_SetSpeed>:
  * @param  motor: Motor selector (MOTOR_LEFT or MOTOR_RIGHT)
  * @param  speed: Speed percentage (-100 to 100, negative for backward)
  * @retval None
  */
void Motor_SetSpeed(MotorSelector_t motor, int16_t speed)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	460a      	mov	r2, r1
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	80bb      	strh	r3, [r7, #4]
    // Update current speeds
    if (motor == MOTOR_LEFT) {
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <Motor_SetSpeed+0x1e>
        current_speeds.left_speed = speed;
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <Motor_SetSpeed+0x3c>)
 8001aec:	88bb      	ldrh	r3, [r7, #4]
 8001aee:	8013      	strh	r3, [r2, #0]
 8001af0:	e002      	b.n	8001af8 <Motor_SetSpeed+0x24>
    } else {
        current_speeds.right_speed = speed;
 8001af2:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <Motor_SetSpeed+0x3c>)
 8001af4:	88bb      	ldrh	r3, [r7, #4]
 8001af6:	8053      	strh	r3, [r2, #2]
    }
    
    // Set PWM values
    Motor_SetPWM(motor, speed);
 8001af8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ffa1 	bl	8001a48 <Motor_SetPWM>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000468 	.word	0x20000468

08001b14 <Motor_SetSpeeds>:
  * @param  left_speed: Left motor speed (-100 to 100)
  * @param  right_speed: Right motor speed (-100 to 100)
  * @retval None
  */
void Motor_SetSpeeds(int16_t left_speed, int16_t right_speed)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	80fb      	strh	r3, [r7, #6]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80bb      	strh	r3, [r7, #4]
    Motor_SetSpeed(MOTOR_LEFT, left_speed);
 8001b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff ffd2 	bl	8001ad4 <Motor_SetSpeed>
    Motor_SetSpeed(MOTOR_RIGHT, right_speed);
 8001b30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b34:	4619      	mov	r1, r3
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff ffcc 	bl	8001ad4 <Motor_SetSpeed>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <Motor_Stop>:
  * @brief  Stop both motors
  * @param  None
  * @retval None
  */
void Motor_Stop(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
    Motor_SetSpeeds(0, 0);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff ffe2 	bl	8001b14 <Motor_SetSpeeds>
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <Motor_Forward>:
  * @brief  Move both motors forward
  * @param  speed: Forward speed (0 to 100)
  * @retval None
  */
void Motor_Forward(int16_t speed)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
    speed = CLAMP(speed, 0, MOTOR_MAX_SPEED);
 8001b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db06      	blt.n	8001b74 <Motor_Forward+0x20>
 8001b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	bfa8      	it	ge
 8001b6e:	2364      	movge	r3, #100	@ 0x64
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	e000      	b.n	8001b76 <Motor_Forward+0x22>
 8001b74:	2300      	movs	r3, #0
 8001b76:	80fb      	strh	r3, [r7, #6]
    Motor_SetSpeeds(speed, speed);
 8001b78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ffc6 	bl	8001b14 <Motor_SetSpeeds>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <Motor_Backward>:
  * @brief  Move both motors backward
  * @param  speed: Backward speed (0 to 100)
  * @retval None
  */
void Motor_Backward(int16_t speed)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
    speed = CLAMP(speed, 0, MOTOR_MAX_SPEED);
 8001b9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db06      	blt.n	8001bb0 <Motor_Backward+0x20>
 8001ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba6:	2b64      	cmp	r3, #100	@ 0x64
 8001ba8:	bfa8      	it	ge
 8001baa:	2364      	movge	r3, #100	@ 0x64
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	e000      	b.n	8001bb2 <Motor_Backward+0x22>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	80fb      	strh	r3, [r7, #6]
    Motor_SetSpeeds(-speed, -speed);
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	425b      	negs	r3, r3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	88fa      	ldrh	r2, [r7, #6]
 8001bbe:	4252      	negs	r2, r2
 8001bc0:	b292      	uxth	r2, r2
 8001bc2:	b212      	sxth	r2, r2
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ffa4 	bl	8001b14 <Motor_SetSpeeds>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <Motor_Brake>:
  * @brief  Brake both motors
  * @param  None
  * @retval None
  */
void Motor_Brake(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
    // For AT8236, braking is achieved by setting all PWM signals to 1
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, PWM_PERIOD_VALUE);  // PWMB1
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c18 <Motor_Brake+0x44>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001be0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWM_PERIOD_VALUE);  // PWMB2
 8001be2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <Motor_Brake+0x44>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001bea:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, PWM_PERIOD_VALUE);  // PWMA1
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <Motor_Brake+0x44>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001bf4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, PWM_PERIOD_VALUE);  // PWMA2
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <Motor_Brake+0x44>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    // Update current speeds
    current_speeds.left_speed = 0;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <Motor_Brake+0x48>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	801a      	strh	r2, [r3, #0]
    current_speeds.right_speed = 0;
 8001c06:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <Motor_Brake+0x48>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	805a      	strh	r2, [r3, #2]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	200003d4 	.word	0x200003d4
 8001c1c:	20000468 	.word	0x20000468

08001c20 <MPU6500_TestConnection>:
  * @brief  Test MPU6500 connection by reading WHO_AM_I register
  * @param  None
  * @retval 1 if connected (WHO_AM_I = 0x70), 0 if not connected
  */
uint8_t MPU6500_TestConnection(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
    uint8_t who_am_i;
    MPU6500_ReadReg(MPU6500_RA_WHO_AM_I, &who_am_i, 1);
 8001c26:	1dfb      	adds	r3, r7, #7
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	2075      	movs	r0, #117	@ 0x75
 8001c2e:	f000 f997 	bl	8001f60 <MPU6500_ReadReg>
    return (who_am_i == 0x70) ? 1 : 0;  // MPU6500 WHO_AM_I should be 0x70
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b70      	cmp	r3, #112	@ 0x70
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <DMP_Init_SPI>:
  * @retval None
  * @note   This function initializes the DMP without loading firmware.
  *         For full DMP functionality, you would need to load the DMP firmware.
  */
void DMP_Init_SPI(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
    uint8_t temp;
    
    // Test connection first
    if (!MPU6500_TestConnection()) {
 8001c4e:	f7ff ffe7 	bl	8001c20 <MPU6500_TestConnection>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d039      	beq.n	8001ccc <DMP_Init_SPI+0x84>
        return; // MPU6500 not found
    }
    
    // Reset device
    MPU6500_WriteReg(MPU6500_RA_PWR_MGMT_1, 0x80);
 8001c58:	2180      	movs	r1, #128	@ 0x80
 8001c5a:	206b      	movs	r0, #107	@ 0x6b
 8001c5c:	f000 f95a 	bl	8001f14 <MPU6500_WriteReg>
    HAL_Delay(100);
 8001c60:	2064      	movs	r0, #100	@ 0x64
 8001c62:	f001 f8f3 	bl	8002e4c <HAL_Delay>
    
    // Wake up device and set clock source to PLL with Y Gyro reference
    MPU6500_WriteReg(MPU6500_RA_PWR_MGMT_1, 0x02);
 8001c66:	2102      	movs	r1, #2
 8001c68:	206b      	movs	r0, #107	@ 0x6b
 8001c6a:	f000 f953 	bl	8001f14 <MPU6500_WriteReg>
    HAL_Delay(10);
 8001c6e:	200a      	movs	r0, #10
 8001c70:	f001 f8ec 	bl	8002e4c <HAL_Delay>
    
    // Set gyroscope full scale range to ±2000°/s
    MPU6500_WriteReg(MPU6500_RA_GYRO_CONFIG, 0x18);
 8001c74:	2118      	movs	r1, #24
 8001c76:	201b      	movs	r0, #27
 8001c78:	f000 f94c 	bl	8001f14 <MPU6500_WriteReg>
    
    // Set accelerometer full scale range to ±2g
    MPU6500_WriteReg(MPU6500_RA_ACCEL_CONFIG, 0x00);
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	201c      	movs	r0, #28
 8001c80:	f000 f948 	bl	8001f14 <MPU6500_WriteReg>
    
    // Reset FIFO and DMP
    MPU6500_ReadReg(MPU6500_RA_USER_CTRL, &temp, 1);
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	2201      	movs	r2, #1
 8001c88:	4619      	mov	r1, r3
 8001c8a:	206a      	movs	r0, #106	@ 0x6a
 8001c8c:	f000 f968 	bl	8001f60 <MPU6500_ReadReg>
    temp |= (BIT_FIFO_RST | BIT_DMP_RST);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	f043 030c 	orr.w	r3, r3, #12
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	71fb      	strb	r3, [r7, #7]
    MPU6500_WriteReg(MPU6500_RA_USER_CTRL, temp);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	206a      	movs	r0, #106	@ 0x6a
 8001ca0:	f000 f938 	bl	8001f14 <MPU6500_WriteReg>
    HAL_Delay(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f001 f8d1 	bl	8002e4c <HAL_Delay>
    // 2. Configure DMP features
    // 3. Set up FIFO
    // This is a basic initialization that prepares the sensor
    
    // Initialize quaternion
    q0_dmp = 1.0f;
 8001caa:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd4 <DMP_Init_SPI+0x8c>)
 8001cac:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cb0:	601a      	str	r2, [r3, #0]
    q1_dmp = 0.0f;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <DMP_Init_SPI+0x90>)
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
    q2_dmp = 0.0f;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <DMP_Init_SPI+0x94>)
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
    q3_dmp = 0.0f;
 8001cc2:	4b07      	ldr	r3, [pc, #28]	@ (8001ce0 <DMP_Init_SPI+0x98>)
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e000      	b.n	8001cce <DMP_Init_SPI+0x86>
        return; // MPU6500 not found
 8001ccc:	bf00      	nop
}
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	200004fc 	.word	0x200004fc
 8001cdc:	20000500 	.word	0x20000500
 8001ce0:	20000504 	.word	0x20000504

08001ce4 <MPU6500_Init>:
  * @brief  Initialize MPU6500 sensor
  * @param  None
  * @retval None
  */
void MPU6500_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001ce8:	2064      	movs	r0, #100	@ 0x64
 8001cea:	f001 f8af 	bl	8002e4c <HAL_Delay>
	
	// 避免睡眠模式并使用 Gyro 时钟源 / Disable sleep mode and use Gyro clock source
	// 地址：0x6B（PWR_MGMT_1）
	// 二进制值：00000010（CLKSEL=010，选择 X 轴 Gyro 作为时钟源，禁用睡眠模式）
	MPU6500_WriteReg(0x6B, 0x02);
 8001cee:	2102      	movs	r1, #2
 8001cf0:	206b      	movs	r0, #107	@ 0x6b
 8001cf2:	f000 f90f 	bl	8001f14 <MPU6500_WriteReg>
	
	// 设置陀螺仪量程为 ±2000°/s / Set gyroscope range to ±2000°/s
	// 地址：0x1B（GYRO_CONFIG）
	// 二进制值：00011000（FS_SEL=11，表示 ±2000°/s）
	MPU6500_WriteReg(0x1B, 0x18);
 8001cf6:	2118      	movs	r1, #24
 8001cf8:	201b      	movs	r0, #27
 8001cfa:	f000 f90b 	bl	8001f14 <MPU6500_WriteReg>
	
	// 设置加速度计量程为 ±2g / Set accelerometer range to ±2g
	// 地址：0x1C（ACCEL_CONFIG）
	// 二进制值：00000000（AFS_SEL=00，表示 ±2g）
	MPU6500_WriteReg(0x1C, 0x00);
 8001cfe:	2100      	movs	r1, #0
 8001d00:	201c      	movs	r0, #28
 8001d02:	f000 f907 	bl	8001f14 <MPU6500_WriteReg>
	
	// 激活 DMP / Activate DMP
	// 地址：0x6A（USER_CTRL）
	// 二进制值：10000000（启用 DMP，禁用其他功能）
	MPU6500_WriteReg(0x6A, 0x80);
 8001d06:	2180      	movs	r1, #128	@ 0x80
 8001d08:	206a      	movs	r0, #106	@ 0x6a
 8001d0a:	f000 f903 	bl	8001f14 <MPU6500_WriteReg>
	
	/*
	mpu_set_gyro_fsr(3);
	mpu_set_accel_fsr(2);
	*/
	imu_data.q0 = 1.0f; // Initialize quaternions
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <MPU6500_Init+0x54>)
 8001d10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28
	imu_data.q1 = 0.0f;
 8001d16:	4b08      	ldr	r3, [pc, #32]	@ (8001d38 <MPU6500_Init+0x54>)
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	imu_data.q2 = 0.0f;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <MPU6500_Init+0x54>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30
	imu_data.q3 = 0.0f;
 8001d26:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <MPU6500_Init+0x54>)
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	@ 0x34

	MPU6500_OffsetCall();
 8001d2e:	f000 f805 	bl	8001d3c <MPU6500_OffsetCall>
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200004a8 	.word	0x200004a8

08001d3c <MPU6500_OffsetCall>:
  * @brief  Calculate offset values for MPU6500
  * @param  None
  * @retval None
  */
void MPU6500_OffsetCall(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
	mpu_data.ax_offset = 0;
 8001d42:	4b71      	ldr	r3, [pc, #452]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset = 0;
 8001d48:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset = 0;
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset = 0;
 8001d54:	4b6c      	ldr	r3, [pc, #432]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset = 0;
 8001d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset = 0;
 8001d60:	4b69      	ldr	r3, [pc, #420]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	83da      	strh	r2, [r3, #30]
	int i;
	for (i=0; i<300;i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e07c      	b.n	8001e66 <MPU6500_OffsetCall+0x12a>
	{
		MPU6500_ReadReg(59, mpu_buffer, sizeof(mpu_buffer));
 8001d6c:	220e      	movs	r2, #14
 8001d6e:	4967      	ldr	r1, [pc, #412]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001d70:	203b      	movs	r0, #59	@ 0x3b
 8001d72:	f000 f8f5 	bl	8001f60 <MPU6500_ReadReg>

		mpu_data.ax_offset += mpu_buffer[0] << 8 | mpu_buffer[1];
 8001d76:	4b64      	ldr	r3, [pc, #400]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b63      	ldr	r3, [pc, #396]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	b219      	sxth	r1, r3
 8001d86:	4b61      	ldr	r3, [pc, #388]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4413      	add	r3, r2
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	4b5b      	ldr	r3, [pc, #364]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d9a:	829a      	strh	r2, [r3, #20]
		mpu_data.ay_offset += mpu_buffer[2] << 8 | mpu_buffer[3];
 8001d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001d9e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b59      	ldr	r3, [pc, #356]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001da6:	789b      	ldrb	r3, [r3, #2]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b219      	sxth	r1, r3
 8001dac:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001dae:	78db      	ldrb	r3, [r3, #3]
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	430b      	orrs	r3, r1
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b21a      	sxth	r2, r3
 8001dbe:	4b52      	ldr	r3, [pc, #328]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001dc0:	82da      	strh	r2, [r3, #22]
		mpu_data.az_offset += mpu_buffer[4] << 8 | mpu_buffer[5];
 8001dc2:	4b51      	ldr	r3, [pc, #324]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001dc4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	4b50      	ldr	r3, [pc, #320]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	b219      	sxth	r1, r3
 8001dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001dd4:	795b      	ldrb	r3, [r3, #5]
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	4b48      	ldr	r3, [pc, #288]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001de6:	831a      	strh	r2, [r3, #24]

		mpu_data.gx_offset += mpu_buffer[8]  << 8 | mpu_buffer[9];
 8001de8:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001dea:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001df2:	7a1b      	ldrb	r3, [r3, #8]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	b219      	sxth	r1, r3
 8001df8:	4b44      	ldr	r3, [pc, #272]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001dfa:	7a5b      	ldrb	r3, [r3, #9]
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e0c:	835a      	strh	r2, [r3, #26]
		mpu_data.gy_offset += mpu_buffer[10] << 8 | mpu_buffer[11];
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001e18:	7a9b      	ldrb	r3, [r3, #10]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b219      	sxth	r1, r3
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001e20:	7adb      	ldrb	r3, [r3, #11]
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	430b      	orrs	r3, r1
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b35      	ldr	r3, [pc, #212]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e32:	839a      	strh	r2, [r3, #28]
		mpu_data.gz_offset += mpu_buffer[12] << 8 | mpu_buffer[13];
 8001e34:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001e3e:	7b1b      	ldrb	r3, [r3, #12]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b219      	sxth	r1, r3
 8001e44:	4b31      	ldr	r3, [pc, #196]	@ (8001f0c <MPU6500_OffsetCall+0x1d0>)
 8001e46:	7b5b      	ldrb	r3, [r3, #13]
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4413      	add	r3, r2
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e58:	83da      	strh	r2, [r3, #30]

		HAL_Delay(5);
 8001e5a:	2005      	movs	r0, #5
 8001e5c:	f000 fff6 	bl	8002e4c <HAL_Delay>
	for (i=0; i<300;i++)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3301      	adds	r3, #1
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001e6c:	f6ff af7e 	blt.w	8001d6c <MPU6500_OffsetCall+0x30>
	}
	mpu_data.ax_offset=mpu_data.ax_offset / 300;
 8001e70:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e72:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e76:	4a26      	ldr	r2, [pc, #152]	@ (8001f10 <MPU6500_OffsetCall+0x1d4>)
 8001e78:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7c:	1152      	asrs	r2, r2, #5
 8001e7e:	17db      	asrs	r3, r3, #31
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	4b20      	ldr	r3, [pc, #128]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e86:	829a      	strh	r2, [r3, #20]
	mpu_data.ay_offset=mpu_data.ay_offset / 300;
 8001e88:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e8a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e8e:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <MPU6500_OffsetCall+0x1d4>)
 8001e90:	fb82 1203 	smull	r1, r2, r2, r3
 8001e94:	1152      	asrs	r2, r2, #5
 8001e96:	17db      	asrs	r3, r3, #31
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001e9e:	82da      	strh	r2, [r3, #22]
	mpu_data.az_offset=mpu_data.az_offset / 300;
 8001ea0:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001ea2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f10 <MPU6500_OffsetCall+0x1d4>)
 8001ea8:	fb82 1203 	smull	r1, r2, r2, r3
 8001eac:	1152      	asrs	r2, r2, #5
 8001eae:	17db      	asrs	r3, r3, #31
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001eb6:	831a      	strh	r2, [r3, #24]
	mpu_data.gx_offset=mpu_data.gx_offset / 300;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001eba:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ebe:	4a14      	ldr	r2, [pc, #80]	@ (8001f10 <MPU6500_OffsetCall+0x1d4>)
 8001ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec4:	1152      	asrs	r2, r2, #5
 8001ec6:	17db      	asrs	r3, r3, #31
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001ece:	835a      	strh	r2, [r3, #26]
	mpu_data.gy_offset=mpu_data.gx_offset / 300;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001ed2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <MPU6500_OffsetCall+0x1d4>)
 8001ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8001edc:	1152      	asrs	r2, r2, #5
 8001ede:	17db      	asrs	r3, r3, #31
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001ee6:	839a      	strh	r2, [r3, #28]
	mpu_data.gz_offset=mpu_data.gz_offset / 300;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001eea:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001eee:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <MPU6500_OffsetCall+0x1d4>)
 8001ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef4:	1152      	asrs	r2, r2, #5
 8001ef6:	17db      	asrs	r3, r3, #31
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	4b02      	ldr	r3, [pc, #8]	@ (8001f08 <MPU6500_OffsetCall+0x1cc>)
 8001efe:	83da      	strh	r2, [r3, #30]
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000488 	.word	0x20000488
 8001f0c:	200004ec 	.word	0x200004ec
 8001f10:	1b4e81b5 	.word	0x1b4e81b5

08001f14 <MPU6500_WriteReg>:
  * @param  reg: Register address
  * @param  data: Data to write
  * @retval None
  */
void MPU6500_WriteReg(uint8_t reg, uint8_t data)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	71fb      	strb	r3, [r7, #7]
 8001f20:	4613      	mov	r3, r2
 8001f22:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2110      	movs	r1, #16
 8001f28:	480b      	ldr	r0, [pc, #44]	@ (8001f58 <MPU6500_WriteReg+0x44>)
 8001f2a:	f001 fadb 	bl	80034e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001f2e:	1df9      	adds	r1, r7, #7
 8001f30:	2364      	movs	r3, #100	@ 0x64
 8001f32:	2201      	movs	r2, #1
 8001f34:	4809      	ldr	r0, [pc, #36]	@ (8001f5c <MPU6500_WriteReg+0x48>)
 8001f36:	f002 fc96 	bl	8004866 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001f3a:	1db9      	adds	r1, r7, #6
 8001f3c:	2364      	movs	r3, #100	@ 0x64
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4806      	ldr	r0, [pc, #24]	@ (8001f5c <MPU6500_WriteReg+0x48>)
 8001f42:	f002 fc90 	bl	8004866 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	2110      	movs	r1, #16
 8001f4a:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <MPU6500_WriteReg+0x44>)
 8001f4c:	f001 faca 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	200002a4 	.word	0x200002a4

08001f60 <MPU6500_ReadReg>:
  * @param  data: Pointer to data buffer
  * @param  len: Length of data to read
  * @retval None
  */
void MPU6500_ReadReg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2110      	movs	r1, #16
 8001f7e:	480d      	ldr	r0, [pc, #52]	@ (8001fb4 <MPU6500_ReadReg+0x54>)
 8001f80:	f001 fab0 	bl	80034e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001f84:	f107 010f 	add.w	r1, r7, #15
 8001f88:	2364      	movs	r3, #100	@ 0x64
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	480a      	ldr	r0, [pc, #40]	@ (8001fb8 <MPU6500_ReadReg+0x58>)
 8001f8e:	f002 fc6a 	bl	8004866 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8001f92:	79bb      	ldrb	r3, [r7, #6]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	2364      	movs	r3, #100	@ 0x64
 8001f98:	6839      	ldr	r1, [r7, #0]
 8001f9a:	4807      	ldr	r0, [pc, #28]	@ (8001fb8 <MPU6500_ReadReg+0x58>)
 8001f9c:	f002 fda7 	bl	8004aee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	4803      	ldr	r0, [pc, #12]	@ (8001fb4 <MPU6500_ReadReg+0x54>)
 8001fa6:	f001 fa9d 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	200002a4 	.word	0x200002a4

08001fbc <MPU6500_InitStructures>:
  * @brief  Initialize MPU and IMU data structures
  * @param  None
  * @retval None
  */
void MPU6500_InitStructures(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
    // 初始化 mpu_data_t 结构体
    mpu_data.ax = 0;
 8001fc0:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	801a      	strh	r2, [r3, #0]
    mpu_data.ay = 0;
 8001fc6:	4b32      	ldr	r3, [pc, #200]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	805a      	strh	r2, [r3, #2]
    mpu_data.az = 0;
 8001fcc:	4b30      	ldr	r3, [pc, #192]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	809a      	strh	r2, [r3, #4]

    mpu_data.mx = 0;
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	80da      	strh	r2, [r3, #6]
    mpu_data.my = 0;
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	811a      	strh	r2, [r3, #8]
    mpu_data.mz = 0;
 8001fde:	4b2c      	ldr	r3, [pc, #176]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	815a      	strh	r2, [r3, #10]

    mpu_data.temp = 0;
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	819a      	strh	r2, [r3, #12]

    mpu_data.gx = 0;
 8001fea:	4b29      	ldr	r3, [pc, #164]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	81da      	strh	r2, [r3, #14]
    mpu_data.gy = 0;
 8001ff0:	4b27      	ldr	r3, [pc, #156]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	821a      	strh	r2, [r3, #16]
    mpu_data.gz = 0;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <MPU6500_InitStructures+0xd4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	825a      	strh	r2, [r3, #18]

    // 初始化 imu_t 结构体
    imu_data.ax = 0.0f;
 8001ffc:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
    imu_data.ay = 0.0f;
 8002004:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	605a      	str	r2, [r3, #4]
    imu_data.az = 0.0f;
 800200c:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	609a      	str	r2, [r3, #8]

    imu_data.temp = 0.0f;
 8002014:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	60da      	str	r2, [r3, #12]

    imu_data.gx = 0.0f;
 800201c:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
    imu_data.gy = 0.0f;
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
    imu_data.gz = 0.0f;
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	619a      	str	r2, [r3, #24]

    imu_data.vx = 0.0f;
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	61da      	str	r2, [r3, #28]
    imu_data.vy = 0.0f;
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	621a      	str	r2, [r3, #32]
    imu_data.vz = 0.0f;
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	625a      	str	r2, [r3, #36]	@ 0x24

    imu_data.q0 = 1.0f; // 初始化四元数为单位四元数
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 800204e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
    imu_data.q1 = 0.0f;
 8002054:	4b0f      	ldr	r3, [pc, #60]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c
    imu_data.q2 = 0.0f;
 800205c:	4b0d      	ldr	r3, [pc, #52]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
    imu_data.q3 = 0.0f;
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34

    imu_data.rol = 0.0f;
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	639a      	str	r2, [r3, #56]	@ 0x38
    imu_data.pit = 0.0f;
 8002074:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	63da      	str	r2, [r3, #60]	@ 0x3c
    imu_data.yaw = 0.0f;
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <MPU6500_InitStructures+0xd8>)
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000488 	.word	0x20000488
 8002094:	200004a8 	.word	0x200004a8

08002098 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af04      	add	r7, sp, #16
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80020a4:	230a      	movs	r3, #10
 80020a6:	9302      	str	r3, [sp, #8]
 80020a8:	2301      	movs	r3, #1
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	1cfb      	adds	r3, r7, #3
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	2200      	movs	r2, #0
 80020b4:	2178      	movs	r1, #120	@ 0x78
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f001 fb8a 	bl	80037d0 <HAL_I2C_Mem_Write>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80020d0:	2064      	movs	r0, #100	@ 0x64
 80020d2:	f000 febb 	bl	8002e4c <HAL_Delay>
    int status = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]

    // Init LCD
    status += ssd1306_WriteCommand(hi2c, 0xAE);   // Display off
 80020da:	21ae      	movs	r1, #174	@ 0xae
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffdb 	bl	8002098 <ssd1306_WriteCommand>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4413      	add	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // Set Memory Addressing Mode
 80020ec:	2120      	movs	r1, #32
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffd2 	bl	8002098 <ssd1306_WriteCommand>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // 00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80020fe:	2110      	movs	r1, #16
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffc9 	bl	8002098 <ssd1306_WriteCommand>
 8002106:	4603      	mov	r3, r0
 8002108:	461a      	mov	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xB0);   // Set Page Start Address for Page Addressing Mode,0-7
 8002110:	21b0      	movs	r1, #176	@ 0xb0
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffc0 	bl	8002098 <ssd1306_WriteCommand>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xC8);   // Set COM Output Scan Direction
 8002122:	21c8      	movs	r1, #200	@ 0xc8
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffb7 	bl	8002098 <ssd1306_WriteCommand>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // Set low column address
 8002134:	2100      	movs	r1, #0
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffae 	bl	8002098 <ssd1306_WriteCommand>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x10);   // Set high column address
 8002146:	2110      	movs	r1, #16
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff ffa5 	bl	8002098 <ssd1306_WriteCommand>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x40);   // Set start line address
 8002158:	2140      	movs	r1, #64	@ 0x40
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff9c 	bl	8002098 <ssd1306_WriteCommand>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x81);   // set contrast control register
 800216a:	2181      	movs	r1, #129	@ 0x81
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff93 	bl	8002098 <ssd1306_WriteCommand>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4413      	add	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xFF);
 800217c:	21ff      	movs	r1, #255	@ 0xff
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff8a 	bl	8002098 <ssd1306_WriteCommand>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA1);   // Set segment re-map 0 to 127
 800218e:	21a1      	movs	r1, #161	@ 0xa1
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff81 	bl	8002098 <ssd1306_WriteCommand>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4413      	add	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xA6);   // Set normal display
 80021a0:	21a6      	movs	r1, #166	@ 0xa6
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ff78 	bl	8002098 <ssd1306_WriteCommand>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA8);   // Set multiplex ratio(1 to 64)
 80021b2:	21a8      	movs	r1, #168	@ 0xa8
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff6f 	bl	8002098 <ssd1306_WriteCommand>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_HEIGHT - 1);
 80021c4:	213f      	movs	r1, #63	@ 0x3f
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ff66 	bl	8002098 <ssd1306_WriteCommand>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xA4);   // 0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80021d6:	21a4      	movs	r1, #164	@ 0xa4
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff5d 	bl	8002098 <ssd1306_WriteCommand>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD3);   // Set display offset
 80021e8:	21d3      	movs	r1, #211	@ 0xd3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ff54 	bl	8002098 <ssd1306_WriteCommand>
 80021f0:	4603      	mov	r3, r0
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4413      	add	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);   // No offset
 80021fa:	2100      	movs	r1, #0
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff4b 	bl	8002098 <ssd1306_WriteCommand>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD5);   // Set display clock divide ratio/oscillator frequency
 800220c:	21d5      	movs	r1, #213	@ 0xd5
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff42 	bl	8002098 <ssd1306_WriteCommand>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xF0);   // Set divide ratio
 800221e:	21f0      	movs	r1, #240	@ 0xf0
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff39 	bl	8002098 <ssd1306_WriteCommand>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4413      	add	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xD9);   // Set pre-charge period
 8002230:	21d9      	movs	r1, #217	@ 0xd9
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff30 	bl	8002098 <ssd1306_WriteCommand>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);
 8002242:	2122      	movs	r1, #34	@ 0x22
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff27 	bl	8002098 <ssd1306_WriteCommand>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4413      	add	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDA);   // Set com pins hardware configuration
 8002254:	21da      	movs	r1, #218	@ 0xda
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ff1e 	bl	8002098 <ssd1306_WriteCommand>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, SSD1306_COM_LR_REMAP << 5 | SSD1306_COM_ALTERNATIVE_PIN_CONFIG << 4 | 0x02);
 8002266:	2112      	movs	r1, #18
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff15 	bl	8002098 <ssd1306_WriteCommand>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	4413      	add	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, 0xDB);   // Set vcomh
 8002278:	21db      	movs	r1, #219	@ 0xdb
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff0c 	bl	8002098 <ssd1306_WriteCommand>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x20);   // 0x20,0.77xVcc
 800228a:	2120      	movs	r1, #32
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff03 	bl	8002098 <ssd1306_WriteCommand>
 8002292:	4603      	mov	r3, r0
 8002294:	461a      	mov	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8D);   // Set DC-DC enable
 800229c:	218d      	movs	r1, #141	@ 0x8d
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fefa 	bl	8002098 <ssd1306_WriteCommand>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x14);   //
 80022ae:	2114      	movs	r1, #20
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fef1 	bl	8002098 <ssd1306_WriteCommand>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0xAF);   // Turn on SSD1306 panel
 80022c0:	21af      	movs	r1, #175	@ 0xaf
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fee8 	bl	8002098 <ssd1306_WriteCommand>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <ssd1306_Init+0x214>
        return 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	e00f      	b.n	80022fc <ssd1306_Init+0x234>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 f813 	bl	8002308 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f834 	bl	8002350 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <ssd1306_Init+0x23c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80022ee:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <ssd1306_Init+0x23c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80022f4:	4b03      	ldr	r3, [pc, #12]	@ (8002304 <ssd1306_Init+0x23c>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	715a      	strb	r2, [r3, #5]

    return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000908 	.word	0x20000908

08002308 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e00d      	b.n	8002334 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <ssd1306_Fill+0x1a>
 800231e:	2100      	movs	r1, #0
 8002320:	e000      	b.n	8002324 <ssd1306_Fill+0x1c>
 8002322:	21ff      	movs	r1, #255	@ 0xff
 8002324:	4a09      	ldr	r2, [pc, #36]	@ (800234c <ssd1306_Fill+0x44>)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	460a      	mov	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233a:	d3ed      	bcc.n	8002318 <ssd1306_Fill+0x10>
    }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000508 	.word	0x20000508

08002350 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af04      	add	r7, sp, #16
 8002356:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 8; i++) {
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e020      	b.n	80023a0 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	3b50      	subs	r3, #80	@ 0x50
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4619      	mov	r1, r3
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fe96 	bl	8002098 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fe92 	bl	8002098 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8002374:	2110      	movs	r1, #16
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fe8e 	bl	8002098 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	01db      	lsls	r3, r3, #7
 8002380:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <ssd1306_UpdateScreen+0x60>)
 8002382:	4413      	add	r3, r2
 8002384:	2264      	movs	r2, #100	@ 0x64
 8002386:	9202      	str	r2, [sp, #8]
 8002388:	2280      	movs	r2, #128	@ 0x80
 800238a:	9201      	str	r2, [sp, #4]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2301      	movs	r3, #1
 8002390:	2240      	movs	r2, #64	@ 0x40
 8002392:	2178      	movs	r1, #120	@ 0x78
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f001 fa1b 	bl	80037d0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 8; i++) {
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	3301      	adds	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b07      	cmp	r3, #7
 80023a4:	d9db      	bls.n	800235e <ssd1306_UpdateScreen+0xe>
    }
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000508 	.word	0x20000508

080023b4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
 80023be:	460b      	mov	r3, r1
 80023c0:	71bb      	strb	r3, [r7, #6]
 80023c2:	4613      	mov	r3, r2
 80023c4:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	db48      	blt.n	8002460 <ssd1306_DrawPixel+0xac>
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80023d2:	d845      	bhi.n	8002460 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80023d4:	4b25      	ldr	r3, [pc, #148]	@ (800246c <ssd1306_DrawPixel+0xb8>)
 80023d6:	791b      	ldrb	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 80023dc:	797b      	ldrb	r3, [r7, #5]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 80023ea:	797b      	ldrb	r3, [r7, #5]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d11a      	bne.n	8002426 <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	79bb      	ldrb	r3, [r7, #6]
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	b2d8      	uxtb	r0, r3
 80023f8:	4603      	mov	r3, r0
 80023fa:	01db      	lsls	r3, r3, #7
 80023fc:	4413      	add	r3, r2
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <ssd1306_DrawPixel+0xbc>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	b25a      	sxtb	r2, r3
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	b25b      	sxtb	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b259      	sxtb	r1, r3
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	4603      	mov	r3, r0
 800241a:	01db      	lsls	r3, r3, #7
 800241c:	4413      	add	r3, r2
 800241e:	b2c9      	uxtb	r1, r1
 8002420:	4a13      	ldr	r2, [pc, #76]	@ (8002470 <ssd1306_DrawPixel+0xbc>)
 8002422:	54d1      	strb	r1, [r2, r3]
 8002424:	e01d      	b.n	8002462 <ssd1306_DrawPixel+0xae>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002426:	79fa      	ldrb	r2, [r7, #7]
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	4603      	mov	r3, r0
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	4413      	add	r3, r2
 8002434:	4a0e      	ldr	r2, [pc, #56]	@ (8002470 <ssd1306_DrawPixel+0xbc>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	b25a      	sxtb	r2, r3
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	2101      	movs	r1, #1
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	b25b      	sxtb	r3, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	b25b      	sxtb	r3, r3
 800244c:	4013      	ands	r3, r2
 800244e:	b259      	sxtb	r1, r3
 8002450:	79fa      	ldrb	r2, [r7, #7]
 8002452:	4603      	mov	r3, r0
 8002454:	01db      	lsls	r3, r3, #7
 8002456:	4413      	add	r3, r2
 8002458:	b2c9      	uxtb	r1, r1
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <ssd1306_DrawPixel+0xbc>)
 800245c:	54d1      	strb	r1, [r2, r3]
 800245e:	e000      	b.n	8002462 <ssd1306_DrawPixel+0xae>
        return;
 8002460:	bf00      	nop
    }
}
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	20000908 	.word	0x20000908
 8002470:	20000508 	.word	0x20000508

08002474 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b089      	sub	sp, #36	@ 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	4604      	mov	r4, r0
 800247c:	1d38      	adds	r0, r7, #4
 800247e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002482:	461a      	mov	r2, r3
 8002484:	4623      	mov	r3, r4
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	4613      	mov	r3, r2
 800248a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800248c:	4b38      	ldr	r3, [pc, #224]	@ (8002570 <ssd1306_WriteChar+0xfc>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	793b      	ldrb	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	2b7f      	cmp	r3, #127	@ 0x7f
 8002498:	dc06      	bgt.n	80024a8 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 800249a:	4b35      	ldr	r3, [pc, #212]	@ (8002570 <ssd1306_WriteChar+0xfc>)
 800249c:	885b      	ldrh	r3, [r3, #2]
 800249e:	461a      	mov	r2, r3
 80024a0:	797b      	ldrb	r3, [r7, #5]
 80024a2:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80024a4:	2b3f      	cmp	r3, #63	@ 0x3f
 80024a6:	dd01      	ble.n	80024ac <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e05c      	b.n	8002566 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	e04c      	b.n	800254c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	3b20      	subs	r3, #32
 80024b8:	7979      	ldrb	r1, [r7, #5]
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	440b      	add	r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e034      	b.n	800253c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d012      	beq.n	8002508 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80024e2:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <ssd1306_WriteChar+0xfc>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	b2d8      	uxtb	r0, r3
 80024f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002570 <ssd1306_WriteChar+0xfc>)
 80024f2:	885b      	ldrh	r3, [r3, #2]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	7bba      	ldrb	r2, [r7, #14]
 8002500:	4619      	mov	r1, r3
 8002502:	f7ff ff57 	bl	80023b4 <ssd1306_DrawPixel>
 8002506:	e016      	b.n	8002536 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002508:	4b19      	ldr	r3, [pc, #100]	@ (8002570 <ssd1306_WriteChar+0xfc>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	4413      	add	r3, r2
 8002514:	b2d8      	uxtb	r0, r3
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <ssd1306_WriteChar+0xfc>)
 8002518:	885b      	ldrh	r3, [r3, #2]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	4413      	add	r3, r2
 8002522:	b2d9      	uxtb	r1, r3
 8002524:	7bbb      	ldrb	r3, [r7, #14]
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	f7ff ff3f 	bl	80023b4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3301      	adds	r3, #1
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	793b      	ldrb	r3, [r7, #4]
 800253e:	461a      	mov	r2, r3
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4293      	cmp	r3, r2
 8002544:	d3c5      	bcc.n	80024d2 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3301      	adds	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
 800254c:	797b      	ldrb	r3, [r7, #5]
 800254e:	461a      	mov	r2, r3
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	4293      	cmp	r3, r2
 8002554:	d3ad      	bcc.n	80024b2 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <ssd1306_WriteChar+0xfc>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	793a      	ldrb	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <ssd1306_WriteChar+0xfc>)
 8002562:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	@ 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}
 800256e:	bf00      	nop
 8002570:	20000908 	.word	0x20000908

08002574 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	1d38      	adds	r0, r7, #4
 800257e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002582:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8002584:	e012      	b.n	80025ac <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	7818      	ldrb	r0, [r3, #0]
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	1d3a      	adds	r2, r7, #4
 800258e:	ca06      	ldmia	r2, {r1, r2}
 8002590:	f7ff ff70 	bl	8002474 <ssd1306_WriteChar>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d002      	beq.n	80025a6 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	e008      	b.n	80025b8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3301      	adds	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
    while (*str)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e8      	bne.n	8002586 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	781b      	ldrb	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <ssd1306_SetCursor>:

//
//  Set cursor position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	460a      	mov	r2, r1
 80025ca:	71fb      	strb	r3, [r7, #7]
 80025cc:	4613      	mov	r3, r2
 80025ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <ssd1306_SetCursor+0x2c>)
 80025d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80025d8:	79bb      	ldrb	r3, [r7, #6]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b03      	ldr	r3, [pc, #12]	@ (80025ec <ssd1306_SetCursor+0x2c>)
 80025de:	805a      	strh	r2, [r3, #2]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	20000908 	.word	0x20000908

080025f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	4b10      	ldr	r3, [pc, #64]	@ (800263c <HAL_MspInit+0x4c>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	4a0f      	ldr	r2, [pc, #60]	@ (800263c <HAL_MspInit+0x4c>)
 8002600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002604:	6453      	str	r3, [r2, #68]	@ 0x44
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <HAL_MspInit+0x4c>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_MspInit+0x4c>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a08      	ldr	r2, [pc, #32]	@ (800263c <HAL_MspInit+0x4c>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <HAL_MspInit+0x4c>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800

08002640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08c      	sub	sp, #48	@ 0x30
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a4a      	ldr	r2, [pc, #296]	@ (8002788 <HAL_I2C_MspInit+0x148>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d13d      	bne.n	80026de <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	4b49      	ldr	r3, [pc, #292]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a48      	ldr	r2, [pc, #288]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b46      	ldr	r3, [pc, #280]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800267e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002684:	2312      	movs	r3, #18
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002690:	2304      	movs	r3, #4
 8002692:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	483d      	ldr	r0, [pc, #244]	@ (8002790 <HAL_I2C_MspInit+0x150>)
 800269c:	f000 fd9e 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026a0:	2308      	movs	r3, #8
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a4:	2312      	movs	r3, #18
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80026b0:	2309      	movs	r3, #9
 80026b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	4619      	mov	r1, r3
 80026ba:	4835      	ldr	r0, [pc, #212]	@ (8002790 <HAL_I2C_MspInit+0x150>)
 80026bc:	f000 fd8e 	bl	80031dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	4b31      	ldr	r3, [pc, #196]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	4a30      	ldr	r2, [pc, #192]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 80026ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d0:	4b2e      	ldr	r3, [pc, #184]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026dc:	e050      	b.n	8002780 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C3)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002794 <HAL_I2C_MspInit+0x154>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d14b      	bne.n	8002780 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	4b27      	ldr	r3, [pc, #156]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	4a26      	ldr	r2, [pc, #152]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 80026f2:	f043 0304 	orr.w	r3, r3, #4
 80026f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f8:	4b24      	ldr	r3, [pc, #144]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4b20      	ldr	r3, [pc, #128]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	4a1f      	ldr	r2, [pc, #124]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6313      	str	r3, [r2, #48]	@ 0x30
 8002714:	4b1d      	ldr	r3, [pc, #116]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002720:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002726:	2312      	movs	r3, #18
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002732:	2304      	movs	r3, #4
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	4816      	ldr	r0, [pc, #88]	@ (8002798 <HAL_I2C_MspInit+0x158>)
 800273e:	f000 fd4d 	bl	80031dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002748:	2312      	movs	r3, #18
 800274a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002754:	2304      	movs	r3, #4
 8002756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 031c 	add.w	r3, r7, #28
 800275c:	4619      	mov	r1, r3
 800275e:	480f      	ldr	r0, [pc, #60]	@ (800279c <HAL_I2C_MspInit+0x15c>)
 8002760:	f000 fd3c 	bl	80031dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	4a07      	ldr	r2, [pc, #28]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 800276e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002772:	6413      	str	r3, [r2, #64]	@ 0x40
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_I2C_MspInit+0x14c>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	68bb      	ldr	r3, [r7, #8]
}
 8002780:	bf00      	nop
 8002782:	3730      	adds	r7, #48	@ 0x30
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40005800 	.word	0x40005800
 800278c:	40023800 	.word	0x40023800
 8002790:	40020400 	.word	0x40020400
 8002794:	40005c00 	.word	0x40005c00
 8002798:	40020800 	.word	0x40020800
 800279c:	40020000 	.word	0x40020000

080027a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_SPI_MspInit+0x84>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d12b      	bne.n	800281a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b18      	ldr	r3, [pc, #96]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	4a10      	ldr	r2, [pc, #64]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027fa:	23e0      	movs	r3, #224	@ 0xe0
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800280a:	2305      	movs	r3, #5
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	@ (800282c <HAL_SPI_MspInit+0x8c>)
 8002816:	f000 fce1 	bl	80031dc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	@ 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40013000 	.word	0x40013000
 8002828:	40023800 	.word	0x40023800
 800282c:	40020000 	.word	0x40020000

08002830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a18      	ldr	r2, [pc, #96]	@ (80028a0 <HAL_TIM_Base_MspInit+0x70>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d116      	bne.n	8002870 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4a16      	ldr	r2, [pc, #88]	@ (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6453      	str	r3, [r2, #68]	@ 0x44
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	2019      	movs	r0, #25
 8002864:	f000 fbf1 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002868:	2019      	movs	r0, #25
 800286a:	f000 fc0a 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800286e:	e012      	b.n	8002896 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_TIM_Base_MspInit+0x78>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d10d      	bne.n	8002896 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	4a08      	ldr	r2, [pc, #32]	@ (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6413      	str	r3, [r2, #64]	@ 0x40
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_TIM_Base_MspInit+0x74>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40010000 	.word	0x40010000
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40000800 	.word	0x40000800

080028ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08c      	sub	sp, #48	@ 0x30
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028cc:	d12c      	bne.n	8002928 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	4b3f      	ldr	r3, [pc, #252]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	4a3e      	ldr	r2, [pc, #248]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028de:	4b3c      	ldr	r3, [pc, #240]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	4b38      	ldr	r3, [pc, #224]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	4a37      	ldr	r2, [pc, #220]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fa:	4b35      	ldr	r3, [pc, #212]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A1_Pin|Encoder_A2_Pin;
 8002906:	2303      	movs	r3, #3
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002916:	2301      	movs	r3, #1
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	4619      	mov	r1, r3
 8002920:	482c      	ldr	r0, [pc, #176]	@ (80029d4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002922:	f000 fc5b 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002926:	e04e      	b.n	80029c6 <HAL_TIM_Encoder_MspInit+0x11a>
  else if(htim_encoder->Instance==TIM3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2a      	ldr	r2, [pc, #168]	@ (80029d8 <HAL_TIM_Encoder_MspInit+0x12c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d149      	bne.n	80029c6 <HAL_TIM_Encoder_MspInit+0x11a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b26      	ldr	r3, [pc, #152]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	4a25      	ldr	r2, [pc, #148]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	6413      	str	r3, [r2, #64]	@ 0x40
 8002942:	4b23      	ldr	r3, [pc, #140]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a1e      	ldr	r2, [pc, #120]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b1c      	ldr	r3, [pc, #112]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b18      	ldr	r3, [pc, #96]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a17      	ldr	r2, [pc, #92]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <HAL_TIM_Encoder_MspInit+0x124>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_B1_Pin;
 8002986:	2340      	movs	r3, #64	@ 0x40
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002996:	2302      	movs	r3, #2
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_B1_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 031c 	add.w	r3, r7, #28
 800299e:	4619      	mov	r1, r3
 80029a0:	480e      	ldr	r0, [pc, #56]	@ (80029dc <HAL_TIM_Encoder_MspInit+0x130>)
 80029a2:	f000 fc1b 	bl	80031dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_B2_Pin;
 80029a6:	2320      	movs	r3, #32
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	2300      	movs	r3, #0
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029b6:	2302      	movs	r3, #2
 80029b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_B2_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 031c 	add.w	r3, r7, #28
 80029be:	4619      	mov	r1, r3
 80029c0:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <HAL_TIM_Encoder_MspInit+0x134>)
 80029c2:	f000 fc0b 	bl	80031dc <HAL_GPIO_Init>
}
 80029c6:	bf00      	nop
 80029c8:	3730      	adds	r7, #48	@ 0x30
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40020800 	.word	0x40020800
 80029e0:	40020400 	.word	0x40020400

080029e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <HAL_TIM_MspPostInit+0x68>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d11e      	bne.n	8002a44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_TIM_MspPostInit+0x6c>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a10      	ldr	r2, [pc, #64]	@ (8002a50 <HAL_TIM_MspPostInit+0x6c>)
 8002a10:	f043 0302 	orr.w	r3, r3, #2
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_TIM_MspPostInit+0x6c>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWMB1_Pin|PWMB2_Pin|PWMA1_Pin|PWMA2_Pin;
 8002a22:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002a26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f107 030c 	add.w	r3, r7, #12
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4805      	ldr	r0, [pc, #20]	@ (8002a54 <HAL_TIM_MspPostInit+0x70>)
 8002a40:	f000 fbcc 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a44:	bf00      	nop
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40000800 	.word	0x40000800
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020400 	.word	0x40020400

08002a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	@ 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	@ (8002aec <HAL_UART_MspInit+0x94>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d134      	bne.n	8002ae4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <HAL_UART_MspInit+0x98>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <HAL_UART_MspInit+0x98>)
 8002a84:	f043 0320 	orr.w	r3, r3, #32
 8002a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8a:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <HAL_UART_MspInit+0x98>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b15      	ldr	r3, [pc, #84]	@ (8002af0 <HAL_UART_MspInit+0x98>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <HAL_UART_MspInit+0x98>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <HAL_UART_MspInit+0x98>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ab2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	4619      	mov	r1, r3
 8002ace:	4809      	ldr	r0, [pc, #36]	@ (8002af4 <HAL_UART_MspInit+0x9c>)
 8002ad0:	f000 fb84 	bl	80031dc <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2047      	movs	r0, #71	@ 0x47
 8002ada:	f000 fab6 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ade:	2047      	movs	r0, #71	@ 0x47
 8002ae0:	f000 facf 	bl	8003082 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8002ae4:	bf00      	nop
 8002ae6:	3728      	adds	r7, #40	@ 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40011400 	.word	0x40011400
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020000 	.word	0x40020000

08002af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <NMI_Handler+0x4>

08002b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <HardFault_Handler+0x4>

08002b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <MemManage_Handler+0x4>

08002b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <BusFault_Handler+0x4>

08002b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1c:	bf00      	nop
 8002b1e:	e7fd      	b.n	8002b1c <UsageFault_Handler+0x4>

08002b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b4e:	f000 f95d 	bl	8002e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f000 fcdc 	bl	8003518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b68:	4802      	ldr	r0, [pc, #8]	@ (8002b74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b6a:	f002 feb5 	bl	80058d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200002fc 	.word	0x200002fc

08002b78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002b7c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002b80:	f000 fcca 	bl	8003518 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <USART6_IRQHandler+0x10>)
 8002b8e:	f003 fd9f 	bl	80066d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000041c 	.word	0x2000041c

08002b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return 1;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_kill>:

int _kill(int pid, int sig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bb6:	f005 fab1 	bl	800811c <__errno>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2216      	movs	r2, #22
 8002bbe:	601a      	str	r2, [r3, #0]
  return -1;
 8002bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_exit>:

void _exit (int status)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ffe7 	bl	8002bac <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bde:	bf00      	nop
 8002be0:	e7fd      	b.n	8002bde <_exit+0x12>

08002be2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e00a      	b.n	8002c0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	60ba      	str	r2, [r7, #8]
 8002c00:	b2ca      	uxtb	r2, r1
 8002c02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dbf0      	blt.n	8002bf4 <_read+0x12>
  }

  return len;
 8002c12:	687b      	ldr	r3, [r7, #4]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c44:	605a      	str	r2, [r3, #4]
  return 0;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <_isatty>:

int _isatty(int file)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c5c:	2301      	movs	r3, #1
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ce0 <_sbrk+0x5c>)
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <_sbrk+0x60>)
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <_sbrk+0x64>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	@ (8002cec <_sbrk+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ca6:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d207      	bcs.n	8002cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb4:	f005 fa32 	bl	800811c <__errno>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	220c      	movs	r2, #12
 8002cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	e009      	b.n	8002cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <_sbrk+0x64>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	4a05      	ldr	r2, [pc, #20]	@ (8002ce8 <_sbrk+0x64>)
 8002cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20018000 	.word	0x20018000
 8002ce4:	00000400 	.word	0x00000400
 8002ce8:	20000910 	.word	0x20000910
 8002cec:	20000a68 	.word	0x20000a68

08002cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <SystemInit+0x20>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <SystemInit+0x20>)
 8002cfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d18:	f7ff ffea 	bl	8002cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d1c:	480c      	ldr	r0, [pc, #48]	@ (8002d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d1e:	490d      	ldr	r1, [pc, #52]	@ (8002d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d20:	4a0d      	ldr	r2, [pc, #52]	@ (8002d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d24:	e002      	b.n	8002d2c <LoopCopyDataInit>

08002d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2a:	3304      	adds	r3, #4

08002d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d30:	d3f9      	bcc.n	8002d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d32:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d34:	4c0a      	ldr	r4, [pc, #40]	@ (8002d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d38:	e001      	b.n	8002d3e <LoopFillZerobss>

08002d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d3c:	3204      	adds	r2, #4

08002d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d40:	d3fb      	bcc.n	8002d3a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002d42:	f005 f9f1 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d46:	f7fe f905 	bl	8000f54 <main>
  bx  lr    
 8002d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d4c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002d58:	0800adc0 	.word	0x0800adc0
  ldr r2, =_sbss
 8002d5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d60:	20000a64 	.word	0x20000a64

08002d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d64:	e7fe      	b.n	8002d64 <ADC_IRQHandler>
	...

08002d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002da8 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0d      	ldr	r2, [pc, #52]	@ (8002da8 <HAL_Init+0x40>)
 8002d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <HAL_Init+0x40>)
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d84:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <HAL_Init+0x40>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d90:	2003      	movs	r0, #3
 8002d92:	f000 f94f 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d96:	200f      	movs	r0, #15
 8002d98:	f000 f808 	bl	8002dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d9c:	f7ff fc28 	bl	80025f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db4:	4b12      	ldr	r3, [pc, #72]	@ (8002e00 <HAL_InitTick+0x54>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <HAL_InitTick+0x58>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 f967 	bl	800309e <HAL_SYSTICK_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00e      	b.n	8002df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d80a      	bhi.n	8002df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de0:	2200      	movs	r2, #0
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f000 f92f 	bl	800304a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dec:	4a06      	ldr	r2, [pc, #24]	@ (8002e08 <HAL_InitTick+0x5c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	20000014 	.word	0x20000014
 8002e08:	20000010 	.word	0x20000010

08002e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e10:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_IncTick+0x20>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_IncTick+0x24>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <HAL_IncTick+0x24>)
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000014 	.word	0x20000014
 8002e30:	20000914 	.word	0x20000914

08002e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return uwTick;
 8002e38:	4b03      	ldr	r3, [pc, #12]	@ (8002e48 <HAL_GetTick+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000914 	.word	0x20000914

08002e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff ffee 	bl	8002e34 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d005      	beq.n	8002e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <HAL_Delay+0x44>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e72:	bf00      	nop
 8002e74:	f7ff ffde 	bl	8002e34 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d8f7      	bhi.n	8002e74 <HAL_Delay+0x28>
  {
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000014 	.word	0x20000014

08002e94 <__NVIC_SetPriorityGrouping>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	@ (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_SetPriority>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db0a      	blt.n	8002f5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	490c      	ldr	r1, [pc, #48]	@ (8002f80 <__NVIC_SetPriority+0x4c>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	0112      	lsls	r2, r2, #4
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	440b      	add	r3, r1
 8002f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f5c:	e00a      	b.n	8002f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	4908      	ldr	r1, [pc, #32]	@ (8002f84 <__NVIC_SetPriority+0x50>)
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	3b04      	subs	r3, #4
 8002f6c:	0112      	lsls	r2, r2, #4
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	440b      	add	r3, r1
 8002f72:	761a      	strb	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <NVIC_EncodePriority>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f1c3 0307 	rsb	r3, r3, #7
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf28      	it	cs
 8002fa6:	2304      	movcs	r3, #4
 8002fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3304      	adds	r3, #4
 8002fae:	2b06      	cmp	r3, #6
 8002fb0:	d902      	bls.n	8002fb8 <NVIC_EncodePriority+0x30>
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3b03      	subs	r3, #3
 8002fb6:	e000      	b.n	8002fba <NVIC_EncodePriority+0x32>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	401a      	ands	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fda:	43d9      	mvns	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	4313      	orrs	r3, r2
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <SysTick_Config>:
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003000:	d301      	bcc.n	8003006 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <SysTick_Config+0x40>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300e:	210f      	movs	r1, #15
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f7ff ff8e 	bl	8002f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <SysTick_Config+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301e:	4b04      	ldr	r3, [pc, #16]	@ (8003030 <SysTick_Config+0x40>)
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff29 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800305c:	f7ff ff3e 	bl	8002edc <__NVIC_GetPriorityGrouping>
 8003060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	f7ff ff8e 	bl	8002f88 <NVIC_EncodePriority>
 800306c:	4602      	mov	r2, r0
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff5d 	bl	8002f34 <__NVIC_SetPriority>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff31 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ffa2 	bl	8002ff0 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff feb6 	bl	8002e34 <HAL_GetTick>
 80030c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d008      	beq.n	80030e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2280      	movs	r2, #128	@ 0x80
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e052      	b.n	800318e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0216 	bic.w	r2, r2, #22
 80030f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003106:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_DMA_Abort+0x62>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0208 	bic.w	r2, r2, #8
 8003126:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003138:	e013      	b.n	8003162 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800313a:	f7ff fe7b 	bl	8002e34 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b05      	cmp	r3, #5
 8003146:	d90c      	bls.n	8003162 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2203      	movs	r2, #3
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e015      	b.n	800318e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e4      	bne.n	800313a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003174:	223f      	movs	r2, #63	@ 0x3f
 8003176:	409a      	lsls	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d004      	beq.n	80031b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2280      	movs	r2, #128	@ 0x80
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e00c      	b.n	80031ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2205      	movs	r2, #5
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	@ 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	e159      	b.n	80034ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f8:	2201      	movs	r2, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	429a      	cmp	r2, r3
 8003212:	f040 8148 	bne.w	80034a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b01      	cmp	r3, #1
 8003220:	d005      	beq.n	800322e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800322a:	2b02      	cmp	r3, #2
 800322c:	d130      	bne.n	8003290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 0201 	and.w	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b03      	cmp	r3, #3
 800329a:	d017      	beq.n	80032cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d123      	bne.n	8003320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	08da      	lsrs	r2, r3, #3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3208      	adds	r2, #8
 80032e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	220f      	movs	r2, #15
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	08da      	lsrs	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80a2 	beq.w	80034a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	4b57      	ldr	r3, [pc, #348]	@ (80034c4 <HAL_GPIO_Init+0x2e8>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	4a56      	ldr	r2, [pc, #344]	@ (80034c4 <HAL_GPIO_Init+0x2e8>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003370:	6453      	str	r3, [r2, #68]	@ 0x44
 8003372:	4b54      	ldr	r3, [pc, #336]	@ (80034c4 <HAL_GPIO_Init+0x2e8>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800337e:	4a52      	ldr	r2, [pc, #328]	@ (80034c8 <HAL_GPIO_Init+0x2ec>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a49      	ldr	r2, [pc, #292]	@ (80034cc <HAL_GPIO_Init+0x2f0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d019      	beq.n	80033de <HAL_GPIO_Init+0x202>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a48      	ldr	r2, [pc, #288]	@ (80034d0 <HAL_GPIO_Init+0x2f4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_GPIO_Init+0x1fe>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a47      	ldr	r2, [pc, #284]	@ (80034d4 <HAL_GPIO_Init+0x2f8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00d      	beq.n	80033d6 <HAL_GPIO_Init+0x1fa>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a46      	ldr	r2, [pc, #280]	@ (80034d8 <HAL_GPIO_Init+0x2fc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d007      	beq.n	80033d2 <HAL_GPIO_Init+0x1f6>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a45      	ldr	r2, [pc, #276]	@ (80034dc <HAL_GPIO_Init+0x300>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <HAL_GPIO_Init+0x1f2>
 80033ca:	2304      	movs	r3, #4
 80033cc:	e008      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033ce:	2307      	movs	r3, #7
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033d2:	2303      	movs	r3, #3
 80033d4:	e004      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e002      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_GPIO_Init+0x204>
 80033de:	2300      	movs	r3, #0
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f002 0203 	and.w	r2, r2, #3
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	4093      	lsls	r3, r2
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f0:	4935      	ldr	r1, [pc, #212]	@ (80034c8 <HAL_GPIO_Init+0x2ec>)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033fe:	4b38      	ldr	r3, [pc, #224]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003422:	4a2f      	ldr	r2, [pc, #188]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003428:	4b2d      	ldr	r3, [pc, #180]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800344c:	4a24      	ldr	r2, [pc, #144]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003452:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003476:	4a1a      	ldr	r2, [pc, #104]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800347c:	4b18      	ldr	r3, [pc, #96]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a0:	4a0f      	ldr	r2, [pc, #60]	@ (80034e0 <HAL_GPIO_Init+0x304>)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3301      	adds	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	f67f aea2 	bls.w	80031f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3724      	adds	r7, #36	@ 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40013800 	.word	0x40013800
 80034cc:	40020000 	.word	0x40020000
 80034d0:	40020400 	.word	0x40020400
 80034d4:	40020800 	.word	0x40020800
 80034d8:	40020c00 	.word	0x40020c00
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003500:	e003      	b.n	800350a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003522:	4b08      	ldr	r3, [pc, #32]	@ (8003544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352e:	4a05      	ldr	r2, [pc, #20]	@ (8003544 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fcdd 	bl	8000ef6 <HAL_GPIO_EXTI_Callback>
  }
}
 800353c:	bf00      	nop
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40013c00 	.word	0x40013c00

08003548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e12b      	b.n	80037b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d106      	bne.n	8003574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff f866 	bl	8002640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2224      	movs	r2, #36	@ 0x24
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800359a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ac:	f001 f8aa 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 80035b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a81      	ldr	r2, [pc, #516]	@ (80037bc <HAL_I2C_Init+0x274>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d807      	bhi.n	80035cc <HAL_I2C_Init+0x84>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4a80      	ldr	r2, [pc, #512]	@ (80037c0 <HAL_I2C_Init+0x278>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bf94      	ite	ls
 80035c4:	2301      	movls	r3, #1
 80035c6:	2300      	movhi	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e006      	b.n	80035da <HAL_I2C_Init+0x92>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a7d      	ldr	r2, [pc, #500]	@ (80037c4 <HAL_I2C_Init+0x27c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	bf94      	ite	ls
 80035d4:	2301      	movls	r3, #1
 80035d6:	2300      	movhi	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0e7      	b.n	80037b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a78      	ldr	r2, [pc, #480]	@ (80037c8 <HAL_I2C_Init+0x280>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0c9b      	lsrs	r3, r3, #18
 80035ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a6a      	ldr	r2, [pc, #424]	@ (80037bc <HAL_I2C_Init+0x274>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d802      	bhi.n	800361c <HAL_I2C_Init+0xd4>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3301      	adds	r3, #1
 800361a:	e009      	b.n	8003630 <HAL_I2C_Init+0xe8>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	4a69      	ldr	r2, [pc, #420]	@ (80037cc <HAL_I2C_Init+0x284>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	3301      	adds	r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	430b      	orrs	r3, r1
 8003636:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003642:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	495c      	ldr	r1, [pc, #368]	@ (80037bc <HAL_I2C_Init+0x274>)
 800364c:	428b      	cmp	r3, r1
 800364e:	d819      	bhi.n	8003684 <HAL_I2C_Init+0x13c>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e59      	subs	r1, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fbb1 f3f3 	udiv	r3, r1, r3
 800365e:	1c59      	adds	r1, r3, #1
 8003660:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003664:	400b      	ands	r3, r1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_I2C_Init+0x138>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1e59      	subs	r1, r3, #1
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fbb1 f3f3 	udiv	r3, r1, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	e051      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003680:	2304      	movs	r3, #4
 8003682:	e04f      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d111      	bne.n	80036b0 <HAL_I2C_Init+0x168>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	440b      	add	r3, r1
 800369a:	fbb0 f3f3 	udiv	r3, r0, r3
 800369e:	3301      	adds	r3, #1
 80036a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e012      	b.n	80036d6 <HAL_I2C_Init+0x18e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1e58      	subs	r0, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	0099      	lsls	r1, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_I2C_Init+0x196>
 80036da:	2301      	movs	r3, #1
 80036dc:	e022      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10e      	bne.n	8003704 <HAL_I2C_Init+0x1bc>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1e58      	subs	r0, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	440b      	add	r3, r1
 80036f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f8:	3301      	adds	r3, #1
 80036fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003702:	e00f      	b.n	8003724 <HAL_I2C_Init+0x1dc>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1e58      	subs	r0, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	0099      	lsls	r1, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	fbb0 f3f3 	udiv	r3, r0, r3
 800371a:	3301      	adds	r3, #1
 800371c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003720:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	6809      	ldr	r1, [r1, #0]
 8003728:	4313      	orrs	r3, r2
 800372a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003752:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6911      	ldr	r1, [r2, #16]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68d2      	ldr	r2, [r2, #12]
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	430b      	orrs	r3, r1
 8003766:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	000186a0 	.word	0x000186a0
 80037c0:	001e847f 	.word	0x001e847f
 80037c4:	003d08ff 	.word	0x003d08ff
 80037c8:	431bde83 	.word	0x431bde83
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	460b      	mov	r3, r1
 80037e4:	813b      	strh	r3, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ea:	f7ff fb23 	bl	8002e34 <HAL_GetTick>
 80037ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	f040 80d9 	bne.w	80039b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2319      	movs	r3, #25
 8003804:	2201      	movs	r2, #1
 8003806:	496d      	ldr	r1, [pc, #436]	@ (80039bc <HAL_I2C_Mem_Write+0x1ec>)
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f971 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
 8003816:	e0cc      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_I2C_Mem_Write+0x56>
 8003822:	2302      	movs	r3, #2
 8003824:	e0c5      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b01      	cmp	r3, #1
 800383a:	d007      	beq.n	800384c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2221      	movs	r2, #33	@ 0x21
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2240      	movs	r2, #64	@ 0x40
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800387c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a4d      	ldr	r2, [pc, #308]	@ (80039c0 <HAL_I2C_Mem_Write+0x1f0>)
 800388c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800388e:	88f8      	ldrh	r0, [r7, #6]
 8003890:	893a      	ldrh	r2, [r7, #8]
 8003892:	8979      	ldrh	r1, [r7, #10]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4603      	mov	r3, r0
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f890 	bl	80039c4 <I2C_RequestMemoryWrite>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d052      	beq.n	8003950 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e081      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fa36 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d107      	bne.n	80038d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d11b      	bne.n	8003950 <HAL_I2C_Mem_Write+0x180>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d017      	beq.n	8003950 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1aa      	bne.n	80038ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 fa29 	bl	8003db4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	2b04      	cmp	r3, #4
 800396e:	d107      	bne.n	8003980 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e016      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e000      	b.n	80039b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	00100002 	.word	0x00100002
 80039c0:	ffff0000 	.word	0xffff0000

080039c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	461a      	mov	r2, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	817b      	strh	r3, [r7, #10]
 80039d6:	460b      	mov	r3, r1
 80039d8:	813b      	strh	r3, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f878 	bl	8003af0 <I2C_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a14:	d103      	bne.n	8003a1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e05f      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a22:	897b      	ldrh	r3, [r7, #10]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	6a3a      	ldr	r2, [r7, #32]
 8003a36:	492d      	ldr	r1, [pc, #180]	@ (8003aec <I2C_RequestMemoryWrite+0x128>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f8d3 	bl	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e04c      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a60:	6a39      	ldr	r1, [r7, #32]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f95e 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d107      	bne.n	8003a86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e02b      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
 8003a9a:	e021      	b.n	8003ae0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aac:	6a39      	ldr	r1, [r7, #32]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f938 	bl	8003d24 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e005      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad6:	893b      	ldrh	r3, [r7, #8]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	00010002 	.word	0x00010002

08003af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b00:	e048      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d044      	beq.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7ff f993 	bl	8002e34 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d139      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	0c1b      	lsrs	r3, r3, #16
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10d      	bne.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	43da      	mvns	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	e00c      	b.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	43da      	mvns	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4013      	ands	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d116      	bne.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e023      	b.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10d      	bne.n	8003bba <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	e00c      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d093      	beq.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bf2:	e071      	b.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c02:	d123      	bne.n	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e067      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d041      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7ff f8ee 	bl	8002e34 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d136      	bne.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10c      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e00b      	b.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	43da      	mvns	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e021      	b.n	8003d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d10c      	bne.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	43da      	mvns	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	e00b      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	43da      	mvns	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bf14      	ite	ne
 8003d0e:	2301      	movne	r3, #1
 8003d10:	2300      	moveq	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f47f af6d 	bne.w	8003bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d30:	e034      	b.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f886 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e034      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d028      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7ff f873 	bl	8002e34 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d11d      	bne.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	2b80      	cmp	r3, #128	@ 0x80
 8003d6c:	d016      	beq.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e007      	b.n	8003dac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da6:	2b80      	cmp	r3, #128	@ 0x80
 8003da8:	d1c3      	bne.n	8003d32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc0:	e034      	b.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f83e 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e034      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d028      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7ff f82b 	bl	8002e34 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11d      	bne.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d016      	beq.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d1c3      	bne.n	8003dc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e5a:	d11b      	bne.n	8003e94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	f043 0204 	orr.w	r2, r3, #4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e267      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d075      	beq.n	8003fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ec2:	4b88      	ldr	r3, [pc, #544]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ece:	4b85      	ldr	r3, [pc, #532]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d112      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	4b82      	ldr	r3, [pc, #520]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ee6:	d10b      	bne.n	8003f00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d05b      	beq.n	8003fac <HAL_RCC_OscConfig+0x108>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d157      	bne.n	8003fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e242      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f08:	d106      	bne.n	8003f18 <HAL_RCC_OscConfig+0x74>
 8003f0a:	4b76      	ldr	r3, [pc, #472]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a75      	ldr	r2, [pc, #468]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e01d      	b.n	8003f54 <HAL_RCC_OscConfig+0xb0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x98>
 8003f22:	4b70      	ldr	r3, [pc, #448]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a6f      	ldr	r2, [pc, #444]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6c      	ldr	r2, [pc, #432]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0xb0>
 8003f3c:	4b69      	ldr	r3, [pc, #420]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a68      	ldr	r2, [pc, #416]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b66      	ldr	r3, [pc, #408]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a65      	ldr	r2, [pc, #404]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d013      	beq.n	8003f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fe ff6a 	bl	8002e34 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fe ff66 	bl	8002e34 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	@ 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e207      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	4b5b      	ldr	r3, [pc, #364]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0xc0>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f84:	f7fe ff56 	bl	8002e34 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8c:	f7fe ff52 	bl	8002e34 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	@ 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1f3      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	4b51      	ldr	r3, [pc, #324]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0xe8>
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d063      	beq.n	8004082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fba:	4b4a      	ldr	r3, [pc, #296]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d11c      	bne.n	800400c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fd2:	4b44      	ldr	r3, [pc, #272]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d116      	bne.n	800400c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fde:	4b41      	ldr	r3, [pc, #260]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x152>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e1c7      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4937      	ldr	r1, [pc, #220]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004006:	4313      	orrs	r3, r2
 8004008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400a:	e03a      	b.n	8004082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004014:	4b34      	ldr	r3, [pc, #208]	@ (80040e8 <HAL_RCC_OscConfig+0x244>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fe ff0b 	bl	8002e34 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004022:	f7fe ff07 	bl	8002e34 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1a8      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	4b2b      	ldr	r3, [pc, #172]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004040:	4b28      	ldr	r3, [pc, #160]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4925      	ldr	r1, [pc, #148]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004056:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <HAL_RCC_OscConfig+0x244>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe feea 	bl	8002e34 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004064:	f7fe fee6 	bl	8002e34 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e187      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d036      	beq.n	80040fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d016      	beq.n	80040c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004096:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <HAL_RCC_OscConfig+0x248>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409c:	f7fe feca 	bl	8002e34 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a4:	f7fe fec6 	bl	8002e34 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e167      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCC_OscConfig+0x240>)
 80040b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x200>
 80040c2:	e01b      	b.n	80040fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040c4:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_RCC_OscConfig+0x248>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ca:	f7fe feb3 	bl	8002e34 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d0:	e00e      	b.n	80040f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d2:	f7fe feaf 	bl	8002e34 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d907      	bls.n	80040f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e150      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
 80040e4:	40023800 	.word	0x40023800
 80040e8:	42470000 	.word	0x42470000
 80040ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f0:	4b88      	ldr	r3, [pc, #544]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1ea      	bne.n	80040d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8097 	beq.w	8004238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410e:	4b81      	ldr	r3, [pc, #516]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10f      	bne.n	800413a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	4b7d      	ldr	r3, [pc, #500]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	4a7c      	ldr	r2, [pc, #496]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004128:	6413      	str	r3, [r2, #64]	@ 0x40
 800412a:	4b7a      	ldr	r3, [pc, #488]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413a:	4b77      	ldr	r3, [pc, #476]	@ (8004318 <HAL_RCC_OscConfig+0x474>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d118      	bne.n	8004178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004146:	4b74      	ldr	r3, [pc, #464]	@ (8004318 <HAL_RCC_OscConfig+0x474>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a73      	ldr	r2, [pc, #460]	@ (8004318 <HAL_RCC_OscConfig+0x474>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004152:	f7fe fe6f 	bl	8002e34 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fe fe6b 	bl	8002e34 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e10c      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	4b6a      	ldr	r3, [pc, #424]	@ (8004318 <HAL_RCC_OscConfig+0x474>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d106      	bne.n	800418e <HAL_RCC_OscConfig+0x2ea>
 8004180:	4b64      	ldr	r3, [pc, #400]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	4a63      	ldr	r2, [pc, #396]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6713      	str	r3, [r2, #112]	@ 0x70
 800418c:	e01c      	b.n	80041c8 <HAL_RCC_OscConfig+0x324>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x30c>
 8004196:	4b5f      	ldr	r3, [pc, #380]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	4a5e      	ldr	r2, [pc, #376]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0x324>
 80041b0:	4b58      	ldr	r3, [pc, #352]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	4a57      	ldr	r2, [pc, #348]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80041bc:	4b55      	ldr	r3, [pc, #340]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	4a54      	ldr	r2, [pc, #336]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fe fe30 	bl	8002e34 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fe fe2c 	bl	8002e34 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e0cb      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	4b49      	ldr	r3, [pc, #292]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ee      	beq.n	80041d8 <HAL_RCC_OscConfig+0x334>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041fc:	f7fe fe1a 	bl	8002e34 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fe fe16 	bl	8002e34 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0b5      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421a:	4b3e      	ldr	r3, [pc, #248]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ee      	bne.n	8004204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004226:	7dfb      	ldrb	r3, [r7, #23]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422c:	4b39      	ldr	r3, [pc, #228]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	4a38      	ldr	r2, [pc, #224]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004236:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a1 	beq.w	8004384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004242:	4b34      	ldr	r3, [pc, #208]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b08      	cmp	r3, #8
 800424c:	d05c      	beq.n	8004308 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d141      	bne.n	80042da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	4b31      	ldr	r3, [pc, #196]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fe fdea 	bl	8002e34 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fe fde6 	bl	8002e34 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e087      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	4b27      	ldr	r3, [pc, #156]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	491b      	ldr	r1, [pc, #108]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ac:	4b1b      	ldr	r3, [pc, #108]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fe fdbf 	bl	8002e34 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fe fdbb 	bl	8002e34 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e05c      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042cc:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x416>
 80042d8:	e054      	b.n	8004384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042da:	4b10      	ldr	r3, [pc, #64]	@ (800431c <HAL_RCC_OscConfig+0x478>)
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fe fda8 	bl	8002e34 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e8:	f7fe fda4 	bl	8002e34 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e045      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_RCC_OscConfig+0x470>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1f0      	bne.n	80042e8 <HAL_RCC_OscConfig+0x444>
 8004306:	e03d      	b.n	8004384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e038      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
 8004314:	40023800 	.word	0x40023800
 8004318:	40007000 	.word	0x40007000
 800431c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004320:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <HAL_RCC_OscConfig+0x4ec>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d028      	beq.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d121      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d11a      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004350:	4013      	ands	r3, r2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004358:	4293      	cmp	r3, r2
 800435a:	d111      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	3b01      	subs	r3, #1
 800436a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d107      	bne.n	8004380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d001      	beq.n	8004384 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0cc      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a8:	4b68      	ldr	r3, [pc, #416]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d90c      	bls.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b65      	ldr	r3, [pc, #404]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b63      	ldr	r3, [pc, #396]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0b8      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d020      	beq.n	800441e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043e8:	4b59      	ldr	r3, [pc, #356]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	4a58      	ldr	r2, [pc, #352]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004400:	4b53      	ldr	r3, [pc, #332]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a52      	ldr	r2, [pc, #328]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800440a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800440c:	4b50      	ldr	r3, [pc, #320]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	494d      	ldr	r1, [pc, #308]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d044      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d107      	bne.n	8004442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	4b47      	ldr	r3, [pc, #284]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d119      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e07f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d003      	beq.n	8004452 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444e:	2b03      	cmp	r3, #3
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004452:	4b3f      	ldr	r3, [pc, #252]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e06f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004462:	4b3b      	ldr	r3, [pc, #236]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e067      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004472:	4b37      	ldr	r3, [pc, #220]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 0203 	bic.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4934      	ldr	r1, [pc, #208]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004484:	f7fe fcd6 	bl	8002e34 <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f7fe fcd2 	bl	8002e34 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e04f      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 020c 	and.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d1eb      	bne.n	800448c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044b4:	4b25      	ldr	r3, [pc, #148]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d20c      	bcs.n	80044dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b22      	ldr	r3, [pc, #136]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b20      	ldr	r3, [pc, #128]	@ (800454c <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e032      	b.n	8004542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e8:	4b19      	ldr	r3, [pc, #100]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4916      	ldr	r1, [pc, #88]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	490e      	ldr	r1, [pc, #56]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800451a:	f000 f821 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 800451e:	4602      	mov	r2, r0
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	091b      	lsrs	r3, r3, #4
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	490a      	ldr	r1, [pc, #40]	@ (8004554 <HAL_RCC_ClockConfig+0x1c0>)
 800452c:	5ccb      	ldrb	r3, [r1, r3]
 800452e:	fa22 f303 	lsr.w	r3, r2, r3
 8004532:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <HAL_RCC_ClockConfig+0x1c4>)
 8004534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004536:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fc36 	bl	8002dac <HAL_InitTick>

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40023c00 	.word	0x40023c00
 8004550:	40023800 	.word	0x40023800
 8004554:	0800aa28 	.word	0x0800aa28
 8004558:	2000000c 	.word	0x2000000c
 800455c:	20000010 	.word	0x20000010

08004560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b090      	sub	sp, #64	@ 0x40
 8004566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004578:	4b59      	ldr	r3, [pc, #356]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b08      	cmp	r3, #8
 8004582:	d00d      	beq.n	80045a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004584:	2b08      	cmp	r3, #8
 8004586:	f200 80a1 	bhi.w	80046cc <HAL_RCC_GetSysClockFreq+0x16c>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x34>
 800458e:	2b04      	cmp	r3, #4
 8004590:	d003      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x3a>
 8004592:	e09b      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b53      	ldr	r3, [pc, #332]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004596:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004598:	e09b      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800459a:	4b53      	ldr	r3, [pc, #332]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800459c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800459e:	e098      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a0:	4b4f      	ldr	r3, [pc, #316]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045aa:	4b4d      	ldr	r3, [pc, #308]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d028      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b6:	4b4a      	ldr	r3, [pc, #296]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	099b      	lsrs	r3, r3, #6
 80045bc:	2200      	movs	r2, #0
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80045c8:	2100      	movs	r1, #0
 80045ca:	4b47      	ldr	r3, [pc, #284]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80045cc:	fb03 f201 	mul.w	r2, r3, r1
 80045d0:	2300      	movs	r3, #0
 80045d2:	fb00 f303 	mul.w	r3, r0, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	4a43      	ldr	r2, [pc, #268]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80045da:	fba0 1202 	umull	r1, r2, r0, r2
 80045de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045e0:	460a      	mov	r2, r1
 80045e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80045e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e6:	4413      	add	r3, r2
 80045e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ec:	2200      	movs	r2, #0
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	61fa      	str	r2, [r7, #28]
 80045f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80045fa:	f7fc fadd 	bl	8000bb8 <__aeabi_uldivmod>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4613      	mov	r3, r2
 8004604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004606:	e053      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004608:	4b35      	ldr	r3, [pc, #212]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	2200      	movs	r2, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	617a      	str	r2, [r7, #20]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800461a:	f04f 0b00 	mov.w	fp, #0
 800461e:	4652      	mov	r2, sl
 8004620:	465b      	mov	r3, fp
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	0159      	lsls	r1, r3, #5
 800462c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004630:	0150      	lsls	r0, r2, #5
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	ebb2 080a 	subs.w	r8, r2, sl
 800463a:	eb63 090b 	sbc.w	r9, r3, fp
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800464a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800464e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004652:	ebb2 0408 	subs.w	r4, r2, r8
 8004656:	eb63 0509 	sbc.w	r5, r3, r9
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	00eb      	lsls	r3, r5, #3
 8004664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004668:	00e2      	lsls	r2, r4, #3
 800466a:	4614      	mov	r4, r2
 800466c:	461d      	mov	r5, r3
 800466e:	eb14 030a 	adds.w	r3, r4, sl
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	eb45 030b 	adc.w	r3, r5, fp
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004686:	4629      	mov	r1, r5
 8004688:	028b      	lsls	r3, r1, #10
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004690:	4621      	mov	r1, r4
 8004692:	028a      	lsls	r2, r1, #10
 8004694:	4610      	mov	r0, r2
 8004696:	4619      	mov	r1, r3
 8004698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800469a:	2200      	movs	r2, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	60fa      	str	r2, [r7, #12]
 80046a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a4:	f7fc fa88 	bl	8000bb8 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4613      	mov	r3, r2
 80046ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	3301      	adds	r3, #1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80046c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046ca:	e002      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80046ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3740      	adds	r7, #64	@ 0x40
 80046d8:	46bd      	mov	sp, r7
 80046da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00f42400 	.word	0x00f42400
 80046e8:	017d7840 	.word	0x017d7840

080046ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f0:	4b03      	ldr	r3, [pc, #12]	@ (8004700 <HAL_RCC_GetHCLKFreq+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	2000000c 	.word	0x2000000c

08004704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004708:	f7ff fff0 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0a9b      	lsrs	r3, r3, #10
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	@ (8004728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	0800aa38 	.word	0x0800aa38

0800472c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004730:	f7ff ffdc 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	@ (800474c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0b5b      	lsrs	r3, r3, #13
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	@ (8004750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	0800aa38 	.word	0x0800aa38

08004754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07b      	b.n	800485e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d108      	bne.n	8004780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004776:	d009      	beq.n	800478c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	61da      	str	r2, [r3, #28]
 800477e:	e005      	b.n	800478c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fd fffa 	bl	80027a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004810:	ea42 0103 	orr.w	r1, r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	0c1b      	lsrs	r3, r3, #16
 800482a:	f003 0104 	and.w	r1, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	f003 0210 	and.w	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800484c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b088      	sub	sp, #32
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004876:	f7fe fadd 	bl	8002e34 <HAL_GetTick>
 800487a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	d001      	beq.n	8004890 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
 800488e:	e12a      	b.n	8004ae6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_SPI_Transmit+0x36>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e122      	b.n	8004ae6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_SPI_Transmit+0x48>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e11b      	b.n	8004ae6 <HAL_SPI_Transmit+0x280>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2203      	movs	r2, #3
 80048ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	88fa      	ldrh	r2, [r7, #6]
 80048d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048fc:	d10f      	bne.n	800491e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800490c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800491c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	d007      	beq.n	800493c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800493a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004944:	d152      	bne.n	80049ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_SPI_Transmit+0xee>
 800494e:	8b7b      	ldrh	r3, [r7, #26]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d145      	bne.n	80049e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004958:	881a      	ldrh	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004978:	e032      	b.n	80049e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b02      	cmp	r3, #2
 8004986:	d112      	bne.n	80049ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498c:	881a      	ldrh	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	1c9a      	adds	r2, r3, #2
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049ac:	e018      	b.n	80049e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ae:	f7fe fa41 	bl	8002e34 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d803      	bhi.n	80049c6 <HAL_SPI_Transmit+0x160>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d102      	bne.n	80049cc <HAL_SPI_Transmit+0x166>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e082      	b.n	8004ae6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1c7      	bne.n	800497a <HAL_SPI_Transmit+0x114>
 80049ea:	e053      	b.n	8004a94 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_SPI_Transmit+0x194>
 80049f4:	8b7b      	ldrh	r3, [r7, #26]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d147      	bne.n	8004a8a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	330c      	adds	r3, #12
 8004a04:	7812      	ldrb	r2, [r2, #0]
 8004a06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a20:	e033      	b.n	8004a8a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d113      	bne.n	8004a58 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	7812      	ldrb	r2, [r2, #0]
 8004a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a56:	e018      	b.n	8004a8a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a58:	f7fe f9ec 	bl	8002e34 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d803      	bhi.n	8004a70 <HAL_SPI_Transmit+0x20a>
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d102      	bne.n	8004a76 <HAL_SPI_Transmit+0x210>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e02d      	b.n	8004ae6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1c6      	bne.n	8004a22 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 fbd9 	bl	8005250 <SPI_EndRxTxTransaction>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b088      	sub	sp, #32
 8004af2:	af02      	add	r7, sp, #8
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d001      	beq.n	8004b0e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e104      	b.n	8004d18 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b16:	d112      	bne.n	8004b3e <HAL_SPI_Receive+0x50>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10e      	bne.n	8004b3e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2204      	movs	r2, #4
 8004b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b28:	88fa      	ldrh	r2, [r7, #6]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f8f3 	bl	8004d20 <HAL_SPI_TransmitReceive>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	e0ec      	b.n	8004d18 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b3e:	f7fe f979 	bl	8002e34 <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_Receive+0x62>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0e1      	b.n	8004d18 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_SPI_Receive+0x74>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0da      	b.n	8004d18 <HAL_SPI_Receive+0x22a>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb0:	d10f      	bne.n	8004bd2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004bd0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d007      	beq.n	8004bf0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d170      	bne.n	8004cda <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bf8:	e035      	b.n	8004c66 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d115      	bne.n	8004c34 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f103 020c 	add.w	r2, r3, #12
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c32:	e018      	b.n	8004c66 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c34:	f7fe f8fe 	bl	8002e34 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d803      	bhi.n	8004c4c <HAL_SPI_Receive+0x15e>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d102      	bne.n	8004c52 <HAL_SPI_Receive+0x164>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e058      	b.n	8004d18 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1c4      	bne.n	8004bfa <HAL_SPI_Receive+0x10c>
 8004c70:	e038      	b.n	8004ce4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d113      	bne.n	8004ca8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ca6:	e018      	b.n	8004cda <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca8:	f7fe f8c4 	bl	8002e34 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d803      	bhi.n	8004cc0 <HAL_SPI_Receive+0x1d2>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Receive+0x1d8>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e01e      	b.n	8004d18 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1c6      	bne.n	8004c72 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fa4b 	bl	8005184 <SPI_EndRxTransaction>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
  }
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	@ 0x28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d32:	f7fe f87f 	bl	8002e34 <HAL_GetTick>
 8004d36:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d3e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d46:	887b      	ldrh	r3, [r7, #2]
 8004d48:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d4a:	7ffb      	ldrb	r3, [r7, #31]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d00c      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x4a>
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d56:	d106      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_TransmitReceive+0x46>
 8004d60:	7ffb      	ldrb	r3, [r7, #31]
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d001      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
 8004d68:	e17f      	b.n	800506a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x5c>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0x5c>
 8004d76:	887b      	ldrh	r3, [r7, #2]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e174      	b.n	800506a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_SPI_TransmitReceive+0x6e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e16d      	b.n	800506a <HAL_SPI_TransmitReceive+0x34a>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d003      	beq.n	8004daa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2205      	movs	r2, #5
 8004da6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	887a      	ldrh	r2, [r7, #2]
 8004dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	887a      	ldrh	r2, [r7, #2]
 8004dc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	887a      	ldrh	r2, [r7, #2]
 8004dcc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	887a      	ldrh	r2, [r7, #2]
 8004dd2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dea:	2b40      	cmp	r3, #64	@ 0x40
 8004dec:	d007      	beq.n	8004dfe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e06:	d17e      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <HAL_SPI_TransmitReceive+0xf6>
 8004e10:	8afb      	ldrh	r3, [r7, #22]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d16c      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	881a      	ldrh	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e26:	1c9a      	adds	r2, r3, #2
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e3a:	e059      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d11b      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x162>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d016      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x162>
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d113      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	881a      	ldrh	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d119      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x1a4>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	b292      	uxth	r2, r2
 8004ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eac:	1c9a      	adds	r2, r3, #2
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ec4:	f7fd ffb6 	bl	8002e34 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	6a3b      	ldr	r3, [r7, #32]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d80d      	bhi.n	8004ef0 <HAL_SPI_TransmitReceive+0x1d0>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d009      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e0bc      	b.n	800506a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1a0      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x11c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d19b      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x11c>
 8004f04:	e082      	b.n	800500c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x1f4>
 8004f0e:	8afb      	ldrh	r3, [r7, #22]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d171      	bne.n	8004ff8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f3a:	e05d      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d11c      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x264>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d017      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x264>
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d114      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d119      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x2a6>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d014      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fc6:	f7fd ff35 	bl	8002e34 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d803      	bhi.n	8004fde <HAL_SPI_TransmitReceive+0x2be>
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d102      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x2c4>
 8004fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e038      	b.n	800506a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d19c      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x21c>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d197      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f91d 	bl	8005250 <SPI_EndRxTxTransaction>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e01d      	b.n	800506a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005068:	2300      	movs	r3, #0
  }
}
 800506a:	4618      	mov	r0, r3
 800506c:	3728      	adds	r7, #40	@ 0x28
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005084:	f7fd fed6 	bl	8002e34 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	4413      	add	r3, r2
 8005092:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005094:	f7fd fece 	bl	8002e34 <HAL_GetTick>
 8005098:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509a:	4b39      	ldr	r3, [pc, #228]	@ (8005180 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	015b      	lsls	r3, r3, #5
 80050a0:	0d1b      	lsrs	r3, r3, #20
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050aa:	e054      	b.n	8005156 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d050      	beq.n	8005156 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b4:	f7fd febe 	bl	8002e34 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d902      	bls.n	80050ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d13d      	bne.n	8005146 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050e2:	d111      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ec:	d004      	beq.n	80050f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f6:	d107      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005110:	d10f      	bne.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e017      	b.n	8005176 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3b01      	subs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	429a      	cmp	r2, r3
 8005172:	d19b      	bne.n	80050ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	2000000c 	.word	0x2000000c

08005184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005198:	d111      	bne.n	80051be <SPI_EndRxTransaction+0x3a>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a2:	d004      	beq.n	80051ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ac:	d107      	bne.n	80051be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051c6:	d12a      	bne.n	800521e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d0:	d012      	beq.n	80051f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	2180      	movs	r1, #128	@ 0x80
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff ff49 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d02d      	beq.n	8005244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e026      	b.n	8005246 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	2101      	movs	r1, #1
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff ff36 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01a      	beq.n	8005244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e013      	b.n	8005246 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	2101      	movs	r1, #1
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7ff ff23 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e000      	b.n	8005246 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2201      	movs	r2, #1
 8005264:	2102      	movs	r1, #2
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff ff04 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e032      	b.n	80052e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005282:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <SPI_EndRxTxTransaction+0xa0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1b      	ldr	r2, [pc, #108]	@ (80052f4 <SPI_EndRxTxTransaction+0xa4>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	0d5b      	lsrs	r3, r3, #21
 800528e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a0:	d112      	bne.n	80052c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2180      	movs	r1, #128	@ 0x80
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff fee1 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e00f      	b.n	80052e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052de:	2b80      	cmp	r3, #128	@ 0x80
 80052e0:	d0f2      	beq.n	80052c8 <SPI_EndRxTxTransaction+0x78>
 80052e2:	e000      	b.n	80052e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80052e4:	bf00      	nop
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	2000000c 	.word	0x2000000c
 80052f4:	165e9f81 	.word	0x165e9f81

080052f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e041      	b.n	800538e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fd fa86 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3304      	adds	r3, #4
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f000 fd70 	bl	8005e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e044      	b.n	800543a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005448 <HAL_TIM_Base_Start_IT+0xb0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d018      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053da:	d013      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1a      	ldr	r2, [pc, #104]	@ (800544c <HAL_TIM_Base_Start_IT+0xb4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00e      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a19      	ldr	r2, [pc, #100]	@ (8005450 <HAL_TIM_Base_Start_IT+0xb8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a17      	ldr	r2, [pc, #92]	@ (8005454 <HAL_TIM_Base_Start_IT+0xbc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_TIM_Base_Start_IT+0x6c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a16      	ldr	r2, [pc, #88]	@ (8005458 <HAL_TIM_Base_Start_IT+0xc0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d111      	bne.n	8005428 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b06      	cmp	r3, #6
 8005414:	d010      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	e007      	b.n	8005438 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40000400 	.word	0x40000400
 8005450:	40000800 	.word	0x40000800
 8005454:	40000c00 	.word	0x40000c00
 8005458:	40014000 	.word	0x40014000

0800545c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e041      	b.n	80054f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f839 	bl	80054fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f000 fcbe 	bl	8005e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <HAL_TIM_PWM_Start+0x24>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	e022      	b.n	800557a <HAL_TIM_PWM_Start+0x6a>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b04      	cmp	r3, #4
 8005538:	d109      	bne.n	800554e <HAL_TIM_PWM_Start+0x3e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b01      	cmp	r3, #1
 8005544:	bf14      	ite	ne
 8005546:	2301      	movne	r3, #1
 8005548:	2300      	moveq	r3, #0
 800554a:	b2db      	uxtb	r3, r3
 800554c:	e015      	b.n	800557a <HAL_TIM_PWM_Start+0x6a>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d109      	bne.n	8005568 <HAL_TIM_PWM_Start+0x58>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b01      	cmp	r3, #1
 800555e:	bf14      	ite	ne
 8005560:	2301      	movne	r3, #1
 8005562:	2300      	moveq	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e008      	b.n	800557a <HAL_TIM_PWM_Start+0x6a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e068      	b.n	8005654 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <HAL_TIM_PWM_Start+0x82>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005590:	e013      	b.n	80055ba <HAL_TIM_PWM_Start+0xaa>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b04      	cmp	r3, #4
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_PWM_Start+0x92>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a0:	e00b      	b.n	80055ba <HAL_TIM_PWM_Start+0xaa>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d104      	bne.n	80055b2 <HAL_TIM_PWM_Start+0xa2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b0:	e003      	b.n	80055ba <HAL_TIM_PWM_Start+0xaa>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2201      	movs	r2, #1
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fedc 	bl	8006380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a23      	ldr	r2, [pc, #140]	@ (800565c <HAL_TIM_PWM_Start+0x14c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d107      	bne.n	80055e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1d      	ldr	r2, [pc, #116]	@ (800565c <HAL_TIM_PWM_Start+0x14c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d018      	beq.n	800561e <HAL_TIM_PWM_Start+0x10e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f4:	d013      	beq.n	800561e <HAL_TIM_PWM_Start+0x10e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a19      	ldr	r2, [pc, #100]	@ (8005660 <HAL_TIM_PWM_Start+0x150>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00e      	beq.n	800561e <HAL_TIM_PWM_Start+0x10e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a17      	ldr	r2, [pc, #92]	@ (8005664 <HAL_TIM_PWM_Start+0x154>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_TIM_PWM_Start+0x10e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a16      	ldr	r2, [pc, #88]	@ (8005668 <HAL_TIM_PWM_Start+0x158>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_TIM_PWM_Start+0x10e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a14      	ldr	r2, [pc, #80]	@ (800566c <HAL_TIM_PWM_Start+0x15c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d111      	bne.n	8005642 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d010      	beq.n	8005652 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005640:	e007      	b.n	8005652 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40010000 	.word	0x40010000
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40000c00 	.word	0x40000c00
 800566c:	40014000 	.word	0x40014000

08005670 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e097      	b.n	80057b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fd f907 	bl	80028ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056b4:	f023 0307 	bic.w	r3, r3, #7
 80056b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f000 fba9 	bl	8005e1c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	4313      	orrs	r3, r2
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005710:	f023 030c 	bic.w	r3, r3, #12
 8005714:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800571c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	4313      	orrs	r3, r2
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	011a      	lsls	r2, r3, #4
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	031b      	lsls	r3, r3, #12
 8005740:	4313      	orrs	r3, r2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	4313      	orrs	r3, r2
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d110      	bne.n	800580e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d102      	bne.n	80057f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057f2:	7b7b      	ldrb	r3, [r7, #13]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d001      	beq.n	80057fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e069      	b.n	80058d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800580c:	e031      	b.n	8005872 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b04      	cmp	r3, #4
 8005812:	d110      	bne.n	8005836 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d102      	bne.n	8005820 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800581a:	7b3b      	ldrb	r3, [r7, #12]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d001      	beq.n	8005824 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e055      	b.n	80058d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005834:	e01d      	b.n	8005872 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d108      	bne.n	800584e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d105      	bne.n	800584e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005842:	7b7b      	ldrb	r3, [r7, #13]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d102      	bne.n	800584e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005848:	7b3b      	ldrb	r3, [r7, #12]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d001      	beq.n	8005852 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e03e      	b.n	80058d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2202      	movs	r2, #2
 800586e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_TIM_Encoder_Start+0xc4>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b04      	cmp	r3, #4
 800587c:	d008      	beq.n	8005890 <HAL_TIM_Encoder_Start+0xd4>
 800587e:	e00f      	b.n	80058a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2201      	movs	r2, #1
 8005886:	2100      	movs	r1, #0
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fd79 	bl	8006380 <TIM_CCxChannelCmd>
      break;
 800588e:	e016      	b.n	80058be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2201      	movs	r2, #1
 8005896:	2104      	movs	r1, #4
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fd71 	bl	8006380 <TIM_CCxChannelCmd>
      break;
 800589e:	e00e      	b.n	80058be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2201      	movs	r2, #1
 80058a6:	2100      	movs	r1, #0
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fd69 	bl	8006380 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2201      	movs	r2, #1
 80058b4:	2104      	movs	r1, #4
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fd62 	bl	8006380 <TIM_CCxChannelCmd>
      break;
 80058bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d020      	beq.n	800593c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01b      	beq.n	800593c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0202 	mvn.w	r2, #2
 800590c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fa5b 	bl	8005dde <HAL_TIM_IC_CaptureCallback>
 8005928:	e005      	b.n	8005936 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fa4d 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fa5e 	bl	8005df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d020      	beq.n	8005988 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01b      	beq.n	8005988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0204 	mvn.w	r2, #4
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa35 	bl	8005dde <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa27 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fa38 	bl	8005df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d020      	beq.n	80059d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01b      	beq.n	80059d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0208 	mvn.w	r2, #8
 80059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2204      	movs	r2, #4
 80059aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fa0f 	bl	8005dde <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fa01 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa12 	bl	8005df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d020      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01b      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0210 	mvn.w	r2, #16
 80059f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2208      	movs	r2, #8
 80059f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f9e9 	bl	8005dde <HAL_TIM_IC_CaptureCallback>
 8005a0c:	e005      	b.n	8005a1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9db 	bl	8005dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f9ec 	bl	8005df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0201 	mvn.w	r2, #1
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fb ff44 	bl	80018cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fd2a 	bl	80064bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9bd 	bl	8005e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00c      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d007      	beq.n	8005ab0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0220 	mvn.w	r2, #32
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fcfc 	bl	80064a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e0ae      	b.n	8005c34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b0c      	cmp	r3, #12
 8005ae2:	f200 809f 	bhi.w	8005c24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b21 	.word	0x08005b21
 8005af0:	08005c25 	.word	0x08005c25
 8005af4:	08005c25 	.word	0x08005c25
 8005af8:	08005c25 	.word	0x08005c25
 8005afc:	08005b61 	.word	0x08005b61
 8005b00:	08005c25 	.word	0x08005c25
 8005b04:	08005c25 	.word	0x08005c25
 8005b08:	08005c25 	.word	0x08005c25
 8005b0c:	08005ba3 	.word	0x08005ba3
 8005b10:	08005c25 	.word	0x08005c25
 8005b14:	08005c25 	.word	0x08005c25
 8005b18:	08005c25 	.word	0x08005c25
 8005b1c:	08005be3 	.word	0x08005be3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fa04 	bl	8005f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699a      	ldr	r2, [r3, #24]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0208 	orr.w	r2, r2, #8
 8005b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0204 	bic.w	r2, r2, #4
 8005b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6999      	ldr	r1, [r3, #24]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	619a      	str	r2, [r3, #24]
      break;
 8005b5e:	e064      	b.n	8005c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fa4a 	bl	8006000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	021a      	lsls	r2, r3, #8
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	619a      	str	r2, [r3, #24]
      break;
 8005ba0:	e043      	b.n	8005c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fa95 	bl	80060d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0208 	orr.w	r2, r2, #8
 8005bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69da      	ldr	r2, [r3, #28]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0204 	bic.w	r2, r2, #4
 8005bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69d9      	ldr	r1, [r3, #28]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	61da      	str	r2, [r3, #28]
      break;
 8005be0:	e023      	b.n	8005c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fadf 	bl	80061ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	021a      	lsls	r2, r3, #8
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	61da      	str	r2, [r3, #28]
      break;
 8005c22:	e002      	b.n	8005c2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	75fb      	strb	r3, [r7, #23]
      break;
 8005c28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_TIM_ConfigClockSource+0x1c>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e0b4      	b.n	8005dc2 <HAL_TIM_ConfigClockSource+0x186>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c90:	d03e      	beq.n	8005d10 <HAL_TIM_ConfigClockSource+0xd4>
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c96:	f200 8087 	bhi.w	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
 8005c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c9e:	f000 8086 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x172>
 8005ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca6:	d87f      	bhi.n	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ca8:	2b70      	cmp	r3, #112	@ 0x70
 8005caa:	d01a      	beq.n	8005ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8005cac:	2b70      	cmp	r3, #112	@ 0x70
 8005cae:	d87b      	bhi.n	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb0:	2b60      	cmp	r3, #96	@ 0x60
 8005cb2:	d050      	beq.n	8005d56 <HAL_TIM_ConfigClockSource+0x11a>
 8005cb4:	2b60      	cmp	r3, #96	@ 0x60
 8005cb6:	d877      	bhi.n	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb8:	2b50      	cmp	r3, #80	@ 0x50
 8005cba:	d03c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0xfa>
 8005cbc:	2b50      	cmp	r3, #80	@ 0x50
 8005cbe:	d873      	bhi.n	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b40      	cmp	r3, #64	@ 0x40
 8005cc2:	d058      	beq.n	8005d76 <HAL_TIM_ConfigClockSource+0x13a>
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d86f      	bhi.n	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b30      	cmp	r3, #48	@ 0x30
 8005cca:	d064      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0x15a>
 8005ccc:	2b30      	cmp	r3, #48	@ 0x30
 8005cce:	d86b      	bhi.n	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d060      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0x15a>
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d867      	bhi.n	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d05c      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0x15a>
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d05a      	beq.n	8005d96 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce0:	e062      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cf2:	f000 fb25 	bl	8006340 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	609a      	str	r2, [r3, #8]
      break;
 8005d0e:	e04f      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d20:	f000 fb0e 	bl	8006340 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d32:	609a      	str	r2, [r3, #8]
      break;
 8005d34:	e03c      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d42:	461a      	mov	r2, r3
 8005d44:	f000 fa82 	bl	800624c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2150      	movs	r1, #80	@ 0x50
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fadb 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 8005d54:	e02c      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d62:	461a      	mov	r2, r3
 8005d64:	f000 faa1 	bl	80062aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2160      	movs	r1, #96	@ 0x60
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 facb 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 8005d74:	e01c      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d82:	461a      	mov	r2, r3
 8005d84:	f000 fa62 	bl	800624c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2140      	movs	r1, #64	@ 0x40
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fabb 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 8005d94:	e00c      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f000 fab2 	bl	800630a <TIM_ITRx_SetConfig>
      break;
 8005da6:	e003      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dac:	e000      	b.n	8005db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f18 <TIM_Base_SetConfig+0xfc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00f      	beq.n	8005e54 <TIM_Base_SetConfig+0x38>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e3a:	d00b      	beq.n	8005e54 <TIM_Base_SetConfig+0x38>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a37      	ldr	r2, [pc, #220]	@ (8005f1c <TIM_Base_SetConfig+0x100>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d007      	beq.n	8005e54 <TIM_Base_SetConfig+0x38>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a36      	ldr	r2, [pc, #216]	@ (8005f20 <TIM_Base_SetConfig+0x104>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_Base_SetConfig+0x38>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a35      	ldr	r2, [pc, #212]	@ (8005f24 <TIM_Base_SetConfig+0x108>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d108      	bne.n	8005e66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2b      	ldr	r2, [pc, #172]	@ (8005f18 <TIM_Base_SetConfig+0xfc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01b      	beq.n	8005ea6 <TIM_Base_SetConfig+0x8a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e74:	d017      	beq.n	8005ea6 <TIM_Base_SetConfig+0x8a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a28      	ldr	r2, [pc, #160]	@ (8005f1c <TIM_Base_SetConfig+0x100>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <TIM_Base_SetConfig+0x8a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a27      	ldr	r2, [pc, #156]	@ (8005f20 <TIM_Base_SetConfig+0x104>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <TIM_Base_SetConfig+0x8a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a26      	ldr	r2, [pc, #152]	@ (8005f24 <TIM_Base_SetConfig+0x108>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <TIM_Base_SetConfig+0x8a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a25      	ldr	r2, [pc, #148]	@ (8005f28 <TIM_Base_SetConfig+0x10c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <TIM_Base_SetConfig+0x8a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a24      	ldr	r2, [pc, #144]	@ (8005f2c <TIM_Base_SetConfig+0x110>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_Base_SetConfig+0x8a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a23      	ldr	r2, [pc, #140]	@ (8005f30 <TIM_Base_SetConfig+0x114>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d108      	bne.n	8005eb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a0e      	ldr	r2, [pc, #56]	@ (8005f18 <TIM_Base_SetConfig+0xfc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d103      	bne.n	8005eec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d105      	bne.n	8005f0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40010000 	.word	0x40010000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400
 8005f30:	40014800 	.word	0x40014800

08005f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b087      	sub	sp, #28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	f023 0201 	bic.w	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f023 0302 	bic.w	r3, r3, #2
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ffc <TIM_OC1_SetConfig+0xc8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d10c      	bne.n	8005faa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0308 	bic.w	r3, r3, #8
 8005f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f023 0304 	bic.w	r3, r3, #4
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a13      	ldr	r2, [pc, #76]	@ (8005ffc <TIM_OC1_SetConfig+0xc8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d111      	bne.n	8005fd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	621a      	str	r2, [r3, #32]
}
 8005ff0:	bf00      	nop
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	40010000 	.word	0x40010000

08006000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f023 0210 	bic.w	r2, r3, #16
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800602e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0320 	bic.w	r3, r3, #32
 800604a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	697a      	ldr	r2, [r7, #20]
 8006054:	4313      	orrs	r3, r2
 8006056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a1e      	ldr	r2, [pc, #120]	@ (80060d4 <TIM_OC2_SetConfig+0xd4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10d      	bne.n	800607c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a15      	ldr	r2, [pc, #84]	@ (80060d4 <TIM_OC2_SetConfig+0xd4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d113      	bne.n	80060ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800608a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000

080060d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1d      	ldr	r2, [pc, #116]	@ (80061a8 <TIM_OC3_SetConfig+0xd0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d10d      	bne.n	8006152 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800613c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a14      	ldr	r2, [pc, #80]	@ (80061a8 <TIM_OC3_SetConfig+0xd0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d113      	bne.n	8006182 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	4313      	orrs	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	621a      	str	r2, [r3, #32]
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	40010000 	.word	0x40010000

080061ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	031b      	lsls	r3, r3, #12
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a10      	ldr	r2, [pc, #64]	@ (8006248 <TIM_OC4_SetConfig+0x9c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d109      	bne.n	8006220 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	019b      	lsls	r3, r3, #6
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40010000 	.word	0x40010000

0800624c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f023 0201 	bic.w	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f023 030a 	bic.w	r3, r3, #10
 8006288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	621a      	str	r2, [r3, #32]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f023 0210 	bic.w	r2, r3, #16
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	621a      	str	r2, [r3, #32]
}
 80062fe:	bf00      	nop
 8006300:	371c      	adds	r7, #28
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
 8006312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	f043 0307 	orr.w	r3, r3, #7
 800632c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800635a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	021a      	lsls	r2, r3, #8
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	431a      	orrs	r2, r3
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	609a      	str	r2, [r3, #8]
}
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006380:	b480      	push	{r7}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 031f 	and.w	r3, r3, #31
 8006392:	2201      	movs	r2, #1
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a1a      	ldr	r2, [r3, #32]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	401a      	ands	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	fa01 f303 	lsl.w	r3, r1, r3
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e050      	b.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d018      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006430:	d013      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a18      	ldr	r2, [pc, #96]	@ (8006498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00e      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a16      	ldr	r2, [pc, #88]	@ (800649c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d009      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a15      	ldr	r2, [pc, #84]	@ (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a13      	ldr	r2, [pc, #76]	@ (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d10c      	bne.n	8006474 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	4313      	orrs	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40014000 	.word	0x40014000

080064a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e042      	b.n	8006568 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fc faae 	bl	8002a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2224      	movs	r2, #36	@ 0x24
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fdbd 	bl	8007094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695a      	ldr	r2, [r3, #20]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	@ 0x28
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4613      	mov	r3, r2
 800657e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b20      	cmp	r3, #32
 800658e:	d175      	bne.n	800667c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Transmit+0x2c>
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e06e      	b.n	800667e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2221      	movs	r2, #33	@ 0x21
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ae:	f7fc fc41 	bl	8002e34 <HAL_GetTick>
 80065b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	88fa      	ldrh	r2, [r7, #6]
 80065b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	88fa      	ldrh	r2, [r7, #6]
 80065be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c8:	d108      	bne.n	80065dc <HAL_UART_Transmit+0x6c>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	e003      	b.n	80065e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065e4:	e02e      	b.n	8006644 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2200      	movs	r2, #0
 80065ee:	2180      	movs	r1, #128	@ 0x80
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fb1f 	bl	8006c34 <UART_WaitOnFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e03a      	b.n	800667e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10b      	bne.n	8006626 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800661c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	3302      	adds	r3, #2
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	e007      	b.n	8006636 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	3301      	adds	r3, #1
 8006634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1cb      	bne.n	80065e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2200      	movs	r2, #0
 8006656:	2140      	movs	r1, #64	@ 0x40
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 faeb 	bl	8006c34 <UART_WaitOnFlagUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e006      	b.n	800667e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	e000      	b.n	800667e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800667c:	2302      	movs	r3, #2
  }
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	4613      	mov	r3, r2
 8006692:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b20      	cmp	r3, #32
 800669e:	d112      	bne.n	80066c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_UART_Receive_IT+0x26>
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e00b      	b.n	80066c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	461a      	mov	r2, r3
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 fb12 	bl	8006ce6 <UART_Start_Receive_IT>
 80066c2:	4603      	mov	r3, r0
 80066c4:	e000      	b.n	80066c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80066c6:	2302      	movs	r3, #2
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b0ba      	sub	sp, #232	@ 0xe8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800670e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10f      	bne.n	8006736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <HAL_UART_IRQHandler+0x66>
 8006722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fbf2 	bl	8006f18 <UART_Receive_IT>
      return;
 8006734:	e25b      	b.n	8006bee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80de 	beq.w	80068fc <HAL_UART_IRQHandler+0x22c>
 8006740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006750:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 80d1 	beq.w	80068fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_UART_IRQHandler+0xae>
 8006766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f043 0201 	orr.w	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00b      	beq.n	80067a2 <HAL_UART_IRQHandler+0xd2>
 800678a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679a:	f043 0202 	orr.w	r2, r3, #2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <HAL_UART_IRQHandler+0xf6>
 80067ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067be:	f043 0204 	orr.w	r2, r3, #4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d011      	beq.n	80067f6 <HAL_UART_IRQHandler+0x126>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d105      	bne.n	80067ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80067de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ee:	f043 0208 	orr.w	r2, r3, #8
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 81f2 	beq.w	8006be4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b00      	cmp	r3, #0
 800680a:	d008      	beq.n	800681e <HAL_UART_IRQHandler+0x14e>
 800680c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fb7d 	bl	8006f18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <HAL_UART_IRQHandler+0x17a>
 8006842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d04f      	beq.n	80068ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa85 	bl	8006d5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685a:	2b40      	cmp	r3, #64	@ 0x40
 800685c:	d141      	bne.n	80068e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3314      	adds	r3, #20
 8006864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800687c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3314      	adds	r3, #20
 8006886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800688a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800688e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1d9      	bne.n	800685e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d013      	beq.n	80068da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ab0 <HAL_UART_IRQHandler+0x3e0>)
 80068b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fc fc69 	bl	8003196 <HAL_DMA_Abort_IT>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d016      	beq.n	80068f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80068d4:	4610      	mov	r0, r2
 80068d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	e00e      	b.n	80068f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f994 	bl	8006c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e0:	e00a      	b.n	80068f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f990 	bl	8006c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	e006      	b.n	80068f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f98c 	bl	8006c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80068f6:	e175      	b.n	8006be4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f8:	bf00      	nop
    return;
 80068fa:	e173      	b.n	8006be4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	2b01      	cmp	r3, #1
 8006902:	f040 814f 	bne.w	8006ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 8148 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8141 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006942:	2b40      	cmp	r3, #64	@ 0x40
 8006944:	f040 80b6 	bne.w	8006ab4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8145 	beq.w	8006be8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006966:	429a      	cmp	r2, r3
 8006968:	f080 813e 	bcs.w	8006be8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006972:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800697e:	f000 8088 	beq.w	8006a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	330c      	adds	r3, #12
 8006988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800699c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	330c      	adds	r3, #12
 80069aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80069ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80069b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069be:	e841 2300 	strex	r3, r2, [r1]
 80069c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80069c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1d9      	bne.n	8006982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3314      	adds	r3, #20
 80069d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3314      	adds	r3, #20
 80069ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e1      	bne.n	80069ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3314      	adds	r3, #20
 8006a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a14:	e853 3f00 	ldrex	r3, [r3]
 8006a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3314      	adds	r3, #20
 8006a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e3      	bne.n	8006a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a62:	f023 0310 	bic.w	r3, r3, #16
 8006a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a74:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a76:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a7a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e3      	bne.n	8006a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fc fb12 	bl	80030b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8b7 	bl	8006c1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006aae:	e09b      	b.n	8006be8 <HAL_UART_IRQHandler+0x518>
 8006ab0:	08006e21 	.word	0x08006e21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 808e 	beq.w	8006bec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8089 	beq.w	8006bec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e3      	bne.n	8006ada <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	623b      	str	r3, [r7, #32]
   return(result);
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f023 0301 	bic.w	r3, r3, #1
 8006b28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3314      	adds	r3, #20
 8006b32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b36:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e3      	bne.n	8006b12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0310 	bic.w	r3, r3, #16
 8006b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b7c:	61fa      	str	r2, [r7, #28]
 8006b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	69b9      	ldr	r1, [r7, #24]
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	617b      	str	r3, [r7, #20]
   return(result);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e3      	bne.n	8006b58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f83d 	bl	8006c1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ba2:	e023      	b.n	8006bec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d009      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x4f4>
 8006bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f943 	bl	8006e48 <UART_Transmit_IT>
    return;
 8006bc2:	e014      	b.n	8006bee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00e      	beq.n	8006bee <HAL_UART_IRQHandler+0x51e>
 8006bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d008      	beq.n	8006bee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f983 	bl	8006ee8 <UART_EndTransmit_IT>
    return;
 8006be2:	e004      	b.n	8006bee <HAL_UART_IRQHandler+0x51e>
    return;
 8006be4:	bf00      	nop
 8006be6:	e002      	b.n	8006bee <HAL_UART_IRQHandler+0x51e>
      return;
 8006be8:	bf00      	nop
 8006bea:	e000      	b.n	8006bee <HAL_UART_IRQHandler+0x51e>
      return;
 8006bec:	bf00      	nop
  }
}
 8006bee:	37e8      	adds	r7, #232	@ 0xe8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c44:	e03b      	b.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d037      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c4e:	f7fc f8f1 	bl	8002e34 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	6a3a      	ldr	r2, [r7, #32]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d302      	bcc.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e03a      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0304 	and.w	r3, r3, #4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d023      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2b80      	cmp	r3, #128	@ 0x80
 8006c7a:	d020      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b40      	cmp	r3, #64	@ 0x40
 8006c80:	d01d      	beq.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d116      	bne.n	8006cbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f857 	bl	8006d5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2208      	movs	r2, #8
 8006cb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e00f      	b.n	8006cde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	bf0c      	ite	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	2300      	movne	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d0b4      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	88fa      	ldrh	r2, [r7, #6]
 8006cfe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2222      	movs	r2, #34	@ 0x22
 8006d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d2a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695a      	ldr	r2, [r3, #20]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0220 	orr.w	r2, r2, #32
 8006d4a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b095      	sub	sp, #84	@ 0x54
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	330c      	adds	r3, #12
 8006d80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d82:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e5      	bne.n	8006d62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3314      	adds	r3, #20
 8006d9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	e853 3f00 	ldrex	r3, [r3]
 8006da4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	f023 0301 	bic.w	r3, r3, #1
 8006dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3314      	adds	r3, #20
 8006db4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e5      	bne.n	8006d96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d119      	bne.n	8006e06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	330c      	adds	r3, #12
 8006dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f023 0310 	bic.w	r3, r3, #16
 8006de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006df2:	61ba      	str	r2, [r7, #24]
 8006df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df6:	6979      	ldr	r1, [r7, #20]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	e841 2300 	strex	r3, r2, [r1]
 8006dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1e5      	bne.n	8006dd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e14:	bf00      	nop
 8006e16:	3754      	adds	r7, #84	@ 0x54
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fee4 	bl	8006c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b21      	cmp	r3, #33	@ 0x21
 8006e5a:	d13e      	bne.n	8006eda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e64:	d114      	bne.n	8006e90 <UART_Transmit_IT+0x48>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d110      	bne.n	8006e90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	1c9a      	adds	r2, r3, #2
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	621a      	str	r2, [r3, #32]
 8006e8e:	e008      	b.n	8006ea2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	1c59      	adds	r1, r3, #1
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	6211      	str	r1, [r2, #32]
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10f      	bne.n	8006ed6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ec4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ed4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e000      	b.n	8006edc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006eda:	2302      	movs	r3, #2
  }
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006efe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff fe73 	bl	8006bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08c      	sub	sp, #48	@ 0x30
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b22      	cmp	r3, #34	@ 0x22
 8006f2a:	f040 80ae 	bne.w	800708a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f36:	d117      	bne.n	8006f68 <UART_Receive_IT+0x50>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d113      	bne.n	8006f68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f60:	1c9a      	adds	r2, r3, #2
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f66:	e026      	b.n	8006fb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f7a:	d007      	beq.n	8006f8c <UART_Receive_IT+0x74>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <UART_Receive_IT+0x82>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d106      	bne.n	8006f9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e008      	b.n	8006fac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006faa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d15d      	bne.n	8007086 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0220 	bic.w	r2, r2, #32
 8006fd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fe8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	695a      	ldr	r2, [r3, #20]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700c:	2b01      	cmp	r3, #1
 800700e:	d135      	bne.n	800707c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	330c      	adds	r3, #12
 800701c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	613b      	str	r3, [r7, #16]
   return(result);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f023 0310 	bic.w	r3, r3, #16
 800702c:	627b      	str	r3, [r7, #36]	@ 0x24
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007036:	623a      	str	r2, [r7, #32]
 8007038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	69f9      	ldr	r1, [r7, #28]
 800703c:	6a3a      	ldr	r2, [r7, #32]
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	61bb      	str	r3, [r7, #24]
   return(result);
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e5      	bne.n	8007016 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b10      	cmp	r3, #16
 8007056:	d10a      	bne.n	800706e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff fdd1 	bl	8006c1c <HAL_UARTEx_RxEventCallback>
 800707a:	e002      	b.n	8007082 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7f9 ff51 	bl	8000f24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	e002      	b.n	800708c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e000      	b.n	800708c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800708a:	2302      	movs	r3, #2
  }
}
 800708c:	4618      	mov	r0, r3
 800708e:	3730      	adds	r7, #48	@ 0x30
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007098:	b0c0      	sub	sp, #256	@ 0x100
 800709a:	af00      	add	r7, sp, #0
 800709c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b0:	68d9      	ldr	r1, [r3, #12]
 80070b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	ea40 0301 	orr.w	r3, r0, r1
 80070bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	431a      	orrs	r2, r3
 80070d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d8:	69db      	ldr	r3, [r3, #28]
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80070ec:	f021 010c 	bic.w	r1, r1, #12
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070fa:	430b      	orrs	r3, r1
 80070fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800710a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710e:	6999      	ldr	r1, [r3, #24]
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	ea40 0301 	orr.w	r3, r0, r1
 800711a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	4b8f      	ldr	r3, [pc, #572]	@ (8007360 <UART_SetConfig+0x2cc>)
 8007124:	429a      	cmp	r2, r3
 8007126:	d005      	beq.n	8007134 <UART_SetConfig+0xa0>
 8007128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b8d      	ldr	r3, [pc, #564]	@ (8007364 <UART_SetConfig+0x2d0>)
 8007130:	429a      	cmp	r2, r3
 8007132:	d104      	bne.n	800713e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007134:	f7fd fafa 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8007138:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800713c:	e003      	b.n	8007146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800713e:	f7fd fae1 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8007142:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007150:	f040 810c 	bne.w	800736c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007158:	2200      	movs	r2, #0
 800715a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800715e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007166:	4622      	mov	r2, r4
 8007168:	462b      	mov	r3, r5
 800716a:	1891      	adds	r1, r2, r2
 800716c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800716e:	415b      	adcs	r3, r3
 8007170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007176:	4621      	mov	r1, r4
 8007178:	eb12 0801 	adds.w	r8, r2, r1
 800717c:	4629      	mov	r1, r5
 800717e:	eb43 0901 	adc.w	r9, r3, r1
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800718e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007196:	4690      	mov	r8, r2
 8007198:	4699      	mov	r9, r3
 800719a:	4623      	mov	r3, r4
 800719c:	eb18 0303 	adds.w	r3, r8, r3
 80071a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071a4:	462b      	mov	r3, r5
 80071a6:	eb49 0303 	adc.w	r3, r9, r3
 80071aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071c2:	460b      	mov	r3, r1
 80071c4:	18db      	adds	r3, r3, r3
 80071c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80071c8:	4613      	mov	r3, r2
 80071ca:	eb42 0303 	adc.w	r3, r2, r3
 80071ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80071d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071d8:	f7f9 fcee 	bl	8000bb8 <__aeabi_uldivmod>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4b61      	ldr	r3, [pc, #388]	@ (8007368 <UART_SetConfig+0x2d4>)
 80071e2:	fba3 2302 	umull	r2, r3, r3, r2
 80071e6:	095b      	lsrs	r3, r3, #5
 80071e8:	011c      	lsls	r4, r3, #4
 80071ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80071f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80071fc:	4642      	mov	r2, r8
 80071fe:	464b      	mov	r3, r9
 8007200:	1891      	adds	r1, r2, r2
 8007202:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007204:	415b      	adcs	r3, r3
 8007206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800720c:	4641      	mov	r1, r8
 800720e:	eb12 0a01 	adds.w	sl, r2, r1
 8007212:	4649      	mov	r1, r9
 8007214:	eb43 0b01 	adc.w	fp, r3, r1
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800722c:	4692      	mov	sl, r2
 800722e:	469b      	mov	fp, r3
 8007230:	4643      	mov	r3, r8
 8007232:	eb1a 0303 	adds.w	r3, sl, r3
 8007236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800723a:	464b      	mov	r3, r9
 800723c:	eb4b 0303 	adc.w	r3, fp, r3
 8007240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007250:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007258:	460b      	mov	r3, r1
 800725a:	18db      	adds	r3, r3, r3
 800725c:	643b      	str	r3, [r7, #64]	@ 0x40
 800725e:	4613      	mov	r3, r2
 8007260:	eb42 0303 	adc.w	r3, r2, r3
 8007264:	647b      	str	r3, [r7, #68]	@ 0x44
 8007266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800726a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800726e:	f7f9 fca3 	bl	8000bb8 <__aeabi_uldivmod>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4611      	mov	r1, r2
 8007278:	4b3b      	ldr	r3, [pc, #236]	@ (8007368 <UART_SetConfig+0x2d4>)
 800727a:	fba3 2301 	umull	r2, r3, r3, r1
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	2264      	movs	r2, #100	@ 0x64
 8007282:	fb02 f303 	mul.w	r3, r2, r3
 8007286:	1acb      	subs	r3, r1, r3
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800728e:	4b36      	ldr	r3, [pc, #216]	@ (8007368 <UART_SetConfig+0x2d4>)
 8007290:	fba3 2302 	umull	r2, r3, r3, r2
 8007294:	095b      	lsrs	r3, r3, #5
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800729c:	441c      	add	r4, r3
 800729e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072b0:	4642      	mov	r2, r8
 80072b2:	464b      	mov	r3, r9
 80072b4:	1891      	adds	r1, r2, r2
 80072b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072b8:	415b      	adcs	r3, r3
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072c0:	4641      	mov	r1, r8
 80072c2:	1851      	adds	r1, r2, r1
 80072c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80072c6:	4649      	mov	r1, r9
 80072c8:	414b      	adcs	r3, r1
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	f04f 0300 	mov.w	r3, #0
 80072d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072d8:	4659      	mov	r1, fp
 80072da:	00cb      	lsls	r3, r1, #3
 80072dc:	4651      	mov	r1, sl
 80072de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072e2:	4651      	mov	r1, sl
 80072e4:	00ca      	lsls	r2, r1, #3
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	4642      	mov	r2, r8
 80072ee:	189b      	adds	r3, r3, r2
 80072f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072f4:	464b      	mov	r3, r9
 80072f6:	460a      	mov	r2, r1
 80072f8:	eb42 0303 	adc.w	r3, r2, r3
 80072fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800730c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007314:	460b      	mov	r3, r1
 8007316:	18db      	adds	r3, r3, r3
 8007318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800731a:	4613      	mov	r3, r2
 800731c:	eb42 0303 	adc.w	r3, r2, r3
 8007320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800732a:	f7f9 fc45 	bl	8000bb8 <__aeabi_uldivmod>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4b0d      	ldr	r3, [pc, #52]	@ (8007368 <UART_SetConfig+0x2d4>)
 8007334:	fba3 1302 	umull	r1, r3, r3, r2
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	2164      	movs	r1, #100	@ 0x64
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	3332      	adds	r3, #50	@ 0x32
 8007346:	4a08      	ldr	r2, [pc, #32]	@ (8007368 <UART_SetConfig+0x2d4>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f003 0207 	and.w	r2, r3, #7
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4422      	add	r2, r4
 800735a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800735c:	e106      	b.n	800756c <UART_SetConfig+0x4d8>
 800735e:	bf00      	nop
 8007360:	40011000 	.word	0x40011000
 8007364:	40011400 	.word	0x40011400
 8007368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800736c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007370:	2200      	movs	r2, #0
 8007372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007376:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800737a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800737e:	4642      	mov	r2, r8
 8007380:	464b      	mov	r3, r9
 8007382:	1891      	adds	r1, r2, r2
 8007384:	6239      	str	r1, [r7, #32]
 8007386:	415b      	adcs	r3, r3
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
 800738a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800738e:	4641      	mov	r1, r8
 8007390:	1854      	adds	r4, r2, r1
 8007392:	4649      	mov	r1, r9
 8007394:	eb43 0501 	adc.w	r5, r3, r1
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	00eb      	lsls	r3, r5, #3
 80073a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073a6:	00e2      	lsls	r2, r4, #3
 80073a8:	4614      	mov	r4, r2
 80073aa:	461d      	mov	r5, r3
 80073ac:	4643      	mov	r3, r8
 80073ae:	18e3      	adds	r3, r4, r3
 80073b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073b4:	464b      	mov	r3, r9
 80073b6:	eb45 0303 	adc.w	r3, r5, r3
 80073ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073da:	4629      	mov	r1, r5
 80073dc:	008b      	lsls	r3, r1, #2
 80073de:	4621      	mov	r1, r4
 80073e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073e4:	4621      	mov	r1, r4
 80073e6:	008a      	lsls	r2, r1, #2
 80073e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80073ec:	f7f9 fbe4 	bl	8000bb8 <__aeabi_uldivmod>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4b60      	ldr	r3, [pc, #384]	@ (8007578 <UART_SetConfig+0x4e4>)
 80073f6:	fba3 2302 	umull	r2, r3, r3, r2
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	011c      	lsls	r4, r3, #4
 80073fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007402:	2200      	movs	r2, #0
 8007404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800740c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007410:	4642      	mov	r2, r8
 8007412:	464b      	mov	r3, r9
 8007414:	1891      	adds	r1, r2, r2
 8007416:	61b9      	str	r1, [r7, #24]
 8007418:	415b      	adcs	r3, r3
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007420:	4641      	mov	r1, r8
 8007422:	1851      	adds	r1, r2, r1
 8007424:	6139      	str	r1, [r7, #16]
 8007426:	4649      	mov	r1, r9
 8007428:	414b      	adcs	r3, r1
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007438:	4659      	mov	r1, fp
 800743a:	00cb      	lsls	r3, r1, #3
 800743c:	4651      	mov	r1, sl
 800743e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007442:	4651      	mov	r1, sl
 8007444:	00ca      	lsls	r2, r1, #3
 8007446:	4610      	mov	r0, r2
 8007448:	4619      	mov	r1, r3
 800744a:	4603      	mov	r3, r0
 800744c:	4642      	mov	r2, r8
 800744e:	189b      	adds	r3, r3, r2
 8007450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007454:	464b      	mov	r3, r9
 8007456:	460a      	mov	r2, r1
 8007458:	eb42 0303 	adc.w	r3, r2, r3
 800745c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800746a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007478:	4649      	mov	r1, r9
 800747a:	008b      	lsls	r3, r1, #2
 800747c:	4641      	mov	r1, r8
 800747e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007482:	4641      	mov	r1, r8
 8007484:	008a      	lsls	r2, r1, #2
 8007486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800748a:	f7f9 fb95 	bl	8000bb8 <__aeabi_uldivmod>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4611      	mov	r1, r2
 8007494:	4b38      	ldr	r3, [pc, #224]	@ (8007578 <UART_SetConfig+0x4e4>)
 8007496:	fba3 2301 	umull	r2, r3, r3, r1
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2264      	movs	r2, #100	@ 0x64
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	1acb      	subs	r3, r1, r3
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	3332      	adds	r3, #50	@ 0x32
 80074a8:	4a33      	ldr	r2, [pc, #204]	@ (8007578 <UART_SetConfig+0x4e4>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074b4:	441c      	add	r4, r3
 80074b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ba:	2200      	movs	r2, #0
 80074bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80074be:	677a      	str	r2, [r7, #116]	@ 0x74
 80074c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	1891      	adds	r1, r2, r2
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	415b      	adcs	r3, r3
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074d4:	4641      	mov	r1, r8
 80074d6:	1851      	adds	r1, r2, r1
 80074d8:	6039      	str	r1, [r7, #0]
 80074da:	4649      	mov	r1, r9
 80074dc:	414b      	adcs	r3, r1
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074ec:	4659      	mov	r1, fp
 80074ee:	00cb      	lsls	r3, r1, #3
 80074f0:	4651      	mov	r1, sl
 80074f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074f6:	4651      	mov	r1, sl
 80074f8:	00ca      	lsls	r2, r1, #3
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	4642      	mov	r2, r8
 8007502:	189b      	adds	r3, r3, r2
 8007504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007506:	464b      	mov	r3, r9
 8007508:	460a      	mov	r2, r1
 800750a:	eb42 0303 	adc.w	r3, r2, r3
 800750e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	663b      	str	r3, [r7, #96]	@ 0x60
 800751a:	667a      	str	r2, [r7, #100]	@ 0x64
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007528:	4649      	mov	r1, r9
 800752a:	008b      	lsls	r3, r1, #2
 800752c:	4641      	mov	r1, r8
 800752e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007532:	4641      	mov	r1, r8
 8007534:	008a      	lsls	r2, r1, #2
 8007536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800753a:	f7f9 fb3d 	bl	8000bb8 <__aeabi_uldivmod>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4b0d      	ldr	r3, [pc, #52]	@ (8007578 <UART_SetConfig+0x4e4>)
 8007544:	fba3 1302 	umull	r1, r3, r3, r2
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	2164      	movs	r1, #100	@ 0x64
 800754c:	fb01 f303 	mul.w	r3, r1, r3
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	3332      	adds	r3, #50	@ 0x32
 8007556:	4a08      	ldr	r2, [pc, #32]	@ (8007578 <UART_SetConfig+0x4e4>)
 8007558:	fba2 2303 	umull	r2, r3, r2, r3
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	f003 020f 	and.w	r2, r3, #15
 8007562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4422      	add	r2, r4
 800756a:	609a      	str	r2, [r3, #8]
}
 800756c:	bf00      	nop
 800756e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007572:	46bd      	mov	sp, r7
 8007574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007578:	51eb851f 	.word	0x51eb851f

0800757c <__cvt>:
 800757c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007580:	ec57 6b10 	vmov	r6, r7, d0
 8007584:	2f00      	cmp	r7, #0
 8007586:	460c      	mov	r4, r1
 8007588:	4619      	mov	r1, r3
 800758a:	463b      	mov	r3, r7
 800758c:	bfbb      	ittet	lt
 800758e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007592:	461f      	movlt	r7, r3
 8007594:	2300      	movge	r3, #0
 8007596:	232d      	movlt	r3, #45	@ 0x2d
 8007598:	700b      	strb	r3, [r1, #0]
 800759a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800759c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80075a0:	4691      	mov	r9, r2
 80075a2:	f023 0820 	bic.w	r8, r3, #32
 80075a6:	bfbc      	itt	lt
 80075a8:	4632      	movlt	r2, r6
 80075aa:	4616      	movlt	r6, r2
 80075ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075b0:	d005      	beq.n	80075be <__cvt+0x42>
 80075b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075b6:	d100      	bne.n	80075ba <__cvt+0x3e>
 80075b8:	3401      	adds	r4, #1
 80075ba:	2102      	movs	r1, #2
 80075bc:	e000      	b.n	80075c0 <__cvt+0x44>
 80075be:	2103      	movs	r1, #3
 80075c0:	ab03      	add	r3, sp, #12
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	ab02      	add	r3, sp, #8
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	ec47 6b10 	vmov	d0, r6, r7
 80075cc:	4653      	mov	r3, sl
 80075ce:	4622      	mov	r2, r4
 80075d0:	f000 fe5a 	bl	8008288 <_dtoa_r>
 80075d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075d8:	4605      	mov	r5, r0
 80075da:	d119      	bne.n	8007610 <__cvt+0x94>
 80075dc:	f019 0f01 	tst.w	r9, #1
 80075e0:	d00e      	beq.n	8007600 <__cvt+0x84>
 80075e2:	eb00 0904 	add.w	r9, r0, r4
 80075e6:	2200      	movs	r2, #0
 80075e8:	2300      	movs	r3, #0
 80075ea:	4630      	mov	r0, r6
 80075ec:	4639      	mov	r1, r7
 80075ee:	f7f9 fa73 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f2:	b108      	cbz	r0, 80075f8 <__cvt+0x7c>
 80075f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80075f8:	2230      	movs	r2, #48	@ 0x30
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	454b      	cmp	r3, r9
 80075fe:	d31e      	bcc.n	800763e <__cvt+0xc2>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007604:	1b5b      	subs	r3, r3, r5
 8007606:	4628      	mov	r0, r5
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	b004      	add	sp, #16
 800760c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007610:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007614:	eb00 0904 	add.w	r9, r0, r4
 8007618:	d1e5      	bne.n	80075e6 <__cvt+0x6a>
 800761a:	7803      	ldrb	r3, [r0, #0]
 800761c:	2b30      	cmp	r3, #48	@ 0x30
 800761e:	d10a      	bne.n	8007636 <__cvt+0xba>
 8007620:	2200      	movs	r2, #0
 8007622:	2300      	movs	r3, #0
 8007624:	4630      	mov	r0, r6
 8007626:	4639      	mov	r1, r7
 8007628:	f7f9 fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800762c:	b918      	cbnz	r0, 8007636 <__cvt+0xba>
 800762e:	f1c4 0401 	rsb	r4, r4, #1
 8007632:	f8ca 4000 	str.w	r4, [sl]
 8007636:	f8da 3000 	ldr.w	r3, [sl]
 800763a:	4499      	add	r9, r3
 800763c:	e7d3      	b.n	80075e6 <__cvt+0x6a>
 800763e:	1c59      	adds	r1, r3, #1
 8007640:	9103      	str	r1, [sp, #12]
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	e7d9      	b.n	80075fa <__cvt+0x7e>

08007646 <__exponent>:
 8007646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007648:	2900      	cmp	r1, #0
 800764a:	bfba      	itte	lt
 800764c:	4249      	neglt	r1, r1
 800764e:	232d      	movlt	r3, #45	@ 0x2d
 8007650:	232b      	movge	r3, #43	@ 0x2b
 8007652:	2909      	cmp	r1, #9
 8007654:	7002      	strb	r2, [r0, #0]
 8007656:	7043      	strb	r3, [r0, #1]
 8007658:	dd29      	ble.n	80076ae <__exponent+0x68>
 800765a:	f10d 0307 	add.w	r3, sp, #7
 800765e:	461d      	mov	r5, r3
 8007660:	270a      	movs	r7, #10
 8007662:	461a      	mov	r2, r3
 8007664:	fbb1 f6f7 	udiv	r6, r1, r7
 8007668:	fb07 1416 	mls	r4, r7, r6, r1
 800766c:	3430      	adds	r4, #48	@ 0x30
 800766e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007672:	460c      	mov	r4, r1
 8007674:	2c63      	cmp	r4, #99	@ 0x63
 8007676:	f103 33ff 	add.w	r3, r3, #4294967295
 800767a:	4631      	mov	r1, r6
 800767c:	dcf1      	bgt.n	8007662 <__exponent+0x1c>
 800767e:	3130      	adds	r1, #48	@ 0x30
 8007680:	1e94      	subs	r4, r2, #2
 8007682:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007686:	1c41      	adds	r1, r0, #1
 8007688:	4623      	mov	r3, r4
 800768a:	42ab      	cmp	r3, r5
 800768c:	d30a      	bcc.n	80076a4 <__exponent+0x5e>
 800768e:	f10d 0309 	add.w	r3, sp, #9
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	42ac      	cmp	r4, r5
 8007696:	bf88      	it	hi
 8007698:	2300      	movhi	r3, #0
 800769a:	3302      	adds	r3, #2
 800769c:	4403      	add	r3, r0
 800769e:	1a18      	subs	r0, r3, r0
 80076a0:	b003      	add	sp, #12
 80076a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80076ac:	e7ed      	b.n	800768a <__exponent+0x44>
 80076ae:	2330      	movs	r3, #48	@ 0x30
 80076b0:	3130      	adds	r1, #48	@ 0x30
 80076b2:	7083      	strb	r3, [r0, #2]
 80076b4:	70c1      	strb	r1, [r0, #3]
 80076b6:	1d03      	adds	r3, r0, #4
 80076b8:	e7f1      	b.n	800769e <__exponent+0x58>
	...

080076bc <_printf_float>:
 80076bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	b08d      	sub	sp, #52	@ 0x34
 80076c2:	460c      	mov	r4, r1
 80076c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80076c8:	4616      	mov	r6, r2
 80076ca:	461f      	mov	r7, r3
 80076cc:	4605      	mov	r5, r0
 80076ce:	f000 fcdb 	bl	8008088 <_localeconv_r>
 80076d2:	6803      	ldr	r3, [r0, #0]
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7f8 fdd2 	bl	8000280 <strlen>
 80076dc:	2300      	movs	r3, #0
 80076de:	930a      	str	r3, [sp, #40]	@ 0x28
 80076e0:	f8d8 3000 	ldr.w	r3, [r8]
 80076e4:	9005      	str	r0, [sp, #20]
 80076e6:	3307      	adds	r3, #7
 80076e8:	f023 0307 	bic.w	r3, r3, #7
 80076ec:	f103 0208 	add.w	r2, r3, #8
 80076f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80076f4:	f8d4 b000 	ldr.w	fp, [r4]
 80076f8:	f8c8 2000 	str.w	r2, [r8]
 80076fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007700:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007704:	9307      	str	r3, [sp, #28]
 8007706:	f8cd 8018 	str.w	r8, [sp, #24]
 800770a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800770e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007712:	4b9c      	ldr	r3, [pc, #624]	@ (8007984 <_printf_float+0x2c8>)
 8007714:	f04f 32ff 	mov.w	r2, #4294967295
 8007718:	f7f9 fa10 	bl	8000b3c <__aeabi_dcmpun>
 800771c:	bb70      	cbnz	r0, 800777c <_printf_float+0xc0>
 800771e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007722:	4b98      	ldr	r3, [pc, #608]	@ (8007984 <_printf_float+0x2c8>)
 8007724:	f04f 32ff 	mov.w	r2, #4294967295
 8007728:	f7f9 f9ea 	bl	8000b00 <__aeabi_dcmple>
 800772c:	bb30      	cbnz	r0, 800777c <_printf_float+0xc0>
 800772e:	2200      	movs	r2, #0
 8007730:	2300      	movs	r3, #0
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f9 f9d9 	bl	8000aec <__aeabi_dcmplt>
 800773a:	b110      	cbz	r0, 8007742 <_printf_float+0x86>
 800773c:	232d      	movs	r3, #45	@ 0x2d
 800773e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007742:	4a91      	ldr	r2, [pc, #580]	@ (8007988 <_printf_float+0x2cc>)
 8007744:	4b91      	ldr	r3, [pc, #580]	@ (800798c <_printf_float+0x2d0>)
 8007746:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800774a:	bf94      	ite	ls
 800774c:	4690      	movls	r8, r2
 800774e:	4698      	movhi	r8, r3
 8007750:	2303      	movs	r3, #3
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	f02b 0304 	bic.w	r3, fp, #4
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	f04f 0900 	mov.w	r9, #0
 800775e:	9700      	str	r7, [sp, #0]
 8007760:	4633      	mov	r3, r6
 8007762:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007764:	4621      	mov	r1, r4
 8007766:	4628      	mov	r0, r5
 8007768:	f000 f9d2 	bl	8007b10 <_printf_common>
 800776c:	3001      	adds	r0, #1
 800776e:	f040 808d 	bne.w	800788c <_printf_float+0x1d0>
 8007772:	f04f 30ff 	mov.w	r0, #4294967295
 8007776:	b00d      	add	sp, #52	@ 0x34
 8007778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	4640      	mov	r0, r8
 8007782:	4649      	mov	r1, r9
 8007784:	f7f9 f9da 	bl	8000b3c <__aeabi_dcmpun>
 8007788:	b140      	cbz	r0, 800779c <_printf_float+0xe0>
 800778a:	464b      	mov	r3, r9
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfbc      	itt	lt
 8007790:	232d      	movlt	r3, #45	@ 0x2d
 8007792:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007796:	4a7e      	ldr	r2, [pc, #504]	@ (8007990 <_printf_float+0x2d4>)
 8007798:	4b7e      	ldr	r3, [pc, #504]	@ (8007994 <_printf_float+0x2d8>)
 800779a:	e7d4      	b.n	8007746 <_printf_float+0x8a>
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80077a2:	9206      	str	r2, [sp, #24]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	d13b      	bne.n	8007820 <_printf_float+0x164>
 80077a8:	2306      	movs	r3, #6
 80077aa:	6063      	str	r3, [r4, #4]
 80077ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80077b0:	2300      	movs	r3, #0
 80077b2:	6022      	str	r2, [r4, #0]
 80077b4:	9303      	str	r3, [sp, #12]
 80077b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80077b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80077bc:	ab09      	add	r3, sp, #36	@ 0x24
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	6861      	ldr	r1, [r4, #4]
 80077c2:	ec49 8b10 	vmov	d0, r8, r9
 80077c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80077ca:	4628      	mov	r0, r5
 80077cc:	f7ff fed6 	bl	800757c <__cvt>
 80077d0:	9b06      	ldr	r3, [sp, #24]
 80077d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077d4:	2b47      	cmp	r3, #71	@ 0x47
 80077d6:	4680      	mov	r8, r0
 80077d8:	d129      	bne.n	800782e <_printf_float+0x172>
 80077da:	1cc8      	adds	r0, r1, #3
 80077dc:	db02      	blt.n	80077e4 <_printf_float+0x128>
 80077de:	6863      	ldr	r3, [r4, #4]
 80077e0:	4299      	cmp	r1, r3
 80077e2:	dd41      	ble.n	8007868 <_printf_float+0x1ac>
 80077e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80077e8:	fa5f fa8a 	uxtb.w	sl, sl
 80077ec:	3901      	subs	r1, #1
 80077ee:	4652      	mov	r2, sl
 80077f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80077f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80077f6:	f7ff ff26 	bl	8007646 <__exponent>
 80077fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077fc:	1813      	adds	r3, r2, r0
 80077fe:	2a01      	cmp	r2, #1
 8007800:	4681      	mov	r9, r0
 8007802:	6123      	str	r3, [r4, #16]
 8007804:	dc02      	bgt.n	800780c <_printf_float+0x150>
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	07d2      	lsls	r2, r2, #31
 800780a:	d501      	bpl.n	8007810 <_printf_float+0x154>
 800780c:	3301      	adds	r3, #1
 800780e:	6123      	str	r3, [r4, #16]
 8007810:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007814:	2b00      	cmp	r3, #0
 8007816:	d0a2      	beq.n	800775e <_printf_float+0xa2>
 8007818:	232d      	movs	r3, #45	@ 0x2d
 800781a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800781e:	e79e      	b.n	800775e <_printf_float+0xa2>
 8007820:	9a06      	ldr	r2, [sp, #24]
 8007822:	2a47      	cmp	r2, #71	@ 0x47
 8007824:	d1c2      	bne.n	80077ac <_printf_float+0xf0>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1c0      	bne.n	80077ac <_printf_float+0xf0>
 800782a:	2301      	movs	r3, #1
 800782c:	e7bd      	b.n	80077aa <_printf_float+0xee>
 800782e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007832:	d9db      	bls.n	80077ec <_printf_float+0x130>
 8007834:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007838:	d118      	bne.n	800786c <_printf_float+0x1b0>
 800783a:	2900      	cmp	r1, #0
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	dd0b      	ble.n	8007858 <_printf_float+0x19c>
 8007840:	6121      	str	r1, [r4, #16]
 8007842:	b913      	cbnz	r3, 800784a <_printf_float+0x18e>
 8007844:	6822      	ldr	r2, [r4, #0]
 8007846:	07d0      	lsls	r0, r2, #31
 8007848:	d502      	bpl.n	8007850 <_printf_float+0x194>
 800784a:	3301      	adds	r3, #1
 800784c:	440b      	add	r3, r1
 800784e:	6123      	str	r3, [r4, #16]
 8007850:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007852:	f04f 0900 	mov.w	r9, #0
 8007856:	e7db      	b.n	8007810 <_printf_float+0x154>
 8007858:	b913      	cbnz	r3, 8007860 <_printf_float+0x1a4>
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	07d2      	lsls	r2, r2, #31
 800785e:	d501      	bpl.n	8007864 <_printf_float+0x1a8>
 8007860:	3302      	adds	r3, #2
 8007862:	e7f4      	b.n	800784e <_printf_float+0x192>
 8007864:	2301      	movs	r3, #1
 8007866:	e7f2      	b.n	800784e <_printf_float+0x192>
 8007868:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800786c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800786e:	4299      	cmp	r1, r3
 8007870:	db05      	blt.n	800787e <_printf_float+0x1c2>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	6121      	str	r1, [r4, #16]
 8007876:	07d8      	lsls	r0, r3, #31
 8007878:	d5ea      	bpl.n	8007850 <_printf_float+0x194>
 800787a:	1c4b      	adds	r3, r1, #1
 800787c:	e7e7      	b.n	800784e <_printf_float+0x192>
 800787e:	2900      	cmp	r1, #0
 8007880:	bfd4      	ite	le
 8007882:	f1c1 0202 	rsble	r2, r1, #2
 8007886:	2201      	movgt	r2, #1
 8007888:	4413      	add	r3, r2
 800788a:	e7e0      	b.n	800784e <_printf_float+0x192>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	055a      	lsls	r2, r3, #21
 8007890:	d407      	bmi.n	80078a2 <_printf_float+0x1e6>
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	4642      	mov	r2, r8
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	d12b      	bne.n	80078f8 <_printf_float+0x23c>
 80078a0:	e767      	b.n	8007772 <_printf_float+0xb6>
 80078a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078a6:	f240 80dd 	bls.w	8007a64 <_printf_float+0x3a8>
 80078aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078ae:	2200      	movs	r2, #0
 80078b0:	2300      	movs	r3, #0
 80078b2:	f7f9 f911 	bl	8000ad8 <__aeabi_dcmpeq>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d033      	beq.n	8007922 <_printf_float+0x266>
 80078ba:	4a37      	ldr	r2, [pc, #220]	@ (8007998 <_printf_float+0x2dc>)
 80078bc:	2301      	movs	r3, #1
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	f43f af54 	beq.w	8007772 <_printf_float+0xb6>
 80078ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80078ce:	4543      	cmp	r3, r8
 80078d0:	db02      	blt.n	80078d8 <_printf_float+0x21c>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	07d8      	lsls	r0, r3, #31
 80078d6:	d50f      	bpl.n	80078f8 <_printf_float+0x23c>
 80078d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	f43f af45 	beq.w	8007772 <_printf_float+0xb6>
 80078e8:	f04f 0900 	mov.w	r9, #0
 80078ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80078f0:	f104 0a1a 	add.w	sl, r4, #26
 80078f4:	45c8      	cmp	r8, r9
 80078f6:	dc09      	bgt.n	800790c <_printf_float+0x250>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	079b      	lsls	r3, r3, #30
 80078fc:	f100 8103 	bmi.w	8007b06 <_printf_float+0x44a>
 8007900:	68e0      	ldr	r0, [r4, #12]
 8007902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007904:	4298      	cmp	r0, r3
 8007906:	bfb8      	it	lt
 8007908:	4618      	movlt	r0, r3
 800790a:	e734      	b.n	8007776 <_printf_float+0xba>
 800790c:	2301      	movs	r3, #1
 800790e:	4652      	mov	r2, sl
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	f43f af2b 	beq.w	8007772 <_printf_float+0xb6>
 800791c:	f109 0901 	add.w	r9, r9, #1
 8007920:	e7e8      	b.n	80078f4 <_printf_float+0x238>
 8007922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007924:	2b00      	cmp	r3, #0
 8007926:	dc39      	bgt.n	800799c <_printf_float+0x2e0>
 8007928:	4a1b      	ldr	r2, [pc, #108]	@ (8007998 <_printf_float+0x2dc>)
 800792a:	2301      	movs	r3, #1
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	f43f af1d 	beq.w	8007772 <_printf_float+0xb6>
 8007938:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800793c:	ea59 0303 	orrs.w	r3, r9, r3
 8007940:	d102      	bne.n	8007948 <_printf_float+0x28c>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	07d9      	lsls	r1, r3, #31
 8007946:	d5d7      	bpl.n	80078f8 <_printf_float+0x23c>
 8007948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f af0d 	beq.w	8007772 <_printf_float+0xb6>
 8007958:	f04f 0a00 	mov.w	sl, #0
 800795c:	f104 0b1a 	add.w	fp, r4, #26
 8007960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007962:	425b      	negs	r3, r3
 8007964:	4553      	cmp	r3, sl
 8007966:	dc01      	bgt.n	800796c <_printf_float+0x2b0>
 8007968:	464b      	mov	r3, r9
 800796a:	e793      	b.n	8007894 <_printf_float+0x1d8>
 800796c:	2301      	movs	r3, #1
 800796e:	465a      	mov	r2, fp
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	f43f aefb 	beq.w	8007772 <_printf_float+0xb6>
 800797c:	f10a 0a01 	add.w	sl, sl, #1
 8007980:	e7ee      	b.n	8007960 <_printf_float+0x2a4>
 8007982:	bf00      	nop
 8007984:	7fefffff 	.word	0x7fefffff
 8007988:	0800aa40 	.word	0x0800aa40
 800798c:	0800aa44 	.word	0x0800aa44
 8007990:	0800aa48 	.word	0x0800aa48
 8007994:	0800aa4c 	.word	0x0800aa4c
 8007998:	0800aa50 	.word	0x0800aa50
 800799c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800799e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079a2:	4553      	cmp	r3, sl
 80079a4:	bfa8      	it	ge
 80079a6:	4653      	movge	r3, sl
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	4699      	mov	r9, r3
 80079ac:	dc36      	bgt.n	8007a1c <_printf_float+0x360>
 80079ae:	f04f 0b00 	mov.w	fp, #0
 80079b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079b6:	f104 021a 	add.w	r2, r4, #26
 80079ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079bc:	9306      	str	r3, [sp, #24]
 80079be:	eba3 0309 	sub.w	r3, r3, r9
 80079c2:	455b      	cmp	r3, fp
 80079c4:	dc31      	bgt.n	8007a2a <_printf_float+0x36e>
 80079c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c8:	459a      	cmp	sl, r3
 80079ca:	dc3a      	bgt.n	8007a42 <_printf_float+0x386>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	07da      	lsls	r2, r3, #31
 80079d0:	d437      	bmi.n	8007a42 <_printf_float+0x386>
 80079d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d4:	ebaa 0903 	sub.w	r9, sl, r3
 80079d8:	9b06      	ldr	r3, [sp, #24]
 80079da:	ebaa 0303 	sub.w	r3, sl, r3
 80079de:	4599      	cmp	r9, r3
 80079e0:	bfa8      	it	ge
 80079e2:	4699      	movge	r9, r3
 80079e4:	f1b9 0f00 	cmp.w	r9, #0
 80079e8:	dc33      	bgt.n	8007a52 <_printf_float+0x396>
 80079ea:	f04f 0800 	mov.w	r8, #0
 80079ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079f2:	f104 0b1a 	add.w	fp, r4, #26
 80079f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f8:	ebaa 0303 	sub.w	r3, sl, r3
 80079fc:	eba3 0309 	sub.w	r3, r3, r9
 8007a00:	4543      	cmp	r3, r8
 8007a02:	f77f af79 	ble.w	80078f8 <_printf_float+0x23c>
 8007a06:	2301      	movs	r3, #1
 8007a08:	465a      	mov	r2, fp
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	f43f aeae 	beq.w	8007772 <_printf_float+0xb6>
 8007a16:	f108 0801 	add.w	r8, r8, #1
 8007a1a:	e7ec      	b.n	80079f6 <_printf_float+0x33a>
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b8      	blx	r7
 8007a24:	3001      	adds	r0, #1
 8007a26:	d1c2      	bne.n	80079ae <_printf_float+0x2f2>
 8007a28:	e6a3      	b.n	8007772 <_printf_float+0xb6>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	9206      	str	r2, [sp, #24]
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	f43f ae9c 	beq.w	8007772 <_printf_float+0xb6>
 8007a3a:	9a06      	ldr	r2, [sp, #24]
 8007a3c:	f10b 0b01 	add.w	fp, fp, #1
 8007a40:	e7bb      	b.n	80079ba <_printf_float+0x2fe>
 8007a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a46:	4631      	mov	r1, r6
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b8      	blx	r7
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d1c0      	bne.n	80079d2 <_printf_float+0x316>
 8007a50:	e68f      	b.n	8007772 <_printf_float+0xb6>
 8007a52:	9a06      	ldr	r2, [sp, #24]
 8007a54:	464b      	mov	r3, r9
 8007a56:	4442      	add	r2, r8
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d1c3      	bne.n	80079ea <_printf_float+0x32e>
 8007a62:	e686      	b.n	8007772 <_printf_float+0xb6>
 8007a64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a68:	f1ba 0f01 	cmp.w	sl, #1
 8007a6c:	dc01      	bgt.n	8007a72 <_printf_float+0x3b6>
 8007a6e:	07db      	lsls	r3, r3, #31
 8007a70:	d536      	bpl.n	8007ae0 <_printf_float+0x424>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4642      	mov	r2, r8
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	f43f ae78 	beq.w	8007772 <_printf_float+0xb6>
 8007a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a86:	4631      	mov	r1, r6
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b8      	blx	r7
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	f43f ae70 	beq.w	8007772 <_printf_float+0xb6>
 8007a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a9e:	f7f9 f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aa2:	b9c0      	cbnz	r0, 8007ad6 <_printf_float+0x41a>
 8007aa4:	4653      	mov	r3, sl
 8007aa6:	f108 0201 	add.w	r2, r8, #1
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d10c      	bne.n	8007ace <_printf_float+0x412>
 8007ab4:	e65d      	b.n	8007772 <_printf_float+0xb6>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	465a      	mov	r2, fp
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f43f ae56 	beq.w	8007772 <_printf_float+0xb6>
 8007ac6:	f108 0801 	add.w	r8, r8, #1
 8007aca:	45d0      	cmp	r8, sl
 8007acc:	dbf3      	blt.n	8007ab6 <_printf_float+0x3fa>
 8007ace:	464b      	mov	r3, r9
 8007ad0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ad4:	e6df      	b.n	8007896 <_printf_float+0x1da>
 8007ad6:	f04f 0800 	mov.w	r8, #0
 8007ada:	f104 0b1a 	add.w	fp, r4, #26
 8007ade:	e7f4      	b.n	8007aca <_printf_float+0x40e>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	4642      	mov	r2, r8
 8007ae4:	e7e1      	b.n	8007aaa <_printf_float+0x3ee>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	464a      	mov	r2, r9
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	f43f ae3e 	beq.w	8007772 <_printf_float+0xb6>
 8007af6:	f108 0801 	add.w	r8, r8, #1
 8007afa:	68e3      	ldr	r3, [r4, #12]
 8007afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007afe:	1a5b      	subs	r3, r3, r1
 8007b00:	4543      	cmp	r3, r8
 8007b02:	dcf0      	bgt.n	8007ae6 <_printf_float+0x42a>
 8007b04:	e6fc      	b.n	8007900 <_printf_float+0x244>
 8007b06:	f04f 0800 	mov.w	r8, #0
 8007b0a:	f104 0919 	add.w	r9, r4, #25
 8007b0e:	e7f4      	b.n	8007afa <_printf_float+0x43e>

08007b10 <_printf_common>:
 8007b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b14:	4616      	mov	r6, r2
 8007b16:	4698      	mov	r8, r3
 8007b18:	688a      	ldr	r2, [r1, #8]
 8007b1a:	690b      	ldr	r3, [r1, #16]
 8007b1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b20:	4293      	cmp	r3, r2
 8007b22:	bfb8      	it	lt
 8007b24:	4613      	movlt	r3, r2
 8007b26:	6033      	str	r3, [r6, #0]
 8007b28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	460c      	mov	r4, r1
 8007b30:	b10a      	cbz	r2, 8007b36 <_printf_common+0x26>
 8007b32:	3301      	adds	r3, #1
 8007b34:	6033      	str	r3, [r6, #0]
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	0699      	lsls	r1, r3, #26
 8007b3a:	bf42      	ittt	mi
 8007b3c:	6833      	ldrmi	r3, [r6, #0]
 8007b3e:	3302      	addmi	r3, #2
 8007b40:	6033      	strmi	r3, [r6, #0]
 8007b42:	6825      	ldr	r5, [r4, #0]
 8007b44:	f015 0506 	ands.w	r5, r5, #6
 8007b48:	d106      	bne.n	8007b58 <_printf_common+0x48>
 8007b4a:	f104 0a19 	add.w	sl, r4, #25
 8007b4e:	68e3      	ldr	r3, [r4, #12]
 8007b50:	6832      	ldr	r2, [r6, #0]
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	42ab      	cmp	r3, r5
 8007b56:	dc26      	bgt.n	8007ba6 <_printf_common+0x96>
 8007b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b5c:	6822      	ldr	r2, [r4, #0]
 8007b5e:	3b00      	subs	r3, #0
 8007b60:	bf18      	it	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	0692      	lsls	r2, r2, #26
 8007b66:	d42b      	bmi.n	8007bc0 <_printf_common+0xb0>
 8007b68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	4638      	mov	r0, r7
 8007b70:	47c8      	blx	r9
 8007b72:	3001      	adds	r0, #1
 8007b74:	d01e      	beq.n	8007bb4 <_printf_common+0xa4>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	6922      	ldr	r2, [r4, #16]
 8007b7a:	f003 0306 	and.w	r3, r3, #6
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	bf02      	ittt	eq
 8007b82:	68e5      	ldreq	r5, [r4, #12]
 8007b84:	6833      	ldreq	r3, [r6, #0]
 8007b86:	1aed      	subeq	r5, r5, r3
 8007b88:	68a3      	ldr	r3, [r4, #8]
 8007b8a:	bf0c      	ite	eq
 8007b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b90:	2500      	movne	r5, #0
 8007b92:	4293      	cmp	r3, r2
 8007b94:	bfc4      	itt	gt
 8007b96:	1a9b      	subgt	r3, r3, r2
 8007b98:	18ed      	addgt	r5, r5, r3
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	341a      	adds	r4, #26
 8007b9e:	42b5      	cmp	r5, r6
 8007ba0:	d11a      	bne.n	8007bd8 <_printf_common+0xc8>
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	e008      	b.n	8007bb8 <_printf_common+0xa8>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4652      	mov	r2, sl
 8007baa:	4641      	mov	r1, r8
 8007bac:	4638      	mov	r0, r7
 8007bae:	47c8      	blx	r9
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d103      	bne.n	8007bbc <_printf_common+0xac>
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	e7c6      	b.n	8007b4e <_printf_common+0x3e>
 8007bc0:	18e1      	adds	r1, r4, r3
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	2030      	movs	r0, #48	@ 0x30
 8007bc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bca:	4422      	add	r2, r4
 8007bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	e7c7      	b.n	8007b68 <_printf_common+0x58>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4622      	mov	r2, r4
 8007bdc:	4641      	mov	r1, r8
 8007bde:	4638      	mov	r0, r7
 8007be0:	47c8      	blx	r9
 8007be2:	3001      	adds	r0, #1
 8007be4:	d0e6      	beq.n	8007bb4 <_printf_common+0xa4>
 8007be6:	3601      	adds	r6, #1
 8007be8:	e7d9      	b.n	8007b9e <_printf_common+0x8e>
	...

08007bec <_printf_i>:
 8007bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	7e0f      	ldrb	r7, [r1, #24]
 8007bf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bf4:	2f78      	cmp	r7, #120	@ 0x78
 8007bf6:	4691      	mov	r9, r2
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	469a      	mov	sl, r3
 8007bfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c02:	d807      	bhi.n	8007c14 <_printf_i+0x28>
 8007c04:	2f62      	cmp	r7, #98	@ 0x62
 8007c06:	d80a      	bhi.n	8007c1e <_printf_i+0x32>
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	f000 80d2 	beq.w	8007db2 <_printf_i+0x1c6>
 8007c0e:	2f58      	cmp	r7, #88	@ 0x58
 8007c10:	f000 80b9 	beq.w	8007d86 <_printf_i+0x19a>
 8007c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c1c:	e03a      	b.n	8007c94 <_printf_i+0xa8>
 8007c1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c22:	2b15      	cmp	r3, #21
 8007c24:	d8f6      	bhi.n	8007c14 <_printf_i+0x28>
 8007c26:	a101      	add	r1, pc, #4	@ (adr r1, 8007c2c <_printf_i+0x40>)
 8007c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c2c:	08007c85 	.word	0x08007c85
 8007c30:	08007c99 	.word	0x08007c99
 8007c34:	08007c15 	.word	0x08007c15
 8007c38:	08007c15 	.word	0x08007c15
 8007c3c:	08007c15 	.word	0x08007c15
 8007c40:	08007c15 	.word	0x08007c15
 8007c44:	08007c99 	.word	0x08007c99
 8007c48:	08007c15 	.word	0x08007c15
 8007c4c:	08007c15 	.word	0x08007c15
 8007c50:	08007c15 	.word	0x08007c15
 8007c54:	08007c15 	.word	0x08007c15
 8007c58:	08007d99 	.word	0x08007d99
 8007c5c:	08007cc3 	.word	0x08007cc3
 8007c60:	08007d53 	.word	0x08007d53
 8007c64:	08007c15 	.word	0x08007c15
 8007c68:	08007c15 	.word	0x08007c15
 8007c6c:	08007dbb 	.word	0x08007dbb
 8007c70:	08007c15 	.word	0x08007c15
 8007c74:	08007cc3 	.word	0x08007cc3
 8007c78:	08007c15 	.word	0x08007c15
 8007c7c:	08007c15 	.word	0x08007c15
 8007c80:	08007d5b 	.word	0x08007d5b
 8007c84:	6833      	ldr	r3, [r6, #0]
 8007c86:	1d1a      	adds	r2, r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6032      	str	r2, [r6, #0]
 8007c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c94:	2301      	movs	r3, #1
 8007c96:	e09d      	b.n	8007dd4 <_printf_i+0x1e8>
 8007c98:	6833      	ldr	r3, [r6, #0]
 8007c9a:	6820      	ldr	r0, [r4, #0]
 8007c9c:	1d19      	adds	r1, r3, #4
 8007c9e:	6031      	str	r1, [r6, #0]
 8007ca0:	0606      	lsls	r6, r0, #24
 8007ca2:	d501      	bpl.n	8007ca8 <_printf_i+0xbc>
 8007ca4:	681d      	ldr	r5, [r3, #0]
 8007ca6:	e003      	b.n	8007cb0 <_printf_i+0xc4>
 8007ca8:	0645      	lsls	r5, r0, #25
 8007caa:	d5fb      	bpl.n	8007ca4 <_printf_i+0xb8>
 8007cac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	da03      	bge.n	8007cbc <_printf_i+0xd0>
 8007cb4:	232d      	movs	r3, #45	@ 0x2d
 8007cb6:	426d      	negs	r5, r5
 8007cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cbc:	4859      	ldr	r0, [pc, #356]	@ (8007e24 <_printf_i+0x238>)
 8007cbe:	230a      	movs	r3, #10
 8007cc0:	e011      	b.n	8007ce6 <_printf_i+0xfa>
 8007cc2:	6821      	ldr	r1, [r4, #0]
 8007cc4:	6833      	ldr	r3, [r6, #0]
 8007cc6:	0608      	lsls	r0, r1, #24
 8007cc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ccc:	d402      	bmi.n	8007cd4 <_printf_i+0xe8>
 8007cce:	0649      	lsls	r1, r1, #25
 8007cd0:	bf48      	it	mi
 8007cd2:	b2ad      	uxthmi	r5, r5
 8007cd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cd6:	4853      	ldr	r0, [pc, #332]	@ (8007e24 <_printf_i+0x238>)
 8007cd8:	6033      	str	r3, [r6, #0]
 8007cda:	bf14      	ite	ne
 8007cdc:	230a      	movne	r3, #10
 8007cde:	2308      	moveq	r3, #8
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ce6:	6866      	ldr	r6, [r4, #4]
 8007ce8:	60a6      	str	r6, [r4, #8]
 8007cea:	2e00      	cmp	r6, #0
 8007cec:	bfa2      	ittt	ge
 8007cee:	6821      	ldrge	r1, [r4, #0]
 8007cf0:	f021 0104 	bicge.w	r1, r1, #4
 8007cf4:	6021      	strge	r1, [r4, #0]
 8007cf6:	b90d      	cbnz	r5, 8007cfc <_printf_i+0x110>
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	d04b      	beq.n	8007d94 <_printf_i+0x1a8>
 8007cfc:	4616      	mov	r6, r2
 8007cfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d02:	fb03 5711 	mls	r7, r3, r1, r5
 8007d06:	5dc7      	ldrb	r7, [r0, r7]
 8007d08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d0c:	462f      	mov	r7, r5
 8007d0e:	42bb      	cmp	r3, r7
 8007d10:	460d      	mov	r5, r1
 8007d12:	d9f4      	bls.n	8007cfe <_printf_i+0x112>
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d10b      	bne.n	8007d30 <_printf_i+0x144>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	07df      	lsls	r7, r3, #31
 8007d1c:	d508      	bpl.n	8007d30 <_printf_i+0x144>
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	6861      	ldr	r1, [r4, #4]
 8007d22:	4299      	cmp	r1, r3
 8007d24:	bfde      	ittt	le
 8007d26:	2330      	movle	r3, #48	@ 0x30
 8007d28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d30:	1b92      	subs	r2, r2, r6
 8007d32:	6122      	str	r2, [r4, #16]
 8007d34:	f8cd a000 	str.w	sl, [sp]
 8007d38:	464b      	mov	r3, r9
 8007d3a:	aa03      	add	r2, sp, #12
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	4640      	mov	r0, r8
 8007d40:	f7ff fee6 	bl	8007b10 <_printf_common>
 8007d44:	3001      	adds	r0, #1
 8007d46:	d14a      	bne.n	8007dde <_printf_i+0x1f2>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	b004      	add	sp, #16
 8007d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	f043 0320 	orr.w	r3, r3, #32
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	4833      	ldr	r0, [pc, #204]	@ (8007e28 <_printf_i+0x23c>)
 8007d5c:	2778      	movs	r7, #120	@ 0x78
 8007d5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	6831      	ldr	r1, [r6, #0]
 8007d66:	061f      	lsls	r7, r3, #24
 8007d68:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d6c:	d402      	bmi.n	8007d74 <_printf_i+0x188>
 8007d6e:	065f      	lsls	r7, r3, #25
 8007d70:	bf48      	it	mi
 8007d72:	b2ad      	uxthmi	r5, r5
 8007d74:	6031      	str	r1, [r6, #0]
 8007d76:	07d9      	lsls	r1, r3, #31
 8007d78:	bf44      	itt	mi
 8007d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d7e:	6023      	strmi	r3, [r4, #0]
 8007d80:	b11d      	cbz	r5, 8007d8a <_printf_i+0x19e>
 8007d82:	2310      	movs	r3, #16
 8007d84:	e7ac      	b.n	8007ce0 <_printf_i+0xf4>
 8007d86:	4827      	ldr	r0, [pc, #156]	@ (8007e24 <_printf_i+0x238>)
 8007d88:	e7e9      	b.n	8007d5e <_printf_i+0x172>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	f023 0320 	bic.w	r3, r3, #32
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	e7f6      	b.n	8007d82 <_printf_i+0x196>
 8007d94:	4616      	mov	r6, r2
 8007d96:	e7bd      	b.n	8007d14 <_printf_i+0x128>
 8007d98:	6833      	ldr	r3, [r6, #0]
 8007d9a:	6825      	ldr	r5, [r4, #0]
 8007d9c:	6961      	ldr	r1, [r4, #20]
 8007d9e:	1d18      	adds	r0, r3, #4
 8007da0:	6030      	str	r0, [r6, #0]
 8007da2:	062e      	lsls	r6, r5, #24
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	d501      	bpl.n	8007dac <_printf_i+0x1c0>
 8007da8:	6019      	str	r1, [r3, #0]
 8007daa:	e002      	b.n	8007db2 <_printf_i+0x1c6>
 8007dac:	0668      	lsls	r0, r5, #25
 8007dae:	d5fb      	bpl.n	8007da8 <_printf_i+0x1bc>
 8007db0:	8019      	strh	r1, [r3, #0]
 8007db2:	2300      	movs	r3, #0
 8007db4:	6123      	str	r3, [r4, #16]
 8007db6:	4616      	mov	r6, r2
 8007db8:	e7bc      	b.n	8007d34 <_printf_i+0x148>
 8007dba:	6833      	ldr	r3, [r6, #0]
 8007dbc:	1d1a      	adds	r2, r3, #4
 8007dbe:	6032      	str	r2, [r6, #0]
 8007dc0:	681e      	ldr	r6, [r3, #0]
 8007dc2:	6862      	ldr	r2, [r4, #4]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7f8 fa0a 	bl	80001e0 <memchr>
 8007dcc:	b108      	cbz	r0, 8007dd2 <_printf_i+0x1e6>
 8007dce:	1b80      	subs	r0, r0, r6
 8007dd0:	6060      	str	r0, [r4, #4]
 8007dd2:	6863      	ldr	r3, [r4, #4]
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ddc:	e7aa      	b.n	8007d34 <_printf_i+0x148>
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	4632      	mov	r2, r6
 8007de2:	4649      	mov	r1, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	47d0      	blx	sl
 8007de8:	3001      	adds	r0, #1
 8007dea:	d0ad      	beq.n	8007d48 <_printf_i+0x15c>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	079b      	lsls	r3, r3, #30
 8007df0:	d413      	bmi.n	8007e1a <_printf_i+0x22e>
 8007df2:	68e0      	ldr	r0, [r4, #12]
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	4298      	cmp	r0, r3
 8007df8:	bfb8      	it	lt
 8007dfa:	4618      	movlt	r0, r3
 8007dfc:	e7a6      	b.n	8007d4c <_printf_i+0x160>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4632      	mov	r2, r6
 8007e02:	4649      	mov	r1, r9
 8007e04:	4640      	mov	r0, r8
 8007e06:	47d0      	blx	sl
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d09d      	beq.n	8007d48 <_printf_i+0x15c>
 8007e0c:	3501      	adds	r5, #1
 8007e0e:	68e3      	ldr	r3, [r4, #12]
 8007e10:	9903      	ldr	r1, [sp, #12]
 8007e12:	1a5b      	subs	r3, r3, r1
 8007e14:	42ab      	cmp	r3, r5
 8007e16:	dcf2      	bgt.n	8007dfe <_printf_i+0x212>
 8007e18:	e7eb      	b.n	8007df2 <_printf_i+0x206>
 8007e1a:	2500      	movs	r5, #0
 8007e1c:	f104 0619 	add.w	r6, r4, #25
 8007e20:	e7f5      	b.n	8007e0e <_printf_i+0x222>
 8007e22:	bf00      	nop
 8007e24:	0800aa52 	.word	0x0800aa52
 8007e28:	0800aa63 	.word	0x0800aa63

08007e2c <std>:
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	e9c0 3300 	strd	r3, r3, [r0]
 8007e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e3a:	6083      	str	r3, [r0, #8]
 8007e3c:	8181      	strh	r1, [r0, #12]
 8007e3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e40:	81c2      	strh	r2, [r0, #14]
 8007e42:	6183      	str	r3, [r0, #24]
 8007e44:	4619      	mov	r1, r3
 8007e46:	2208      	movs	r2, #8
 8007e48:	305c      	adds	r0, #92	@ 0x5c
 8007e4a:	f000 f914 	bl	8008076 <memset>
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <std+0x58>)
 8007e50:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e52:	4b0d      	ldr	r3, [pc, #52]	@ (8007e88 <std+0x5c>)
 8007e54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e56:	4b0d      	ldr	r3, [pc, #52]	@ (8007e8c <std+0x60>)
 8007e58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e90 <std+0x64>)
 8007e5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e94 <std+0x68>)
 8007e60:	6224      	str	r4, [r4, #32]
 8007e62:	429c      	cmp	r4, r3
 8007e64:	d006      	beq.n	8007e74 <std+0x48>
 8007e66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e6a:	4294      	cmp	r4, r2
 8007e6c:	d002      	beq.n	8007e74 <std+0x48>
 8007e6e:	33d0      	adds	r3, #208	@ 0xd0
 8007e70:	429c      	cmp	r4, r3
 8007e72:	d105      	bne.n	8007e80 <std+0x54>
 8007e74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7c:	f000 b978 	b.w	8008170 <__retarget_lock_init_recursive>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	bf00      	nop
 8007e84:	08007ff1 	.word	0x08007ff1
 8007e88:	08008013 	.word	0x08008013
 8007e8c:	0800804b 	.word	0x0800804b
 8007e90:	0800806f 	.word	0x0800806f
 8007e94:	20000918 	.word	0x20000918

08007e98 <stdio_exit_handler>:
 8007e98:	4a02      	ldr	r2, [pc, #8]	@ (8007ea4 <stdio_exit_handler+0xc>)
 8007e9a:	4903      	ldr	r1, [pc, #12]	@ (8007ea8 <stdio_exit_handler+0x10>)
 8007e9c:	4803      	ldr	r0, [pc, #12]	@ (8007eac <stdio_exit_handler+0x14>)
 8007e9e:	f000 b869 	b.w	8007f74 <_fwalk_sglue>
 8007ea2:	bf00      	nop
 8007ea4:	20000018 	.word	0x20000018
 8007ea8:	08009acd 	.word	0x08009acd
 8007eac:	20000028 	.word	0x20000028

08007eb0 <cleanup_stdio>:
 8007eb0:	6841      	ldr	r1, [r0, #4]
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee4 <cleanup_stdio+0x34>)
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	4604      	mov	r4, r0
 8007eba:	d001      	beq.n	8007ec0 <cleanup_stdio+0x10>
 8007ebc:	f001 fe06 	bl	8009acc <_fflush_r>
 8007ec0:	68a1      	ldr	r1, [r4, #8]
 8007ec2:	4b09      	ldr	r3, [pc, #36]	@ (8007ee8 <cleanup_stdio+0x38>)
 8007ec4:	4299      	cmp	r1, r3
 8007ec6:	d002      	beq.n	8007ece <cleanup_stdio+0x1e>
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f001 fdff 	bl	8009acc <_fflush_r>
 8007ece:	68e1      	ldr	r1, [r4, #12]
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <cleanup_stdio+0x3c>)
 8007ed2:	4299      	cmp	r1, r3
 8007ed4:	d004      	beq.n	8007ee0 <cleanup_stdio+0x30>
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007edc:	f001 bdf6 	b.w	8009acc <_fflush_r>
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000918 	.word	0x20000918
 8007ee8:	20000980 	.word	0x20000980
 8007eec:	200009e8 	.word	0x200009e8

08007ef0 <global_stdio_init.part.0>:
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <global_stdio_init.part.0+0x30>)
 8007ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8007f24 <global_stdio_init.part.0+0x34>)
 8007ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f28 <global_stdio_init.part.0+0x38>)
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	4620      	mov	r0, r4
 8007efc:	2200      	movs	r2, #0
 8007efe:	2104      	movs	r1, #4
 8007f00:	f7ff ff94 	bl	8007e2c <std>
 8007f04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f08:	2201      	movs	r2, #1
 8007f0a:	2109      	movs	r1, #9
 8007f0c:	f7ff ff8e 	bl	8007e2c <std>
 8007f10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f14:	2202      	movs	r2, #2
 8007f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f1a:	2112      	movs	r1, #18
 8007f1c:	f7ff bf86 	b.w	8007e2c <std>
 8007f20:	20000a50 	.word	0x20000a50
 8007f24:	20000918 	.word	0x20000918
 8007f28:	08007e99 	.word	0x08007e99

08007f2c <__sfp_lock_acquire>:
 8007f2c:	4801      	ldr	r0, [pc, #4]	@ (8007f34 <__sfp_lock_acquire+0x8>)
 8007f2e:	f000 b920 	b.w	8008172 <__retarget_lock_acquire_recursive>
 8007f32:	bf00      	nop
 8007f34:	20000a59 	.word	0x20000a59

08007f38 <__sfp_lock_release>:
 8007f38:	4801      	ldr	r0, [pc, #4]	@ (8007f40 <__sfp_lock_release+0x8>)
 8007f3a:	f000 b91b 	b.w	8008174 <__retarget_lock_release_recursive>
 8007f3e:	bf00      	nop
 8007f40:	20000a59 	.word	0x20000a59

08007f44 <__sinit>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	4604      	mov	r4, r0
 8007f48:	f7ff fff0 	bl	8007f2c <__sfp_lock_acquire>
 8007f4c:	6a23      	ldr	r3, [r4, #32]
 8007f4e:	b11b      	cbz	r3, 8007f58 <__sinit+0x14>
 8007f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f54:	f7ff bff0 	b.w	8007f38 <__sfp_lock_release>
 8007f58:	4b04      	ldr	r3, [pc, #16]	@ (8007f6c <__sinit+0x28>)
 8007f5a:	6223      	str	r3, [r4, #32]
 8007f5c:	4b04      	ldr	r3, [pc, #16]	@ (8007f70 <__sinit+0x2c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1f5      	bne.n	8007f50 <__sinit+0xc>
 8007f64:	f7ff ffc4 	bl	8007ef0 <global_stdio_init.part.0>
 8007f68:	e7f2      	b.n	8007f50 <__sinit+0xc>
 8007f6a:	bf00      	nop
 8007f6c:	08007eb1 	.word	0x08007eb1
 8007f70:	20000a50 	.word	0x20000a50

08007f74 <_fwalk_sglue>:
 8007f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f78:	4607      	mov	r7, r0
 8007f7a:	4688      	mov	r8, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	2600      	movs	r6, #0
 8007f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f84:	f1b9 0901 	subs.w	r9, r9, #1
 8007f88:	d505      	bpl.n	8007f96 <_fwalk_sglue+0x22>
 8007f8a:	6824      	ldr	r4, [r4, #0]
 8007f8c:	2c00      	cmp	r4, #0
 8007f8e:	d1f7      	bne.n	8007f80 <_fwalk_sglue+0xc>
 8007f90:	4630      	mov	r0, r6
 8007f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d907      	bls.n	8007fac <_fwalk_sglue+0x38>
 8007f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	d003      	beq.n	8007fac <_fwalk_sglue+0x38>
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	47c0      	blx	r8
 8007faa:	4306      	orrs	r6, r0
 8007fac:	3568      	adds	r5, #104	@ 0x68
 8007fae:	e7e9      	b.n	8007f84 <_fwalk_sglue+0x10>

08007fb0 <siprintf>:
 8007fb0:	b40e      	push	{r1, r2, r3}
 8007fb2:	b500      	push	{lr}
 8007fb4:	b09c      	sub	sp, #112	@ 0x70
 8007fb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007fb8:	9002      	str	r0, [sp, #8]
 8007fba:	9006      	str	r0, [sp, #24]
 8007fbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007fc0:	4809      	ldr	r0, [pc, #36]	@ (8007fe8 <siprintf+0x38>)
 8007fc2:	9107      	str	r1, [sp, #28]
 8007fc4:	9104      	str	r1, [sp, #16]
 8007fc6:	4909      	ldr	r1, [pc, #36]	@ (8007fec <siprintf+0x3c>)
 8007fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fcc:	9105      	str	r1, [sp, #20]
 8007fce:	6800      	ldr	r0, [r0, #0]
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	a902      	add	r1, sp, #8
 8007fd4:	f001 fbfa 	bl	80097cc <_svfiprintf_r>
 8007fd8:	9b02      	ldr	r3, [sp, #8]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	b01c      	add	sp, #112	@ 0x70
 8007fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe4:	b003      	add	sp, #12
 8007fe6:	4770      	bx	lr
 8007fe8:	20000024 	.word	0x20000024
 8007fec:	ffff0208 	.word	0xffff0208

08007ff0 <__sread>:
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff8:	f000 f86c 	bl	80080d4 <_read_r>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	bfab      	itete	ge
 8008000:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008002:	89a3      	ldrhlt	r3, [r4, #12]
 8008004:	181b      	addge	r3, r3, r0
 8008006:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800800a:	bfac      	ite	ge
 800800c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800800e:	81a3      	strhlt	r3, [r4, #12]
 8008010:	bd10      	pop	{r4, pc}

08008012 <__swrite>:
 8008012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008016:	461f      	mov	r7, r3
 8008018:	898b      	ldrh	r3, [r1, #12]
 800801a:	05db      	lsls	r3, r3, #23
 800801c:	4605      	mov	r5, r0
 800801e:	460c      	mov	r4, r1
 8008020:	4616      	mov	r6, r2
 8008022:	d505      	bpl.n	8008030 <__swrite+0x1e>
 8008024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008028:	2302      	movs	r3, #2
 800802a:	2200      	movs	r2, #0
 800802c:	f000 f840 	bl	80080b0 <_lseek_r>
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	4632      	mov	r2, r6
 800803e:	463b      	mov	r3, r7
 8008040:	4628      	mov	r0, r5
 8008042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008046:	f000 b857 	b.w	80080f8 <_write_r>

0800804a <__sseek>:
 800804a:	b510      	push	{r4, lr}
 800804c:	460c      	mov	r4, r1
 800804e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008052:	f000 f82d 	bl	80080b0 <_lseek_r>
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	bf15      	itete	ne
 800805c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800805e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008062:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008066:	81a3      	strheq	r3, [r4, #12]
 8008068:	bf18      	it	ne
 800806a:	81a3      	strhne	r3, [r4, #12]
 800806c:	bd10      	pop	{r4, pc}

0800806e <__sclose>:
 800806e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008072:	f000 b80d 	b.w	8008090 <_close_r>

08008076 <memset>:
 8008076:	4402      	add	r2, r0
 8008078:	4603      	mov	r3, r0
 800807a:	4293      	cmp	r3, r2
 800807c:	d100      	bne.n	8008080 <memset+0xa>
 800807e:	4770      	bx	lr
 8008080:	f803 1b01 	strb.w	r1, [r3], #1
 8008084:	e7f9      	b.n	800807a <memset+0x4>
	...

08008088 <_localeconv_r>:
 8008088:	4800      	ldr	r0, [pc, #0]	@ (800808c <_localeconv_r+0x4>)
 800808a:	4770      	bx	lr
 800808c:	20000164 	.word	0x20000164

08008090 <_close_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4d06      	ldr	r5, [pc, #24]	@ (80080ac <_close_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4604      	mov	r4, r0
 8008098:	4608      	mov	r0, r1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	f7fa fdbe 	bl	8002c1c <_close>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_close_r+0x1a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_close_r+0x1a>
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20000a54 	.word	0x20000a54

080080b0 <_lseek_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	4d07      	ldr	r5, [pc, #28]	@ (80080d0 <_lseek_r+0x20>)
 80080b4:	4604      	mov	r4, r0
 80080b6:	4608      	mov	r0, r1
 80080b8:	4611      	mov	r1, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	f7fa fdd3 	bl	8002c6a <_lseek>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d102      	bne.n	80080ce <_lseek_r+0x1e>
 80080c8:	682b      	ldr	r3, [r5, #0]
 80080ca:	b103      	cbz	r3, 80080ce <_lseek_r+0x1e>
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	bd38      	pop	{r3, r4, r5, pc}
 80080d0:	20000a54 	.word	0x20000a54

080080d4 <_read_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	4d07      	ldr	r5, [pc, #28]	@ (80080f4 <_read_r+0x20>)
 80080d8:	4604      	mov	r4, r0
 80080da:	4608      	mov	r0, r1
 80080dc:	4611      	mov	r1, r2
 80080de:	2200      	movs	r2, #0
 80080e0:	602a      	str	r2, [r5, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	f7fa fd7d 	bl	8002be2 <_read>
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d102      	bne.n	80080f2 <_read_r+0x1e>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	b103      	cbz	r3, 80080f2 <_read_r+0x1e>
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	bd38      	pop	{r3, r4, r5, pc}
 80080f4:	20000a54 	.word	0x20000a54

080080f8 <_write_r>:
 80080f8:	b538      	push	{r3, r4, r5, lr}
 80080fa:	4d07      	ldr	r5, [pc, #28]	@ (8008118 <_write_r+0x20>)
 80080fc:	4604      	mov	r4, r0
 80080fe:	4608      	mov	r0, r1
 8008100:	4611      	mov	r1, r2
 8008102:	2200      	movs	r2, #0
 8008104:	602a      	str	r2, [r5, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	f7f9 fbf6 	bl	80018f8 <_write>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d102      	bne.n	8008116 <_write_r+0x1e>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	b103      	cbz	r3, 8008116 <_write_r+0x1e>
 8008114:	6023      	str	r3, [r4, #0]
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	20000a54 	.word	0x20000a54

0800811c <__errno>:
 800811c:	4b01      	ldr	r3, [pc, #4]	@ (8008124 <__errno+0x8>)
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000024 	.word	0x20000024

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	@ (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	@ (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	@ (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	@ (800816c <__libc_init_array+0x44>)
 800813c:	f002 f864 	bl	800a208 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	0800adb8 	.word	0x0800adb8
 8008164:	0800adb8 	.word	0x0800adb8
 8008168:	0800adb8 	.word	0x0800adb8
 800816c:	0800adbc 	.word	0x0800adbc

08008170 <__retarget_lock_init_recursive>:
 8008170:	4770      	bx	lr

08008172 <__retarget_lock_acquire_recursive>:
 8008172:	4770      	bx	lr

08008174 <__retarget_lock_release_recursive>:
 8008174:	4770      	bx	lr

08008176 <quorem>:
 8008176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	6903      	ldr	r3, [r0, #16]
 800817c:	690c      	ldr	r4, [r1, #16]
 800817e:	42a3      	cmp	r3, r4
 8008180:	4607      	mov	r7, r0
 8008182:	db7e      	blt.n	8008282 <quorem+0x10c>
 8008184:	3c01      	subs	r4, #1
 8008186:	f101 0814 	add.w	r8, r1, #20
 800818a:	00a3      	lsls	r3, r4, #2
 800818c:	f100 0514 	add.w	r5, r0, #20
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800819c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081a0:	3301      	adds	r3, #1
 80081a2:	429a      	cmp	r2, r3
 80081a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80081ac:	d32e      	bcc.n	800820c <quorem+0x96>
 80081ae:	f04f 0a00 	mov.w	sl, #0
 80081b2:	46c4      	mov	ip, r8
 80081b4:	46ae      	mov	lr, r5
 80081b6:	46d3      	mov	fp, sl
 80081b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80081bc:	b298      	uxth	r0, r3
 80081be:	fb06 a000 	mla	r0, r6, r0, sl
 80081c2:	0c02      	lsrs	r2, r0, #16
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	fb06 2303 	mla	r3, r6, r3, r2
 80081ca:	f8de 2000 	ldr.w	r2, [lr]
 80081ce:	b280      	uxth	r0, r0
 80081d0:	b292      	uxth	r2, r2
 80081d2:	1a12      	subs	r2, r2, r0
 80081d4:	445a      	add	r2, fp
 80081d6:	f8de 0000 	ldr.w	r0, [lr]
 80081da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081de:	b29b      	uxth	r3, r3
 80081e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80081e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80081e8:	b292      	uxth	r2, r2
 80081ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80081ee:	45e1      	cmp	r9, ip
 80081f0:	f84e 2b04 	str.w	r2, [lr], #4
 80081f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80081f8:	d2de      	bcs.n	80081b8 <quorem+0x42>
 80081fa:	9b00      	ldr	r3, [sp, #0]
 80081fc:	58eb      	ldr	r3, [r5, r3]
 80081fe:	b92b      	cbnz	r3, 800820c <quorem+0x96>
 8008200:	9b01      	ldr	r3, [sp, #4]
 8008202:	3b04      	subs	r3, #4
 8008204:	429d      	cmp	r5, r3
 8008206:	461a      	mov	r2, r3
 8008208:	d32f      	bcc.n	800826a <quorem+0xf4>
 800820a:	613c      	str	r4, [r7, #16]
 800820c:	4638      	mov	r0, r7
 800820e:	f001 f979 	bl	8009504 <__mcmp>
 8008212:	2800      	cmp	r0, #0
 8008214:	db25      	blt.n	8008262 <quorem+0xec>
 8008216:	4629      	mov	r1, r5
 8008218:	2000      	movs	r0, #0
 800821a:	f858 2b04 	ldr.w	r2, [r8], #4
 800821e:	f8d1 c000 	ldr.w	ip, [r1]
 8008222:	fa1f fe82 	uxth.w	lr, r2
 8008226:	fa1f f38c 	uxth.w	r3, ip
 800822a:	eba3 030e 	sub.w	r3, r3, lr
 800822e:	4403      	add	r3, r0
 8008230:	0c12      	lsrs	r2, r2, #16
 8008232:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008236:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800823a:	b29b      	uxth	r3, r3
 800823c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008240:	45c1      	cmp	r9, r8
 8008242:	f841 3b04 	str.w	r3, [r1], #4
 8008246:	ea4f 4022 	mov.w	r0, r2, asr #16
 800824a:	d2e6      	bcs.n	800821a <quorem+0xa4>
 800824c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008254:	b922      	cbnz	r2, 8008260 <quorem+0xea>
 8008256:	3b04      	subs	r3, #4
 8008258:	429d      	cmp	r5, r3
 800825a:	461a      	mov	r2, r3
 800825c:	d30b      	bcc.n	8008276 <quorem+0x100>
 800825e:	613c      	str	r4, [r7, #16]
 8008260:	3601      	adds	r6, #1
 8008262:	4630      	mov	r0, r6
 8008264:	b003      	add	sp, #12
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	6812      	ldr	r2, [r2, #0]
 800826c:	3b04      	subs	r3, #4
 800826e:	2a00      	cmp	r2, #0
 8008270:	d1cb      	bne.n	800820a <quorem+0x94>
 8008272:	3c01      	subs	r4, #1
 8008274:	e7c6      	b.n	8008204 <quorem+0x8e>
 8008276:	6812      	ldr	r2, [r2, #0]
 8008278:	3b04      	subs	r3, #4
 800827a:	2a00      	cmp	r2, #0
 800827c:	d1ef      	bne.n	800825e <quorem+0xe8>
 800827e:	3c01      	subs	r4, #1
 8008280:	e7ea      	b.n	8008258 <quorem+0xe2>
 8008282:	2000      	movs	r0, #0
 8008284:	e7ee      	b.n	8008264 <quorem+0xee>
	...

08008288 <_dtoa_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	69c7      	ldr	r7, [r0, #28]
 800828e:	b099      	sub	sp, #100	@ 0x64
 8008290:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008294:	ec55 4b10 	vmov	r4, r5, d0
 8008298:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800829a:	9109      	str	r1, [sp, #36]	@ 0x24
 800829c:	4683      	mov	fp, r0
 800829e:	920e      	str	r2, [sp, #56]	@ 0x38
 80082a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082a2:	b97f      	cbnz	r7, 80082c4 <_dtoa_r+0x3c>
 80082a4:	2010      	movs	r0, #16
 80082a6:	f000 fdfd 	bl	8008ea4 <malloc>
 80082aa:	4602      	mov	r2, r0
 80082ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80082b0:	b920      	cbnz	r0, 80082bc <_dtoa_r+0x34>
 80082b2:	4ba7      	ldr	r3, [pc, #668]	@ (8008550 <_dtoa_r+0x2c8>)
 80082b4:	21ef      	movs	r1, #239	@ 0xef
 80082b6:	48a7      	ldr	r0, [pc, #668]	@ (8008554 <_dtoa_r+0x2cc>)
 80082b8:	f001 fc68 	bl	8009b8c <__assert_func>
 80082bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80082c0:	6007      	str	r7, [r0, #0]
 80082c2:	60c7      	str	r7, [r0, #12]
 80082c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082c8:	6819      	ldr	r1, [r3, #0]
 80082ca:	b159      	cbz	r1, 80082e4 <_dtoa_r+0x5c>
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	604a      	str	r2, [r1, #4]
 80082d0:	2301      	movs	r3, #1
 80082d2:	4093      	lsls	r3, r2
 80082d4:	608b      	str	r3, [r1, #8]
 80082d6:	4658      	mov	r0, fp
 80082d8:	f000 feda 	bl	8009090 <_Bfree>
 80082dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	1e2b      	subs	r3, r5, #0
 80082e6:	bfb9      	ittee	lt
 80082e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80082ec:	9303      	strlt	r3, [sp, #12]
 80082ee:	2300      	movge	r3, #0
 80082f0:	6033      	strge	r3, [r6, #0]
 80082f2:	9f03      	ldr	r7, [sp, #12]
 80082f4:	4b98      	ldr	r3, [pc, #608]	@ (8008558 <_dtoa_r+0x2d0>)
 80082f6:	bfbc      	itt	lt
 80082f8:	2201      	movlt	r2, #1
 80082fa:	6032      	strlt	r2, [r6, #0]
 80082fc:	43bb      	bics	r3, r7
 80082fe:	d112      	bne.n	8008326 <_dtoa_r+0x9e>
 8008300:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008302:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800830c:	4323      	orrs	r3, r4
 800830e:	f000 854d 	beq.w	8008dac <_dtoa_r+0xb24>
 8008312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008314:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800856c <_dtoa_r+0x2e4>
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 854f 	beq.w	8008dbc <_dtoa_r+0xb34>
 800831e:	f10a 0303 	add.w	r3, sl, #3
 8008322:	f000 bd49 	b.w	8008db8 <_dtoa_r+0xb30>
 8008326:	ed9d 7b02 	vldr	d7, [sp, #8]
 800832a:	2200      	movs	r2, #0
 800832c:	ec51 0b17 	vmov	r0, r1, d7
 8008330:	2300      	movs	r3, #0
 8008332:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008336:	f7f8 fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800833a:	4680      	mov	r8, r0
 800833c:	b158      	cbz	r0, 8008356 <_dtoa_r+0xce>
 800833e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008340:	2301      	movs	r3, #1
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008346:	b113      	cbz	r3, 800834e <_dtoa_r+0xc6>
 8008348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800834a:	4b84      	ldr	r3, [pc, #528]	@ (800855c <_dtoa_r+0x2d4>)
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008570 <_dtoa_r+0x2e8>
 8008352:	f000 bd33 	b.w	8008dbc <_dtoa_r+0xb34>
 8008356:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800835a:	aa16      	add	r2, sp, #88	@ 0x58
 800835c:	a917      	add	r1, sp, #92	@ 0x5c
 800835e:	4658      	mov	r0, fp
 8008360:	f001 f980 	bl	8009664 <__d2b>
 8008364:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008368:	4681      	mov	r9, r0
 800836a:	2e00      	cmp	r6, #0
 800836c:	d077      	beq.n	800845e <_dtoa_r+0x1d6>
 800836e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008370:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800837c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008380:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008384:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008388:	4619      	mov	r1, r3
 800838a:	2200      	movs	r2, #0
 800838c:	4b74      	ldr	r3, [pc, #464]	@ (8008560 <_dtoa_r+0x2d8>)
 800838e:	f7f7 ff83 	bl	8000298 <__aeabi_dsub>
 8008392:	a369      	add	r3, pc, #420	@ (adr r3, 8008538 <_dtoa_r+0x2b0>)
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7f8 f936 	bl	8000608 <__aeabi_dmul>
 800839c:	a368      	add	r3, pc, #416	@ (adr r3, 8008540 <_dtoa_r+0x2b8>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7f7 ff7b 	bl	800029c <__adddf3>
 80083a6:	4604      	mov	r4, r0
 80083a8:	4630      	mov	r0, r6
 80083aa:	460d      	mov	r5, r1
 80083ac:	f7f8 f8c2 	bl	8000534 <__aeabi_i2d>
 80083b0:	a365      	add	r3, pc, #404	@ (adr r3, 8008548 <_dtoa_r+0x2c0>)
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f8 f927 	bl	8000608 <__aeabi_dmul>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4620      	mov	r0, r4
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7f7 ff6b 	bl	800029c <__adddf3>
 80083c6:	4604      	mov	r4, r0
 80083c8:	460d      	mov	r5, r1
 80083ca:	f7f8 fbcd 	bl	8000b68 <__aeabi_d2iz>
 80083ce:	2200      	movs	r2, #0
 80083d0:	4607      	mov	r7, r0
 80083d2:	2300      	movs	r3, #0
 80083d4:	4620      	mov	r0, r4
 80083d6:	4629      	mov	r1, r5
 80083d8:	f7f8 fb88 	bl	8000aec <__aeabi_dcmplt>
 80083dc:	b140      	cbz	r0, 80083f0 <_dtoa_r+0x168>
 80083de:	4638      	mov	r0, r7
 80083e0:	f7f8 f8a8 	bl	8000534 <__aeabi_i2d>
 80083e4:	4622      	mov	r2, r4
 80083e6:	462b      	mov	r3, r5
 80083e8:	f7f8 fb76 	bl	8000ad8 <__aeabi_dcmpeq>
 80083ec:	b900      	cbnz	r0, 80083f0 <_dtoa_r+0x168>
 80083ee:	3f01      	subs	r7, #1
 80083f0:	2f16      	cmp	r7, #22
 80083f2:	d851      	bhi.n	8008498 <_dtoa_r+0x210>
 80083f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008564 <_dtoa_r+0x2dc>)
 80083f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008402:	f7f8 fb73 	bl	8000aec <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	d048      	beq.n	800849c <_dtoa_r+0x214>
 800840a:	3f01      	subs	r7, #1
 800840c:	2300      	movs	r3, #0
 800840e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008410:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008412:	1b9b      	subs	r3, r3, r6
 8008414:	1e5a      	subs	r2, r3, #1
 8008416:	bf44      	itt	mi
 8008418:	f1c3 0801 	rsbmi	r8, r3, #1
 800841c:	2300      	movmi	r3, #0
 800841e:	9208      	str	r2, [sp, #32]
 8008420:	bf54      	ite	pl
 8008422:	f04f 0800 	movpl.w	r8, #0
 8008426:	9308      	strmi	r3, [sp, #32]
 8008428:	2f00      	cmp	r7, #0
 800842a:	db39      	blt.n	80084a0 <_dtoa_r+0x218>
 800842c:	9b08      	ldr	r3, [sp, #32]
 800842e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008430:	443b      	add	r3, r7
 8008432:	9308      	str	r3, [sp, #32]
 8008434:	2300      	movs	r3, #0
 8008436:	930a      	str	r3, [sp, #40]	@ 0x28
 8008438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843a:	2b09      	cmp	r3, #9
 800843c:	d864      	bhi.n	8008508 <_dtoa_r+0x280>
 800843e:	2b05      	cmp	r3, #5
 8008440:	bfc4      	itt	gt
 8008442:	3b04      	subgt	r3, #4
 8008444:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008448:	f1a3 0302 	sub.w	r3, r3, #2
 800844c:	bfcc      	ite	gt
 800844e:	2400      	movgt	r4, #0
 8008450:	2401      	movle	r4, #1
 8008452:	2b03      	cmp	r3, #3
 8008454:	d863      	bhi.n	800851e <_dtoa_r+0x296>
 8008456:	e8df f003 	tbb	[pc, r3]
 800845a:	372a      	.short	0x372a
 800845c:	5535      	.short	0x5535
 800845e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008462:	441e      	add	r6, r3
 8008464:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008468:	2b20      	cmp	r3, #32
 800846a:	bfc1      	itttt	gt
 800846c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008470:	409f      	lslgt	r7, r3
 8008472:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008476:	fa24 f303 	lsrgt.w	r3, r4, r3
 800847a:	bfd6      	itet	le
 800847c:	f1c3 0320 	rsble	r3, r3, #32
 8008480:	ea47 0003 	orrgt.w	r0, r7, r3
 8008484:	fa04 f003 	lslle.w	r0, r4, r3
 8008488:	f7f8 f844 	bl	8000514 <__aeabi_ui2d>
 800848c:	2201      	movs	r2, #1
 800848e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008492:	3e01      	subs	r6, #1
 8008494:	9214      	str	r2, [sp, #80]	@ 0x50
 8008496:	e777      	b.n	8008388 <_dtoa_r+0x100>
 8008498:	2301      	movs	r3, #1
 800849a:	e7b8      	b.n	800840e <_dtoa_r+0x186>
 800849c:	9012      	str	r0, [sp, #72]	@ 0x48
 800849e:	e7b7      	b.n	8008410 <_dtoa_r+0x188>
 80084a0:	427b      	negs	r3, r7
 80084a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80084a4:	2300      	movs	r3, #0
 80084a6:	eba8 0807 	sub.w	r8, r8, r7
 80084aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084ac:	e7c4      	b.n	8008438 <_dtoa_r+0x1b0>
 80084ae:	2300      	movs	r3, #0
 80084b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dc35      	bgt.n	8008524 <_dtoa_r+0x29c>
 80084b8:	2301      	movs	r3, #1
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	9307      	str	r3, [sp, #28]
 80084be:	461a      	mov	r2, r3
 80084c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80084c2:	e00b      	b.n	80084dc <_dtoa_r+0x254>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e7f3      	b.n	80084b0 <_dtoa_r+0x228>
 80084c8:	2300      	movs	r3, #0
 80084ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ce:	18fb      	adds	r3, r7, r3
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	9307      	str	r3, [sp, #28]
 80084d8:	bfb8      	it	lt
 80084da:	2301      	movlt	r3, #1
 80084dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80084e0:	2100      	movs	r1, #0
 80084e2:	2204      	movs	r2, #4
 80084e4:	f102 0514 	add.w	r5, r2, #20
 80084e8:	429d      	cmp	r5, r3
 80084ea:	d91f      	bls.n	800852c <_dtoa_r+0x2a4>
 80084ec:	6041      	str	r1, [r0, #4]
 80084ee:	4658      	mov	r0, fp
 80084f0:	f000 fd8e 	bl	8009010 <_Balloc>
 80084f4:	4682      	mov	sl, r0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d13c      	bne.n	8008574 <_dtoa_r+0x2ec>
 80084fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008568 <_dtoa_r+0x2e0>)
 80084fc:	4602      	mov	r2, r0
 80084fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008502:	e6d8      	b.n	80082b6 <_dtoa_r+0x2e>
 8008504:	2301      	movs	r3, #1
 8008506:	e7e0      	b.n	80084ca <_dtoa_r+0x242>
 8008508:	2401      	movs	r4, #1
 800850a:	2300      	movs	r3, #0
 800850c:	9309      	str	r3, [sp, #36]	@ 0x24
 800850e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008510:	f04f 33ff 	mov.w	r3, #4294967295
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	9307      	str	r3, [sp, #28]
 8008518:	2200      	movs	r2, #0
 800851a:	2312      	movs	r3, #18
 800851c:	e7d0      	b.n	80084c0 <_dtoa_r+0x238>
 800851e:	2301      	movs	r3, #1
 8008520:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008522:	e7f5      	b.n	8008510 <_dtoa_r+0x288>
 8008524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	e7d7      	b.n	80084dc <_dtoa_r+0x254>
 800852c:	3101      	adds	r1, #1
 800852e:	0052      	lsls	r2, r2, #1
 8008530:	e7d8      	b.n	80084e4 <_dtoa_r+0x25c>
 8008532:	bf00      	nop
 8008534:	f3af 8000 	nop.w
 8008538:	636f4361 	.word	0x636f4361
 800853c:	3fd287a7 	.word	0x3fd287a7
 8008540:	8b60c8b3 	.word	0x8b60c8b3
 8008544:	3fc68a28 	.word	0x3fc68a28
 8008548:	509f79fb 	.word	0x509f79fb
 800854c:	3fd34413 	.word	0x3fd34413
 8008550:	0800aa81 	.word	0x0800aa81
 8008554:	0800aa98 	.word	0x0800aa98
 8008558:	7ff00000 	.word	0x7ff00000
 800855c:	0800aa51 	.word	0x0800aa51
 8008560:	3ff80000 	.word	0x3ff80000
 8008564:	0800ab90 	.word	0x0800ab90
 8008568:	0800aaf0 	.word	0x0800aaf0
 800856c:	0800aa7d 	.word	0x0800aa7d
 8008570:	0800aa50 	.word	0x0800aa50
 8008574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008578:	6018      	str	r0, [r3, #0]
 800857a:	9b07      	ldr	r3, [sp, #28]
 800857c:	2b0e      	cmp	r3, #14
 800857e:	f200 80a4 	bhi.w	80086ca <_dtoa_r+0x442>
 8008582:	2c00      	cmp	r4, #0
 8008584:	f000 80a1 	beq.w	80086ca <_dtoa_r+0x442>
 8008588:	2f00      	cmp	r7, #0
 800858a:	dd33      	ble.n	80085f4 <_dtoa_r+0x36c>
 800858c:	4bad      	ldr	r3, [pc, #692]	@ (8008844 <_dtoa_r+0x5bc>)
 800858e:	f007 020f 	and.w	r2, r7, #15
 8008592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008596:	ed93 7b00 	vldr	d7, [r3]
 800859a:	05f8      	lsls	r0, r7, #23
 800859c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80085a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80085a4:	d516      	bpl.n	80085d4 <_dtoa_r+0x34c>
 80085a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008848 <_dtoa_r+0x5c0>)
 80085a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085b0:	f7f8 f954 	bl	800085c <__aeabi_ddiv>
 80085b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b8:	f004 040f 	and.w	r4, r4, #15
 80085bc:	2603      	movs	r6, #3
 80085be:	4da2      	ldr	r5, [pc, #648]	@ (8008848 <_dtoa_r+0x5c0>)
 80085c0:	b954      	cbnz	r4, 80085d8 <_dtoa_r+0x350>
 80085c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ca:	f7f8 f947 	bl	800085c <__aeabi_ddiv>
 80085ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d2:	e028      	b.n	8008626 <_dtoa_r+0x39e>
 80085d4:	2602      	movs	r6, #2
 80085d6:	e7f2      	b.n	80085be <_dtoa_r+0x336>
 80085d8:	07e1      	lsls	r1, r4, #31
 80085da:	d508      	bpl.n	80085ee <_dtoa_r+0x366>
 80085dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085e4:	f7f8 f810 	bl	8000608 <__aeabi_dmul>
 80085e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085ec:	3601      	adds	r6, #1
 80085ee:	1064      	asrs	r4, r4, #1
 80085f0:	3508      	adds	r5, #8
 80085f2:	e7e5      	b.n	80085c0 <_dtoa_r+0x338>
 80085f4:	f000 80d2 	beq.w	800879c <_dtoa_r+0x514>
 80085f8:	427c      	negs	r4, r7
 80085fa:	4b92      	ldr	r3, [pc, #584]	@ (8008844 <_dtoa_r+0x5bc>)
 80085fc:	4d92      	ldr	r5, [pc, #584]	@ (8008848 <_dtoa_r+0x5c0>)
 80085fe:	f004 020f 	and.w	r2, r4, #15
 8008602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800860e:	f7f7 fffb 	bl	8000608 <__aeabi_dmul>
 8008612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008616:	1124      	asrs	r4, r4, #4
 8008618:	2300      	movs	r3, #0
 800861a:	2602      	movs	r6, #2
 800861c:	2c00      	cmp	r4, #0
 800861e:	f040 80b2 	bne.w	8008786 <_dtoa_r+0x4fe>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1d3      	bne.n	80085ce <_dtoa_r+0x346>
 8008626:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008628:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80b7 	beq.w	80087a0 <_dtoa_r+0x518>
 8008632:	4b86      	ldr	r3, [pc, #536]	@ (800884c <_dtoa_r+0x5c4>)
 8008634:	2200      	movs	r2, #0
 8008636:	4620      	mov	r0, r4
 8008638:	4629      	mov	r1, r5
 800863a:	f7f8 fa57 	bl	8000aec <__aeabi_dcmplt>
 800863e:	2800      	cmp	r0, #0
 8008640:	f000 80ae 	beq.w	80087a0 <_dtoa_r+0x518>
 8008644:	9b07      	ldr	r3, [sp, #28]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 80aa 	beq.w	80087a0 <_dtoa_r+0x518>
 800864c:	9b00      	ldr	r3, [sp, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd37      	ble.n	80086c2 <_dtoa_r+0x43a>
 8008652:	1e7b      	subs	r3, r7, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	4620      	mov	r0, r4
 8008658:	4b7d      	ldr	r3, [pc, #500]	@ (8008850 <_dtoa_r+0x5c8>)
 800865a:	2200      	movs	r2, #0
 800865c:	4629      	mov	r1, r5
 800865e:	f7f7 ffd3 	bl	8000608 <__aeabi_dmul>
 8008662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008666:	9c00      	ldr	r4, [sp, #0]
 8008668:	3601      	adds	r6, #1
 800866a:	4630      	mov	r0, r6
 800866c:	f7f7 ff62 	bl	8000534 <__aeabi_i2d>
 8008670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008674:	f7f7 ffc8 	bl	8000608 <__aeabi_dmul>
 8008678:	4b76      	ldr	r3, [pc, #472]	@ (8008854 <_dtoa_r+0x5cc>)
 800867a:	2200      	movs	r2, #0
 800867c:	f7f7 fe0e 	bl	800029c <__adddf3>
 8008680:	4605      	mov	r5, r0
 8008682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008686:	2c00      	cmp	r4, #0
 8008688:	f040 808d 	bne.w	80087a6 <_dtoa_r+0x51e>
 800868c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008690:	4b71      	ldr	r3, [pc, #452]	@ (8008858 <_dtoa_r+0x5d0>)
 8008692:	2200      	movs	r2, #0
 8008694:	f7f7 fe00 	bl	8000298 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086a0:	462a      	mov	r2, r5
 80086a2:	4633      	mov	r3, r6
 80086a4:	f7f8 fa40 	bl	8000b28 <__aeabi_dcmpgt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f040 828b 	bne.w	8008bc4 <_dtoa_r+0x93c>
 80086ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b2:	462a      	mov	r2, r5
 80086b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80086b8:	f7f8 fa18 	bl	8000aec <__aeabi_dcmplt>
 80086bc:	2800      	cmp	r0, #0
 80086be:	f040 8128 	bne.w	8008912 <_dtoa_r+0x68a>
 80086c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80086c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80086ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f2c0 815a 	blt.w	8008986 <_dtoa_r+0x6fe>
 80086d2:	2f0e      	cmp	r7, #14
 80086d4:	f300 8157 	bgt.w	8008986 <_dtoa_r+0x6fe>
 80086d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008844 <_dtoa_r+0x5bc>)
 80086da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086de:	ed93 7b00 	vldr	d7, [r3]
 80086e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	ed8d 7b00 	vstr	d7, [sp]
 80086ea:	da03      	bge.n	80086f4 <_dtoa_r+0x46c>
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f340 8101 	ble.w	80088f6 <_dtoa_r+0x66e>
 80086f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086f8:	4656      	mov	r6, sl
 80086fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086fe:	4620      	mov	r0, r4
 8008700:	4629      	mov	r1, r5
 8008702:	f7f8 f8ab 	bl	800085c <__aeabi_ddiv>
 8008706:	f7f8 fa2f 	bl	8000b68 <__aeabi_d2iz>
 800870a:	4680      	mov	r8, r0
 800870c:	f7f7 ff12 	bl	8000534 <__aeabi_i2d>
 8008710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008714:	f7f7 ff78 	bl	8000608 <__aeabi_dmul>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008724:	f7f7 fdb8 	bl	8000298 <__aeabi_dsub>
 8008728:	f806 4b01 	strb.w	r4, [r6], #1
 800872c:	9d07      	ldr	r5, [sp, #28]
 800872e:	eba6 040a 	sub.w	r4, r6, sl
 8008732:	42a5      	cmp	r5, r4
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	f040 8117 	bne.w	800896a <_dtoa_r+0x6e2>
 800873c:	f7f7 fdae 	bl	800029c <__adddf3>
 8008740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008744:	4604      	mov	r4, r0
 8008746:	460d      	mov	r5, r1
 8008748:	f7f8 f9ee 	bl	8000b28 <__aeabi_dcmpgt>
 800874c:	2800      	cmp	r0, #0
 800874e:	f040 80f9 	bne.w	8008944 <_dtoa_r+0x6bc>
 8008752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f8 f9bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800875e:	b118      	cbz	r0, 8008768 <_dtoa_r+0x4e0>
 8008760:	f018 0f01 	tst.w	r8, #1
 8008764:	f040 80ee 	bne.w	8008944 <_dtoa_r+0x6bc>
 8008768:	4649      	mov	r1, r9
 800876a:	4658      	mov	r0, fp
 800876c:	f000 fc90 	bl	8009090 <_Bfree>
 8008770:	2300      	movs	r3, #0
 8008772:	7033      	strb	r3, [r6, #0]
 8008774:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008776:	3701      	adds	r7, #1
 8008778:	601f      	str	r7, [r3, #0]
 800877a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 831d 	beq.w	8008dbc <_dtoa_r+0xb34>
 8008782:	601e      	str	r6, [r3, #0]
 8008784:	e31a      	b.n	8008dbc <_dtoa_r+0xb34>
 8008786:	07e2      	lsls	r2, r4, #31
 8008788:	d505      	bpl.n	8008796 <_dtoa_r+0x50e>
 800878a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800878e:	f7f7 ff3b 	bl	8000608 <__aeabi_dmul>
 8008792:	3601      	adds	r6, #1
 8008794:	2301      	movs	r3, #1
 8008796:	1064      	asrs	r4, r4, #1
 8008798:	3508      	adds	r5, #8
 800879a:	e73f      	b.n	800861c <_dtoa_r+0x394>
 800879c:	2602      	movs	r6, #2
 800879e:	e742      	b.n	8008626 <_dtoa_r+0x39e>
 80087a0:	9c07      	ldr	r4, [sp, #28]
 80087a2:	9704      	str	r7, [sp, #16]
 80087a4:	e761      	b.n	800866a <_dtoa_r+0x3e2>
 80087a6:	4b27      	ldr	r3, [pc, #156]	@ (8008844 <_dtoa_r+0x5bc>)
 80087a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087b2:	4454      	add	r4, sl
 80087b4:	2900      	cmp	r1, #0
 80087b6:	d053      	beq.n	8008860 <_dtoa_r+0x5d8>
 80087b8:	4928      	ldr	r1, [pc, #160]	@ (800885c <_dtoa_r+0x5d4>)
 80087ba:	2000      	movs	r0, #0
 80087bc:	f7f8 f84e 	bl	800085c <__aeabi_ddiv>
 80087c0:	4633      	mov	r3, r6
 80087c2:	462a      	mov	r2, r5
 80087c4:	f7f7 fd68 	bl	8000298 <__aeabi_dsub>
 80087c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087cc:	4656      	mov	r6, sl
 80087ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d2:	f7f8 f9c9 	bl	8000b68 <__aeabi_d2iz>
 80087d6:	4605      	mov	r5, r0
 80087d8:	f7f7 feac 	bl	8000534 <__aeabi_i2d>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e4:	f7f7 fd58 	bl	8000298 <__aeabi_dsub>
 80087e8:	3530      	adds	r5, #48	@ 0x30
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087f2:	f806 5b01 	strb.w	r5, [r6], #1
 80087f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087fa:	f7f8 f977 	bl	8000aec <__aeabi_dcmplt>
 80087fe:	2800      	cmp	r0, #0
 8008800:	d171      	bne.n	80088e6 <_dtoa_r+0x65e>
 8008802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008806:	4911      	ldr	r1, [pc, #68]	@ (800884c <_dtoa_r+0x5c4>)
 8008808:	2000      	movs	r0, #0
 800880a:	f7f7 fd45 	bl	8000298 <__aeabi_dsub>
 800880e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008812:	f7f8 f96b 	bl	8000aec <__aeabi_dcmplt>
 8008816:	2800      	cmp	r0, #0
 8008818:	f040 8095 	bne.w	8008946 <_dtoa_r+0x6be>
 800881c:	42a6      	cmp	r6, r4
 800881e:	f43f af50 	beq.w	80086c2 <_dtoa_r+0x43a>
 8008822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008826:	4b0a      	ldr	r3, [pc, #40]	@ (8008850 <_dtoa_r+0x5c8>)
 8008828:	2200      	movs	r2, #0
 800882a:	f7f7 feed 	bl	8000608 <__aeabi_dmul>
 800882e:	4b08      	ldr	r3, [pc, #32]	@ (8008850 <_dtoa_r+0x5c8>)
 8008830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008834:	2200      	movs	r2, #0
 8008836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800883a:	f7f7 fee5 	bl	8000608 <__aeabi_dmul>
 800883e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008842:	e7c4      	b.n	80087ce <_dtoa_r+0x546>
 8008844:	0800ab90 	.word	0x0800ab90
 8008848:	0800ab68 	.word	0x0800ab68
 800884c:	3ff00000 	.word	0x3ff00000
 8008850:	40240000 	.word	0x40240000
 8008854:	401c0000 	.word	0x401c0000
 8008858:	40140000 	.word	0x40140000
 800885c:	3fe00000 	.word	0x3fe00000
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	f7f7 fed0 	bl	8000608 <__aeabi_dmul>
 8008868:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800886c:	9415      	str	r4, [sp, #84]	@ 0x54
 800886e:	4656      	mov	r6, sl
 8008870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008874:	f7f8 f978 	bl	8000b68 <__aeabi_d2iz>
 8008878:	4605      	mov	r5, r0
 800887a:	f7f7 fe5b 	bl	8000534 <__aeabi_i2d>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008886:	f7f7 fd07 	bl	8000298 <__aeabi_dsub>
 800888a:	3530      	adds	r5, #48	@ 0x30
 800888c:	f806 5b01 	strb.w	r5, [r6], #1
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	42a6      	cmp	r6, r4
 8008896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800889a:	f04f 0200 	mov.w	r2, #0
 800889e:	d124      	bne.n	80088ea <_dtoa_r+0x662>
 80088a0:	4bac      	ldr	r3, [pc, #688]	@ (8008b54 <_dtoa_r+0x8cc>)
 80088a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088a6:	f7f7 fcf9 	bl	800029c <__adddf3>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b2:	f7f8 f939 	bl	8000b28 <__aeabi_dcmpgt>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	d145      	bne.n	8008946 <_dtoa_r+0x6be>
 80088ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088be:	49a5      	ldr	r1, [pc, #660]	@ (8008b54 <_dtoa_r+0x8cc>)
 80088c0:	2000      	movs	r0, #0
 80088c2:	f7f7 fce9 	bl	8000298 <__aeabi_dsub>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ce:	f7f8 f90d 	bl	8000aec <__aeabi_dcmplt>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f43f aef5 	beq.w	80086c2 <_dtoa_r+0x43a>
 80088d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80088da:	1e73      	subs	r3, r6, #1
 80088dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80088de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088e2:	2b30      	cmp	r3, #48	@ 0x30
 80088e4:	d0f8      	beq.n	80088d8 <_dtoa_r+0x650>
 80088e6:	9f04      	ldr	r7, [sp, #16]
 80088e8:	e73e      	b.n	8008768 <_dtoa_r+0x4e0>
 80088ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008b58 <_dtoa_r+0x8d0>)
 80088ec:	f7f7 fe8c 	bl	8000608 <__aeabi_dmul>
 80088f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088f4:	e7bc      	b.n	8008870 <_dtoa_r+0x5e8>
 80088f6:	d10c      	bne.n	8008912 <_dtoa_r+0x68a>
 80088f8:	4b98      	ldr	r3, [pc, #608]	@ (8008b5c <_dtoa_r+0x8d4>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008900:	f7f7 fe82 	bl	8000608 <__aeabi_dmul>
 8008904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008908:	f7f8 f904 	bl	8000b14 <__aeabi_dcmpge>
 800890c:	2800      	cmp	r0, #0
 800890e:	f000 8157 	beq.w	8008bc0 <_dtoa_r+0x938>
 8008912:	2400      	movs	r4, #0
 8008914:	4625      	mov	r5, r4
 8008916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008918:	43db      	mvns	r3, r3
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	4656      	mov	r6, sl
 800891e:	2700      	movs	r7, #0
 8008920:	4621      	mov	r1, r4
 8008922:	4658      	mov	r0, fp
 8008924:	f000 fbb4 	bl	8009090 <_Bfree>
 8008928:	2d00      	cmp	r5, #0
 800892a:	d0dc      	beq.n	80088e6 <_dtoa_r+0x65e>
 800892c:	b12f      	cbz	r7, 800893a <_dtoa_r+0x6b2>
 800892e:	42af      	cmp	r7, r5
 8008930:	d003      	beq.n	800893a <_dtoa_r+0x6b2>
 8008932:	4639      	mov	r1, r7
 8008934:	4658      	mov	r0, fp
 8008936:	f000 fbab 	bl	8009090 <_Bfree>
 800893a:	4629      	mov	r1, r5
 800893c:	4658      	mov	r0, fp
 800893e:	f000 fba7 	bl	8009090 <_Bfree>
 8008942:	e7d0      	b.n	80088e6 <_dtoa_r+0x65e>
 8008944:	9704      	str	r7, [sp, #16]
 8008946:	4633      	mov	r3, r6
 8008948:	461e      	mov	r6, r3
 800894a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800894e:	2a39      	cmp	r2, #57	@ 0x39
 8008950:	d107      	bne.n	8008962 <_dtoa_r+0x6da>
 8008952:	459a      	cmp	sl, r3
 8008954:	d1f8      	bne.n	8008948 <_dtoa_r+0x6c0>
 8008956:	9a04      	ldr	r2, [sp, #16]
 8008958:	3201      	adds	r2, #1
 800895a:	9204      	str	r2, [sp, #16]
 800895c:	2230      	movs	r2, #48	@ 0x30
 800895e:	f88a 2000 	strb.w	r2, [sl]
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	3201      	adds	r2, #1
 8008966:	701a      	strb	r2, [r3, #0]
 8008968:	e7bd      	b.n	80088e6 <_dtoa_r+0x65e>
 800896a:	4b7b      	ldr	r3, [pc, #492]	@ (8008b58 <_dtoa_r+0x8d0>)
 800896c:	2200      	movs	r2, #0
 800896e:	f7f7 fe4b 	bl	8000608 <__aeabi_dmul>
 8008972:	2200      	movs	r2, #0
 8008974:	2300      	movs	r3, #0
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	f7f8 f8ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f aebb 	beq.w	80086fa <_dtoa_r+0x472>
 8008984:	e6f0      	b.n	8008768 <_dtoa_r+0x4e0>
 8008986:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008988:	2a00      	cmp	r2, #0
 800898a:	f000 80db 	beq.w	8008b44 <_dtoa_r+0x8bc>
 800898e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008990:	2a01      	cmp	r2, #1
 8008992:	f300 80bf 	bgt.w	8008b14 <_dtoa_r+0x88c>
 8008996:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008998:	2a00      	cmp	r2, #0
 800899a:	f000 80b7 	beq.w	8008b0c <_dtoa_r+0x884>
 800899e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80089a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80089a4:	4646      	mov	r6, r8
 80089a6:	9a08      	ldr	r2, [sp, #32]
 80089a8:	2101      	movs	r1, #1
 80089aa:	441a      	add	r2, r3
 80089ac:	4658      	mov	r0, fp
 80089ae:	4498      	add	r8, r3
 80089b0:	9208      	str	r2, [sp, #32]
 80089b2:	f000 fc21 	bl	80091f8 <__i2b>
 80089b6:	4605      	mov	r5, r0
 80089b8:	b15e      	cbz	r6, 80089d2 <_dtoa_r+0x74a>
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dd08      	ble.n	80089d2 <_dtoa_r+0x74a>
 80089c0:	42b3      	cmp	r3, r6
 80089c2:	9a08      	ldr	r2, [sp, #32]
 80089c4:	bfa8      	it	ge
 80089c6:	4633      	movge	r3, r6
 80089c8:	eba8 0803 	sub.w	r8, r8, r3
 80089cc:	1af6      	subs	r6, r6, r3
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	9308      	str	r3, [sp, #32]
 80089d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089d4:	b1f3      	cbz	r3, 8008a14 <_dtoa_r+0x78c>
 80089d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 80b7 	beq.w	8008b4c <_dtoa_r+0x8c4>
 80089de:	b18c      	cbz	r4, 8008a04 <_dtoa_r+0x77c>
 80089e0:	4629      	mov	r1, r5
 80089e2:	4622      	mov	r2, r4
 80089e4:	4658      	mov	r0, fp
 80089e6:	f000 fcc7 	bl	8009378 <__pow5mult>
 80089ea:	464a      	mov	r2, r9
 80089ec:	4601      	mov	r1, r0
 80089ee:	4605      	mov	r5, r0
 80089f0:	4658      	mov	r0, fp
 80089f2:	f000 fc17 	bl	8009224 <__multiply>
 80089f6:	4649      	mov	r1, r9
 80089f8:	9004      	str	r0, [sp, #16]
 80089fa:	4658      	mov	r0, fp
 80089fc:	f000 fb48 	bl	8009090 <_Bfree>
 8008a00:	9b04      	ldr	r3, [sp, #16]
 8008a02:	4699      	mov	r9, r3
 8008a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a06:	1b1a      	subs	r2, r3, r4
 8008a08:	d004      	beq.n	8008a14 <_dtoa_r+0x78c>
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f000 fcb3 	bl	8009378 <__pow5mult>
 8008a12:	4681      	mov	r9, r0
 8008a14:	2101      	movs	r1, #1
 8008a16:	4658      	mov	r0, fp
 8008a18:	f000 fbee 	bl	80091f8 <__i2b>
 8008a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a1e:	4604      	mov	r4, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 81cf 	beq.w	8008dc4 <_dtoa_r+0xb3c>
 8008a26:	461a      	mov	r2, r3
 8008a28:	4601      	mov	r1, r0
 8008a2a:	4658      	mov	r0, fp
 8008a2c:	f000 fca4 	bl	8009378 <__pow5mult>
 8008a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	4604      	mov	r4, r0
 8008a36:	f300 8095 	bgt.w	8008b64 <_dtoa_r+0x8dc>
 8008a3a:	9b02      	ldr	r3, [sp, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f040 8087 	bne.w	8008b50 <_dtoa_r+0x8c8>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f040 8089 	bne.w	8008b60 <_dtoa_r+0x8d8>
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a54:	0d1b      	lsrs	r3, r3, #20
 8008a56:	051b      	lsls	r3, r3, #20
 8008a58:	b12b      	cbz	r3, 8008a66 <_dtoa_r+0x7de>
 8008a5a:	9b08      	ldr	r3, [sp, #32]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	9308      	str	r3, [sp, #32]
 8008a60:	f108 0801 	add.w	r8, r8, #1
 8008a64:	2301      	movs	r3, #1
 8008a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 81b0 	beq.w	8008dd0 <_dtoa_r+0xb48>
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a76:	6918      	ldr	r0, [r3, #16]
 8008a78:	f000 fb72 	bl	8009160 <__hi0bits>
 8008a7c:	f1c0 0020 	rsb	r0, r0, #32
 8008a80:	9b08      	ldr	r3, [sp, #32]
 8008a82:	4418      	add	r0, r3
 8008a84:	f010 001f 	ands.w	r0, r0, #31
 8008a88:	d077      	beq.n	8008b7a <_dtoa_r+0x8f2>
 8008a8a:	f1c0 0320 	rsb	r3, r0, #32
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	dd6b      	ble.n	8008b6a <_dtoa_r+0x8e2>
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	f1c0 001c 	rsb	r0, r0, #28
 8008a98:	4403      	add	r3, r0
 8008a9a:	4480      	add	r8, r0
 8008a9c:	4406      	add	r6, r0
 8008a9e:	9308      	str	r3, [sp, #32]
 8008aa0:	f1b8 0f00 	cmp.w	r8, #0
 8008aa4:	dd05      	ble.n	8008ab2 <_dtoa_r+0x82a>
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4642      	mov	r2, r8
 8008aaa:	4658      	mov	r0, fp
 8008aac:	f000 fcbe 	bl	800942c <__lshift>
 8008ab0:	4681      	mov	r9, r0
 8008ab2:	9b08      	ldr	r3, [sp, #32]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dd05      	ble.n	8008ac4 <_dtoa_r+0x83c>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	461a      	mov	r2, r3
 8008abc:	4658      	mov	r0, fp
 8008abe:	f000 fcb5 	bl	800942c <__lshift>
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d059      	beq.n	8008b7e <_dtoa_r+0x8f6>
 8008aca:	4621      	mov	r1, r4
 8008acc:	4648      	mov	r0, r9
 8008ace:	f000 fd19 	bl	8009504 <__mcmp>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	da53      	bge.n	8008b7e <_dtoa_r+0x8f6>
 8008ad6:	1e7b      	subs	r3, r7, #1
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	4649      	mov	r1, r9
 8008adc:	2300      	movs	r3, #0
 8008ade:	220a      	movs	r2, #10
 8008ae0:	4658      	mov	r0, fp
 8008ae2:	f000 faf7 	bl	80090d4 <__multadd>
 8008ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ae8:	4681      	mov	r9, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 8172 	beq.w	8008dd4 <_dtoa_r+0xb4c>
 8008af0:	2300      	movs	r3, #0
 8008af2:	4629      	mov	r1, r5
 8008af4:	220a      	movs	r2, #10
 8008af6:	4658      	mov	r0, fp
 8008af8:	f000 faec 	bl	80090d4 <__multadd>
 8008afc:	9b00      	ldr	r3, [sp, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	4605      	mov	r5, r0
 8008b02:	dc67      	bgt.n	8008bd4 <_dtoa_r+0x94c>
 8008b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	dc41      	bgt.n	8008b8e <_dtoa_r+0x906>
 8008b0a:	e063      	b.n	8008bd4 <_dtoa_r+0x94c>
 8008b0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008b12:	e746      	b.n	80089a2 <_dtoa_r+0x71a>
 8008b14:	9b07      	ldr	r3, [sp, #28]
 8008b16:	1e5c      	subs	r4, r3, #1
 8008b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b1a:	42a3      	cmp	r3, r4
 8008b1c:	bfbf      	itttt	lt
 8008b1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008b20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008b22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008b24:	1ae3      	sublt	r3, r4, r3
 8008b26:	bfb4      	ite	lt
 8008b28:	18d2      	addlt	r2, r2, r3
 8008b2a:	1b1c      	subge	r4, r3, r4
 8008b2c:	9b07      	ldr	r3, [sp, #28]
 8008b2e:	bfbc      	itt	lt
 8008b30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008b32:	2400      	movlt	r4, #0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bfb5      	itete	lt
 8008b38:	eba8 0603 	sublt.w	r6, r8, r3
 8008b3c:	9b07      	ldrge	r3, [sp, #28]
 8008b3e:	2300      	movlt	r3, #0
 8008b40:	4646      	movge	r6, r8
 8008b42:	e730      	b.n	80089a6 <_dtoa_r+0x71e>
 8008b44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008b48:	4646      	mov	r6, r8
 8008b4a:	e735      	b.n	80089b8 <_dtoa_r+0x730>
 8008b4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b4e:	e75c      	b.n	8008a0a <_dtoa_r+0x782>
 8008b50:	2300      	movs	r3, #0
 8008b52:	e788      	b.n	8008a66 <_dtoa_r+0x7de>
 8008b54:	3fe00000 	.word	0x3fe00000
 8008b58:	40240000 	.word	0x40240000
 8008b5c:	40140000 	.word	0x40140000
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	e780      	b.n	8008a66 <_dtoa_r+0x7de>
 8008b64:	2300      	movs	r3, #0
 8008b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b68:	e782      	b.n	8008a70 <_dtoa_r+0x7e8>
 8008b6a:	d099      	beq.n	8008aa0 <_dtoa_r+0x818>
 8008b6c:	9a08      	ldr	r2, [sp, #32]
 8008b6e:	331c      	adds	r3, #28
 8008b70:	441a      	add	r2, r3
 8008b72:	4498      	add	r8, r3
 8008b74:	441e      	add	r6, r3
 8008b76:	9208      	str	r2, [sp, #32]
 8008b78:	e792      	b.n	8008aa0 <_dtoa_r+0x818>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	e7f6      	b.n	8008b6c <_dtoa_r+0x8e4>
 8008b7e:	9b07      	ldr	r3, [sp, #28]
 8008b80:	9704      	str	r7, [sp, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dc20      	bgt.n	8008bc8 <_dtoa_r+0x940>
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	dd1e      	ble.n	8008bcc <_dtoa_r+0x944>
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f47f aec0 	bne.w	8008916 <_dtoa_r+0x68e>
 8008b96:	4621      	mov	r1, r4
 8008b98:	2205      	movs	r2, #5
 8008b9a:	4658      	mov	r0, fp
 8008b9c:	f000 fa9a 	bl	80090d4 <__multadd>
 8008ba0:	4601      	mov	r1, r0
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	f000 fcad 	bl	8009504 <__mcmp>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	f77f aeb3 	ble.w	8008916 <_dtoa_r+0x68e>
 8008bb0:	4656      	mov	r6, sl
 8008bb2:	2331      	movs	r3, #49	@ 0x31
 8008bb4:	f806 3b01 	strb.w	r3, [r6], #1
 8008bb8:	9b04      	ldr	r3, [sp, #16]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	e6ae      	b.n	800891e <_dtoa_r+0x696>
 8008bc0:	9c07      	ldr	r4, [sp, #28]
 8008bc2:	9704      	str	r7, [sp, #16]
 8008bc4:	4625      	mov	r5, r4
 8008bc6:	e7f3      	b.n	8008bb0 <_dtoa_r+0x928>
 8008bc8:	9b07      	ldr	r3, [sp, #28]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8104 	beq.w	8008ddc <_dtoa_r+0xb54>
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	dd05      	ble.n	8008be4 <_dtoa_r+0x95c>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4632      	mov	r2, r6
 8008bdc:	4658      	mov	r0, fp
 8008bde:	f000 fc25 	bl	800942c <__lshift>
 8008be2:	4605      	mov	r5, r0
 8008be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d05a      	beq.n	8008ca0 <_dtoa_r+0xa18>
 8008bea:	6869      	ldr	r1, [r5, #4]
 8008bec:	4658      	mov	r0, fp
 8008bee:	f000 fa0f 	bl	8009010 <_Balloc>
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	b928      	cbnz	r0, 8008c02 <_dtoa_r+0x97a>
 8008bf6:	4b84      	ldr	r3, [pc, #528]	@ (8008e08 <_dtoa_r+0xb80>)
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008bfe:	f7ff bb5a 	b.w	80082b6 <_dtoa_r+0x2e>
 8008c02:	692a      	ldr	r2, [r5, #16]
 8008c04:	3202      	adds	r2, #2
 8008c06:	0092      	lsls	r2, r2, #2
 8008c08:	f105 010c 	add.w	r1, r5, #12
 8008c0c:	300c      	adds	r0, #12
 8008c0e:	f000 ffaf 	bl	8009b70 <memcpy>
 8008c12:	2201      	movs	r2, #1
 8008c14:	4631      	mov	r1, r6
 8008c16:	4658      	mov	r0, fp
 8008c18:	f000 fc08 	bl	800942c <__lshift>
 8008c1c:	f10a 0301 	add.w	r3, sl, #1
 8008c20:	9307      	str	r3, [sp, #28]
 8008c22:	9b00      	ldr	r3, [sp, #0]
 8008c24:	4453      	add	r3, sl
 8008c26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c28:	9b02      	ldr	r3, [sp, #8]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	462f      	mov	r7, r5
 8008c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c32:	4605      	mov	r5, r0
 8008c34:	9b07      	ldr	r3, [sp, #28]
 8008c36:	4621      	mov	r1, r4
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	4648      	mov	r0, r9
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	f7ff fa9a 	bl	8008176 <quorem>
 8008c42:	4639      	mov	r1, r7
 8008c44:	9002      	str	r0, [sp, #8]
 8008c46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c4a:	4648      	mov	r0, r9
 8008c4c:	f000 fc5a 	bl	8009504 <__mcmp>
 8008c50:	462a      	mov	r2, r5
 8008c52:	9008      	str	r0, [sp, #32]
 8008c54:	4621      	mov	r1, r4
 8008c56:	4658      	mov	r0, fp
 8008c58:	f000 fc70 	bl	800953c <__mdiff>
 8008c5c:	68c2      	ldr	r2, [r0, #12]
 8008c5e:	4606      	mov	r6, r0
 8008c60:	bb02      	cbnz	r2, 8008ca4 <_dtoa_r+0xa1c>
 8008c62:	4601      	mov	r1, r0
 8008c64:	4648      	mov	r0, r9
 8008c66:	f000 fc4d 	bl	8009504 <__mcmp>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4658      	mov	r0, fp
 8008c70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c72:	f000 fa0d 	bl	8009090 <_Bfree>
 8008c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c7a:	9e07      	ldr	r6, [sp, #28]
 8008c7c:	ea43 0102 	orr.w	r1, r3, r2
 8008c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c82:	4319      	orrs	r1, r3
 8008c84:	d110      	bne.n	8008ca8 <_dtoa_r+0xa20>
 8008c86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c8a:	d029      	beq.n	8008ce0 <_dtoa_r+0xa58>
 8008c8c:	9b08      	ldr	r3, [sp, #32]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dd02      	ble.n	8008c98 <_dtoa_r+0xa10>
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c98:	9b00      	ldr	r3, [sp, #0]
 8008c9a:	f883 8000 	strb.w	r8, [r3]
 8008c9e:	e63f      	b.n	8008920 <_dtoa_r+0x698>
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	e7bb      	b.n	8008c1c <_dtoa_r+0x994>
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	e7e1      	b.n	8008c6c <_dtoa_r+0x9e4>
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	db04      	blt.n	8008cb8 <_dtoa_r+0xa30>
 8008cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	d120      	bne.n	8008cfa <_dtoa_r+0xa72>
 8008cb8:	2a00      	cmp	r2, #0
 8008cba:	dded      	ble.n	8008c98 <_dtoa_r+0xa10>
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	4658      	mov	r0, fp
 8008cc2:	f000 fbb3 	bl	800942c <__lshift>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4681      	mov	r9, r0
 8008cca:	f000 fc1b 	bl	8009504 <__mcmp>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	dc03      	bgt.n	8008cda <_dtoa_r+0xa52>
 8008cd2:	d1e1      	bne.n	8008c98 <_dtoa_r+0xa10>
 8008cd4:	f018 0f01 	tst.w	r8, #1
 8008cd8:	d0de      	beq.n	8008c98 <_dtoa_r+0xa10>
 8008cda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008cde:	d1d8      	bne.n	8008c92 <_dtoa_r+0xa0a>
 8008ce0:	9a00      	ldr	r2, [sp, #0]
 8008ce2:	2339      	movs	r3, #57	@ 0x39
 8008ce4:	7013      	strb	r3, [r2, #0]
 8008ce6:	4633      	mov	r3, r6
 8008ce8:	461e      	mov	r6, r3
 8008cea:	3b01      	subs	r3, #1
 8008cec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008cf0:	2a39      	cmp	r2, #57	@ 0x39
 8008cf2:	d052      	beq.n	8008d9a <_dtoa_r+0xb12>
 8008cf4:	3201      	adds	r2, #1
 8008cf6:	701a      	strb	r2, [r3, #0]
 8008cf8:	e612      	b.n	8008920 <_dtoa_r+0x698>
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	dd07      	ble.n	8008d0e <_dtoa_r+0xa86>
 8008cfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d02:	d0ed      	beq.n	8008ce0 <_dtoa_r+0xa58>
 8008d04:	9a00      	ldr	r2, [sp, #0]
 8008d06:	f108 0301 	add.w	r3, r8, #1
 8008d0a:	7013      	strb	r3, [r2, #0]
 8008d0c:	e608      	b.n	8008920 <_dtoa_r+0x698>
 8008d0e:	9b07      	ldr	r3, [sp, #28]
 8008d10:	9a07      	ldr	r2, [sp, #28]
 8008d12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d028      	beq.n	8008d6e <_dtoa_r+0xae6>
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	2300      	movs	r3, #0
 8008d20:	220a      	movs	r2, #10
 8008d22:	4658      	mov	r0, fp
 8008d24:	f000 f9d6 	bl	80090d4 <__multadd>
 8008d28:	42af      	cmp	r7, r5
 8008d2a:	4681      	mov	r9, r0
 8008d2c:	f04f 0300 	mov.w	r3, #0
 8008d30:	f04f 020a 	mov.w	r2, #10
 8008d34:	4639      	mov	r1, r7
 8008d36:	4658      	mov	r0, fp
 8008d38:	d107      	bne.n	8008d4a <_dtoa_r+0xac2>
 8008d3a:	f000 f9cb 	bl	80090d4 <__multadd>
 8008d3e:	4607      	mov	r7, r0
 8008d40:	4605      	mov	r5, r0
 8008d42:	9b07      	ldr	r3, [sp, #28]
 8008d44:	3301      	adds	r3, #1
 8008d46:	9307      	str	r3, [sp, #28]
 8008d48:	e774      	b.n	8008c34 <_dtoa_r+0x9ac>
 8008d4a:	f000 f9c3 	bl	80090d4 <__multadd>
 8008d4e:	4629      	mov	r1, r5
 8008d50:	4607      	mov	r7, r0
 8008d52:	2300      	movs	r3, #0
 8008d54:	220a      	movs	r2, #10
 8008d56:	4658      	mov	r0, fp
 8008d58:	f000 f9bc 	bl	80090d4 <__multadd>
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	e7f0      	b.n	8008d42 <_dtoa_r+0xaba>
 8008d60:	9b00      	ldr	r3, [sp, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	bfcc      	ite	gt
 8008d66:	461e      	movgt	r6, r3
 8008d68:	2601      	movle	r6, #1
 8008d6a:	4456      	add	r6, sl
 8008d6c:	2700      	movs	r7, #0
 8008d6e:	4649      	mov	r1, r9
 8008d70:	2201      	movs	r2, #1
 8008d72:	4658      	mov	r0, fp
 8008d74:	f000 fb5a 	bl	800942c <__lshift>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	f000 fbc2 	bl	8009504 <__mcmp>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	dcb0      	bgt.n	8008ce6 <_dtoa_r+0xa5e>
 8008d84:	d102      	bne.n	8008d8c <_dtoa_r+0xb04>
 8008d86:	f018 0f01 	tst.w	r8, #1
 8008d8a:	d1ac      	bne.n	8008ce6 <_dtoa_r+0xa5e>
 8008d8c:	4633      	mov	r3, r6
 8008d8e:	461e      	mov	r6, r3
 8008d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d94:	2a30      	cmp	r2, #48	@ 0x30
 8008d96:	d0fa      	beq.n	8008d8e <_dtoa_r+0xb06>
 8008d98:	e5c2      	b.n	8008920 <_dtoa_r+0x698>
 8008d9a:	459a      	cmp	sl, r3
 8008d9c:	d1a4      	bne.n	8008ce8 <_dtoa_r+0xa60>
 8008d9e:	9b04      	ldr	r3, [sp, #16]
 8008da0:	3301      	adds	r3, #1
 8008da2:	9304      	str	r3, [sp, #16]
 8008da4:	2331      	movs	r3, #49	@ 0x31
 8008da6:	f88a 3000 	strb.w	r3, [sl]
 8008daa:	e5b9      	b.n	8008920 <_dtoa_r+0x698>
 8008dac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008e0c <_dtoa_r+0xb84>
 8008db2:	b11b      	cbz	r3, 8008dbc <_dtoa_r+0xb34>
 8008db4:	f10a 0308 	add.w	r3, sl, #8
 8008db8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	b019      	add	sp, #100	@ 0x64
 8008dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	f77f ae37 	ble.w	8008a3a <_dtoa_r+0x7b2>
 8008dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	e655      	b.n	8008a80 <_dtoa_r+0x7f8>
 8008dd4:	9b00      	ldr	r3, [sp, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f77f aed6 	ble.w	8008b88 <_dtoa_r+0x900>
 8008ddc:	4656      	mov	r6, sl
 8008dde:	4621      	mov	r1, r4
 8008de0:	4648      	mov	r0, r9
 8008de2:	f7ff f9c8 	bl	8008176 <quorem>
 8008de6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008dea:	f806 8b01 	strb.w	r8, [r6], #1
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	eba6 020a 	sub.w	r2, r6, sl
 8008df4:	4293      	cmp	r3, r2
 8008df6:	ddb3      	ble.n	8008d60 <_dtoa_r+0xad8>
 8008df8:	4649      	mov	r1, r9
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	220a      	movs	r2, #10
 8008dfe:	4658      	mov	r0, fp
 8008e00:	f000 f968 	bl	80090d4 <__multadd>
 8008e04:	4681      	mov	r9, r0
 8008e06:	e7ea      	b.n	8008dde <_dtoa_r+0xb56>
 8008e08:	0800aaf0 	.word	0x0800aaf0
 8008e0c:	0800aa74 	.word	0x0800aa74

08008e10 <_free_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4605      	mov	r5, r0
 8008e14:	2900      	cmp	r1, #0
 8008e16:	d041      	beq.n	8008e9c <_free_r+0x8c>
 8008e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e1c:	1f0c      	subs	r4, r1, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bfb8      	it	lt
 8008e22:	18e4      	addlt	r4, r4, r3
 8008e24:	f000 f8e8 	bl	8008ff8 <__malloc_lock>
 8008e28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea0 <_free_r+0x90>)
 8008e2a:	6813      	ldr	r3, [r2, #0]
 8008e2c:	b933      	cbnz	r3, 8008e3c <_free_r+0x2c>
 8008e2e:	6063      	str	r3, [r4, #4]
 8008e30:	6014      	str	r4, [r2, #0]
 8008e32:	4628      	mov	r0, r5
 8008e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e38:	f000 b8e4 	b.w	8009004 <__malloc_unlock>
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	d908      	bls.n	8008e52 <_free_r+0x42>
 8008e40:	6820      	ldr	r0, [r4, #0]
 8008e42:	1821      	adds	r1, r4, r0
 8008e44:	428b      	cmp	r3, r1
 8008e46:	bf01      	itttt	eq
 8008e48:	6819      	ldreq	r1, [r3, #0]
 8008e4a:	685b      	ldreq	r3, [r3, #4]
 8008e4c:	1809      	addeq	r1, r1, r0
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	e7ed      	b.n	8008e2e <_free_r+0x1e>
 8008e52:	461a      	mov	r2, r3
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	b10b      	cbz	r3, 8008e5c <_free_r+0x4c>
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	d9fa      	bls.n	8008e52 <_free_r+0x42>
 8008e5c:	6811      	ldr	r1, [r2, #0]
 8008e5e:	1850      	adds	r0, r2, r1
 8008e60:	42a0      	cmp	r0, r4
 8008e62:	d10b      	bne.n	8008e7c <_free_r+0x6c>
 8008e64:	6820      	ldr	r0, [r4, #0]
 8008e66:	4401      	add	r1, r0
 8008e68:	1850      	adds	r0, r2, r1
 8008e6a:	4283      	cmp	r3, r0
 8008e6c:	6011      	str	r1, [r2, #0]
 8008e6e:	d1e0      	bne.n	8008e32 <_free_r+0x22>
 8008e70:	6818      	ldr	r0, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	6053      	str	r3, [r2, #4]
 8008e76:	4408      	add	r0, r1
 8008e78:	6010      	str	r0, [r2, #0]
 8008e7a:	e7da      	b.n	8008e32 <_free_r+0x22>
 8008e7c:	d902      	bls.n	8008e84 <_free_r+0x74>
 8008e7e:	230c      	movs	r3, #12
 8008e80:	602b      	str	r3, [r5, #0]
 8008e82:	e7d6      	b.n	8008e32 <_free_r+0x22>
 8008e84:	6820      	ldr	r0, [r4, #0]
 8008e86:	1821      	adds	r1, r4, r0
 8008e88:	428b      	cmp	r3, r1
 8008e8a:	bf04      	itt	eq
 8008e8c:	6819      	ldreq	r1, [r3, #0]
 8008e8e:	685b      	ldreq	r3, [r3, #4]
 8008e90:	6063      	str	r3, [r4, #4]
 8008e92:	bf04      	itt	eq
 8008e94:	1809      	addeq	r1, r1, r0
 8008e96:	6021      	streq	r1, [r4, #0]
 8008e98:	6054      	str	r4, [r2, #4]
 8008e9a:	e7ca      	b.n	8008e32 <_free_r+0x22>
 8008e9c:	bd38      	pop	{r3, r4, r5, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000a60 	.word	0x20000a60

08008ea4 <malloc>:
 8008ea4:	4b02      	ldr	r3, [pc, #8]	@ (8008eb0 <malloc+0xc>)
 8008ea6:	4601      	mov	r1, r0
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	f000 b825 	b.w	8008ef8 <_malloc_r>
 8008eae:	bf00      	nop
 8008eb0:	20000024 	.word	0x20000024

08008eb4 <sbrk_aligned>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8008ef4 <sbrk_aligned+0x40>)
 8008eb8:	460c      	mov	r4, r1
 8008eba:	6831      	ldr	r1, [r6, #0]
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	b911      	cbnz	r1, 8008ec6 <sbrk_aligned+0x12>
 8008ec0:	f000 fe46 	bl	8009b50 <_sbrk_r>
 8008ec4:	6030      	str	r0, [r6, #0]
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 fe41 	bl	8009b50 <_sbrk_r>
 8008ece:	1c43      	adds	r3, r0, #1
 8008ed0:	d103      	bne.n	8008eda <sbrk_aligned+0x26>
 8008ed2:	f04f 34ff 	mov.w	r4, #4294967295
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
 8008eda:	1cc4      	adds	r4, r0, #3
 8008edc:	f024 0403 	bic.w	r4, r4, #3
 8008ee0:	42a0      	cmp	r0, r4
 8008ee2:	d0f8      	beq.n	8008ed6 <sbrk_aligned+0x22>
 8008ee4:	1a21      	subs	r1, r4, r0
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 fe32 	bl	8009b50 <_sbrk_r>
 8008eec:	3001      	adds	r0, #1
 8008eee:	d1f2      	bne.n	8008ed6 <sbrk_aligned+0x22>
 8008ef0:	e7ef      	b.n	8008ed2 <sbrk_aligned+0x1e>
 8008ef2:	bf00      	nop
 8008ef4:	20000a5c 	.word	0x20000a5c

08008ef8 <_malloc_r>:
 8008ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008efc:	1ccd      	adds	r5, r1, #3
 8008efe:	f025 0503 	bic.w	r5, r5, #3
 8008f02:	3508      	adds	r5, #8
 8008f04:	2d0c      	cmp	r5, #12
 8008f06:	bf38      	it	cc
 8008f08:	250c      	movcc	r5, #12
 8008f0a:	2d00      	cmp	r5, #0
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	db01      	blt.n	8008f14 <_malloc_r+0x1c>
 8008f10:	42a9      	cmp	r1, r5
 8008f12:	d904      	bls.n	8008f1e <_malloc_r+0x26>
 8008f14:	230c      	movs	r3, #12
 8008f16:	6033      	str	r3, [r6, #0]
 8008f18:	2000      	movs	r0, #0
 8008f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ff4 <_malloc_r+0xfc>
 8008f22:	f000 f869 	bl	8008ff8 <__malloc_lock>
 8008f26:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2a:	461c      	mov	r4, r3
 8008f2c:	bb44      	cbnz	r4, 8008f80 <_malloc_r+0x88>
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4630      	mov	r0, r6
 8008f32:	f7ff ffbf 	bl	8008eb4 <sbrk_aligned>
 8008f36:	1c43      	adds	r3, r0, #1
 8008f38:	4604      	mov	r4, r0
 8008f3a:	d158      	bne.n	8008fee <_malloc_r+0xf6>
 8008f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f40:	4627      	mov	r7, r4
 8008f42:	2f00      	cmp	r7, #0
 8008f44:	d143      	bne.n	8008fce <_malloc_r+0xd6>
 8008f46:	2c00      	cmp	r4, #0
 8008f48:	d04b      	beq.n	8008fe2 <_malloc_r+0xea>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	4630      	mov	r0, r6
 8008f50:	eb04 0903 	add.w	r9, r4, r3
 8008f54:	f000 fdfc 	bl	8009b50 <_sbrk_r>
 8008f58:	4581      	cmp	r9, r0
 8008f5a:	d142      	bne.n	8008fe2 <_malloc_r+0xea>
 8008f5c:	6821      	ldr	r1, [r4, #0]
 8008f5e:	1a6d      	subs	r5, r5, r1
 8008f60:	4629      	mov	r1, r5
 8008f62:	4630      	mov	r0, r6
 8008f64:	f7ff ffa6 	bl	8008eb4 <sbrk_aligned>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d03a      	beq.n	8008fe2 <_malloc_r+0xea>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	442b      	add	r3, r5
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	f8d8 3000 	ldr.w	r3, [r8]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	bb62      	cbnz	r2, 8008fd4 <_malloc_r+0xdc>
 8008f7a:	f8c8 7000 	str.w	r7, [r8]
 8008f7e:	e00f      	b.n	8008fa0 <_malloc_r+0xa8>
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	1b52      	subs	r2, r2, r5
 8008f84:	d420      	bmi.n	8008fc8 <_malloc_r+0xd0>
 8008f86:	2a0b      	cmp	r2, #11
 8008f88:	d917      	bls.n	8008fba <_malloc_r+0xc2>
 8008f8a:	1961      	adds	r1, r4, r5
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	6025      	str	r5, [r4, #0]
 8008f90:	bf18      	it	ne
 8008f92:	6059      	strne	r1, [r3, #4]
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	bf08      	it	eq
 8008f98:	f8c8 1000 	streq.w	r1, [r8]
 8008f9c:	5162      	str	r2, [r4, r5]
 8008f9e:	604b      	str	r3, [r1, #4]
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 f82f 	bl	8009004 <__malloc_unlock>
 8008fa6:	f104 000b 	add.w	r0, r4, #11
 8008faa:	1d23      	adds	r3, r4, #4
 8008fac:	f020 0007 	bic.w	r0, r0, #7
 8008fb0:	1ac2      	subs	r2, r0, r3
 8008fb2:	bf1c      	itt	ne
 8008fb4:	1a1b      	subne	r3, r3, r0
 8008fb6:	50a3      	strne	r3, [r4, r2]
 8008fb8:	e7af      	b.n	8008f1a <_malloc_r+0x22>
 8008fba:	6862      	ldr	r2, [r4, #4]
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	bf0c      	ite	eq
 8008fc0:	f8c8 2000 	streq.w	r2, [r8]
 8008fc4:	605a      	strne	r2, [r3, #4]
 8008fc6:	e7eb      	b.n	8008fa0 <_malloc_r+0xa8>
 8008fc8:	4623      	mov	r3, r4
 8008fca:	6864      	ldr	r4, [r4, #4]
 8008fcc:	e7ae      	b.n	8008f2c <_malloc_r+0x34>
 8008fce:	463c      	mov	r4, r7
 8008fd0:	687f      	ldr	r7, [r7, #4]
 8008fd2:	e7b6      	b.n	8008f42 <_malloc_r+0x4a>
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	d1fb      	bne.n	8008fd4 <_malloc_r+0xdc>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	6053      	str	r3, [r2, #4]
 8008fe0:	e7de      	b.n	8008fa0 <_malloc_r+0xa8>
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	6033      	str	r3, [r6, #0]
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	f000 f80c 	bl	8009004 <__malloc_unlock>
 8008fec:	e794      	b.n	8008f18 <_malloc_r+0x20>
 8008fee:	6005      	str	r5, [r0, #0]
 8008ff0:	e7d6      	b.n	8008fa0 <_malloc_r+0xa8>
 8008ff2:	bf00      	nop
 8008ff4:	20000a60 	.word	0x20000a60

08008ff8 <__malloc_lock>:
 8008ff8:	4801      	ldr	r0, [pc, #4]	@ (8009000 <__malloc_lock+0x8>)
 8008ffa:	f7ff b8ba 	b.w	8008172 <__retarget_lock_acquire_recursive>
 8008ffe:	bf00      	nop
 8009000:	20000a58 	.word	0x20000a58

08009004 <__malloc_unlock>:
 8009004:	4801      	ldr	r0, [pc, #4]	@ (800900c <__malloc_unlock+0x8>)
 8009006:	f7ff b8b5 	b.w	8008174 <__retarget_lock_release_recursive>
 800900a:	bf00      	nop
 800900c:	20000a58 	.word	0x20000a58

08009010 <_Balloc>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	69c6      	ldr	r6, [r0, #28]
 8009014:	4604      	mov	r4, r0
 8009016:	460d      	mov	r5, r1
 8009018:	b976      	cbnz	r6, 8009038 <_Balloc+0x28>
 800901a:	2010      	movs	r0, #16
 800901c:	f7ff ff42 	bl	8008ea4 <malloc>
 8009020:	4602      	mov	r2, r0
 8009022:	61e0      	str	r0, [r4, #28]
 8009024:	b920      	cbnz	r0, 8009030 <_Balloc+0x20>
 8009026:	4b18      	ldr	r3, [pc, #96]	@ (8009088 <_Balloc+0x78>)
 8009028:	4818      	ldr	r0, [pc, #96]	@ (800908c <_Balloc+0x7c>)
 800902a:	216b      	movs	r1, #107	@ 0x6b
 800902c:	f000 fdae 	bl	8009b8c <__assert_func>
 8009030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009034:	6006      	str	r6, [r0, #0]
 8009036:	60c6      	str	r6, [r0, #12]
 8009038:	69e6      	ldr	r6, [r4, #28]
 800903a:	68f3      	ldr	r3, [r6, #12]
 800903c:	b183      	cbz	r3, 8009060 <_Balloc+0x50>
 800903e:	69e3      	ldr	r3, [r4, #28]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009046:	b9b8      	cbnz	r0, 8009078 <_Balloc+0x68>
 8009048:	2101      	movs	r1, #1
 800904a:	fa01 f605 	lsl.w	r6, r1, r5
 800904e:	1d72      	adds	r2, r6, #5
 8009050:	0092      	lsls	r2, r2, #2
 8009052:	4620      	mov	r0, r4
 8009054:	f000 fdb8 	bl	8009bc8 <_calloc_r>
 8009058:	b160      	cbz	r0, 8009074 <_Balloc+0x64>
 800905a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800905e:	e00e      	b.n	800907e <_Balloc+0x6e>
 8009060:	2221      	movs	r2, #33	@ 0x21
 8009062:	2104      	movs	r1, #4
 8009064:	4620      	mov	r0, r4
 8009066:	f000 fdaf 	bl	8009bc8 <_calloc_r>
 800906a:	69e3      	ldr	r3, [r4, #28]
 800906c:	60f0      	str	r0, [r6, #12]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e4      	bne.n	800903e <_Balloc+0x2e>
 8009074:	2000      	movs	r0, #0
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	6802      	ldr	r2, [r0, #0]
 800907a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800907e:	2300      	movs	r3, #0
 8009080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009084:	e7f7      	b.n	8009076 <_Balloc+0x66>
 8009086:	bf00      	nop
 8009088:	0800aa81 	.word	0x0800aa81
 800908c:	0800ab01 	.word	0x0800ab01

08009090 <_Bfree>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	69c6      	ldr	r6, [r0, #28]
 8009094:	4605      	mov	r5, r0
 8009096:	460c      	mov	r4, r1
 8009098:	b976      	cbnz	r6, 80090b8 <_Bfree+0x28>
 800909a:	2010      	movs	r0, #16
 800909c:	f7ff ff02 	bl	8008ea4 <malloc>
 80090a0:	4602      	mov	r2, r0
 80090a2:	61e8      	str	r0, [r5, #28]
 80090a4:	b920      	cbnz	r0, 80090b0 <_Bfree+0x20>
 80090a6:	4b09      	ldr	r3, [pc, #36]	@ (80090cc <_Bfree+0x3c>)
 80090a8:	4809      	ldr	r0, [pc, #36]	@ (80090d0 <_Bfree+0x40>)
 80090aa:	218f      	movs	r1, #143	@ 0x8f
 80090ac:	f000 fd6e 	bl	8009b8c <__assert_func>
 80090b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090b4:	6006      	str	r6, [r0, #0]
 80090b6:	60c6      	str	r6, [r0, #12]
 80090b8:	b13c      	cbz	r4, 80090ca <_Bfree+0x3a>
 80090ba:	69eb      	ldr	r3, [r5, #28]
 80090bc:	6862      	ldr	r2, [r4, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090c4:	6021      	str	r1, [r4, #0]
 80090c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	0800aa81 	.word	0x0800aa81
 80090d0:	0800ab01 	.word	0x0800ab01

080090d4 <__multadd>:
 80090d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d8:	690d      	ldr	r5, [r1, #16]
 80090da:	4607      	mov	r7, r0
 80090dc:	460c      	mov	r4, r1
 80090de:	461e      	mov	r6, r3
 80090e0:	f101 0c14 	add.w	ip, r1, #20
 80090e4:	2000      	movs	r0, #0
 80090e6:	f8dc 3000 	ldr.w	r3, [ip]
 80090ea:	b299      	uxth	r1, r3
 80090ec:	fb02 6101 	mla	r1, r2, r1, r6
 80090f0:	0c1e      	lsrs	r6, r3, #16
 80090f2:	0c0b      	lsrs	r3, r1, #16
 80090f4:	fb02 3306 	mla	r3, r2, r6, r3
 80090f8:	b289      	uxth	r1, r1
 80090fa:	3001      	adds	r0, #1
 80090fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009100:	4285      	cmp	r5, r0
 8009102:	f84c 1b04 	str.w	r1, [ip], #4
 8009106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800910a:	dcec      	bgt.n	80090e6 <__multadd+0x12>
 800910c:	b30e      	cbz	r6, 8009152 <__multadd+0x7e>
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	42ab      	cmp	r3, r5
 8009112:	dc19      	bgt.n	8009148 <__multadd+0x74>
 8009114:	6861      	ldr	r1, [r4, #4]
 8009116:	4638      	mov	r0, r7
 8009118:	3101      	adds	r1, #1
 800911a:	f7ff ff79 	bl	8009010 <_Balloc>
 800911e:	4680      	mov	r8, r0
 8009120:	b928      	cbnz	r0, 800912e <__multadd+0x5a>
 8009122:	4602      	mov	r2, r0
 8009124:	4b0c      	ldr	r3, [pc, #48]	@ (8009158 <__multadd+0x84>)
 8009126:	480d      	ldr	r0, [pc, #52]	@ (800915c <__multadd+0x88>)
 8009128:	21ba      	movs	r1, #186	@ 0xba
 800912a:	f000 fd2f 	bl	8009b8c <__assert_func>
 800912e:	6922      	ldr	r2, [r4, #16]
 8009130:	3202      	adds	r2, #2
 8009132:	f104 010c 	add.w	r1, r4, #12
 8009136:	0092      	lsls	r2, r2, #2
 8009138:	300c      	adds	r0, #12
 800913a:	f000 fd19 	bl	8009b70 <memcpy>
 800913e:	4621      	mov	r1, r4
 8009140:	4638      	mov	r0, r7
 8009142:	f7ff ffa5 	bl	8009090 <_Bfree>
 8009146:	4644      	mov	r4, r8
 8009148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800914c:	3501      	adds	r5, #1
 800914e:	615e      	str	r6, [r3, #20]
 8009150:	6125      	str	r5, [r4, #16]
 8009152:	4620      	mov	r0, r4
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	0800aaf0 	.word	0x0800aaf0
 800915c:	0800ab01 	.word	0x0800ab01

08009160 <__hi0bits>:
 8009160:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009164:	4603      	mov	r3, r0
 8009166:	bf36      	itet	cc
 8009168:	0403      	lslcc	r3, r0, #16
 800916a:	2000      	movcs	r0, #0
 800916c:	2010      	movcc	r0, #16
 800916e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009172:	bf3c      	itt	cc
 8009174:	021b      	lslcc	r3, r3, #8
 8009176:	3008      	addcc	r0, #8
 8009178:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800917c:	bf3c      	itt	cc
 800917e:	011b      	lslcc	r3, r3, #4
 8009180:	3004      	addcc	r0, #4
 8009182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009186:	bf3c      	itt	cc
 8009188:	009b      	lslcc	r3, r3, #2
 800918a:	3002      	addcc	r0, #2
 800918c:	2b00      	cmp	r3, #0
 800918e:	db05      	blt.n	800919c <__hi0bits+0x3c>
 8009190:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009194:	f100 0001 	add.w	r0, r0, #1
 8009198:	bf08      	it	eq
 800919a:	2020      	moveq	r0, #32
 800919c:	4770      	bx	lr

0800919e <__lo0bits>:
 800919e:	6803      	ldr	r3, [r0, #0]
 80091a0:	4602      	mov	r2, r0
 80091a2:	f013 0007 	ands.w	r0, r3, #7
 80091a6:	d00b      	beq.n	80091c0 <__lo0bits+0x22>
 80091a8:	07d9      	lsls	r1, r3, #31
 80091aa:	d421      	bmi.n	80091f0 <__lo0bits+0x52>
 80091ac:	0798      	lsls	r0, r3, #30
 80091ae:	bf49      	itett	mi
 80091b0:	085b      	lsrmi	r3, r3, #1
 80091b2:	089b      	lsrpl	r3, r3, #2
 80091b4:	2001      	movmi	r0, #1
 80091b6:	6013      	strmi	r3, [r2, #0]
 80091b8:	bf5c      	itt	pl
 80091ba:	6013      	strpl	r3, [r2, #0]
 80091bc:	2002      	movpl	r0, #2
 80091be:	4770      	bx	lr
 80091c0:	b299      	uxth	r1, r3
 80091c2:	b909      	cbnz	r1, 80091c8 <__lo0bits+0x2a>
 80091c4:	0c1b      	lsrs	r3, r3, #16
 80091c6:	2010      	movs	r0, #16
 80091c8:	b2d9      	uxtb	r1, r3
 80091ca:	b909      	cbnz	r1, 80091d0 <__lo0bits+0x32>
 80091cc:	3008      	adds	r0, #8
 80091ce:	0a1b      	lsrs	r3, r3, #8
 80091d0:	0719      	lsls	r1, r3, #28
 80091d2:	bf04      	itt	eq
 80091d4:	091b      	lsreq	r3, r3, #4
 80091d6:	3004      	addeq	r0, #4
 80091d8:	0799      	lsls	r1, r3, #30
 80091da:	bf04      	itt	eq
 80091dc:	089b      	lsreq	r3, r3, #2
 80091de:	3002      	addeq	r0, #2
 80091e0:	07d9      	lsls	r1, r3, #31
 80091e2:	d403      	bmi.n	80091ec <__lo0bits+0x4e>
 80091e4:	085b      	lsrs	r3, r3, #1
 80091e6:	f100 0001 	add.w	r0, r0, #1
 80091ea:	d003      	beq.n	80091f4 <__lo0bits+0x56>
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	4770      	bx	lr
 80091f0:	2000      	movs	r0, #0
 80091f2:	4770      	bx	lr
 80091f4:	2020      	movs	r0, #32
 80091f6:	4770      	bx	lr

080091f8 <__i2b>:
 80091f8:	b510      	push	{r4, lr}
 80091fa:	460c      	mov	r4, r1
 80091fc:	2101      	movs	r1, #1
 80091fe:	f7ff ff07 	bl	8009010 <_Balloc>
 8009202:	4602      	mov	r2, r0
 8009204:	b928      	cbnz	r0, 8009212 <__i2b+0x1a>
 8009206:	4b05      	ldr	r3, [pc, #20]	@ (800921c <__i2b+0x24>)
 8009208:	4805      	ldr	r0, [pc, #20]	@ (8009220 <__i2b+0x28>)
 800920a:	f240 1145 	movw	r1, #325	@ 0x145
 800920e:	f000 fcbd 	bl	8009b8c <__assert_func>
 8009212:	2301      	movs	r3, #1
 8009214:	6144      	str	r4, [r0, #20]
 8009216:	6103      	str	r3, [r0, #16]
 8009218:	bd10      	pop	{r4, pc}
 800921a:	bf00      	nop
 800921c:	0800aaf0 	.word	0x0800aaf0
 8009220:	0800ab01 	.word	0x0800ab01

08009224 <__multiply>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	4614      	mov	r4, r2
 800922a:	690a      	ldr	r2, [r1, #16]
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	429a      	cmp	r2, r3
 8009230:	bfa8      	it	ge
 8009232:	4623      	movge	r3, r4
 8009234:	460f      	mov	r7, r1
 8009236:	bfa4      	itt	ge
 8009238:	460c      	movge	r4, r1
 800923a:	461f      	movge	r7, r3
 800923c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009240:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	6861      	ldr	r1, [r4, #4]
 8009248:	eb0a 0609 	add.w	r6, sl, r9
 800924c:	42b3      	cmp	r3, r6
 800924e:	b085      	sub	sp, #20
 8009250:	bfb8      	it	lt
 8009252:	3101      	addlt	r1, #1
 8009254:	f7ff fedc 	bl	8009010 <_Balloc>
 8009258:	b930      	cbnz	r0, 8009268 <__multiply+0x44>
 800925a:	4602      	mov	r2, r0
 800925c:	4b44      	ldr	r3, [pc, #272]	@ (8009370 <__multiply+0x14c>)
 800925e:	4845      	ldr	r0, [pc, #276]	@ (8009374 <__multiply+0x150>)
 8009260:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009264:	f000 fc92 	bl	8009b8c <__assert_func>
 8009268:	f100 0514 	add.w	r5, r0, #20
 800926c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009270:	462b      	mov	r3, r5
 8009272:	2200      	movs	r2, #0
 8009274:	4543      	cmp	r3, r8
 8009276:	d321      	bcc.n	80092bc <__multiply+0x98>
 8009278:	f107 0114 	add.w	r1, r7, #20
 800927c:	f104 0214 	add.w	r2, r4, #20
 8009280:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009284:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009288:	9302      	str	r3, [sp, #8]
 800928a:	1b13      	subs	r3, r2, r4
 800928c:	3b15      	subs	r3, #21
 800928e:	f023 0303 	bic.w	r3, r3, #3
 8009292:	3304      	adds	r3, #4
 8009294:	f104 0715 	add.w	r7, r4, #21
 8009298:	42ba      	cmp	r2, r7
 800929a:	bf38      	it	cc
 800929c:	2304      	movcc	r3, #4
 800929e:	9301      	str	r3, [sp, #4]
 80092a0:	9b02      	ldr	r3, [sp, #8]
 80092a2:	9103      	str	r1, [sp, #12]
 80092a4:	428b      	cmp	r3, r1
 80092a6:	d80c      	bhi.n	80092c2 <__multiply+0x9e>
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	dd03      	ble.n	80092b4 <__multiply+0x90>
 80092ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d05b      	beq.n	800936c <__multiply+0x148>
 80092b4:	6106      	str	r6, [r0, #16]
 80092b6:	b005      	add	sp, #20
 80092b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092bc:	f843 2b04 	str.w	r2, [r3], #4
 80092c0:	e7d8      	b.n	8009274 <__multiply+0x50>
 80092c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80092c6:	f1ba 0f00 	cmp.w	sl, #0
 80092ca:	d024      	beq.n	8009316 <__multiply+0xf2>
 80092cc:	f104 0e14 	add.w	lr, r4, #20
 80092d0:	46a9      	mov	r9, r5
 80092d2:	f04f 0c00 	mov.w	ip, #0
 80092d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092da:	f8d9 3000 	ldr.w	r3, [r9]
 80092de:	fa1f fb87 	uxth.w	fp, r7
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80092e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80092ec:	f8d9 7000 	ldr.w	r7, [r9]
 80092f0:	4463      	add	r3, ip
 80092f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80092fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80092fe:	b29b      	uxth	r3, r3
 8009300:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009304:	4572      	cmp	r2, lr
 8009306:	f849 3b04 	str.w	r3, [r9], #4
 800930a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800930e:	d8e2      	bhi.n	80092d6 <__multiply+0xb2>
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	f845 c003 	str.w	ip, [r5, r3]
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800931c:	3104      	adds	r1, #4
 800931e:	f1b9 0f00 	cmp.w	r9, #0
 8009322:	d021      	beq.n	8009368 <__multiply+0x144>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	f104 0c14 	add.w	ip, r4, #20
 800932a:	46ae      	mov	lr, r5
 800932c:	f04f 0a00 	mov.w	sl, #0
 8009330:	f8bc b000 	ldrh.w	fp, [ip]
 8009334:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009338:	fb09 770b 	mla	r7, r9, fp, r7
 800933c:	4457      	add	r7, sl
 800933e:	b29b      	uxth	r3, r3
 8009340:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009344:	f84e 3b04 	str.w	r3, [lr], #4
 8009348:	f85c 3b04 	ldr.w	r3, [ip], #4
 800934c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009350:	f8be 3000 	ldrh.w	r3, [lr]
 8009354:	fb09 330a 	mla	r3, r9, sl, r3
 8009358:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800935c:	4562      	cmp	r2, ip
 800935e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009362:	d8e5      	bhi.n	8009330 <__multiply+0x10c>
 8009364:	9f01      	ldr	r7, [sp, #4]
 8009366:	51eb      	str	r3, [r5, r7]
 8009368:	3504      	adds	r5, #4
 800936a:	e799      	b.n	80092a0 <__multiply+0x7c>
 800936c:	3e01      	subs	r6, #1
 800936e:	e79b      	b.n	80092a8 <__multiply+0x84>
 8009370:	0800aaf0 	.word	0x0800aaf0
 8009374:	0800ab01 	.word	0x0800ab01

08009378 <__pow5mult>:
 8009378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800937c:	4615      	mov	r5, r2
 800937e:	f012 0203 	ands.w	r2, r2, #3
 8009382:	4607      	mov	r7, r0
 8009384:	460e      	mov	r6, r1
 8009386:	d007      	beq.n	8009398 <__pow5mult+0x20>
 8009388:	4c25      	ldr	r4, [pc, #148]	@ (8009420 <__pow5mult+0xa8>)
 800938a:	3a01      	subs	r2, #1
 800938c:	2300      	movs	r3, #0
 800938e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009392:	f7ff fe9f 	bl	80090d4 <__multadd>
 8009396:	4606      	mov	r6, r0
 8009398:	10ad      	asrs	r5, r5, #2
 800939a:	d03d      	beq.n	8009418 <__pow5mult+0xa0>
 800939c:	69fc      	ldr	r4, [r7, #28]
 800939e:	b97c      	cbnz	r4, 80093c0 <__pow5mult+0x48>
 80093a0:	2010      	movs	r0, #16
 80093a2:	f7ff fd7f 	bl	8008ea4 <malloc>
 80093a6:	4602      	mov	r2, r0
 80093a8:	61f8      	str	r0, [r7, #28]
 80093aa:	b928      	cbnz	r0, 80093b8 <__pow5mult+0x40>
 80093ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009424 <__pow5mult+0xac>)
 80093ae:	481e      	ldr	r0, [pc, #120]	@ (8009428 <__pow5mult+0xb0>)
 80093b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093b4:	f000 fbea 	bl	8009b8c <__assert_func>
 80093b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093bc:	6004      	str	r4, [r0, #0]
 80093be:	60c4      	str	r4, [r0, #12]
 80093c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80093c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093c8:	b94c      	cbnz	r4, 80093de <__pow5mult+0x66>
 80093ca:	f240 2171 	movw	r1, #625	@ 0x271
 80093ce:	4638      	mov	r0, r7
 80093d0:	f7ff ff12 	bl	80091f8 <__i2b>
 80093d4:	2300      	movs	r3, #0
 80093d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80093da:	4604      	mov	r4, r0
 80093dc:	6003      	str	r3, [r0, #0]
 80093de:	f04f 0900 	mov.w	r9, #0
 80093e2:	07eb      	lsls	r3, r5, #31
 80093e4:	d50a      	bpl.n	80093fc <__pow5mult+0x84>
 80093e6:	4631      	mov	r1, r6
 80093e8:	4622      	mov	r2, r4
 80093ea:	4638      	mov	r0, r7
 80093ec:	f7ff ff1a 	bl	8009224 <__multiply>
 80093f0:	4631      	mov	r1, r6
 80093f2:	4680      	mov	r8, r0
 80093f4:	4638      	mov	r0, r7
 80093f6:	f7ff fe4b 	bl	8009090 <_Bfree>
 80093fa:	4646      	mov	r6, r8
 80093fc:	106d      	asrs	r5, r5, #1
 80093fe:	d00b      	beq.n	8009418 <__pow5mult+0xa0>
 8009400:	6820      	ldr	r0, [r4, #0]
 8009402:	b938      	cbnz	r0, 8009414 <__pow5mult+0x9c>
 8009404:	4622      	mov	r2, r4
 8009406:	4621      	mov	r1, r4
 8009408:	4638      	mov	r0, r7
 800940a:	f7ff ff0b 	bl	8009224 <__multiply>
 800940e:	6020      	str	r0, [r4, #0]
 8009410:	f8c0 9000 	str.w	r9, [r0]
 8009414:	4604      	mov	r4, r0
 8009416:	e7e4      	b.n	80093e2 <__pow5mult+0x6a>
 8009418:	4630      	mov	r0, r6
 800941a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941e:	bf00      	nop
 8009420:	0800ab5c 	.word	0x0800ab5c
 8009424:	0800aa81 	.word	0x0800aa81
 8009428:	0800ab01 	.word	0x0800ab01

0800942c <__lshift>:
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	460c      	mov	r4, r1
 8009432:	6849      	ldr	r1, [r1, #4]
 8009434:	6923      	ldr	r3, [r4, #16]
 8009436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800943a:	68a3      	ldr	r3, [r4, #8]
 800943c:	4607      	mov	r7, r0
 800943e:	4691      	mov	r9, r2
 8009440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009444:	f108 0601 	add.w	r6, r8, #1
 8009448:	42b3      	cmp	r3, r6
 800944a:	db0b      	blt.n	8009464 <__lshift+0x38>
 800944c:	4638      	mov	r0, r7
 800944e:	f7ff fddf 	bl	8009010 <_Balloc>
 8009452:	4605      	mov	r5, r0
 8009454:	b948      	cbnz	r0, 800946a <__lshift+0x3e>
 8009456:	4602      	mov	r2, r0
 8009458:	4b28      	ldr	r3, [pc, #160]	@ (80094fc <__lshift+0xd0>)
 800945a:	4829      	ldr	r0, [pc, #164]	@ (8009500 <__lshift+0xd4>)
 800945c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009460:	f000 fb94 	bl	8009b8c <__assert_func>
 8009464:	3101      	adds	r1, #1
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	e7ee      	b.n	8009448 <__lshift+0x1c>
 800946a:	2300      	movs	r3, #0
 800946c:	f100 0114 	add.w	r1, r0, #20
 8009470:	f100 0210 	add.w	r2, r0, #16
 8009474:	4618      	mov	r0, r3
 8009476:	4553      	cmp	r3, sl
 8009478:	db33      	blt.n	80094e2 <__lshift+0xb6>
 800947a:	6920      	ldr	r0, [r4, #16]
 800947c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009480:	f104 0314 	add.w	r3, r4, #20
 8009484:	f019 091f 	ands.w	r9, r9, #31
 8009488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800948c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009490:	d02b      	beq.n	80094ea <__lshift+0xbe>
 8009492:	f1c9 0e20 	rsb	lr, r9, #32
 8009496:	468a      	mov	sl, r1
 8009498:	2200      	movs	r2, #0
 800949a:	6818      	ldr	r0, [r3, #0]
 800949c:	fa00 f009 	lsl.w	r0, r0, r9
 80094a0:	4310      	orrs	r0, r2
 80094a2:	f84a 0b04 	str.w	r0, [sl], #4
 80094a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094aa:	459c      	cmp	ip, r3
 80094ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80094b0:	d8f3      	bhi.n	800949a <__lshift+0x6e>
 80094b2:	ebac 0304 	sub.w	r3, ip, r4
 80094b6:	3b15      	subs	r3, #21
 80094b8:	f023 0303 	bic.w	r3, r3, #3
 80094bc:	3304      	adds	r3, #4
 80094be:	f104 0015 	add.w	r0, r4, #21
 80094c2:	4584      	cmp	ip, r0
 80094c4:	bf38      	it	cc
 80094c6:	2304      	movcc	r3, #4
 80094c8:	50ca      	str	r2, [r1, r3]
 80094ca:	b10a      	cbz	r2, 80094d0 <__lshift+0xa4>
 80094cc:	f108 0602 	add.w	r6, r8, #2
 80094d0:	3e01      	subs	r6, #1
 80094d2:	4638      	mov	r0, r7
 80094d4:	612e      	str	r6, [r5, #16]
 80094d6:	4621      	mov	r1, r4
 80094d8:	f7ff fdda 	bl	8009090 <_Bfree>
 80094dc:	4628      	mov	r0, r5
 80094de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80094e6:	3301      	adds	r3, #1
 80094e8:	e7c5      	b.n	8009476 <__lshift+0x4a>
 80094ea:	3904      	subs	r1, #4
 80094ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80094f4:	459c      	cmp	ip, r3
 80094f6:	d8f9      	bhi.n	80094ec <__lshift+0xc0>
 80094f8:	e7ea      	b.n	80094d0 <__lshift+0xa4>
 80094fa:	bf00      	nop
 80094fc:	0800aaf0 	.word	0x0800aaf0
 8009500:	0800ab01 	.word	0x0800ab01

08009504 <__mcmp>:
 8009504:	690a      	ldr	r2, [r1, #16]
 8009506:	4603      	mov	r3, r0
 8009508:	6900      	ldr	r0, [r0, #16]
 800950a:	1a80      	subs	r0, r0, r2
 800950c:	b530      	push	{r4, r5, lr}
 800950e:	d10e      	bne.n	800952e <__mcmp+0x2a>
 8009510:	3314      	adds	r3, #20
 8009512:	3114      	adds	r1, #20
 8009514:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009518:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800951c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009520:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009524:	4295      	cmp	r5, r2
 8009526:	d003      	beq.n	8009530 <__mcmp+0x2c>
 8009528:	d205      	bcs.n	8009536 <__mcmp+0x32>
 800952a:	f04f 30ff 	mov.w	r0, #4294967295
 800952e:	bd30      	pop	{r4, r5, pc}
 8009530:	42a3      	cmp	r3, r4
 8009532:	d3f3      	bcc.n	800951c <__mcmp+0x18>
 8009534:	e7fb      	b.n	800952e <__mcmp+0x2a>
 8009536:	2001      	movs	r0, #1
 8009538:	e7f9      	b.n	800952e <__mcmp+0x2a>
	...

0800953c <__mdiff>:
 800953c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4689      	mov	r9, r1
 8009542:	4606      	mov	r6, r0
 8009544:	4611      	mov	r1, r2
 8009546:	4648      	mov	r0, r9
 8009548:	4614      	mov	r4, r2
 800954a:	f7ff ffdb 	bl	8009504 <__mcmp>
 800954e:	1e05      	subs	r5, r0, #0
 8009550:	d112      	bne.n	8009578 <__mdiff+0x3c>
 8009552:	4629      	mov	r1, r5
 8009554:	4630      	mov	r0, r6
 8009556:	f7ff fd5b 	bl	8009010 <_Balloc>
 800955a:	4602      	mov	r2, r0
 800955c:	b928      	cbnz	r0, 800956a <__mdiff+0x2e>
 800955e:	4b3f      	ldr	r3, [pc, #252]	@ (800965c <__mdiff+0x120>)
 8009560:	f240 2137 	movw	r1, #567	@ 0x237
 8009564:	483e      	ldr	r0, [pc, #248]	@ (8009660 <__mdiff+0x124>)
 8009566:	f000 fb11 	bl	8009b8c <__assert_func>
 800956a:	2301      	movs	r3, #1
 800956c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009570:	4610      	mov	r0, r2
 8009572:	b003      	add	sp, #12
 8009574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009578:	bfbc      	itt	lt
 800957a:	464b      	movlt	r3, r9
 800957c:	46a1      	movlt	r9, r4
 800957e:	4630      	mov	r0, r6
 8009580:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009584:	bfba      	itte	lt
 8009586:	461c      	movlt	r4, r3
 8009588:	2501      	movlt	r5, #1
 800958a:	2500      	movge	r5, #0
 800958c:	f7ff fd40 	bl	8009010 <_Balloc>
 8009590:	4602      	mov	r2, r0
 8009592:	b918      	cbnz	r0, 800959c <__mdiff+0x60>
 8009594:	4b31      	ldr	r3, [pc, #196]	@ (800965c <__mdiff+0x120>)
 8009596:	f240 2145 	movw	r1, #581	@ 0x245
 800959a:	e7e3      	b.n	8009564 <__mdiff+0x28>
 800959c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095a0:	6926      	ldr	r6, [r4, #16]
 80095a2:	60c5      	str	r5, [r0, #12]
 80095a4:	f109 0310 	add.w	r3, r9, #16
 80095a8:	f109 0514 	add.w	r5, r9, #20
 80095ac:	f104 0e14 	add.w	lr, r4, #20
 80095b0:	f100 0b14 	add.w	fp, r0, #20
 80095b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80095b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80095bc:	9301      	str	r3, [sp, #4]
 80095be:	46d9      	mov	r9, fp
 80095c0:	f04f 0c00 	mov.w	ip, #0
 80095c4:	9b01      	ldr	r3, [sp, #4]
 80095c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80095ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	fa1f f38a 	uxth.w	r3, sl
 80095d4:	4619      	mov	r1, r3
 80095d6:	b283      	uxth	r3, r0
 80095d8:	1acb      	subs	r3, r1, r3
 80095da:	0c00      	lsrs	r0, r0, #16
 80095dc:	4463      	add	r3, ip
 80095de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80095e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80095ec:	4576      	cmp	r6, lr
 80095ee:	f849 3b04 	str.w	r3, [r9], #4
 80095f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095f6:	d8e5      	bhi.n	80095c4 <__mdiff+0x88>
 80095f8:	1b33      	subs	r3, r6, r4
 80095fa:	3b15      	subs	r3, #21
 80095fc:	f023 0303 	bic.w	r3, r3, #3
 8009600:	3415      	adds	r4, #21
 8009602:	3304      	adds	r3, #4
 8009604:	42a6      	cmp	r6, r4
 8009606:	bf38      	it	cc
 8009608:	2304      	movcc	r3, #4
 800960a:	441d      	add	r5, r3
 800960c:	445b      	add	r3, fp
 800960e:	461e      	mov	r6, r3
 8009610:	462c      	mov	r4, r5
 8009612:	4544      	cmp	r4, r8
 8009614:	d30e      	bcc.n	8009634 <__mdiff+0xf8>
 8009616:	f108 0103 	add.w	r1, r8, #3
 800961a:	1b49      	subs	r1, r1, r5
 800961c:	f021 0103 	bic.w	r1, r1, #3
 8009620:	3d03      	subs	r5, #3
 8009622:	45a8      	cmp	r8, r5
 8009624:	bf38      	it	cc
 8009626:	2100      	movcc	r1, #0
 8009628:	440b      	add	r3, r1
 800962a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800962e:	b191      	cbz	r1, 8009656 <__mdiff+0x11a>
 8009630:	6117      	str	r7, [r2, #16]
 8009632:	e79d      	b.n	8009570 <__mdiff+0x34>
 8009634:	f854 1b04 	ldr.w	r1, [r4], #4
 8009638:	46e6      	mov	lr, ip
 800963a:	0c08      	lsrs	r0, r1, #16
 800963c:	fa1c fc81 	uxtah	ip, ip, r1
 8009640:	4471      	add	r1, lr
 8009642:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009646:	b289      	uxth	r1, r1
 8009648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800964c:	f846 1b04 	str.w	r1, [r6], #4
 8009650:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009654:	e7dd      	b.n	8009612 <__mdiff+0xd6>
 8009656:	3f01      	subs	r7, #1
 8009658:	e7e7      	b.n	800962a <__mdiff+0xee>
 800965a:	bf00      	nop
 800965c:	0800aaf0 	.word	0x0800aaf0
 8009660:	0800ab01 	.word	0x0800ab01

08009664 <__d2b>:
 8009664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009668:	460f      	mov	r7, r1
 800966a:	2101      	movs	r1, #1
 800966c:	ec59 8b10 	vmov	r8, r9, d0
 8009670:	4616      	mov	r6, r2
 8009672:	f7ff fccd 	bl	8009010 <_Balloc>
 8009676:	4604      	mov	r4, r0
 8009678:	b930      	cbnz	r0, 8009688 <__d2b+0x24>
 800967a:	4602      	mov	r2, r0
 800967c:	4b23      	ldr	r3, [pc, #140]	@ (800970c <__d2b+0xa8>)
 800967e:	4824      	ldr	r0, [pc, #144]	@ (8009710 <__d2b+0xac>)
 8009680:	f240 310f 	movw	r1, #783	@ 0x30f
 8009684:	f000 fa82 	bl	8009b8c <__assert_func>
 8009688:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800968c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009690:	b10d      	cbz	r5, 8009696 <__d2b+0x32>
 8009692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009696:	9301      	str	r3, [sp, #4]
 8009698:	f1b8 0300 	subs.w	r3, r8, #0
 800969c:	d023      	beq.n	80096e6 <__d2b+0x82>
 800969e:	4668      	mov	r0, sp
 80096a0:	9300      	str	r3, [sp, #0]
 80096a2:	f7ff fd7c 	bl	800919e <__lo0bits>
 80096a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096aa:	b1d0      	cbz	r0, 80096e2 <__d2b+0x7e>
 80096ac:	f1c0 0320 	rsb	r3, r0, #32
 80096b0:	fa02 f303 	lsl.w	r3, r2, r3
 80096b4:	430b      	orrs	r3, r1
 80096b6:	40c2      	lsrs	r2, r0
 80096b8:	6163      	str	r3, [r4, #20]
 80096ba:	9201      	str	r2, [sp, #4]
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	61a3      	str	r3, [r4, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	bf0c      	ite	eq
 80096c4:	2201      	moveq	r2, #1
 80096c6:	2202      	movne	r2, #2
 80096c8:	6122      	str	r2, [r4, #16]
 80096ca:	b1a5      	cbz	r5, 80096f6 <__d2b+0x92>
 80096cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80096d0:	4405      	add	r5, r0
 80096d2:	603d      	str	r5, [r7, #0]
 80096d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80096d8:	6030      	str	r0, [r6, #0]
 80096da:	4620      	mov	r0, r4
 80096dc:	b003      	add	sp, #12
 80096de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096e2:	6161      	str	r1, [r4, #20]
 80096e4:	e7ea      	b.n	80096bc <__d2b+0x58>
 80096e6:	a801      	add	r0, sp, #4
 80096e8:	f7ff fd59 	bl	800919e <__lo0bits>
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	6163      	str	r3, [r4, #20]
 80096f0:	3020      	adds	r0, #32
 80096f2:	2201      	movs	r2, #1
 80096f4:	e7e8      	b.n	80096c8 <__d2b+0x64>
 80096f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80096fe:	6038      	str	r0, [r7, #0]
 8009700:	6918      	ldr	r0, [r3, #16]
 8009702:	f7ff fd2d 	bl	8009160 <__hi0bits>
 8009706:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800970a:	e7e5      	b.n	80096d8 <__d2b+0x74>
 800970c:	0800aaf0 	.word	0x0800aaf0
 8009710:	0800ab01 	.word	0x0800ab01

08009714 <__ssputs_r>:
 8009714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009718:	688e      	ldr	r6, [r1, #8]
 800971a:	461f      	mov	r7, r3
 800971c:	42be      	cmp	r6, r7
 800971e:	680b      	ldr	r3, [r1, #0]
 8009720:	4682      	mov	sl, r0
 8009722:	460c      	mov	r4, r1
 8009724:	4690      	mov	r8, r2
 8009726:	d82d      	bhi.n	8009784 <__ssputs_r+0x70>
 8009728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800972c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009730:	d026      	beq.n	8009780 <__ssputs_r+0x6c>
 8009732:	6965      	ldr	r5, [r4, #20]
 8009734:	6909      	ldr	r1, [r1, #16]
 8009736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800973a:	eba3 0901 	sub.w	r9, r3, r1
 800973e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009742:	1c7b      	adds	r3, r7, #1
 8009744:	444b      	add	r3, r9
 8009746:	106d      	asrs	r5, r5, #1
 8009748:	429d      	cmp	r5, r3
 800974a:	bf38      	it	cc
 800974c:	461d      	movcc	r5, r3
 800974e:	0553      	lsls	r3, r2, #21
 8009750:	d527      	bpl.n	80097a2 <__ssputs_r+0x8e>
 8009752:	4629      	mov	r1, r5
 8009754:	f7ff fbd0 	bl	8008ef8 <_malloc_r>
 8009758:	4606      	mov	r6, r0
 800975a:	b360      	cbz	r0, 80097b6 <__ssputs_r+0xa2>
 800975c:	6921      	ldr	r1, [r4, #16]
 800975e:	464a      	mov	r2, r9
 8009760:	f000 fa06 	bl	8009b70 <memcpy>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800976a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800976e:	81a3      	strh	r3, [r4, #12]
 8009770:	6126      	str	r6, [r4, #16]
 8009772:	6165      	str	r5, [r4, #20]
 8009774:	444e      	add	r6, r9
 8009776:	eba5 0509 	sub.w	r5, r5, r9
 800977a:	6026      	str	r6, [r4, #0]
 800977c:	60a5      	str	r5, [r4, #8]
 800977e:	463e      	mov	r6, r7
 8009780:	42be      	cmp	r6, r7
 8009782:	d900      	bls.n	8009786 <__ssputs_r+0x72>
 8009784:	463e      	mov	r6, r7
 8009786:	6820      	ldr	r0, [r4, #0]
 8009788:	4632      	mov	r2, r6
 800978a:	4641      	mov	r1, r8
 800978c:	f000 f9c6 	bl	8009b1c <memmove>
 8009790:	68a3      	ldr	r3, [r4, #8]
 8009792:	1b9b      	subs	r3, r3, r6
 8009794:	60a3      	str	r3, [r4, #8]
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	4433      	add	r3, r6
 800979a:	6023      	str	r3, [r4, #0]
 800979c:	2000      	movs	r0, #0
 800979e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a2:	462a      	mov	r2, r5
 80097a4:	f000 fa36 	bl	8009c14 <_realloc_r>
 80097a8:	4606      	mov	r6, r0
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d1e0      	bne.n	8009770 <__ssputs_r+0x5c>
 80097ae:	6921      	ldr	r1, [r4, #16]
 80097b0:	4650      	mov	r0, sl
 80097b2:	f7ff fb2d 	bl	8008e10 <_free_r>
 80097b6:	230c      	movs	r3, #12
 80097b8:	f8ca 3000 	str.w	r3, [sl]
 80097bc:	89a3      	ldrh	r3, [r4, #12]
 80097be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	f04f 30ff 	mov.w	r0, #4294967295
 80097c8:	e7e9      	b.n	800979e <__ssputs_r+0x8a>
	...

080097cc <_svfiprintf_r>:
 80097cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d0:	4698      	mov	r8, r3
 80097d2:	898b      	ldrh	r3, [r1, #12]
 80097d4:	061b      	lsls	r3, r3, #24
 80097d6:	b09d      	sub	sp, #116	@ 0x74
 80097d8:	4607      	mov	r7, r0
 80097da:	460d      	mov	r5, r1
 80097dc:	4614      	mov	r4, r2
 80097de:	d510      	bpl.n	8009802 <_svfiprintf_r+0x36>
 80097e0:	690b      	ldr	r3, [r1, #16]
 80097e2:	b973      	cbnz	r3, 8009802 <_svfiprintf_r+0x36>
 80097e4:	2140      	movs	r1, #64	@ 0x40
 80097e6:	f7ff fb87 	bl	8008ef8 <_malloc_r>
 80097ea:	6028      	str	r0, [r5, #0]
 80097ec:	6128      	str	r0, [r5, #16]
 80097ee:	b930      	cbnz	r0, 80097fe <_svfiprintf_r+0x32>
 80097f0:	230c      	movs	r3, #12
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	f04f 30ff 	mov.w	r0, #4294967295
 80097f8:	b01d      	add	sp, #116	@ 0x74
 80097fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fe:	2340      	movs	r3, #64	@ 0x40
 8009800:	616b      	str	r3, [r5, #20]
 8009802:	2300      	movs	r3, #0
 8009804:	9309      	str	r3, [sp, #36]	@ 0x24
 8009806:	2320      	movs	r3, #32
 8009808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800980c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009810:	2330      	movs	r3, #48	@ 0x30
 8009812:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099b0 <_svfiprintf_r+0x1e4>
 8009816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800981a:	f04f 0901 	mov.w	r9, #1
 800981e:	4623      	mov	r3, r4
 8009820:	469a      	mov	sl, r3
 8009822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009826:	b10a      	cbz	r2, 800982c <_svfiprintf_r+0x60>
 8009828:	2a25      	cmp	r2, #37	@ 0x25
 800982a:	d1f9      	bne.n	8009820 <_svfiprintf_r+0x54>
 800982c:	ebba 0b04 	subs.w	fp, sl, r4
 8009830:	d00b      	beq.n	800984a <_svfiprintf_r+0x7e>
 8009832:	465b      	mov	r3, fp
 8009834:	4622      	mov	r2, r4
 8009836:	4629      	mov	r1, r5
 8009838:	4638      	mov	r0, r7
 800983a:	f7ff ff6b 	bl	8009714 <__ssputs_r>
 800983e:	3001      	adds	r0, #1
 8009840:	f000 80a7 	beq.w	8009992 <_svfiprintf_r+0x1c6>
 8009844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009846:	445a      	add	r2, fp
 8009848:	9209      	str	r2, [sp, #36]	@ 0x24
 800984a:	f89a 3000 	ldrb.w	r3, [sl]
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 809f 	beq.w	8009992 <_svfiprintf_r+0x1c6>
 8009854:	2300      	movs	r3, #0
 8009856:	f04f 32ff 	mov.w	r2, #4294967295
 800985a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800985e:	f10a 0a01 	add.w	sl, sl, #1
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	9307      	str	r3, [sp, #28]
 8009866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800986a:	931a      	str	r3, [sp, #104]	@ 0x68
 800986c:	4654      	mov	r4, sl
 800986e:	2205      	movs	r2, #5
 8009870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009874:	484e      	ldr	r0, [pc, #312]	@ (80099b0 <_svfiprintf_r+0x1e4>)
 8009876:	f7f6 fcb3 	bl	80001e0 <memchr>
 800987a:	9a04      	ldr	r2, [sp, #16]
 800987c:	b9d8      	cbnz	r0, 80098b6 <_svfiprintf_r+0xea>
 800987e:	06d0      	lsls	r0, r2, #27
 8009880:	bf44      	itt	mi
 8009882:	2320      	movmi	r3, #32
 8009884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009888:	0711      	lsls	r1, r2, #28
 800988a:	bf44      	itt	mi
 800988c:	232b      	movmi	r3, #43	@ 0x2b
 800988e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009892:	f89a 3000 	ldrb.w	r3, [sl]
 8009896:	2b2a      	cmp	r3, #42	@ 0x2a
 8009898:	d015      	beq.n	80098c6 <_svfiprintf_r+0xfa>
 800989a:	9a07      	ldr	r2, [sp, #28]
 800989c:	4654      	mov	r4, sl
 800989e:	2000      	movs	r0, #0
 80098a0:	f04f 0c0a 	mov.w	ip, #10
 80098a4:	4621      	mov	r1, r4
 80098a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098aa:	3b30      	subs	r3, #48	@ 0x30
 80098ac:	2b09      	cmp	r3, #9
 80098ae:	d94b      	bls.n	8009948 <_svfiprintf_r+0x17c>
 80098b0:	b1b0      	cbz	r0, 80098e0 <_svfiprintf_r+0x114>
 80098b2:	9207      	str	r2, [sp, #28]
 80098b4:	e014      	b.n	80098e0 <_svfiprintf_r+0x114>
 80098b6:	eba0 0308 	sub.w	r3, r0, r8
 80098ba:	fa09 f303 	lsl.w	r3, r9, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	46a2      	mov	sl, r4
 80098c4:	e7d2      	b.n	800986c <_svfiprintf_r+0xa0>
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	1d19      	adds	r1, r3, #4
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	9103      	str	r1, [sp, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	bfbb      	ittet	lt
 80098d2:	425b      	neglt	r3, r3
 80098d4:	f042 0202 	orrlt.w	r2, r2, #2
 80098d8:	9307      	strge	r3, [sp, #28]
 80098da:	9307      	strlt	r3, [sp, #28]
 80098dc:	bfb8      	it	lt
 80098de:	9204      	strlt	r2, [sp, #16]
 80098e0:	7823      	ldrb	r3, [r4, #0]
 80098e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80098e4:	d10a      	bne.n	80098fc <_svfiprintf_r+0x130>
 80098e6:	7863      	ldrb	r3, [r4, #1]
 80098e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ea:	d132      	bne.n	8009952 <_svfiprintf_r+0x186>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	1d1a      	adds	r2, r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	9203      	str	r2, [sp, #12]
 80098f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098f8:	3402      	adds	r4, #2
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099c0 <_svfiprintf_r+0x1f4>
 8009900:	7821      	ldrb	r1, [r4, #0]
 8009902:	2203      	movs	r2, #3
 8009904:	4650      	mov	r0, sl
 8009906:	f7f6 fc6b 	bl	80001e0 <memchr>
 800990a:	b138      	cbz	r0, 800991c <_svfiprintf_r+0x150>
 800990c:	9b04      	ldr	r3, [sp, #16]
 800990e:	eba0 000a 	sub.w	r0, r0, sl
 8009912:	2240      	movs	r2, #64	@ 0x40
 8009914:	4082      	lsls	r2, r0
 8009916:	4313      	orrs	r3, r2
 8009918:	3401      	adds	r4, #1
 800991a:	9304      	str	r3, [sp, #16]
 800991c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009920:	4824      	ldr	r0, [pc, #144]	@ (80099b4 <_svfiprintf_r+0x1e8>)
 8009922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009926:	2206      	movs	r2, #6
 8009928:	f7f6 fc5a 	bl	80001e0 <memchr>
 800992c:	2800      	cmp	r0, #0
 800992e:	d036      	beq.n	800999e <_svfiprintf_r+0x1d2>
 8009930:	4b21      	ldr	r3, [pc, #132]	@ (80099b8 <_svfiprintf_r+0x1ec>)
 8009932:	bb1b      	cbnz	r3, 800997c <_svfiprintf_r+0x1b0>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	3307      	adds	r3, #7
 8009938:	f023 0307 	bic.w	r3, r3, #7
 800993c:	3308      	adds	r3, #8
 800993e:	9303      	str	r3, [sp, #12]
 8009940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009942:	4433      	add	r3, r6
 8009944:	9309      	str	r3, [sp, #36]	@ 0x24
 8009946:	e76a      	b.n	800981e <_svfiprintf_r+0x52>
 8009948:	fb0c 3202 	mla	r2, ip, r2, r3
 800994c:	460c      	mov	r4, r1
 800994e:	2001      	movs	r0, #1
 8009950:	e7a8      	b.n	80098a4 <_svfiprintf_r+0xd8>
 8009952:	2300      	movs	r3, #0
 8009954:	3401      	adds	r4, #1
 8009956:	9305      	str	r3, [sp, #20]
 8009958:	4619      	mov	r1, r3
 800995a:	f04f 0c0a 	mov.w	ip, #10
 800995e:	4620      	mov	r0, r4
 8009960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009964:	3a30      	subs	r2, #48	@ 0x30
 8009966:	2a09      	cmp	r2, #9
 8009968:	d903      	bls.n	8009972 <_svfiprintf_r+0x1a6>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0c6      	beq.n	80098fc <_svfiprintf_r+0x130>
 800996e:	9105      	str	r1, [sp, #20]
 8009970:	e7c4      	b.n	80098fc <_svfiprintf_r+0x130>
 8009972:	fb0c 2101 	mla	r1, ip, r1, r2
 8009976:	4604      	mov	r4, r0
 8009978:	2301      	movs	r3, #1
 800997a:	e7f0      	b.n	800995e <_svfiprintf_r+0x192>
 800997c:	ab03      	add	r3, sp, #12
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	462a      	mov	r2, r5
 8009982:	4b0e      	ldr	r3, [pc, #56]	@ (80099bc <_svfiprintf_r+0x1f0>)
 8009984:	a904      	add	r1, sp, #16
 8009986:	4638      	mov	r0, r7
 8009988:	f7fd fe98 	bl	80076bc <_printf_float>
 800998c:	1c42      	adds	r2, r0, #1
 800998e:	4606      	mov	r6, r0
 8009990:	d1d6      	bne.n	8009940 <_svfiprintf_r+0x174>
 8009992:	89ab      	ldrh	r3, [r5, #12]
 8009994:	065b      	lsls	r3, r3, #25
 8009996:	f53f af2d 	bmi.w	80097f4 <_svfiprintf_r+0x28>
 800999a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800999c:	e72c      	b.n	80097f8 <_svfiprintf_r+0x2c>
 800999e:	ab03      	add	r3, sp, #12
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	462a      	mov	r2, r5
 80099a4:	4b05      	ldr	r3, [pc, #20]	@ (80099bc <_svfiprintf_r+0x1f0>)
 80099a6:	a904      	add	r1, sp, #16
 80099a8:	4638      	mov	r0, r7
 80099aa:	f7fe f91f 	bl	8007bec <_printf_i>
 80099ae:	e7ed      	b.n	800998c <_svfiprintf_r+0x1c0>
 80099b0:	0800ac58 	.word	0x0800ac58
 80099b4:	0800ac62 	.word	0x0800ac62
 80099b8:	080076bd 	.word	0x080076bd
 80099bc:	08009715 	.word	0x08009715
 80099c0:	0800ac5e 	.word	0x0800ac5e

080099c4 <__sflush_r>:
 80099c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099cc:	0716      	lsls	r6, r2, #28
 80099ce:	4605      	mov	r5, r0
 80099d0:	460c      	mov	r4, r1
 80099d2:	d454      	bmi.n	8009a7e <__sflush_r+0xba>
 80099d4:	684b      	ldr	r3, [r1, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	dc02      	bgt.n	80099e0 <__sflush_r+0x1c>
 80099da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099dc:	2b00      	cmp	r3, #0
 80099de:	dd48      	ble.n	8009a72 <__sflush_r+0xae>
 80099e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099e2:	2e00      	cmp	r6, #0
 80099e4:	d045      	beq.n	8009a72 <__sflush_r+0xae>
 80099e6:	2300      	movs	r3, #0
 80099e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099ec:	682f      	ldr	r7, [r5, #0]
 80099ee:	6a21      	ldr	r1, [r4, #32]
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	d030      	beq.n	8009a56 <__sflush_r+0x92>
 80099f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	0759      	lsls	r1, r3, #29
 80099fa:	d505      	bpl.n	8009a08 <__sflush_r+0x44>
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	1ad2      	subs	r2, r2, r3
 8009a00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a02:	b10b      	cbz	r3, 8009a08 <__sflush_r+0x44>
 8009a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a06:	1ad2      	subs	r2, r2, r3
 8009a08:	2300      	movs	r3, #0
 8009a0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a0c:	6a21      	ldr	r1, [r4, #32]
 8009a0e:	4628      	mov	r0, r5
 8009a10:	47b0      	blx	r6
 8009a12:	1c43      	adds	r3, r0, #1
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	d106      	bne.n	8009a26 <__sflush_r+0x62>
 8009a18:	6829      	ldr	r1, [r5, #0]
 8009a1a:	291d      	cmp	r1, #29
 8009a1c:	d82b      	bhi.n	8009a76 <__sflush_r+0xb2>
 8009a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8009ac8 <__sflush_r+0x104>)
 8009a20:	410a      	asrs	r2, r1
 8009a22:	07d6      	lsls	r6, r2, #31
 8009a24:	d427      	bmi.n	8009a76 <__sflush_r+0xb2>
 8009a26:	2200      	movs	r2, #0
 8009a28:	6062      	str	r2, [r4, #4]
 8009a2a:	04d9      	lsls	r1, r3, #19
 8009a2c:	6922      	ldr	r2, [r4, #16]
 8009a2e:	6022      	str	r2, [r4, #0]
 8009a30:	d504      	bpl.n	8009a3c <__sflush_r+0x78>
 8009a32:	1c42      	adds	r2, r0, #1
 8009a34:	d101      	bne.n	8009a3a <__sflush_r+0x76>
 8009a36:	682b      	ldr	r3, [r5, #0]
 8009a38:	b903      	cbnz	r3, 8009a3c <__sflush_r+0x78>
 8009a3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a3e:	602f      	str	r7, [r5, #0]
 8009a40:	b1b9      	cbz	r1, 8009a72 <__sflush_r+0xae>
 8009a42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a46:	4299      	cmp	r1, r3
 8009a48:	d002      	beq.n	8009a50 <__sflush_r+0x8c>
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f7ff f9e0 	bl	8008e10 <_free_r>
 8009a50:	2300      	movs	r3, #0
 8009a52:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a54:	e00d      	b.n	8009a72 <__sflush_r+0xae>
 8009a56:	2301      	movs	r3, #1
 8009a58:	4628      	mov	r0, r5
 8009a5a:	47b0      	blx	r6
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	1c50      	adds	r0, r2, #1
 8009a60:	d1c9      	bne.n	80099f6 <__sflush_r+0x32>
 8009a62:	682b      	ldr	r3, [r5, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d0c6      	beq.n	80099f6 <__sflush_r+0x32>
 8009a68:	2b1d      	cmp	r3, #29
 8009a6a:	d001      	beq.n	8009a70 <__sflush_r+0xac>
 8009a6c:	2b16      	cmp	r3, #22
 8009a6e:	d11e      	bne.n	8009aae <__sflush_r+0xea>
 8009a70:	602f      	str	r7, [r5, #0]
 8009a72:	2000      	movs	r0, #0
 8009a74:	e022      	b.n	8009abc <__sflush_r+0xf8>
 8009a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a7a:	b21b      	sxth	r3, r3
 8009a7c:	e01b      	b.n	8009ab6 <__sflush_r+0xf2>
 8009a7e:	690f      	ldr	r7, [r1, #16]
 8009a80:	2f00      	cmp	r7, #0
 8009a82:	d0f6      	beq.n	8009a72 <__sflush_r+0xae>
 8009a84:	0793      	lsls	r3, r2, #30
 8009a86:	680e      	ldr	r6, [r1, #0]
 8009a88:	bf08      	it	eq
 8009a8a:	694b      	ldreq	r3, [r1, #20]
 8009a8c:	600f      	str	r7, [r1, #0]
 8009a8e:	bf18      	it	ne
 8009a90:	2300      	movne	r3, #0
 8009a92:	eba6 0807 	sub.w	r8, r6, r7
 8009a96:	608b      	str	r3, [r1, #8]
 8009a98:	f1b8 0f00 	cmp.w	r8, #0
 8009a9c:	dde9      	ble.n	8009a72 <__sflush_r+0xae>
 8009a9e:	6a21      	ldr	r1, [r4, #32]
 8009aa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009aa2:	4643      	mov	r3, r8
 8009aa4:	463a      	mov	r2, r7
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b0      	blx	r6
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	dc08      	bgt.n	8009ac0 <__sflush_r+0xfc>
 8009aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac0:	4407      	add	r7, r0
 8009ac2:	eba8 0800 	sub.w	r8, r8, r0
 8009ac6:	e7e7      	b.n	8009a98 <__sflush_r+0xd4>
 8009ac8:	dfbffffe 	.word	0xdfbffffe

08009acc <_fflush_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	690b      	ldr	r3, [r1, #16]
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	b913      	cbnz	r3, 8009adc <_fflush_r+0x10>
 8009ad6:	2500      	movs	r5, #0
 8009ad8:	4628      	mov	r0, r5
 8009ada:	bd38      	pop	{r3, r4, r5, pc}
 8009adc:	b118      	cbz	r0, 8009ae6 <_fflush_r+0x1a>
 8009ade:	6a03      	ldr	r3, [r0, #32]
 8009ae0:	b90b      	cbnz	r3, 8009ae6 <_fflush_r+0x1a>
 8009ae2:	f7fe fa2f 	bl	8007f44 <__sinit>
 8009ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d0f3      	beq.n	8009ad6 <_fflush_r+0xa>
 8009aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009af0:	07d0      	lsls	r0, r2, #31
 8009af2:	d404      	bmi.n	8009afe <_fflush_r+0x32>
 8009af4:	0599      	lsls	r1, r3, #22
 8009af6:	d402      	bmi.n	8009afe <_fflush_r+0x32>
 8009af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009afa:	f7fe fb3a 	bl	8008172 <__retarget_lock_acquire_recursive>
 8009afe:	4628      	mov	r0, r5
 8009b00:	4621      	mov	r1, r4
 8009b02:	f7ff ff5f 	bl	80099c4 <__sflush_r>
 8009b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b08:	07da      	lsls	r2, r3, #31
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	d4e4      	bmi.n	8009ad8 <_fflush_r+0xc>
 8009b0e:	89a3      	ldrh	r3, [r4, #12]
 8009b10:	059b      	lsls	r3, r3, #22
 8009b12:	d4e1      	bmi.n	8009ad8 <_fflush_r+0xc>
 8009b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b16:	f7fe fb2d 	bl	8008174 <__retarget_lock_release_recursive>
 8009b1a:	e7dd      	b.n	8009ad8 <_fflush_r+0xc>

08009b1c <memmove>:
 8009b1c:	4288      	cmp	r0, r1
 8009b1e:	b510      	push	{r4, lr}
 8009b20:	eb01 0402 	add.w	r4, r1, r2
 8009b24:	d902      	bls.n	8009b2c <memmove+0x10>
 8009b26:	4284      	cmp	r4, r0
 8009b28:	4623      	mov	r3, r4
 8009b2a:	d807      	bhi.n	8009b3c <memmove+0x20>
 8009b2c:	1e43      	subs	r3, r0, #1
 8009b2e:	42a1      	cmp	r1, r4
 8009b30:	d008      	beq.n	8009b44 <memmove+0x28>
 8009b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b3a:	e7f8      	b.n	8009b2e <memmove+0x12>
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4601      	mov	r1, r0
 8009b40:	428a      	cmp	r2, r1
 8009b42:	d100      	bne.n	8009b46 <memmove+0x2a>
 8009b44:	bd10      	pop	{r4, pc}
 8009b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b4e:	e7f7      	b.n	8009b40 <memmove+0x24>

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	@ (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f9 f892 	bl	8002c84 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	20000a54 	.word	0x20000a54

08009b70 <memcpy>:
 8009b70:	440a      	add	r2, r1
 8009b72:	4291      	cmp	r1, r2
 8009b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b78:	d100      	bne.n	8009b7c <memcpy+0xc>
 8009b7a:	4770      	bx	lr
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b86:	4291      	cmp	r1, r2
 8009b88:	d1f9      	bne.n	8009b7e <memcpy+0xe>
 8009b8a:	bd10      	pop	{r4, pc}

08009b8c <__assert_func>:
 8009b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b8e:	4614      	mov	r4, r2
 8009b90:	461a      	mov	r2, r3
 8009b92:	4b09      	ldr	r3, [pc, #36]	@ (8009bb8 <__assert_func+0x2c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4605      	mov	r5, r0
 8009b98:	68d8      	ldr	r0, [r3, #12]
 8009b9a:	b954      	cbnz	r4, 8009bb2 <__assert_func+0x26>
 8009b9c:	4b07      	ldr	r3, [pc, #28]	@ (8009bbc <__assert_func+0x30>)
 8009b9e:	461c      	mov	r4, r3
 8009ba0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ba4:	9100      	str	r1, [sp, #0]
 8009ba6:	462b      	mov	r3, r5
 8009ba8:	4905      	ldr	r1, [pc, #20]	@ (8009bc0 <__assert_func+0x34>)
 8009baa:	f000 f86f 	bl	8009c8c <fiprintf>
 8009bae:	f000 f87f 	bl	8009cb0 <abort>
 8009bb2:	4b04      	ldr	r3, [pc, #16]	@ (8009bc4 <__assert_func+0x38>)
 8009bb4:	e7f4      	b.n	8009ba0 <__assert_func+0x14>
 8009bb6:	bf00      	nop
 8009bb8:	20000024 	.word	0x20000024
 8009bbc:	0800acae 	.word	0x0800acae
 8009bc0:	0800ac80 	.word	0x0800ac80
 8009bc4:	0800ac73 	.word	0x0800ac73

08009bc8 <_calloc_r>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	fba1 5402 	umull	r5, r4, r1, r2
 8009bce:	b93c      	cbnz	r4, 8009be0 <_calloc_r+0x18>
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7ff f991 	bl	8008ef8 <_malloc_r>
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	b928      	cbnz	r0, 8009be6 <_calloc_r+0x1e>
 8009bda:	2600      	movs	r6, #0
 8009bdc:	4630      	mov	r0, r6
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	220c      	movs	r2, #12
 8009be2:	6002      	str	r2, [r0, #0]
 8009be4:	e7f9      	b.n	8009bda <_calloc_r+0x12>
 8009be6:	462a      	mov	r2, r5
 8009be8:	4621      	mov	r1, r4
 8009bea:	f7fe fa44 	bl	8008076 <memset>
 8009bee:	e7f5      	b.n	8009bdc <_calloc_r+0x14>

08009bf0 <__ascii_mbtowc>:
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	b901      	cbnz	r1, 8009bf6 <__ascii_mbtowc+0x6>
 8009bf4:	a901      	add	r1, sp, #4
 8009bf6:	b142      	cbz	r2, 8009c0a <__ascii_mbtowc+0x1a>
 8009bf8:	b14b      	cbz	r3, 8009c0e <__ascii_mbtowc+0x1e>
 8009bfa:	7813      	ldrb	r3, [r2, #0]
 8009bfc:	600b      	str	r3, [r1, #0]
 8009bfe:	7812      	ldrb	r2, [r2, #0]
 8009c00:	1e10      	subs	r0, r2, #0
 8009c02:	bf18      	it	ne
 8009c04:	2001      	movne	r0, #1
 8009c06:	b002      	add	sp, #8
 8009c08:	4770      	bx	lr
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	e7fb      	b.n	8009c06 <__ascii_mbtowc+0x16>
 8009c0e:	f06f 0001 	mvn.w	r0, #1
 8009c12:	e7f8      	b.n	8009c06 <__ascii_mbtowc+0x16>

08009c14 <_realloc_r>:
 8009c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4615      	mov	r5, r2
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	b921      	cbnz	r1, 8009c2a <_realloc_r+0x16>
 8009c20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c24:	4611      	mov	r1, r2
 8009c26:	f7ff b967 	b.w	8008ef8 <_malloc_r>
 8009c2a:	b92a      	cbnz	r2, 8009c38 <_realloc_r+0x24>
 8009c2c:	f7ff f8f0 	bl	8008e10 <_free_r>
 8009c30:	2400      	movs	r4, #0
 8009c32:	4620      	mov	r0, r4
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	f000 f841 	bl	8009cbe <_malloc_usable_size_r>
 8009c3c:	4285      	cmp	r5, r0
 8009c3e:	4606      	mov	r6, r0
 8009c40:	d802      	bhi.n	8009c48 <_realloc_r+0x34>
 8009c42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c46:	d8f4      	bhi.n	8009c32 <_realloc_r+0x1e>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	f7ff f954 	bl	8008ef8 <_malloc_r>
 8009c50:	4607      	mov	r7, r0
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d0ec      	beq.n	8009c30 <_realloc_r+0x1c>
 8009c56:	42b5      	cmp	r5, r6
 8009c58:	462a      	mov	r2, r5
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	bf28      	it	cs
 8009c5e:	4632      	movcs	r2, r6
 8009c60:	f7ff ff86 	bl	8009b70 <memcpy>
 8009c64:	4621      	mov	r1, r4
 8009c66:	4640      	mov	r0, r8
 8009c68:	f7ff f8d2 	bl	8008e10 <_free_r>
 8009c6c:	463c      	mov	r4, r7
 8009c6e:	e7e0      	b.n	8009c32 <_realloc_r+0x1e>

08009c70 <__ascii_wctomb>:
 8009c70:	4603      	mov	r3, r0
 8009c72:	4608      	mov	r0, r1
 8009c74:	b141      	cbz	r1, 8009c88 <__ascii_wctomb+0x18>
 8009c76:	2aff      	cmp	r2, #255	@ 0xff
 8009c78:	d904      	bls.n	8009c84 <__ascii_wctomb+0x14>
 8009c7a:	228a      	movs	r2, #138	@ 0x8a
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c82:	4770      	bx	lr
 8009c84:	700a      	strb	r2, [r1, #0]
 8009c86:	2001      	movs	r0, #1
 8009c88:	4770      	bx	lr
	...

08009c8c <fiprintf>:
 8009c8c:	b40e      	push	{r1, r2, r3}
 8009c8e:	b503      	push	{r0, r1, lr}
 8009c90:	4601      	mov	r1, r0
 8009c92:	ab03      	add	r3, sp, #12
 8009c94:	4805      	ldr	r0, [pc, #20]	@ (8009cac <fiprintf+0x20>)
 8009c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c9a:	6800      	ldr	r0, [r0, #0]
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	f000 f83f 	bl	8009d20 <_vfiprintf_r>
 8009ca2:	b002      	add	sp, #8
 8009ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ca8:	b003      	add	sp, #12
 8009caa:	4770      	bx	lr
 8009cac:	20000024 	.word	0x20000024

08009cb0 <abort>:
 8009cb0:	b508      	push	{r3, lr}
 8009cb2:	2006      	movs	r0, #6
 8009cb4:	f000 fa08 	bl	800a0c8 <raise>
 8009cb8:	2001      	movs	r0, #1
 8009cba:	f7f8 ff87 	bl	8002bcc <_exit>

08009cbe <_malloc_usable_size_r>:
 8009cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc2:	1f18      	subs	r0, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfbc      	itt	lt
 8009cc8:	580b      	ldrlt	r3, [r1, r0]
 8009cca:	18c0      	addlt	r0, r0, r3
 8009ccc:	4770      	bx	lr

08009cce <__sfputc_r>:
 8009cce:	6893      	ldr	r3, [r2, #8]
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	b410      	push	{r4}
 8009cd6:	6093      	str	r3, [r2, #8]
 8009cd8:	da08      	bge.n	8009cec <__sfputc_r+0x1e>
 8009cda:	6994      	ldr	r4, [r2, #24]
 8009cdc:	42a3      	cmp	r3, r4
 8009cde:	db01      	blt.n	8009ce4 <__sfputc_r+0x16>
 8009ce0:	290a      	cmp	r1, #10
 8009ce2:	d103      	bne.n	8009cec <__sfputc_r+0x1e>
 8009ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ce8:	f000 b932 	b.w	8009f50 <__swbuf_r>
 8009cec:	6813      	ldr	r3, [r2, #0]
 8009cee:	1c58      	adds	r0, r3, #1
 8009cf0:	6010      	str	r0, [r2, #0]
 8009cf2:	7019      	strb	r1, [r3, #0]
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <__sfputs_r>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460f      	mov	r7, r1
 8009d02:	4614      	mov	r4, r2
 8009d04:	18d5      	adds	r5, r2, r3
 8009d06:	42ac      	cmp	r4, r5
 8009d08:	d101      	bne.n	8009d0e <__sfputs_r+0x12>
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	e007      	b.n	8009d1e <__sfputs_r+0x22>
 8009d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d12:	463a      	mov	r2, r7
 8009d14:	4630      	mov	r0, r6
 8009d16:	f7ff ffda 	bl	8009cce <__sfputc_r>
 8009d1a:	1c43      	adds	r3, r0, #1
 8009d1c:	d1f3      	bne.n	8009d06 <__sfputs_r+0xa>
 8009d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d20 <_vfiprintf_r>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	460d      	mov	r5, r1
 8009d26:	b09d      	sub	sp, #116	@ 0x74
 8009d28:	4614      	mov	r4, r2
 8009d2a:	4698      	mov	r8, r3
 8009d2c:	4606      	mov	r6, r0
 8009d2e:	b118      	cbz	r0, 8009d38 <_vfiprintf_r+0x18>
 8009d30:	6a03      	ldr	r3, [r0, #32]
 8009d32:	b90b      	cbnz	r3, 8009d38 <_vfiprintf_r+0x18>
 8009d34:	f7fe f906 	bl	8007f44 <__sinit>
 8009d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d3a:	07d9      	lsls	r1, r3, #31
 8009d3c:	d405      	bmi.n	8009d4a <_vfiprintf_r+0x2a>
 8009d3e:	89ab      	ldrh	r3, [r5, #12]
 8009d40:	059a      	lsls	r2, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_vfiprintf_r+0x2a>
 8009d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d46:	f7fe fa14 	bl	8008172 <__retarget_lock_acquire_recursive>
 8009d4a:	89ab      	ldrh	r3, [r5, #12]
 8009d4c:	071b      	lsls	r3, r3, #28
 8009d4e:	d501      	bpl.n	8009d54 <_vfiprintf_r+0x34>
 8009d50:	692b      	ldr	r3, [r5, #16]
 8009d52:	b99b      	cbnz	r3, 8009d7c <_vfiprintf_r+0x5c>
 8009d54:	4629      	mov	r1, r5
 8009d56:	4630      	mov	r0, r6
 8009d58:	f000 f938 	bl	8009fcc <__swsetup_r>
 8009d5c:	b170      	cbz	r0, 8009d7c <_vfiprintf_r+0x5c>
 8009d5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d60:	07dc      	lsls	r4, r3, #31
 8009d62:	d504      	bpl.n	8009d6e <_vfiprintf_r+0x4e>
 8009d64:	f04f 30ff 	mov.w	r0, #4294967295
 8009d68:	b01d      	add	sp, #116	@ 0x74
 8009d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	0598      	lsls	r0, r3, #22
 8009d72:	d4f7      	bmi.n	8009d64 <_vfiprintf_r+0x44>
 8009d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d76:	f7fe f9fd 	bl	8008174 <__retarget_lock_release_recursive>
 8009d7a:	e7f3      	b.n	8009d64 <_vfiprintf_r+0x44>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d80:	2320      	movs	r3, #32
 8009d82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d8a:	2330      	movs	r3, #48	@ 0x30
 8009d8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f3c <_vfiprintf_r+0x21c>
 8009d90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d94:	f04f 0901 	mov.w	r9, #1
 8009d98:	4623      	mov	r3, r4
 8009d9a:	469a      	mov	sl, r3
 8009d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009da0:	b10a      	cbz	r2, 8009da6 <_vfiprintf_r+0x86>
 8009da2:	2a25      	cmp	r2, #37	@ 0x25
 8009da4:	d1f9      	bne.n	8009d9a <_vfiprintf_r+0x7a>
 8009da6:	ebba 0b04 	subs.w	fp, sl, r4
 8009daa:	d00b      	beq.n	8009dc4 <_vfiprintf_r+0xa4>
 8009dac:	465b      	mov	r3, fp
 8009dae:	4622      	mov	r2, r4
 8009db0:	4629      	mov	r1, r5
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7ff ffa2 	bl	8009cfc <__sfputs_r>
 8009db8:	3001      	adds	r0, #1
 8009dba:	f000 80a7 	beq.w	8009f0c <_vfiprintf_r+0x1ec>
 8009dbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dc0:	445a      	add	r2, fp
 8009dc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 809f 	beq.w	8009f0c <_vfiprintf_r+0x1ec>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd8:	f10a 0a01 	add.w	sl, sl, #1
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	9307      	str	r3, [sp, #28]
 8009de0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009de4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009de6:	4654      	mov	r4, sl
 8009de8:	2205      	movs	r2, #5
 8009dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dee:	4853      	ldr	r0, [pc, #332]	@ (8009f3c <_vfiprintf_r+0x21c>)
 8009df0:	f7f6 f9f6 	bl	80001e0 <memchr>
 8009df4:	9a04      	ldr	r2, [sp, #16]
 8009df6:	b9d8      	cbnz	r0, 8009e30 <_vfiprintf_r+0x110>
 8009df8:	06d1      	lsls	r1, r2, #27
 8009dfa:	bf44      	itt	mi
 8009dfc:	2320      	movmi	r3, #32
 8009dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e02:	0713      	lsls	r3, r2, #28
 8009e04:	bf44      	itt	mi
 8009e06:	232b      	movmi	r3, #43	@ 0x2b
 8009e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e12:	d015      	beq.n	8009e40 <_vfiprintf_r+0x120>
 8009e14:	9a07      	ldr	r2, [sp, #28]
 8009e16:	4654      	mov	r4, sl
 8009e18:	2000      	movs	r0, #0
 8009e1a:	f04f 0c0a 	mov.w	ip, #10
 8009e1e:	4621      	mov	r1, r4
 8009e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e24:	3b30      	subs	r3, #48	@ 0x30
 8009e26:	2b09      	cmp	r3, #9
 8009e28:	d94b      	bls.n	8009ec2 <_vfiprintf_r+0x1a2>
 8009e2a:	b1b0      	cbz	r0, 8009e5a <_vfiprintf_r+0x13a>
 8009e2c:	9207      	str	r2, [sp, #28]
 8009e2e:	e014      	b.n	8009e5a <_vfiprintf_r+0x13a>
 8009e30:	eba0 0308 	sub.w	r3, r0, r8
 8009e34:	fa09 f303 	lsl.w	r3, r9, r3
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	9304      	str	r3, [sp, #16]
 8009e3c:	46a2      	mov	sl, r4
 8009e3e:	e7d2      	b.n	8009de6 <_vfiprintf_r+0xc6>
 8009e40:	9b03      	ldr	r3, [sp, #12]
 8009e42:	1d19      	adds	r1, r3, #4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	9103      	str	r1, [sp, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bfbb      	ittet	lt
 8009e4c:	425b      	neglt	r3, r3
 8009e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e52:	9307      	strge	r3, [sp, #28]
 8009e54:	9307      	strlt	r3, [sp, #28]
 8009e56:	bfb8      	it	lt
 8009e58:	9204      	strlt	r2, [sp, #16]
 8009e5a:	7823      	ldrb	r3, [r4, #0]
 8009e5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e5e:	d10a      	bne.n	8009e76 <_vfiprintf_r+0x156>
 8009e60:	7863      	ldrb	r3, [r4, #1]
 8009e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e64:	d132      	bne.n	8009ecc <_vfiprintf_r+0x1ac>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	1d1a      	adds	r2, r3, #4
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	9203      	str	r2, [sp, #12]
 8009e6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e72:	3402      	adds	r4, #2
 8009e74:	9305      	str	r3, [sp, #20]
 8009e76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009f4c <_vfiprintf_r+0x22c>
 8009e7a:	7821      	ldrb	r1, [r4, #0]
 8009e7c:	2203      	movs	r2, #3
 8009e7e:	4650      	mov	r0, sl
 8009e80:	f7f6 f9ae 	bl	80001e0 <memchr>
 8009e84:	b138      	cbz	r0, 8009e96 <_vfiprintf_r+0x176>
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	eba0 000a 	sub.w	r0, r0, sl
 8009e8c:	2240      	movs	r2, #64	@ 0x40
 8009e8e:	4082      	lsls	r2, r0
 8009e90:	4313      	orrs	r3, r2
 8009e92:	3401      	adds	r4, #1
 8009e94:	9304      	str	r3, [sp, #16]
 8009e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9a:	4829      	ldr	r0, [pc, #164]	@ (8009f40 <_vfiprintf_r+0x220>)
 8009e9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ea0:	2206      	movs	r2, #6
 8009ea2:	f7f6 f99d 	bl	80001e0 <memchr>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d03f      	beq.n	8009f2a <_vfiprintf_r+0x20a>
 8009eaa:	4b26      	ldr	r3, [pc, #152]	@ (8009f44 <_vfiprintf_r+0x224>)
 8009eac:	bb1b      	cbnz	r3, 8009ef6 <_vfiprintf_r+0x1d6>
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	3307      	adds	r3, #7
 8009eb2:	f023 0307 	bic.w	r3, r3, #7
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	9303      	str	r3, [sp, #12]
 8009eba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ebc:	443b      	add	r3, r7
 8009ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ec0:	e76a      	b.n	8009d98 <_vfiprintf_r+0x78>
 8009ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	2001      	movs	r0, #1
 8009eca:	e7a8      	b.n	8009e1e <_vfiprintf_r+0xfe>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	3401      	adds	r4, #1
 8009ed0:	9305      	str	r3, [sp, #20]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	f04f 0c0a 	mov.w	ip, #10
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ede:	3a30      	subs	r2, #48	@ 0x30
 8009ee0:	2a09      	cmp	r2, #9
 8009ee2:	d903      	bls.n	8009eec <_vfiprintf_r+0x1cc>
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0c6      	beq.n	8009e76 <_vfiprintf_r+0x156>
 8009ee8:	9105      	str	r1, [sp, #20]
 8009eea:	e7c4      	b.n	8009e76 <_vfiprintf_r+0x156>
 8009eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e7f0      	b.n	8009ed8 <_vfiprintf_r+0x1b8>
 8009ef6:	ab03      	add	r3, sp, #12
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	462a      	mov	r2, r5
 8009efc:	4b12      	ldr	r3, [pc, #72]	@ (8009f48 <_vfiprintf_r+0x228>)
 8009efe:	a904      	add	r1, sp, #16
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7fd fbdb 	bl	80076bc <_printf_float>
 8009f06:	4607      	mov	r7, r0
 8009f08:	1c78      	adds	r0, r7, #1
 8009f0a:	d1d6      	bne.n	8009eba <_vfiprintf_r+0x19a>
 8009f0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f0e:	07d9      	lsls	r1, r3, #31
 8009f10:	d405      	bmi.n	8009f1e <_vfiprintf_r+0x1fe>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	059a      	lsls	r2, r3, #22
 8009f16:	d402      	bmi.n	8009f1e <_vfiprintf_r+0x1fe>
 8009f18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f1a:	f7fe f92b 	bl	8008174 <__retarget_lock_release_recursive>
 8009f1e:	89ab      	ldrh	r3, [r5, #12]
 8009f20:	065b      	lsls	r3, r3, #25
 8009f22:	f53f af1f 	bmi.w	8009d64 <_vfiprintf_r+0x44>
 8009f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f28:	e71e      	b.n	8009d68 <_vfiprintf_r+0x48>
 8009f2a:	ab03      	add	r3, sp, #12
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4b05      	ldr	r3, [pc, #20]	@ (8009f48 <_vfiprintf_r+0x228>)
 8009f32:	a904      	add	r1, sp, #16
 8009f34:	4630      	mov	r0, r6
 8009f36:	f7fd fe59 	bl	8007bec <_printf_i>
 8009f3a:	e7e4      	b.n	8009f06 <_vfiprintf_r+0x1e6>
 8009f3c:	0800ac58 	.word	0x0800ac58
 8009f40:	0800ac62 	.word	0x0800ac62
 8009f44:	080076bd 	.word	0x080076bd
 8009f48:	08009cfd 	.word	0x08009cfd
 8009f4c:	0800ac5e 	.word	0x0800ac5e

08009f50 <__swbuf_r>:
 8009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f52:	460e      	mov	r6, r1
 8009f54:	4614      	mov	r4, r2
 8009f56:	4605      	mov	r5, r0
 8009f58:	b118      	cbz	r0, 8009f62 <__swbuf_r+0x12>
 8009f5a:	6a03      	ldr	r3, [r0, #32]
 8009f5c:	b90b      	cbnz	r3, 8009f62 <__swbuf_r+0x12>
 8009f5e:	f7fd fff1 	bl	8007f44 <__sinit>
 8009f62:	69a3      	ldr	r3, [r4, #24]
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	071a      	lsls	r2, r3, #28
 8009f6a:	d501      	bpl.n	8009f70 <__swbuf_r+0x20>
 8009f6c:	6923      	ldr	r3, [r4, #16]
 8009f6e:	b943      	cbnz	r3, 8009f82 <__swbuf_r+0x32>
 8009f70:	4621      	mov	r1, r4
 8009f72:	4628      	mov	r0, r5
 8009f74:	f000 f82a 	bl	8009fcc <__swsetup_r>
 8009f78:	b118      	cbz	r0, 8009f82 <__swbuf_r+0x32>
 8009f7a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f7e:	4638      	mov	r0, r7
 8009f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	6922      	ldr	r2, [r4, #16]
 8009f86:	1a98      	subs	r0, r3, r2
 8009f88:	6963      	ldr	r3, [r4, #20]
 8009f8a:	b2f6      	uxtb	r6, r6
 8009f8c:	4283      	cmp	r3, r0
 8009f8e:	4637      	mov	r7, r6
 8009f90:	dc05      	bgt.n	8009f9e <__swbuf_r+0x4e>
 8009f92:	4621      	mov	r1, r4
 8009f94:	4628      	mov	r0, r5
 8009f96:	f7ff fd99 	bl	8009acc <_fflush_r>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d1ed      	bne.n	8009f7a <__swbuf_r+0x2a>
 8009f9e:	68a3      	ldr	r3, [r4, #8]
 8009fa0:	3b01      	subs	r3, #1
 8009fa2:	60a3      	str	r3, [r4, #8]
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	6022      	str	r2, [r4, #0]
 8009faa:	701e      	strb	r6, [r3, #0]
 8009fac:	6962      	ldr	r2, [r4, #20]
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d004      	beq.n	8009fbe <__swbuf_r+0x6e>
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	07db      	lsls	r3, r3, #31
 8009fb8:	d5e1      	bpl.n	8009f7e <__swbuf_r+0x2e>
 8009fba:	2e0a      	cmp	r6, #10
 8009fbc:	d1df      	bne.n	8009f7e <__swbuf_r+0x2e>
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f7ff fd83 	bl	8009acc <_fflush_r>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d0d9      	beq.n	8009f7e <__swbuf_r+0x2e>
 8009fca:	e7d6      	b.n	8009f7a <__swbuf_r+0x2a>

08009fcc <__swsetup_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4b29      	ldr	r3, [pc, #164]	@ (800a074 <__swsetup_r+0xa8>)
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	460c      	mov	r4, r1
 8009fd6:	b118      	cbz	r0, 8009fe0 <__swsetup_r+0x14>
 8009fd8:	6a03      	ldr	r3, [r0, #32]
 8009fda:	b90b      	cbnz	r3, 8009fe0 <__swsetup_r+0x14>
 8009fdc:	f7fd ffb2 	bl	8007f44 <__sinit>
 8009fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fe4:	0719      	lsls	r1, r3, #28
 8009fe6:	d422      	bmi.n	800a02e <__swsetup_r+0x62>
 8009fe8:	06da      	lsls	r2, r3, #27
 8009fea:	d407      	bmi.n	8009ffc <__swsetup_r+0x30>
 8009fec:	2209      	movs	r2, #9
 8009fee:	602a      	str	r2, [r5, #0]
 8009ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ff4:	81a3      	strh	r3, [r4, #12]
 8009ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffa:	e033      	b.n	800a064 <__swsetup_r+0x98>
 8009ffc:	0758      	lsls	r0, r3, #29
 8009ffe:	d512      	bpl.n	800a026 <__swsetup_r+0x5a>
 800a000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a002:	b141      	cbz	r1, 800a016 <__swsetup_r+0x4a>
 800a004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a008:	4299      	cmp	r1, r3
 800a00a:	d002      	beq.n	800a012 <__swsetup_r+0x46>
 800a00c:	4628      	mov	r0, r5
 800a00e:	f7fe feff 	bl	8008e10 <_free_r>
 800a012:	2300      	movs	r3, #0
 800a014:	6363      	str	r3, [r4, #52]	@ 0x34
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a01c:	81a3      	strh	r3, [r4, #12]
 800a01e:	2300      	movs	r3, #0
 800a020:	6063      	str	r3, [r4, #4]
 800a022:	6923      	ldr	r3, [r4, #16]
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	89a3      	ldrh	r3, [r4, #12]
 800a028:	f043 0308 	orr.w	r3, r3, #8
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	b94b      	cbnz	r3, 800a046 <__swsetup_r+0x7a>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a03c:	d003      	beq.n	800a046 <__swsetup_r+0x7a>
 800a03e:	4621      	mov	r1, r4
 800a040:	4628      	mov	r0, r5
 800a042:	f000 f883 	bl	800a14c <__smakebuf_r>
 800a046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a04a:	f013 0201 	ands.w	r2, r3, #1
 800a04e:	d00a      	beq.n	800a066 <__swsetup_r+0x9a>
 800a050:	2200      	movs	r2, #0
 800a052:	60a2      	str	r2, [r4, #8]
 800a054:	6962      	ldr	r2, [r4, #20]
 800a056:	4252      	negs	r2, r2
 800a058:	61a2      	str	r2, [r4, #24]
 800a05a:	6922      	ldr	r2, [r4, #16]
 800a05c:	b942      	cbnz	r2, 800a070 <__swsetup_r+0xa4>
 800a05e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a062:	d1c5      	bne.n	8009ff0 <__swsetup_r+0x24>
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	0799      	lsls	r1, r3, #30
 800a068:	bf58      	it	pl
 800a06a:	6962      	ldrpl	r2, [r4, #20]
 800a06c:	60a2      	str	r2, [r4, #8]
 800a06e:	e7f4      	b.n	800a05a <__swsetup_r+0x8e>
 800a070:	2000      	movs	r0, #0
 800a072:	e7f7      	b.n	800a064 <__swsetup_r+0x98>
 800a074:	20000024 	.word	0x20000024

0800a078 <_raise_r>:
 800a078:	291f      	cmp	r1, #31
 800a07a:	b538      	push	{r3, r4, r5, lr}
 800a07c:	4605      	mov	r5, r0
 800a07e:	460c      	mov	r4, r1
 800a080:	d904      	bls.n	800a08c <_raise_r+0x14>
 800a082:	2316      	movs	r3, #22
 800a084:	6003      	str	r3, [r0, #0]
 800a086:	f04f 30ff 	mov.w	r0, #4294967295
 800a08a:	bd38      	pop	{r3, r4, r5, pc}
 800a08c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a08e:	b112      	cbz	r2, 800a096 <_raise_r+0x1e>
 800a090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a094:	b94b      	cbnz	r3, 800a0aa <_raise_r+0x32>
 800a096:	4628      	mov	r0, r5
 800a098:	f000 f830 	bl	800a0fc <_getpid_r>
 800a09c:	4622      	mov	r2, r4
 800a09e:	4601      	mov	r1, r0
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0a6:	f000 b817 	b.w	800a0d8 <_kill_r>
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d00a      	beq.n	800a0c4 <_raise_r+0x4c>
 800a0ae:	1c59      	adds	r1, r3, #1
 800a0b0:	d103      	bne.n	800a0ba <_raise_r+0x42>
 800a0b2:	2316      	movs	r3, #22
 800a0b4:	6003      	str	r3, [r0, #0]
 800a0b6:	2001      	movs	r0, #1
 800a0b8:	e7e7      	b.n	800a08a <_raise_r+0x12>
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	4798      	blx	r3
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e7e0      	b.n	800a08a <_raise_r+0x12>

0800a0c8 <raise>:
 800a0c8:	4b02      	ldr	r3, [pc, #8]	@ (800a0d4 <raise+0xc>)
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	6818      	ldr	r0, [r3, #0]
 800a0ce:	f7ff bfd3 	b.w	800a078 <_raise_r>
 800a0d2:	bf00      	nop
 800a0d4:	20000024 	.word	0x20000024

0800a0d8 <_kill_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d07      	ldr	r5, [pc, #28]	@ (800a0f8 <_kill_r+0x20>)
 800a0dc:	2300      	movs	r3, #0
 800a0de:	4604      	mov	r4, r0
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	602b      	str	r3, [r5, #0]
 800a0e6:	f7f8 fd61 	bl	8002bac <_kill>
 800a0ea:	1c43      	adds	r3, r0, #1
 800a0ec:	d102      	bne.n	800a0f4 <_kill_r+0x1c>
 800a0ee:	682b      	ldr	r3, [r5, #0]
 800a0f0:	b103      	cbz	r3, 800a0f4 <_kill_r+0x1c>
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	bd38      	pop	{r3, r4, r5, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20000a54 	.word	0x20000a54

0800a0fc <_getpid_r>:
 800a0fc:	f7f8 bd4e 	b.w	8002b9c <_getpid>

0800a100 <__swhatbuf_r>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	460c      	mov	r4, r1
 800a104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a108:	2900      	cmp	r1, #0
 800a10a:	b096      	sub	sp, #88	@ 0x58
 800a10c:	4615      	mov	r5, r2
 800a10e:	461e      	mov	r6, r3
 800a110:	da0d      	bge.n	800a12e <__swhatbuf_r+0x2e>
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a118:	f04f 0100 	mov.w	r1, #0
 800a11c:	bf14      	ite	ne
 800a11e:	2340      	movne	r3, #64	@ 0x40
 800a120:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a124:	2000      	movs	r0, #0
 800a126:	6031      	str	r1, [r6, #0]
 800a128:	602b      	str	r3, [r5, #0]
 800a12a:	b016      	add	sp, #88	@ 0x58
 800a12c:	bd70      	pop	{r4, r5, r6, pc}
 800a12e:	466a      	mov	r2, sp
 800a130:	f000 f848 	bl	800a1c4 <_fstat_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	dbec      	blt.n	800a112 <__swhatbuf_r+0x12>
 800a138:	9901      	ldr	r1, [sp, #4]
 800a13a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a13e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a142:	4259      	negs	r1, r3
 800a144:	4159      	adcs	r1, r3
 800a146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a14a:	e7eb      	b.n	800a124 <__swhatbuf_r+0x24>

0800a14c <__smakebuf_r>:
 800a14c:	898b      	ldrh	r3, [r1, #12]
 800a14e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a150:	079d      	lsls	r5, r3, #30
 800a152:	4606      	mov	r6, r0
 800a154:	460c      	mov	r4, r1
 800a156:	d507      	bpl.n	800a168 <__smakebuf_r+0x1c>
 800a158:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	6123      	str	r3, [r4, #16]
 800a160:	2301      	movs	r3, #1
 800a162:	6163      	str	r3, [r4, #20]
 800a164:	b003      	add	sp, #12
 800a166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a168:	ab01      	add	r3, sp, #4
 800a16a:	466a      	mov	r2, sp
 800a16c:	f7ff ffc8 	bl	800a100 <__swhatbuf_r>
 800a170:	9f00      	ldr	r7, [sp, #0]
 800a172:	4605      	mov	r5, r0
 800a174:	4639      	mov	r1, r7
 800a176:	4630      	mov	r0, r6
 800a178:	f7fe febe 	bl	8008ef8 <_malloc_r>
 800a17c:	b948      	cbnz	r0, 800a192 <__smakebuf_r+0x46>
 800a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a182:	059a      	lsls	r2, r3, #22
 800a184:	d4ee      	bmi.n	800a164 <__smakebuf_r+0x18>
 800a186:	f023 0303 	bic.w	r3, r3, #3
 800a18a:	f043 0302 	orr.w	r3, r3, #2
 800a18e:	81a3      	strh	r3, [r4, #12]
 800a190:	e7e2      	b.n	800a158 <__smakebuf_r+0xc>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	6020      	str	r0, [r4, #0]
 800a196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	9b01      	ldr	r3, [sp, #4]
 800a19e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1a2:	b15b      	cbz	r3, 800a1bc <__smakebuf_r+0x70>
 800a1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f000 f81d 	bl	800a1e8 <_isatty_r>
 800a1ae:	b128      	cbz	r0, 800a1bc <__smakebuf_r+0x70>
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	f023 0303 	bic.w	r3, r3, #3
 800a1b6:	f043 0301 	orr.w	r3, r3, #1
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	431d      	orrs	r5, r3
 800a1c0:	81a5      	strh	r5, [r4, #12]
 800a1c2:	e7cf      	b.n	800a164 <__smakebuf_r+0x18>

0800a1c4 <_fstat_r>:
 800a1c4:	b538      	push	{r3, r4, r5, lr}
 800a1c6:	4d07      	ldr	r5, [pc, #28]	@ (800a1e4 <_fstat_r+0x20>)
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	602b      	str	r3, [r5, #0]
 800a1d2:	f7f8 fd2f 	bl	8002c34 <_fstat>
 800a1d6:	1c43      	adds	r3, r0, #1
 800a1d8:	d102      	bne.n	800a1e0 <_fstat_r+0x1c>
 800a1da:	682b      	ldr	r3, [r5, #0]
 800a1dc:	b103      	cbz	r3, 800a1e0 <_fstat_r+0x1c>
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	bd38      	pop	{r3, r4, r5, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20000a54 	.word	0x20000a54

0800a1e8 <_isatty_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d06      	ldr	r5, [pc, #24]	@ (800a204 <_isatty_r+0x1c>)
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	602b      	str	r3, [r5, #0]
 800a1f4:	f7f8 fd2e 	bl	8002c54 <_isatty>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d102      	bne.n	800a202 <_isatty_r+0x1a>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	b103      	cbz	r3, 800a202 <_isatty_r+0x1a>
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	bd38      	pop	{r3, r4, r5, pc}
 800a204:	20000a54 	.word	0x20000a54

0800a208 <_init>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	bf00      	nop
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr

0800a214 <_fini>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	bf00      	nop
 800a218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a21a:	bc08      	pop	{r3}
 800a21c:	469e      	mov	lr, r3
 800a21e:	4770      	bx	lr
